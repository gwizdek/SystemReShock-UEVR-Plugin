#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GI_SinglePlayer

#include "Basic.hpp"

#include "STRUCT_NarrativeSpeakers_structs.hpp"
#include "STRUCT_LevelInfo_structs.hpp"
#include "STRUCT_DisabledTileData_structs.hpp"
#include "ENUM_HackerGender_structs.hpp"
#include "STRUCT_AchievementClassData_structs.hpp"
#include "STRUCT_MissionDifficultySettings_structs.hpp"
#include "Engine_structs.hpp"
#include "STRUCT_MediaObject_structs.hpp"
#include "ENUM_GameDifficultyConfigCategory_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "STRUCT_DialogueCaptionObject_structs.hpp"
#include "STRUCT_TutorialData_structs.hpp"
#include "STRUCT_KeycodeSettings_structs.hpp"
#include "STRUCT_AchievementData_structs.hpp"
#include "STRUCT_LevelAtmosphereSettings_structs.hpp"
#include "STRUCT_AsyncSoundParams_structs.hpp"
#include "STRUCT_AsyncSoundParamArray_structs.hpp"
#include "STRUCT_AsyncParticleParams_structs.hpp"
#include "STRUCT_AsyncParticleParamArray_structs.hpp"
#include "GameplayState_structs.hpp"
#include "CoreGame_structs.hpp"
#include "STRUCT_ItemDetailsIconParams_structs.hpp"
#include "ENUM_SharedBagType_structs.hpp"
#include "STRUCT_HardItemParams_structs.hpp"
#include "ENUM_GameDifficulty_structs.hpp"
#include "MenuState_structs.hpp"
#include "InGameState_structs.hpp"
#include "STRUCT_MusicParams_structs.hpp"
#include "DLSSBlueprint_structs.hpp"
#include "ENUM_VolumeType_structs.hpp"
#include "STRUCT_CombatDifficultySettings_structs.hpp"
#include "ExplorationState_structs.hpp"
#include "STRUCT_LevelMusicSettings_structs.hpp"
#include "STRUCT_LevelRespawnData_structs.hpp"
#include "ENUM_MapType_structs.hpp"
#include "STRUCT_CurrentReinforcementSettings_structs.hpp"
#include "STRUCT_EnemyRespawnData_structs.hpp"
#include "STRUCT_EnemyReinforcementSettings_structs.hpp"
#include "STRUCT_LevelReinforcementSettings_structs.hpp"
#include "STRUCT_EnemyClassWeight_structs.hpp"
#include "STRUCT_EnemyReinforcementVolumes_structs.hpp"
#include "STRUCT_LevelCollection_structs.hpp"
#include "STRUCT_StoryQuestInfo_structs.hpp"
#include "STRUCT_EffectParams_structs.hpp"


namespace SDK::Params
{

// Function GI_SinglePlayer.GI_SinglePlayer_C.OnSecurityLevelChanged__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct GI_SinglePlayer_C_OnSecurityLevelChanged__DelegateSignature final
{
public:
	int32                                         NewSecurityLevel;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_OnSecurityLevelChanged__DelegateSignature) == 0x000004, "Wrong alignment on GI_SinglePlayer_C_OnSecurityLevelChanged__DelegateSignature");
static_assert(sizeof(GI_SinglePlayer_C_OnSecurityLevelChanged__DelegateSignature) == 0x000004, "Wrong size on GI_SinglePlayer_C_OnSecurityLevelChanged__DelegateSignature");
static_assert(offsetof(GI_SinglePlayer_C_OnSecurityLevelChanged__DelegateSignature, NewSecurityLevel) == 0x000000, "Member 'GI_SinglePlayer_C_OnSecurityLevelChanged__DelegateSignature::NewSecurityLevel' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.OnStoryQuestChanged__DelegateSignature
// 0x000C (0x000C - 0x0000)
struct GI_SinglePlayer_C_OnStoryQuestChanged__DelegateSignature final
{
public:
	class FName                                   StoryQuestName;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Value;                                             // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_OnStoryQuestChanged__DelegateSignature) == 0x000004, "Wrong alignment on GI_SinglePlayer_C_OnStoryQuestChanged__DelegateSignature");
static_assert(sizeof(GI_SinglePlayer_C_OnStoryQuestChanged__DelegateSignature) == 0x00000C, "Wrong size on GI_SinglePlayer_C_OnStoryQuestChanged__DelegateSignature");
static_assert(offsetof(GI_SinglePlayer_C_OnStoryQuestChanged__DelegateSignature, StoryQuestName) == 0x000000, "Member 'GI_SinglePlayer_C_OnStoryQuestChanged__DelegateSignature::StoryQuestName' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnStoryQuestChanged__DelegateSignature, Value) == 0x000008, "Member 'GI_SinglePlayer_C_OnStoryQuestChanged__DelegateSignature::Value' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.OnFinishedLoadingStreamLevel__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct GI_SinglePlayer_C_OnFinishedLoadingStreamLevel__DelegateSignature final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_OnFinishedLoadingStreamLevel__DelegateSignature) == 0x000004, "Wrong alignment on GI_SinglePlayer_C_OnFinishedLoadingStreamLevel__DelegateSignature");
static_assert(sizeof(GI_SinglePlayer_C_OnFinishedLoadingStreamLevel__DelegateSignature) == 0x000008, "Wrong size on GI_SinglePlayer_C_OnFinishedLoadingStreamLevel__DelegateSignature");
static_assert(offsetof(GI_SinglePlayer_C_OnFinishedLoadingStreamLevel__DelegateSignature, LevelName) == 0x000000, "Member 'GI_SinglePlayer_C_OnFinishedLoadingStreamLevel__DelegateSignature::LevelName' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.OnStartUnloadingStreamLevel__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct GI_SinglePlayer_C_OnStartUnloadingStreamLevel__DelegateSignature final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_OnStartUnloadingStreamLevel__DelegateSignature) == 0x000004, "Wrong alignment on GI_SinglePlayer_C_OnStartUnloadingStreamLevel__DelegateSignature");
static_assert(sizeof(GI_SinglePlayer_C_OnStartUnloadingStreamLevel__DelegateSignature) == 0x000008, "Wrong size on GI_SinglePlayer_C_OnStartUnloadingStreamLevel__DelegateSignature");
static_assert(offsetof(GI_SinglePlayer_C_OnStartUnloadingStreamLevel__DelegateSignature, LevelName) == 0x000000, "Member 'GI_SinglePlayer_C_OnStartUnloadingStreamLevel__DelegateSignature::LevelName' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.OnFinishedUnloadingStreamLevel__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct GI_SinglePlayer_C_OnFinishedUnloadingStreamLevel__DelegateSignature final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_OnFinishedUnloadingStreamLevel__DelegateSignature) == 0x000004, "Wrong alignment on GI_SinglePlayer_C_OnFinishedUnloadingStreamLevel__DelegateSignature");
static_assert(sizeof(GI_SinglePlayer_C_OnFinishedUnloadingStreamLevel__DelegateSignature) == 0x000008, "Wrong size on GI_SinglePlayer_C_OnFinishedUnloadingStreamLevel__DelegateSignature");
static_assert(offsetof(GI_SinglePlayer_C_OnFinishedUnloadingStreamLevel__DelegateSignature, LevelName) == 0x000000, "Member 'GI_SinglePlayer_C_OnFinishedUnloadingStreamLevel__DelegateSignature::LevelName' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.OnComputerNodesChanged__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct GI_SinglePlayer_C_OnComputerNodesChanged__DelegateSignature final
{
public:
	int32                                         NodesRemaining;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_OnComputerNodesChanged__DelegateSignature) == 0x000004, "Wrong alignment on GI_SinglePlayer_C_OnComputerNodesChanged__DelegateSignature");
static_assert(sizeof(GI_SinglePlayer_C_OnComputerNodesChanged__DelegateSignature) == 0x000004, "Wrong size on GI_SinglePlayer_C_OnComputerNodesChanged__DelegateSignature");
static_assert(offsetof(GI_SinglePlayer_C_OnComputerNodesChanged__DelegateSignature, NodesRemaining) == 0x000000, "Member 'GI_SinglePlayer_C_OnComputerNodesChanged__DelegateSignature::NodesRemaining' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.OnTutorialCompleted__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct GI_SinglePlayer_C_OnTutorialCompleted__DelegateSignature final
{
public:
	class FName                                   TutorialName;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_OnTutorialCompleted__DelegateSignature) == 0x000004, "Wrong alignment on GI_SinglePlayer_C_OnTutorialCompleted__DelegateSignature");
static_assert(sizeof(GI_SinglePlayer_C_OnTutorialCompleted__DelegateSignature) == 0x000008, "Wrong size on GI_SinglePlayer_C_OnTutorialCompleted__DelegateSignature");
static_assert(offsetof(GI_SinglePlayer_C_OnTutorialCompleted__DelegateSignature, TutorialName) == 0x000000, "Member 'GI_SinglePlayer_C_OnTutorialCompleted__DelegateSignature::TutorialName' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.OnPublicAddressStateChanged__DelegateSignature
// 0x0040 (0x0040 - 0x0000)
struct GI_SinglePlayer_C_OnPublicAddressStateChanged__DelegateSignature final
{
public:
	class USoundCue*                              SoundCue;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              PortraitTexture;                                   // 0x0008(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	int32                                         RowCount;                                          // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ColCount;                                          // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         FrameRate;                                         // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_OnPublicAddressStateChanged__DelegateSignature) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_OnPublicAddressStateChanged__DelegateSignature");
static_assert(sizeof(GI_SinglePlayer_C_OnPublicAddressStateChanged__DelegateSignature) == 0x000040, "Wrong size on GI_SinglePlayer_C_OnPublicAddressStateChanged__DelegateSignature");
static_assert(offsetof(GI_SinglePlayer_C_OnPublicAddressStateChanged__DelegateSignature, SoundCue) == 0x000000, "Member 'GI_SinglePlayer_C_OnPublicAddressStateChanged__DelegateSignature::SoundCue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnPublicAddressStateChanged__DelegateSignature, PortraitTexture) == 0x000008, "Member 'GI_SinglePlayer_C_OnPublicAddressStateChanged__DelegateSignature::PortraitTexture' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnPublicAddressStateChanged__DelegateSignature, RowCount) == 0x000030, "Member 'GI_SinglePlayer_C_OnPublicAddressStateChanged__DelegateSignature::RowCount' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnPublicAddressStateChanged__DelegateSignature, ColCount) == 0x000034, "Member 'GI_SinglePlayer_C_OnPublicAddressStateChanged__DelegateSignature::ColCount' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnPublicAddressStateChanged__DelegateSignature, FrameRate) == 0x000038, "Member 'GI_SinglePlayer_C_OnPublicAddressStateChanged__DelegateSignature::FrameRate' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.OnStoryQuestNotification__DelegateSignature
// 0x0028 (0x0028 - 0x0000)
struct GI_SinglePlayer_C_OnStoryQuestNotification__DelegateSignature final
{
public:
	class FName                                   QuestName;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   NotificationText;                                  // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	float                                         NotificationDelay;                                 // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_OnStoryQuestNotification__DelegateSignature) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_OnStoryQuestNotification__DelegateSignature");
static_assert(sizeof(GI_SinglePlayer_C_OnStoryQuestNotification__DelegateSignature) == 0x000028, "Wrong size on GI_SinglePlayer_C_OnStoryQuestNotification__DelegateSignature");
static_assert(offsetof(GI_SinglePlayer_C_OnStoryQuestNotification__DelegateSignature, QuestName) == 0x000000, "Member 'GI_SinglePlayer_C_OnStoryQuestNotification__DelegateSignature::QuestName' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnStoryQuestNotification__DelegateSignature, NotificationText) == 0x000008, "Member 'GI_SinglePlayer_C_OnStoryQuestNotification__DelegateSignature::NotificationText' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnStoryQuestNotification__DelegateSignature, NotificationDelay) == 0x000020, "Member 'GI_SinglePlayer_C_OnStoryQuestNotification__DelegateSignature::NotificationDelay' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.OnControllerConnectionStateChange__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct GI_SinglePlayer_C_OnControllerConnectionStateChange__DelegateSignature final
{
public:
	bool                                          ControllerConnectedState;                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_OnControllerConnectionStateChange__DelegateSignature) == 0x000001, "Wrong alignment on GI_SinglePlayer_C_OnControllerConnectionStateChange__DelegateSignature");
static_assert(sizeof(GI_SinglePlayer_C_OnControllerConnectionStateChange__DelegateSignature) == 0x000001, "Wrong size on GI_SinglePlayer_C_OnControllerConnectionStateChange__DelegateSignature");
static_assert(offsetof(GI_SinglePlayer_C_OnControllerConnectionStateChange__DelegateSignature, ControllerConnectedState) == 0x000000, "Member 'GI_SinglePlayer_C_OnControllerConnectionStateChange__DelegateSignature::ControllerConnectedState' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.ExecuteUbergraph_GI_SinglePlayer
// 0x0F50 (0x0F50 - 0x0000)
struct GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName WrittenAchievementName, float WrittenProgress, int32 WrittenUserTag)> K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_WrittenAchievementName_1;       // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_WrittenProgress_1;              // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_WrittenUserTag_1;               // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      K2Node_CustomEvent_PlayerController;               // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDataTableRowHandle                    K2Node_CustomEvent_AchievementHandle;              // 0x0050(0x0010)(NoDestructor)
	int32                                         K2Node_CustomEvent_UserTag;                        // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAchievementWriteCallbackProxy*         CallFunc_WriteAchievementProgress_ReturnValue;     // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetCachedAchievementProgress_bFoundID;    // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCachedAchievementProgress_Progress;    // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryCompleteBinaryAchievement_Result;      // 0x007A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B[0x5];                                       // 0x007B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USoundCue>               K2Node_CustomEvent_SoundCue_7;                     // 0x0080(0x0028)(HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               K2Node_CustomEvent_SoundCue_6;                     // 0x00A8(0x0028)(HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_Location;                       // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate_1;            // 0x00DC(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_AsyncSoundParams               K2Node_MakeStruct_STRUCT_AsyncSoundParams;         // 0x00F0(0x0080)(ContainsInstancedReference, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               K2Node_CustomEvent_SoundCue_5;                     // 0x0170(0x0028)(HasGetValueTypeHash)
	class USceneComponent*                        K2Node_CustomEvent_AttachToComponent_1;            // 0x0198(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_SocketName_1;                   // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_RelativeLocation_1;             // 0x01A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               K2Node_CustomEvent_RelativeRotation_1;             // 0x01B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FSTRUCT_EffectParams                   K2Node_CustomEvent_SoundParameters;                // 0x01C0(0x0030)(ConstParm, HasGetValueTypeHash)
	TSoftObjectPtr<class USceneComponent>         CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue; // 0x01F0(0x0028)(InstancedReference, UObjectWrapper, HasGetValueTypeHash)
	TSoftObjectPtr<class UFXSystemAsset>          K2Node_CustomEvent_System_4;                       // 0x0218(0x0028)(HasGetValueTypeHash)
	struct FTransform                             K2Node_CustomEvent_Transform;                      // 0x0240(0x0030)(IsPlainOldData, NoDestructor)
	struct FSTRUCT_AsyncSoundParams               K2Node_MakeStruct_STRUCT_AsyncSoundParams_1;       // 0x0270(0x0080)(ContainsInstancedReference, HasGetValueTypeHash)
	struct FSTRUCT_AsyncParticleParams            K2Node_MakeStruct_STRUCT_AsyncParticleParams;      // 0x02F0(0x00A0)(ContainsInstancedReference, HasGetValueTypeHash)
	TSoftObjectPtr<class UFXSystemAsset>          K2Node_CustomEvent_System_3;                       // 0x0390(0x0028)(HasGetValueTypeHash)
	class USceneComponent*                        K2Node_CustomEvent_AttachToComponent;              // 0x03B8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_SocketName;                     // 0x03C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_RelativeLocation;               // 0x03C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               K2Node_CustomEvent_RelativeRotation;               // 0x03D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FSTRUCT_EffectParams                   K2Node_CustomEvent_EffectsParameters;              // 0x03E0(0x0030)(ConstParm, HasGetValueTypeHash)
	struct FLatentObjectEventHandle               K2Node_CustomEvent_OnSpawnEvent;                   // 0x0410(0x0010)(ContainsInstancedReference)
	TSoftObjectPtr<class USoundCue>               K2Node_CustomEvent_SoundCue_4;                     // 0x0420(0x0028)(HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_FadeInDuration_1;               // 0x0448(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_StartTime_1;                    // 0x044C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        K2Node_CustomEvent_AudioComponent_1;               // 0x0450(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_458[0x8];                                      // 0x0458(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0460(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0490(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0491(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_492[0x6];                                      // 0x0492(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USceneComponent>         CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue_1; // 0x0498(0x0028)(InstancedReference, UObjectWrapper, HasGetValueTypeHash)
	struct FSTRUCT_AsyncParticleParams            K2Node_MakeStruct_STRUCT_AsyncParticleParams_1;    // 0x04C0(0x00A0)(ContainsInstancedReference, HasGetValueTypeHash)
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate_2;            // 0x0560(0x0010)(ZeroConstructor, NoDestructor)
	int32                                         Temp_int_Loop_Counter_Variable_3;                  // 0x0570(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_574[0x4];                                      // 0x0574(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UFXSystemAsset>          K2Node_CustomEvent_System_2;                       // 0x0578(0x0028)(HasGetValueTypeHash)
	class UFXSystemComponent*                     K2Node_CustomEvent_SystemComponent_1;              // 0x05A0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               K2Node_DynamicCast_AsParticle_System_Component;    // 0x05A8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x05B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryDecrementSystemComponentRefCount_Result; // 0x05B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5B2[0x6];                                      // 0x05B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      K2Node_DynamicCast_AsNiagara_Particle_System;      // 0x05B8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x05C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryDecrementSystemComponentRefCount_Result_1; // 0x05C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryIncrementSystemComponentRefCount_Result; // 0x05C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C3[0x1];                                      // 0x05C3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x05C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_3;                   // 0x05C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_4;                   // 0x05CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UNiagaraSystem>          K2Node_CustomEvent_System_1;                       // 0x05D0(0x0028)(HasGetValueTypeHash)
	TArray<class UNiagaraComponent*>              K2Node_CustomEvent_SystemComponents_1;             // 0x05F8(0x0010)(ConstParm, ReferenceParm, ContainsInstancedReference)
	class UNiagaraComponent*                      CallFunc_Array_Get_Item;                           // 0x0608(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate_3;            // 0x0610(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_TryIncrementSystemComponentRefCount_Result_1; // 0x0620(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_621[0x7];                                      // 0x0621(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      CallFunc_Array_Get_Item_1;                         // 0x0628(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0630(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TryDecrementSystemComponentRefCount_Result_2; // 0x0634(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_635[0x3];                                      // 0x0635(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0638(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x063C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_63D[0x3];                                      // 0x063D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_4;                  // 0x0640(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_644[0x4];                                      // 0x0644(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USoundCue>               K2Node_CustomEvent_SoundCue_3;                     // 0x0648(0x0028)(HasGetValueTypeHash)
	TArray<class UAudioComponent*>                K2Node_CustomEvent_AudioComponents;                // 0x0670(0x0010)(ConstParm, ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0680(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x0684(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0688(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_689[0x7];                                      // 0x0689(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IINTERF_HUD_C>         K2Node_DynamicCast_AsINTERF_HUD;                   // 0x0690(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x06A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnStartedLoadingGame_Result;              // 0x06A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6A2[0x2];                                      // 0x06A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_4;            // 0x06A4(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_6B4[0x4];                                      // 0x06B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFXSystemComponent*                     K2Node_CustomEvent_SystemComponent;                // 0x06B8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Remove_ReturnValue;                   // 0x06C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x06C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C2[0x2];                                      // 0x06C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_5;            // 0x06C4(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x06D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D5[0x3];                                      // 0x06D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFXSystemComponent*>             K2Node_CustomEvent_SystemComponents;               // 0x06D8(0x0010)(ConstParm, ReferenceParm, ContainsInstancedReference)
	class USceneComponent*                        K2Node_CustomEvent_SceneComponent;                 // 0x06E8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFXSystemComponent*                     CallFunc_Array_Get_Item_2;                         // 0x06F0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UFXSystemComponent*>             CallFunc_GetChildComponentsByClass_ReturnValue;    // 0x06F8(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UFXSystemComponent*                     CallFunc_Array_Get_Item_3;                         // 0x0708(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x0710(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0714(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_715[0x3];                                      // 0x0715(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_4;               // 0x0718(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x071C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71D[0x3];                                      // 0x071D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_5;                  // 0x0720(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_4;                // 0x0724(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_725[0x3];                                      // 0x0725(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x0728(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Remove_ReturnValue_1;                 // 0x072C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x072D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_72E[0x2];                                      // 0x072E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USoundCue>               K2Node_CustomEvent_SoundCue_2;                     // 0x0730(0x0028)(HasGetValueTypeHash)
	struct FSTRUCT_AsyncSoundParams               K2Node_CustomEvent_SoundParams;                    // 0x0758(0x0080)(ContainsInstancedReference, HasGetValueTypeHash)
	class UObject*                                CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue; // 0x07D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue;   // 0x07E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7E1[0x7];                                      // 0x07E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundCue*                              K2Node_DynamicCast_AsSound_Cue;                    // 0x07E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x07F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x07F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x07F2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F3[0x5];                                      // 0x07F3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UFXSystemAsset>          K2Node_CustomEvent_System;                         // 0x07F8(0x0028)(ConstParm, HasGetValueTypeHash)
	struct FSTRUCT_AsyncParticleParams            K2Node_CustomEvent_SystemParams;                   // 0x0820(0x00A0)(ConstParm, ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_5;               // 0x08C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x08C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8C5[0x3];                                      // 0x08C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue_1; // 0x08C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFXSystemAsset*                         K2Node_DynamicCast_AsFXSystem_Asset;               // 0x08D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x08D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x08D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8DA[0x2];                                      // 0x08DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate_6;            // 0x08DC(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_8EC[0x4];                                      // 0x08EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Temp_object_Variable;                              // 0x08F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                K2Node_CustomEvent_Loaded;                         // 0x08F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              K2Node_DynamicCast_AsSound_Cue_1;                  // 0x0900(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x0908(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_909[0x7];                                      // 0x0909(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Temp_object_Variable_1;                            // 0x0910(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                K2Node_CustomEvent_Loaded_1;                       // 0x0918(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              K2Node_DynamicCast_AsSound_Cue_2;                  // 0x0920(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_6;                     // 0x0928(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_929[0x7];                                      // 0x0929(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USoundCue>               K2Node_CustomEvent_SoundCue_1;                     // 0x0930(0x0028)(HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_ElapsedTime;                    // 0x0958(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate_7;            // 0x095C(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_96C[0x4];                                      // 0x096C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue_2; // 0x0970(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              K2Node_DynamicCast_AsSound_Cue_3;                  // 0x0978(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_7;                     // 0x0980(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_981[0x7];                                      // 0x0981(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Temp_object_Variable_2;                            // 0x0988(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x0990(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_991[0x7];                                      // 0x0991(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFXSystemAsset*                         K2Node_DynamicCast_AsFXSystem_Asset_1;             // 0x0998(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_8;                     // 0x09A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9A1[0x7];                                      // 0x09A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UFXSystemAsset>          CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue_2; // 0x09A8(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_RemoveAsyncSystemParamsFromQueue_Success; // 0x09D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9D1[0xF];                                      // 0x09D1(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_AsyncParticleParams            CallFunc_RemoveAsyncSystemParamsFromQueue_SystemParams; // 0x09E0(0x00A0)(ContainsInstancedReference, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               K2Node_CustomEvent_SoundCue;                       // 0x0A80(0x0028)(HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_FadeInDuration;                 // 0x0AA8(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_StartTime;                      // 0x0AAC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVoxelAudioComponent*                   K2Node_CustomEvent_AudioComponent;                 // 0x0AB0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_7;                    // 0x0AB8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_1;       // 0x0AB9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_ABA[0x6];                                      // 0x0ABA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_CustomEvent_Loaded_2;                       // 0x0AC0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDataTableRowHandle                    K2Node_CustomEvent_LevelCollection_1;              // 0x0AC8(0x0010)(NoDestructor)
	bool                                          K2Node_CustomEvent_BlockOnLoad;                    // 0x0AD8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AD9[0x7];                                      // 0x0AD9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    K2Node_CustomEvent_LevelCollection;                // 0x0AE0(0x0010)(NoDestructor)
	TArray<class FName>                           K2Node_CustomEvent_LevelsToKeepLoaded;             // 0x0AF0(0x0010)(ConstParm, ReferenceParm)
	class FName                                   CallFunc_Array_Get_Item_4;                         // 0x0B00(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_6;               // 0x0B08(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_5;                // 0x0B0C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B0D[0x3];                                      // 0x0B0D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_LevelCollection                CallFunc_GetDataTableRowFromName_OutRow;           // 0x0B10(0x0010)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0B20(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B21[0x7];                                      // 0x0B21(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_LevelCollection                CallFunc_GetDataTableRowFromName_OutRow_1;         // 0x0B28(0x0010)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue_1;    // 0x0B38(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B39[0x3];                                      // 0x0B39(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate_8;            // 0x0B3C(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_TryUpdateCurrentSubLevelName_Result;      // 0x0B4C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B4D[0x3];                                      // 0x0B4D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           K2Node_MakeArray_Array;                            // 0x0B50(0x0010)(ReferenceParm)
	bool                                          CallFunc_IsValid_ReturnValue_8;                    // 0x0B60(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B61[0x7];                                      // 0x0B61(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Temp_object_Variable_3;                            // 0x0B68(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              K2Node_DynamicCast_AsSound_Cue_4;                  // 0x0B70(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_9;                     // 0x0B78(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B79[0x7];                                      // 0x0B79(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_CustomEvent_Loaded_3;                       // 0x0B80(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_7;               // 0x0B88(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B8C[0x4];                                      // 0x0B8C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Temp_object_Variable_4;                            // 0x0B90(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0B98(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B99[0x7];                                      // 0x0B99(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraSystem*                         K2Node_DynamicCast_AsNiagara_System;               // 0x0BA0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_10;                    // 0x0BA8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BA9[0x3];                                      // 0x0BA9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_Array_Get_Item_5;                         // 0x0BAC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_8;               // 0x0BB4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0BB8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BB9[0x3];                                      // 0x0BB9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_9;               // 0x0BBC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0BC0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BC1[0x3];                                      // 0x0BC1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x0BC4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item_6;                         // 0x0BC8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                K2Node_CustomEvent_Loaded_4;                       // 0x0BD0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_10;              // 0x0BD8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue_1;            // 0x0BDC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_2;             // 0x0BE0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BE1[0x7];                                      // 0x0BE1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Temp_object_Variable_5;                            // 0x0BE8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        K2Node_DynamicCast_AsParticle_System;              // 0x0BF0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_11;                    // 0x0BF8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BF9[0x7];                                      // 0x0BF9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraSystem*                         K2Node_DynamicCast_AsNiagara_System_1;             // 0x0C00(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_12;                    // 0x0C08(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C09[0x7];                                      // 0x0C09(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           K2Node_Select_Default;                             // 0x0C10(0x0010)(ReferenceParm)
	class UObject*                                K2Node_CustomEvent_Loaded_5;                       // 0x0C20(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item_7;                         // 0x0C28(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item_8;                         // 0x0C30(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_6;                            // 0x0C38(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0C40(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C44[0x4];                                      // 0x0C44(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundCue*                              K2Node_DynamicCast_AsSound_Cue_5;                  // 0x0C48(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_13;                    // 0x0C50(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C51[0x3];                                      // 0x0C51(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_Array_Get_Item_9;                         // 0x0C54(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_9;            // 0x0C5C(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_C6C[0x4];                                      // 0x0C6C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelStreaming*                        CallFunc_GetStreamingLevel_ReturnValue;            // 0x0C70(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                K2Node_CustomEvent_Loaded_6;                       // 0x0C78(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0C80(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0C8C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0C98(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0CA4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CA5[0x3];                                      // 0x0CA5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate_10;           // 0x0CA8(0x0010)(ZeroConstructor, NoDestructor)
	class UVoxelLevelManager*                     CallFunc_SpawnObject_ReturnValue;                  // 0x0CB8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UBatchedLevelVoxelization*>      K2Node_MakeArray_Array_1;                          // 0x0CC0(0x0010)(ReferenceParm)
	TArray<class UBatchedLevelVoxelization*>      K2Node_MakeArray_Array_2;                          // 0x0CD0(0x0010)(ReferenceParm)
	bool                                          CallFunc_IsPackagedForDistribution_ReturnValue;    // 0x0CE0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CE1[0x7];                                      // 0x0CE1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBatchedLevelVoxelization*>      K2Node_Select_Default_1;                           // 0x0CE8(0x0010)(ReferenceParm)
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0CF8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_Hacker_Simple_C*                  K2Node_DynamicCast_AsPAWN_Hacker_Simple;           // 0x0D00(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_14;                    // 0x0D08(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D09[0x3];                                      // 0x0D09(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0D0C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_5;                   // 0x0D10(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D14[0x4];                                      // 0x0D14(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        CallFunc_Array_Get_Item_10;                        // 0x0D18(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_9;                    // 0x0D20(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D21[0x7];                                      // 0x0D21(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Temp_object_Variable_7;                            // 0x0D28(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                K2Node_CustomEvent_Loaded_7;                       // 0x0D30(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              K2Node_DynamicCast_AsSound_Cue_6;                  // 0x0D38(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_15;                    // 0x0D40(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D41[0x7];                                      // 0x0D41(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USoundCue>               CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue_3; // 0x0D48(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	struct FSTRUCT_AsyncSoundParams               CallFunc_RemoveAsyncSoundParamsFromQueue_SoundParams; // 0x0D70(0x0080)(ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_11;              // 0x0DF0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_3;             // 0x0DF4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0DF5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DF6[0x2];                                      // 0x0DF6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Temp_object_Variable_8;                            // 0x0DF8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLevelLoaded_ReturnValue;                // 0x0E00(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E01[0x7];                                      // 0x0E01(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundCue*                              K2Node_DynamicCast_AsSound_Cue_7;                  // 0x0E08(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_16;                    // 0x0E10(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E11[0x7];                                      // 0x0E11(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_CustomEvent_Loaded_8;                       // 0x0E18(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable;                                // 0x0E20(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item_11;                        // 0x0E28(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasCompletedAllAchievements_Result;       // 0x0E30(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E31[0x7];                                      // 0x0E31(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0E38(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0E48(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x0E58(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E59[0x3];                                      // 0x0E59(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0E5C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_LevelName_1;                    // 0x0E60(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDataTableRowHandle                    K2Node_MakeStruct_DataTableRowHandle;              // 0x0E68(0x0010)(NoDestructor)
	bool                                          CallFunc_DoesDataTableRowExist_ReturnValue;        // 0x0E78(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue_1;          // 0x0E79(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0E7A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0E7B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0E7C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E7D[0x3];                                      // 0x0E7D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0E80(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_LevelName;                      // 0x0E84(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_WrittenAchievementName;         // 0x0E8C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_WrittenProgress;                // 0x0E94(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_WrittenUserTag;                 // 0x0E98(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DoesDataTableRowExist_ReturnValue_1;      // 0x0E9C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue_2;          // 0x0E9D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0E9E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E9F[0x1];                                      // 0x0E9F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class FName WrittenAchievementName, float WrittenProgress, int32 WrittenUserTag)> K2Node_CreateDelegate_OutputDelegate_11;           // 0x0EA0(0x0010)(ZeroConstructor, NoDestructor)
	TArray<class FName>                           K2Node_MakeArray_Array_3;                          // 0x0EB0(0x0010)(ConstParm, ReferenceParm)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue_3;          // 0x0EC0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0EC1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0EC2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_10;                   // 0x0EC3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TrySynchronizeAchievements_Result;        // 0x0EC4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_EC5[0x3];                                      // 0x0EC5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate_12;           // 0x0EC8(0x0010)(ZeroConstructor, NoDestructor)
	class UOBJ_TileDescriptorManager_C*           CallFunc_SpawnObject_ReturnValue_1;                // 0x0ED8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 K2Node_Event_MapName;                              // 0x0EE0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_Zero_ReturnValue;                  // 0x0EF0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsStreamingLevels_Result;                 // 0x0EFC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetCurrentLevel_ReturnValue;              // 0x0EFD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0EFE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_EFF[0x1];                                      // 0x0EFF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue_1;              // 0x0F00(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_Hacker_Simple_C*                  K2Node_DynamicCast_AsPAWN_Hacker_Simple_1;         // 0x0F08(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_17;                    // 0x0F10(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F11[0x3];                                      // 0x0F11(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate_13;           // 0x0F14(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_F24[0x4];                                      // 0x0F24(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IINTERF_HUD_C>         K2Node_DynamicCast_AsINTERF_HUD_1;                 // 0x0F28(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_18;                    // 0x0F38(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnFinishedLoadingGame_Result;             // 0x0F39(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_11;                   // 0x0F3A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bIsConnected_1;                       // 0x0F3B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         K2Node_Event_UserIndex;                            // 0x0F3C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bIsConnected;                         // 0x0F40(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TrySynchronizeAchievements_Result_1;      // 0x0F41(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer) == 0x000010, "Wrong alignment on GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer");
static_assert(sizeof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer) == 0x000F50, "Wrong size on GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, EntryPoint) == 0x000000, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::EntryPoint' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, Temp_int_Loop_Counter_Variable_1) == 0x00001C, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, Temp_int_Loop_Counter_Variable_2) == 0x000020, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_Add_IntInt_ReturnValue_1) == 0x000024, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_Add_IntInt_ReturnValue_2) == 0x000028, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, Temp_int_Array_Index_Variable) == 0x00002C, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_WrittenAchievementName_1) == 0x000030, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_WrittenAchievementName_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_WrittenProgress_1) == 0x000038, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_WrittenProgress_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_WrittenUserTag_1) == 0x00003C, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_WrittenUserTag_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, Temp_int_Array_Index_Variable_1) == 0x000040, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_PlayerController) == 0x000048, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_PlayerController' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_AchievementHandle) == 0x000050, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_AchievementHandle' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_UserTag) == 0x000060, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_UserTag' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, Temp_int_Array_Index_Variable_2) == 0x000064, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_WriteAchievementProgress_ReturnValue) == 0x000068, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_WriteAchievementProgress_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_GetCachedAchievementProgress_bFoundID) == 0x000070, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_GetCachedAchievementProgress_bFoundID' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_GetCachedAchievementProgress_Progress) == 0x000074, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_GetCachedAchievementProgress_Progress' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_Less_FloatFloat_ReturnValue) == 0x000078, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_IsValid_ReturnValue) == 0x000079, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_TryCompleteBinaryAchievement_Result) == 0x00007A, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_TryCompleteBinaryAchievement_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_SoundCue_7) == 0x000080, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_SoundCue_7' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_SoundCue_6) == 0x0000A8, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_SoundCue_6' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_Location) == 0x0000D0, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_Location' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CreateDelegate_OutputDelegate_1) == 0x0000DC, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_MakeStruct_STRUCT_AsyncSoundParams) == 0x0000F0, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_MakeStruct_STRUCT_AsyncSoundParams' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_SoundCue_5) == 0x000170, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_SoundCue_5' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_AttachToComponent_1) == 0x000198, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_AttachToComponent_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_SocketName_1) == 0x0001A0, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_SocketName_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_RelativeLocation_1) == 0x0001A8, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_RelativeLocation_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_RelativeRotation_1) == 0x0001B4, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_RelativeRotation_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_SoundParameters) == 0x0001C0, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_SoundParameters' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue) == 0x0001F0, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_System_4) == 0x000218, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_System_4' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_Transform) == 0x000240, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_Transform' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_MakeStruct_STRUCT_AsyncSoundParams_1) == 0x000270, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_MakeStruct_STRUCT_AsyncSoundParams_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_MakeStruct_STRUCT_AsyncParticleParams) == 0x0002F0, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_MakeStruct_STRUCT_AsyncParticleParams' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_System_3) == 0x000390, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_System_3' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_AttachToComponent) == 0x0003B8, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_AttachToComponent' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_SocketName) == 0x0003C0, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_SocketName' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_RelativeLocation) == 0x0003C8, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_RelativeLocation' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_RelativeRotation) == 0x0003D4, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_RelativeRotation' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_EffectsParameters) == 0x0003E0, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_EffectsParameters' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_OnSpawnEvent) == 0x000410, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_OnSpawnEvent' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_SoundCue_4) == 0x000420, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_SoundCue_4' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_FadeInDuration_1) == 0x000448, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_FadeInDuration_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_StartTime_1) == 0x00044C, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_StartTime_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_AudioComponent_1) == 0x000450, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_AudioComponent_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_MakeTransform_ReturnValue) == 0x000460, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_IsValid_ReturnValue_1) == 0x000490, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000491, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue_1) == 0x000498, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_MakeStruct_STRUCT_AsyncParticleParams_1) == 0x0004C0, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_MakeStruct_STRUCT_AsyncParticleParams_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CreateDelegate_OutputDelegate_2) == 0x000560, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, Temp_int_Loop_Counter_Variable_3) == 0x000570, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::Temp_int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_System_2) == 0x000578, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_System_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_SystemComponent_1) == 0x0005A0, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_SystemComponent_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_DynamicCast_AsParticle_System_Component) == 0x0005A8, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_DynamicCast_AsParticle_System_Component' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_DynamicCast_bSuccess) == 0x0005B0, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_TryDecrementSystemComponentRefCount_Result) == 0x0005B1, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_TryDecrementSystemComponentRefCount_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_DynamicCast_AsNiagara_Particle_System) == 0x0005B8, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_DynamicCast_AsNiagara_Particle_System' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_DynamicCast_bSuccess_1) == 0x0005C0, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_TryDecrementSystemComponentRefCount_Result_1) == 0x0005C1, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_TryDecrementSystemComponentRefCount_Result_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_TryIncrementSystemComponentRefCount_Result) == 0x0005C2, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_TryIncrementSystemComponentRefCount_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_Add_IntInt_ReturnValue_3) == 0x0005C4, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, Temp_int_Array_Index_Variable_3) == 0x0005C8, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::Temp_int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, Temp_int_Array_Index_Variable_4) == 0x0005CC, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::Temp_int_Array_Index_Variable_4' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_System_1) == 0x0005D0, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_System_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_SystemComponents_1) == 0x0005F8, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_SystemComponents_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_Array_Get_Item) == 0x000608, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CreateDelegate_OutputDelegate_3) == 0x000610, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_TryIncrementSystemComponentRefCount_Result_1) == 0x000620, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_TryIncrementSystemComponentRefCount_Result_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_Array_Get_Item_1) == 0x000628, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_Array_Length_ReturnValue) == 0x000630, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_TryDecrementSystemComponentRefCount_Result_2) == 0x000634, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_TryDecrementSystemComponentRefCount_Result_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_Array_Length_ReturnValue_1) == 0x000638, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_Less_IntInt_ReturnValue) == 0x00063C, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, Temp_int_Loop_Counter_Variable_4) == 0x000640, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::Temp_int_Loop_Counter_Variable_4' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_SoundCue_3) == 0x000648, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_SoundCue_3' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_AudioComponents) == 0x000670, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_AudioComponents' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_Array_Length_ReturnValue_2) == 0x000680, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_Add_IntInt_ReturnValue_4) == 0x000684, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_Less_IntInt_ReturnValue_1) == 0x000688, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_DynamicCast_AsINTERF_HUD) == 0x000690, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_DynamicCast_AsINTERF_HUD' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_DynamicCast_bSuccess_2) == 0x0006A0, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_OnStartedLoadingGame_Result) == 0x0006A1, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_OnStartedLoadingGame_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CreateDelegate_OutputDelegate_4) == 0x0006A4, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_SystemComponent) == 0x0006B8, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_SystemComponent' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_Map_Remove_ReturnValue) == 0x0006C0, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_Map_Remove_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_IsValid_ReturnValue_2) == 0x0006C1, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CreateDelegate_OutputDelegate_5) == 0x0006C4, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CreateDelegate_OutputDelegate_5' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, Temp_bool_Variable) == 0x0006D4, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_SystemComponents) == 0x0006D8, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_SystemComponents' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_SceneComponent) == 0x0006E8, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_SceneComponent' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_Array_Get_Item_2) == 0x0006F0, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_GetChildComponentsByClass_ReturnValue) == 0x0006F8, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_GetChildComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_Array_Get_Item_3) == 0x000708, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_Array_Length_ReturnValue_3) == 0x000710, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_Less_IntInt_ReturnValue_2) == 0x000714, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_Array_Length_ReturnValue_4) == 0x000718, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_Array_Length_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_Less_IntInt_ReturnValue_3) == 0x00071C, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, Temp_int_Loop_Counter_Variable_5) == 0x000720, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::Temp_int_Loop_Counter_Variable_5' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_Less_IntInt_ReturnValue_4) == 0x000724, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_Less_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_Add_IntInt_ReturnValue_5) == 0x000728, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_Map_Remove_ReturnValue_1) == 0x00072C, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_Map_Remove_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_IsValid_ReturnValue_3) == 0x00072D, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_SoundCue_2) == 0x000730, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_SoundCue_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_SoundParams) == 0x000758, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_SoundParams' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue) == 0x0007D8, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_IsValidSoftObjectReference_ReturnValue) == 0x0007E0, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_IsValidSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_DynamicCast_AsSound_Cue) == 0x0007E8, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_DynamicCast_AsSound_Cue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_DynamicCast_bSuccess_3) == 0x0007F0, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_IsValid_ReturnValue_4) == 0x0007F1, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, Temp_bool_Variable_1) == 0x0007F2, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_System) == 0x0007F8, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_System' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_SystemParams) == 0x000820, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_SystemParams' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_Array_Length_ReturnValue_5) == 0x0008C0, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_Array_Length_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_Greater_IntInt_ReturnValue) == 0x0008C4, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue_1) == 0x0008C8, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_DynamicCast_AsFXSystem_Asset) == 0x0008D0, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_DynamicCast_AsFXSystem_Asset' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_DynamicCast_bSuccess_4) == 0x0008D8, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_IsValid_ReturnValue_5) == 0x0008D9, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CreateDelegate_OutputDelegate_6) == 0x0008DC, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CreateDelegate_OutputDelegate_6' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, Temp_object_Variable) == 0x0008F0, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_Loaded) == 0x0008F8, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_Loaded' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_DynamicCast_AsSound_Cue_1) == 0x000900, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_DynamicCast_AsSound_Cue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_DynamicCast_bSuccess_5) == 0x000908, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, Temp_object_Variable_1) == 0x000910, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_Loaded_1) == 0x000918, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_Loaded_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_DynamicCast_AsSound_Cue_2) == 0x000920, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_DynamicCast_AsSound_Cue_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_DynamicCast_bSuccess_6) == 0x000928, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_DynamicCast_bSuccess_6' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_SoundCue_1) == 0x000930, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_SoundCue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_ElapsedTime) == 0x000958, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_ElapsedTime' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CreateDelegate_OutputDelegate_7) == 0x00095C, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CreateDelegate_OutputDelegate_7' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue_2) == 0x000970, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_DynamicCast_AsSound_Cue_3) == 0x000978, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_DynamicCast_AsSound_Cue_3' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_DynamicCast_bSuccess_7) == 0x000980, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_DynamicCast_bSuccess_7' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, Temp_object_Variable_2) == 0x000988, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_IsValid_ReturnValue_6) == 0x000990, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_DynamicCast_AsFXSystem_Asset_1) == 0x000998, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_DynamicCast_AsFXSystem_Asset_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_DynamicCast_bSuccess_8) == 0x0009A0, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_DynamicCast_bSuccess_8' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue_2) == 0x0009A8, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_RemoveAsyncSystemParamsFromQueue_Success) == 0x0009D0, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_RemoveAsyncSystemParamsFromQueue_Success' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_RemoveAsyncSystemParamsFromQueue_SystemParams) == 0x0009E0, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_RemoveAsyncSystemParamsFromQueue_SystemParams' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_SoundCue) == 0x000A80, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_SoundCue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_FadeInDuration) == 0x000AA8, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_FadeInDuration' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_StartTime) == 0x000AAC, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_StartTime' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_AudioComponent) == 0x000AB0, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_AudioComponent' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_IsValid_ReturnValue_7) == 0x000AB8, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_IsValid_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_LessEqual_FloatFloat_ReturnValue_1) == 0x000AB9, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_LessEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_Loaded_2) == 0x000AC0, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_Loaded_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_LevelCollection_1) == 0x000AC8, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_LevelCollection_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_BlockOnLoad) == 0x000AD8, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_BlockOnLoad' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_LevelCollection) == 0x000AE0, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_LevelCollection' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_LevelsToKeepLoaded) == 0x000AF0, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_LevelsToKeepLoaded' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_Array_Get_Item_4) == 0x000B00, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_Array_Length_ReturnValue_6) == 0x000B08, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_Array_Length_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_Less_IntInt_ReturnValue_5) == 0x000B0C, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_Less_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_GetDataTableRowFromName_OutRow) == 0x000B10, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000B20, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_GetDataTableRowFromName_OutRow_1) == 0x000B28, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_GetDataTableRowFromName_OutRow_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_GetDataTableRowFromName_ReturnValue_1) == 0x000B38, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_GetDataTableRowFromName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CreateDelegate_OutputDelegate_8) == 0x000B3C, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CreateDelegate_OutputDelegate_8' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_TryUpdateCurrentSubLevelName_Result) == 0x000B4C, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_TryUpdateCurrentSubLevelName_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_MakeArray_Array) == 0x000B50, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_IsValid_ReturnValue_8) == 0x000B60, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_IsValid_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, Temp_object_Variable_3) == 0x000B68, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_DynamicCast_AsSound_Cue_4) == 0x000B70, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_DynamicCast_AsSound_Cue_4' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_DynamicCast_bSuccess_9) == 0x000B78, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_DynamicCast_bSuccess_9' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_Loaded_3) == 0x000B80, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_Loaded_3' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_Array_Length_ReturnValue_7) == 0x000B88, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_Array_Length_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, Temp_object_Variable_4) == 0x000B90, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000B98, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_DynamicCast_AsNiagara_System) == 0x000BA0, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_DynamicCast_AsNiagara_System' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_DynamicCast_bSuccess_10) == 0x000BA8, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_DynamicCast_bSuccess_10' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_Array_Get_Item_5) == 0x000BAC, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_Array_Get_Item_5' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_Array_Length_ReturnValue_8) == 0x000BB4, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_Array_Length_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000BB8, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_Array_Length_ReturnValue_9) == 0x000BBC, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_Array_Length_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000BC0, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_Array_LastIndex_ReturnValue) == 0x000BC4, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_Array_Get_Item_6) == 0x000BC8, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_Array_Get_Item_6' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_Loaded_4) == 0x000BD0, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_Loaded_4' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_Array_Length_ReturnValue_10) == 0x000BD8, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_Array_Length_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_Array_LastIndex_ReturnValue_1) == 0x000BDC, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_Array_LastIndex_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_Greater_IntInt_ReturnValue_2) == 0x000BE0, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_Greater_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, Temp_object_Variable_5) == 0x000BE8, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::Temp_object_Variable_5' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_DynamicCast_AsParticle_System) == 0x000BF0, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_DynamicCast_AsParticle_System' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_DynamicCast_bSuccess_11) == 0x000BF8, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_DynamicCast_bSuccess_11' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_DynamicCast_AsNiagara_System_1) == 0x000C00, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_DynamicCast_AsNiagara_System_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_DynamicCast_bSuccess_12) == 0x000C08, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_DynamicCast_bSuccess_12' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_Select_Default) == 0x000C10, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_Loaded_5) == 0x000C20, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_Loaded_5' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_Array_Get_Item_7) == 0x000C28, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_Array_Get_Item_7' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_Array_Get_Item_8) == 0x000C30, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_Array_Get_Item_8' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, Temp_object_Variable_6) == 0x000C38, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::Temp_object_Variable_6' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_Array_AddUnique_ReturnValue) == 0x000C40, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_DynamicCast_AsSound_Cue_5) == 0x000C48, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_DynamicCast_AsSound_Cue_5' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_DynamicCast_bSuccess_13) == 0x000C50, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_DynamicCast_bSuccess_13' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_Array_Get_Item_9) == 0x000C54, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_Array_Get_Item_9' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CreateDelegate_OutputDelegate_9) == 0x000C5C, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CreateDelegate_OutputDelegate_9' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_GetStreamingLevel_ReturnValue) == 0x000C70, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_GetStreamingLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_Loaded_6) == 0x000C78, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_Loaded_6' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_BreakTransform_Location) == 0x000C80, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_BreakTransform_Rotation) == 0x000C8C, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_BreakTransform_Scale) == 0x000C98, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_Not_PreBool_ReturnValue) == 0x000CA4, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CreateDelegate_OutputDelegate_10) == 0x000CA8, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CreateDelegate_OutputDelegate_10' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_SpawnObject_ReturnValue) == 0x000CB8, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_SpawnObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_MakeArray_Array_1) == 0x000CC0, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_MakeArray_Array_2) == 0x000CD0, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_IsPackagedForDistribution_ReturnValue) == 0x000CE0, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_IsPackagedForDistribution_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_Select_Default_1) == 0x000CE8, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_GetPlayerPawn_ReturnValue) == 0x000CF8, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_DynamicCast_AsPAWN_Hacker_Simple) == 0x000D00, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_DynamicCast_AsPAWN_Hacker_Simple' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_DynamicCast_bSuccess_14) == 0x000D08, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_DynamicCast_bSuccess_14' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_Event_DeltaSeconds) == 0x000D0C, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, Temp_int_Array_Index_Variable_5) == 0x000D10, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::Temp_int_Array_Index_Variable_5' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_Array_Get_Item_10) == 0x000D18, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_Array_Get_Item_10' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_IsValid_ReturnValue_9) == 0x000D20, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_IsValid_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, Temp_object_Variable_7) == 0x000D28, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::Temp_object_Variable_7' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_Loaded_7) == 0x000D30, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_Loaded_7' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_DynamicCast_AsSound_Cue_6) == 0x000D38, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_DynamicCast_AsSound_Cue_6' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_DynamicCast_bSuccess_15) == 0x000D40, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_DynamicCast_bSuccess_15' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue_3) == 0x000D48, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_RemoveAsyncSoundParamsFromQueue_SoundParams) == 0x000D70, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_RemoveAsyncSoundParamsFromQueue_SoundParams' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_Array_Length_ReturnValue_11) == 0x000DF0, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_Array_Length_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_Greater_IntInt_ReturnValue_3) == 0x000DF4, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_Greater_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_Array_RemoveItem_ReturnValue) == 0x000DF5, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, Temp_object_Variable_8) == 0x000DF8, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::Temp_object_Variable_8' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_IsLevelLoaded_ReturnValue) == 0x000E00, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_IsLevelLoaded_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_DynamicCast_AsSound_Cue_7) == 0x000E08, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_DynamicCast_AsSound_Cue_7' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_DynamicCast_bSuccess_16) == 0x000E10, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_DynamicCast_bSuccess_16' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_Loaded_8) == 0x000E18, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_Loaded_8' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, Temp_name_Variable) == 0x000E20, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_Array_Get_Item_11) == 0x000E28, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_Array_Get_Item_11' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_HasCompletedAllAchievements_Result) == 0x000E30, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_HasCompletedAllAchievements_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_Conv_NameToString_ReturnValue) == 0x000E38, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_Concat_StrStr_ReturnValue) == 0x000E48, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_NotEqual_NameName_ReturnValue) == 0x000E58, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, Temp_float_Variable) == 0x000E5C, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_LevelName_1) == 0x000E60, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_LevelName_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_MakeStruct_DataTableRowHandle) == 0x000E68, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_MakeStruct_DataTableRowHandle' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_DoesDataTableRowExist_ReturnValue) == 0x000E78, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_DoesDataTableRowExist_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_NotEqual_NameName_ReturnValue_1) == 0x000E79, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_NotEqual_NameName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000E7A, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_BooleanAND_ReturnValue) == 0x000E7B, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_BooleanAND_ReturnValue_1) == 0x000E7C, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, Temp_int_Variable) == 0x000E80, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_LevelName) == 0x000E84, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_LevelName' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_WrittenAchievementName) == 0x000E8C, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_WrittenAchievementName' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_WrittenProgress) == 0x000E94, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_WrittenProgress' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CustomEvent_WrittenUserTag) == 0x000E98, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CustomEvent_WrittenUserTag' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_DoesDataTableRowExist_ReturnValue_1) == 0x000E9C, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_DoesDataTableRowExist_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_NotEqual_NameName_ReturnValue_2) == 0x000E9D, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_NotEqual_NameName_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_Not_PreBool_ReturnValue_1) == 0x000E9E, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CreateDelegate_OutputDelegate_11) == 0x000EA0, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CreateDelegate_OutputDelegate_11' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_MakeArray_Array_3) == 0x000EB0, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_MakeArray_Array_3' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_NotEqual_NameName_ReturnValue_3) == 0x000EC0, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_NotEqual_NameName_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_BooleanAND_ReturnValue_2) == 0x000EC1, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_BooleanAND_ReturnValue_3) == 0x000EC2, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_IsValid_ReturnValue_10) == 0x000EC3, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_IsValid_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_TrySynchronizeAchievements_Result) == 0x000EC4, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_TrySynchronizeAchievements_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CreateDelegate_OutputDelegate_12) == 0x000EC8, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CreateDelegate_OutputDelegate_12' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_SpawnObject_ReturnValue_1) == 0x000ED8, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_SpawnObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_Event_MapName) == 0x000EE0, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_Event_MapName' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_Vector_Zero_ReturnValue) == 0x000EF0, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_Vector_Zero_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_IsStreamingLevels_Result) == 0x000EFC, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_IsStreamingLevels_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_SetCurrentLevel_ReturnValue) == 0x000EFD, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_SetCurrentLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_Not_PreBool_ReturnValue_2) == 0x000EFE, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_GetPlayerPawn_ReturnValue_1) == 0x000F00, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_GetPlayerPawn_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_DynamicCast_AsPAWN_Hacker_Simple_1) == 0x000F08, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_DynamicCast_AsPAWN_Hacker_Simple_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_DynamicCast_bSuccess_17) == 0x000F10, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_DynamicCast_bSuccess_17' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_CreateDelegate_OutputDelegate_13) == 0x000F14, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_CreateDelegate_OutputDelegate_13' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_DynamicCast_AsINTERF_HUD_1) == 0x000F28, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_DynamicCast_AsINTERF_HUD_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_DynamicCast_bSuccess_18) == 0x000F38, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_DynamicCast_bSuccess_18' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_OnFinishedLoadingGame_Result) == 0x000F39, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_OnFinishedLoadingGame_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_IsValid_ReturnValue_11) == 0x000F3A, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_IsValid_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_Event_bIsConnected_1) == 0x000F3B, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_Event_bIsConnected_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_Event_UserIndex) == 0x000F3C, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_Event_UserIndex' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, K2Node_Event_bIsConnected) == 0x000F40, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::K2Node_Event_bIsConnected' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer, CallFunc_TrySynchronizeAchievements_Result_1) == 0x000F41, "Member 'GI_SinglePlayer_C_ExecuteUbergraph_GI_SinglePlayer::CallFunc_TrySynchronizeAchievements_Result_1' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.OnOnlineConnectionStatusChange
// 0x0001 (0x0001 - 0x0000)
struct GI_SinglePlayer_C_OnOnlineConnectionStatusChange final
{
public:
	bool                                          bIsConnected;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_OnOnlineConnectionStatusChange) == 0x000001, "Wrong alignment on GI_SinglePlayer_C_OnOnlineConnectionStatusChange");
static_assert(sizeof(GI_SinglePlayer_C_OnOnlineConnectionStatusChange) == 0x000001, "Wrong size on GI_SinglePlayer_C_OnOnlineConnectionStatusChange");
static_assert(offsetof(GI_SinglePlayer_C_OnOnlineConnectionStatusChange, bIsConnected) == 0x000000, "Member 'GI_SinglePlayer_C_OnOnlineConnectionStatusChange::bIsConnected' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.OnControllerConnectionChange
// 0x0008 (0x0008 - 0x0000)
struct GI_SinglePlayer_C_OnControllerConnectionChange final
{
public:
	bool                                          bIsConnected;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UserIndex;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_OnControllerConnectionChange) == 0x000004, "Wrong alignment on GI_SinglePlayer_C_OnControllerConnectionChange");
static_assert(sizeof(GI_SinglePlayer_C_OnControllerConnectionChange) == 0x000008, "Wrong size on GI_SinglePlayer_C_OnControllerConnectionChange");
static_assert(offsetof(GI_SinglePlayer_C_OnControllerConnectionChange, bIsConnected) == 0x000000, "Member 'GI_SinglePlayer_C_OnControllerConnectionChange::bIsConnected' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnControllerConnectionChange, UserIndex) == 0x000004, "Member 'GI_SinglePlayer_C_OnControllerConnectionChange::UserIndex' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.OnFinishedLoadingLevel
// 0x0010 (0x0010 - 0x0000)
struct GI_SinglePlayer_C_OnFinishedLoadingLevel final
{
public:
	class FString                                 MapName;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_OnFinishedLoadingLevel) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_OnFinishedLoadingLevel");
static_assert(sizeof(GI_SinglePlayer_C_OnFinishedLoadingLevel) == 0x000010, "Wrong size on GI_SinglePlayer_C_OnFinishedLoadingLevel");
static_assert(offsetof(GI_SinglePlayer_C_OnFinishedLoadingLevel, MapName) == 0x000000, "Member 'GI_SinglePlayer_C_OnFinishedLoadingLevel::MapName' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.UnloadCurrentThenLoadLevelCollectionWithLoadingScreen
// 0x0008 (0x0008 - 0x0000)
struct GI_SinglePlayer_C_UnloadCurrentThenLoadLevelCollectionWithLoadingScreen final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_UnloadCurrentThenLoadLevelCollectionWithLoadingScreen) == 0x000004, "Wrong alignment on GI_SinglePlayer_C_UnloadCurrentThenLoadLevelCollectionWithLoadingScreen");
static_assert(sizeof(GI_SinglePlayer_C_UnloadCurrentThenLoadLevelCollectionWithLoadingScreen) == 0x000008, "Wrong size on GI_SinglePlayer_C_UnloadCurrentThenLoadLevelCollectionWithLoadingScreen");
static_assert(offsetof(GI_SinglePlayer_C_UnloadCurrentThenLoadLevelCollectionWithLoadingScreen, LevelName) == 0x000000, "Member 'GI_SinglePlayer_C_UnloadCurrentThenLoadLevelCollectionWithLoadingScreen::LevelName' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.StartLoadingLevelCollectionWithLoadingScreen
// 0x0008 (0x0008 - 0x0000)
struct GI_SinglePlayer_C_StartLoadingLevelCollectionWithLoadingScreen final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_StartLoadingLevelCollectionWithLoadingScreen) == 0x000004, "Wrong alignment on GI_SinglePlayer_C_StartLoadingLevelCollectionWithLoadingScreen");
static_assert(sizeof(GI_SinglePlayer_C_StartLoadingLevelCollectionWithLoadingScreen) == 0x000008, "Wrong size on GI_SinglePlayer_C_StartLoadingLevelCollectionWithLoadingScreen");
static_assert(offsetof(GI_SinglePlayer_C_StartLoadingLevelCollectionWithLoadingScreen, LevelName) == 0x000000, "Member 'GI_SinglePlayer_C_StartLoadingLevelCollectionWithLoadingScreen::LevelName' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.OnTick
// 0x0004 (0x0004 - 0x0000)
struct GI_SinglePlayer_C_OnTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_OnTick) == 0x000004, "Wrong alignment on GI_SinglePlayer_C_OnTick");
static_assert(sizeof(GI_SinglePlayer_C_OnTick) == 0x000004, "Wrong size on GI_SinglePlayer_C_OnTick");
static_assert(offsetof(GI_SinglePlayer_C_OnTick, DeltaSeconds) == 0x000000, "Member 'GI_SinglePlayer_C_OnTick::DeltaSeconds' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.StartUnloadingStreamingLevelCollection
// 0x0020 (0x0020 - 0x0000)
struct GI_SinglePlayer_C_StartUnloadingStreamingLevelCollection final
{
public:
	struct FDataTableRowHandle                    LevelCollection;                                   // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	TArray<class FName>                           LevelsToKeepLoaded;                                // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(GI_SinglePlayer_C_StartUnloadingStreamingLevelCollection) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_StartUnloadingStreamingLevelCollection");
static_assert(sizeof(GI_SinglePlayer_C_StartUnloadingStreamingLevelCollection) == 0x000020, "Wrong size on GI_SinglePlayer_C_StartUnloadingStreamingLevelCollection");
static_assert(offsetof(GI_SinglePlayer_C_StartUnloadingStreamingLevelCollection, LevelCollection) == 0x000000, "Member 'GI_SinglePlayer_C_StartUnloadingStreamingLevelCollection::LevelCollection' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_StartUnloadingStreamingLevelCollection, LevelsToKeepLoaded) == 0x000010, "Member 'GI_SinglePlayer_C_StartUnloadingStreamingLevelCollection::LevelsToKeepLoaded' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.StartLoadingStreamingLevelCollection
// 0x0018 (0x0018 - 0x0000)
struct GI_SinglePlayer_C_StartLoadingStreamingLevelCollection final
{
public:
	struct FDataTableRowHandle                    LevelCollection;                                   // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	bool                                          BlockOnLoad;                                       // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_StartLoadingStreamingLevelCollection) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_StartLoadingStreamingLevelCollection");
static_assert(sizeof(GI_SinglePlayer_C_StartLoadingStreamingLevelCollection) == 0x000018, "Wrong size on GI_SinglePlayer_C_StartLoadingStreamingLevelCollection");
static_assert(offsetof(GI_SinglePlayer_C_StartLoadingStreamingLevelCollection, LevelCollection) == 0x000000, "Member 'GI_SinglePlayer_C_StartLoadingStreamingLevelCollection::LevelCollection' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_StartLoadingStreamingLevelCollection, BlockOnLoad) == 0x000010, "Member 'GI_SinglePlayer_C_StartLoadingStreamingLevelCollection::BlockOnLoad' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.AsyncPlaySoundFromVoxelComponent
// 0x0038 (0x0038 - 0x0000)
struct GI_SinglePlayer_C_AsyncPlaySoundFromVoxelComponent final
{
public:
	TSoftObjectPtr<class USoundCue>               SoundCue;                                          // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	float                                         FadeInDuration;                                    // 0x0028(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartTime;                                         // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVoxelAudioComponent*                   AudioComponent;                                    // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_AsyncPlaySoundFromVoxelComponent) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_AsyncPlaySoundFromVoxelComponent");
static_assert(sizeof(GI_SinglePlayer_C_AsyncPlaySoundFromVoxelComponent) == 0x000038, "Wrong size on GI_SinglePlayer_C_AsyncPlaySoundFromVoxelComponent");
static_assert(offsetof(GI_SinglePlayer_C_AsyncPlaySoundFromVoxelComponent, SoundCue) == 0x000000, "Member 'GI_SinglePlayer_C_AsyncPlaySoundFromVoxelComponent::SoundCue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AsyncPlaySoundFromVoxelComponent, FadeInDuration) == 0x000028, "Member 'GI_SinglePlayer_C_AsyncPlaySoundFromVoxelComponent::FadeInDuration' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AsyncPlaySoundFromVoxelComponent, StartTime) == 0x00002C, "Member 'GI_SinglePlayer_C_AsyncPlaySoundFromVoxelComponent::StartTime' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AsyncPlaySoundFromVoxelComponent, AudioComponent) == 0x000030, "Member 'GI_SinglePlayer_C_AsyncPlaySoundFromVoxelComponent::AudioComponent' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.AsyncLoadPublicAddressCue
// 0x0030 (0x0030 - 0x0000)
struct GI_SinglePlayer_C_AsyncLoadPublicAddressCue final
{
public:
	TSoftObjectPtr<class USoundCue>               SoundCue;                                          // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	float                                         ElapsedTime;                                       // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_AsyncLoadPublicAddressCue) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_AsyncLoadPublicAddressCue");
static_assert(sizeof(GI_SinglePlayer_C_AsyncLoadPublicAddressCue) == 0x000030, "Wrong size on GI_SinglePlayer_C_AsyncLoadPublicAddressCue");
static_assert(offsetof(GI_SinglePlayer_C_AsyncLoadPublicAddressCue, SoundCue) == 0x000000, "Member 'GI_SinglePlayer_C_AsyncLoadPublicAddressCue::SoundCue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AsyncLoadPublicAddressCue, ElapsedTime) == 0x000028, "Member 'GI_SinglePlayer_C_AsyncLoadPublicAddressCue::ElapsedTime' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.AsyncPlaySystem
// 0x00D0 (0x00D0 - 0x0000)
struct GI_SinglePlayer_C_AsyncPlaySystem final
{
public:
	TSoftObjectPtr<class UFXSystemAsset>          System;                                            // 0x0000(0x0028)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_AsyncParticleParams            SystemParams;                                      // 0x0030(0x00A0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_AsyncPlaySystem) == 0x000010, "Wrong alignment on GI_SinglePlayer_C_AsyncPlaySystem");
static_assert(sizeof(GI_SinglePlayer_C_AsyncPlaySystem) == 0x0000D0, "Wrong size on GI_SinglePlayer_C_AsyncPlaySystem");
static_assert(offsetof(GI_SinglePlayer_C_AsyncPlaySystem, System) == 0x000000, "Member 'GI_SinglePlayer_C_AsyncPlaySystem::System' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AsyncPlaySystem, SystemParams) == 0x000030, "Member 'GI_SinglePlayer_C_AsyncPlaySystem::SystemParams' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.AsyncPlaySound
// 0x00A8 (0x00A8 - 0x0000)
struct GI_SinglePlayer_C_AsyncPlaySound final
{
public:
	TSoftObjectPtr<class USoundCue>               SoundCue;                                          // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	struct FSTRUCT_AsyncSoundParams               SoundParams;                                       // 0x0028(0x0080)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_AsyncPlaySound) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_AsyncPlaySound");
static_assert(sizeof(GI_SinglePlayer_C_AsyncPlaySound) == 0x0000A8, "Wrong size on GI_SinglePlayer_C_AsyncPlaySound");
static_assert(offsetof(GI_SinglePlayer_C_AsyncPlaySound, SoundCue) == 0x000000, "Member 'GI_SinglePlayer_C_AsyncPlaySound::SoundCue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AsyncPlaySound, SoundParams) == 0x000028, "Member 'GI_SinglePlayer_C_AsyncPlaySound::SoundParams' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.AsyncStopSystemAttachments
// 0x0008 (0x0008 - 0x0000)
struct GI_SinglePlayer_C_AsyncStopSystemAttachments final
{
public:
	class USceneComponent*                        SceneComponent;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_AsyncStopSystemAttachments) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_AsyncStopSystemAttachments");
static_assert(sizeof(GI_SinglePlayer_C_AsyncStopSystemAttachments) == 0x000008, "Wrong size on GI_SinglePlayer_C_AsyncStopSystemAttachments");
static_assert(offsetof(GI_SinglePlayer_C_AsyncStopSystemAttachments, SceneComponent) == 0x000000, "Member 'GI_SinglePlayer_C_AsyncStopSystemAttachments::SceneComponent' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.AsyncStopSystemOnComponents
// 0x0010 (0x0010 - 0x0000)
struct GI_SinglePlayer_C_AsyncStopSystemOnComponents final
{
public:
	TArray<class UFXSystemComponent*>             SystemComponents;                                  // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
};
static_assert(alignof(GI_SinglePlayer_C_AsyncStopSystemOnComponents) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_AsyncStopSystemOnComponents");
static_assert(sizeof(GI_SinglePlayer_C_AsyncStopSystemOnComponents) == 0x000010, "Wrong size on GI_SinglePlayer_C_AsyncStopSystemOnComponents");
static_assert(offsetof(GI_SinglePlayer_C_AsyncStopSystemOnComponents, SystemComponents) == 0x000000, "Member 'GI_SinglePlayer_C_AsyncStopSystemOnComponents::SystemComponents' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.AsyncStopSystemOnComponent
// 0x0008 (0x0008 - 0x0000)
struct GI_SinglePlayer_C_AsyncStopSystemOnComponent final
{
public:
	class UFXSystemComponent*                     SystemComponent;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_AsyncStopSystemOnComponent) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_AsyncStopSystemOnComponent");
static_assert(sizeof(GI_SinglePlayer_C_AsyncStopSystemOnComponent) == 0x000008, "Wrong size on GI_SinglePlayer_C_AsyncStopSystemOnComponent");
static_assert(offsetof(GI_SinglePlayer_C_AsyncStopSystemOnComponent, SystemComponent) == 0x000000, "Member 'GI_SinglePlayer_C_AsyncStopSystemOnComponent::SystemComponent' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.AsyncPlaySoundFromComponents
// 0x0038 (0x0038 - 0x0000)
struct GI_SinglePlayer_C_AsyncPlaySoundFromComponents final
{
public:
	TSoftObjectPtr<class USoundCue>               SoundCue;                                          // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	TArray<class UAudioComponent*>                AudioComponents;                                   // 0x0028(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
};
static_assert(alignof(GI_SinglePlayer_C_AsyncPlaySoundFromComponents) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_AsyncPlaySoundFromComponents");
static_assert(sizeof(GI_SinglePlayer_C_AsyncPlaySoundFromComponents) == 0x000038, "Wrong size on GI_SinglePlayer_C_AsyncPlaySoundFromComponents");
static_assert(offsetof(GI_SinglePlayer_C_AsyncPlaySoundFromComponents, SoundCue) == 0x000000, "Member 'GI_SinglePlayer_C_AsyncPlaySoundFromComponents::SoundCue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AsyncPlaySoundFromComponents, AudioComponents) == 0x000028, "Member 'GI_SinglePlayer_C_AsyncPlaySoundFromComponents::AudioComponents' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.AsyncPlaySystemFromComponents
// 0x0038 (0x0038 - 0x0000)
struct GI_SinglePlayer_C_AsyncPlaySystemFromComponents final
{
public:
	TSoftObjectPtr<class UNiagaraSystem>          System;                                            // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	TArray<class UNiagaraComponent*>              SystemComponents;                                  // 0x0028(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
};
static_assert(alignof(GI_SinglePlayer_C_AsyncPlaySystemFromComponents) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_AsyncPlaySystemFromComponents");
static_assert(sizeof(GI_SinglePlayer_C_AsyncPlaySystemFromComponents) == 0x000038, "Wrong size on GI_SinglePlayer_C_AsyncPlaySystemFromComponents");
static_assert(offsetof(GI_SinglePlayer_C_AsyncPlaySystemFromComponents, System) == 0x000000, "Member 'GI_SinglePlayer_C_AsyncPlaySystemFromComponents::System' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AsyncPlaySystemFromComponents, SystemComponents) == 0x000028, "Member 'GI_SinglePlayer_C_AsyncPlaySystemFromComponents::SystemComponents' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.AsyncPlaySystemFromComponent
// 0x0030 (0x0030 - 0x0000)
struct GI_SinglePlayer_C_AsyncPlaySystemFromComponent final
{
public:
	TSoftObjectPtr<class UFXSystemAsset>          System;                                            // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	class UFXSystemComponent*                     SystemComponent;                                   // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_AsyncPlaySystemFromComponent) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_AsyncPlaySystemFromComponent");
static_assert(sizeof(GI_SinglePlayer_C_AsyncPlaySystemFromComponent) == 0x000030, "Wrong size on GI_SinglePlayer_C_AsyncPlaySystemFromComponent");
static_assert(offsetof(GI_SinglePlayer_C_AsyncPlaySystemFromComponent, System) == 0x000000, "Member 'GI_SinglePlayer_C_AsyncPlaySystemFromComponent::System' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AsyncPlaySystemFromComponent, SystemComponent) == 0x000028, "Member 'GI_SinglePlayer_C_AsyncPlaySystemFromComponent::SystemComponent' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.AsyncPlaySoundFromComponent
// 0x0038 (0x0038 - 0x0000)
struct GI_SinglePlayer_C_AsyncPlaySoundFromComponent final
{
public:
	TSoftObjectPtr<class USoundCue>               SoundCue;                                          // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	float                                         FadeInDuration;                                    // 0x0028(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartTime;                                         // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AudioComponent;                                    // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_AsyncPlaySoundFromComponent) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_AsyncPlaySoundFromComponent");
static_assert(sizeof(GI_SinglePlayer_C_AsyncPlaySoundFromComponent) == 0x000038, "Wrong size on GI_SinglePlayer_C_AsyncPlaySoundFromComponent");
static_assert(offsetof(GI_SinglePlayer_C_AsyncPlaySoundFromComponent, SoundCue) == 0x000000, "Member 'GI_SinglePlayer_C_AsyncPlaySoundFromComponent::SoundCue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AsyncPlaySoundFromComponent, FadeInDuration) == 0x000028, "Member 'GI_SinglePlayer_C_AsyncPlaySoundFromComponent::FadeInDuration' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AsyncPlaySoundFromComponent, StartTime) == 0x00002C, "Member 'GI_SinglePlayer_C_AsyncPlaySoundFromComponent::StartTime' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AsyncPlaySoundFromComponent, AudioComponent) == 0x000030, "Member 'GI_SinglePlayer_C_AsyncPlaySoundFromComponent::AudioComponent' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.AsyncPlaySystemAttached
// 0x0090 (0x0090 - 0x0000)
struct GI_SinglePlayer_C_AsyncPlaySystemAttached final
{
public:
	TSoftObjectPtr<class UFXSystemAsset>          System;                                            // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	class USceneComponent*                        AttachToComponent;                                 // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   SocketName;                                        // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RelativeLocation;                                  // 0x0038(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RelativeRotation;                                  // 0x0044(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FSTRUCT_EffectParams                   EffectsParameters;                                 // 0x0050(0x0030)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	struct FLatentObjectEventHandle               OnSpawnEvent;                                      // 0x0080(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
};
static_assert(alignof(GI_SinglePlayer_C_AsyncPlaySystemAttached) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_AsyncPlaySystemAttached");
static_assert(sizeof(GI_SinglePlayer_C_AsyncPlaySystemAttached) == 0x000090, "Wrong size on GI_SinglePlayer_C_AsyncPlaySystemAttached");
static_assert(offsetof(GI_SinglePlayer_C_AsyncPlaySystemAttached, System) == 0x000000, "Member 'GI_SinglePlayer_C_AsyncPlaySystemAttached::System' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AsyncPlaySystemAttached, AttachToComponent) == 0x000028, "Member 'GI_SinglePlayer_C_AsyncPlaySystemAttached::AttachToComponent' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AsyncPlaySystemAttached, SocketName) == 0x000030, "Member 'GI_SinglePlayer_C_AsyncPlaySystemAttached::SocketName' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AsyncPlaySystemAttached, RelativeLocation) == 0x000038, "Member 'GI_SinglePlayer_C_AsyncPlaySystemAttached::RelativeLocation' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AsyncPlaySystemAttached, RelativeRotation) == 0x000044, "Member 'GI_SinglePlayer_C_AsyncPlaySystemAttached::RelativeRotation' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AsyncPlaySystemAttached, EffectsParameters) == 0x000050, "Member 'GI_SinglePlayer_C_AsyncPlaySystemAttached::EffectsParameters' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AsyncPlaySystemAttached, OnSpawnEvent) == 0x000080, "Member 'GI_SinglePlayer_C_AsyncPlaySystemAttached::OnSpawnEvent' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.AsyncPlaySystemAtTransform
// 0x0060 (0x0060 - 0x0000)
struct GI_SinglePlayer_C_AsyncPlaySystemAtTransform final
{
public:
	TSoftObjectPtr<class UFXSystemAsset>          System;                                            // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0030(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_AsyncPlaySystemAtTransform) == 0x000010, "Wrong alignment on GI_SinglePlayer_C_AsyncPlaySystemAtTransform");
static_assert(sizeof(GI_SinglePlayer_C_AsyncPlaySystemAtTransform) == 0x000060, "Wrong size on GI_SinglePlayer_C_AsyncPlaySystemAtTransform");
static_assert(offsetof(GI_SinglePlayer_C_AsyncPlaySystemAtTransform, System) == 0x000000, "Member 'GI_SinglePlayer_C_AsyncPlaySystemAtTransform::System' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AsyncPlaySystemAtTransform, Transform) == 0x000030, "Member 'GI_SinglePlayer_C_AsyncPlaySystemAtTransform::Transform' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.AsyncPlaySoundAttached
// 0x0080 (0x0080 - 0x0000)
struct GI_SinglePlayer_C_AsyncPlaySoundAttached final
{
public:
	TSoftObjectPtr<class USoundCue>               SoundCue;                                          // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	class USceneComponent*                        AttachToComponent;                                 // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   SocketName;                                        // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RelativeLocation;                                  // 0x0038(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RelativeRotation;                                  // 0x0044(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FSTRUCT_EffectParams                   SoundParameters;                                   // 0x0050(0x0030)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_AsyncPlaySoundAttached) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_AsyncPlaySoundAttached");
static_assert(sizeof(GI_SinglePlayer_C_AsyncPlaySoundAttached) == 0x000080, "Wrong size on GI_SinglePlayer_C_AsyncPlaySoundAttached");
static_assert(offsetof(GI_SinglePlayer_C_AsyncPlaySoundAttached, SoundCue) == 0x000000, "Member 'GI_SinglePlayer_C_AsyncPlaySoundAttached::SoundCue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AsyncPlaySoundAttached, AttachToComponent) == 0x000028, "Member 'GI_SinglePlayer_C_AsyncPlaySoundAttached::AttachToComponent' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AsyncPlaySoundAttached, SocketName) == 0x000030, "Member 'GI_SinglePlayer_C_AsyncPlaySoundAttached::SocketName' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AsyncPlaySoundAttached, RelativeLocation) == 0x000038, "Member 'GI_SinglePlayer_C_AsyncPlaySoundAttached::RelativeLocation' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AsyncPlaySoundAttached, RelativeRotation) == 0x000044, "Member 'GI_SinglePlayer_C_AsyncPlaySoundAttached::RelativeRotation' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AsyncPlaySoundAttached, SoundParameters) == 0x000050, "Member 'GI_SinglePlayer_C_AsyncPlaySoundAttached::SoundParameters' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.AsyncPlaySoundAtLocation
// 0x0038 (0x0038 - 0x0000)
struct GI_SinglePlayer_C_AsyncPlaySoundAtLocation final
{
public:
	TSoftObjectPtr<class USoundCue>               SoundCue;                                          // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0028(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_AsyncPlaySoundAtLocation) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_AsyncPlaySoundAtLocation");
static_assert(sizeof(GI_SinglePlayer_C_AsyncPlaySoundAtLocation) == 0x000038, "Wrong size on GI_SinglePlayer_C_AsyncPlaySoundAtLocation");
static_assert(offsetof(GI_SinglePlayer_C_AsyncPlaySoundAtLocation, SoundCue) == 0x000000, "Member 'GI_SinglePlayer_C_AsyncPlaySoundAtLocation::SoundCue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AsyncPlaySoundAtLocation, Location) == 0x000028, "Member 'GI_SinglePlayer_C_AsyncPlaySoundAtLocation::Location' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.AsyncPlaySound2D
// 0x0028 (0x0028 - 0x0000)
struct GI_SinglePlayer_C_AsyncPlaySound2D final
{
public:
	TSoftObjectPtr<class USoundCue>               SoundCue;                                          // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_AsyncPlaySound2D) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_AsyncPlaySound2D");
static_assert(sizeof(GI_SinglePlayer_C_AsyncPlaySound2D) == 0x000028, "Wrong size on GI_SinglePlayer_C_AsyncPlaySound2D");
static_assert(offsetof(GI_SinglePlayer_C_AsyncPlaySound2D, SoundCue) == 0x000000, "Member 'GI_SinglePlayer_C_AsyncPlaySound2D::SoundCue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.AsyncCompleteAchievement
// 0x0020 (0x0020 - 0x0000)
struct GI_SinglePlayer_C_AsyncCompleteAchievement final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDataTableRowHandle                    AchievementHandle;                                 // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	int32                                         UserTag;                                           // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_AsyncCompleteAchievement) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_AsyncCompleteAchievement");
static_assert(sizeof(GI_SinglePlayer_C_AsyncCompleteAchievement) == 0x000020, "Wrong size on GI_SinglePlayer_C_AsyncCompleteAchievement");
static_assert(offsetof(GI_SinglePlayer_C_AsyncCompleteAchievement, PlayerController) == 0x000000, "Member 'GI_SinglePlayer_C_AsyncCompleteAchievement::PlayerController' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AsyncCompleteAchievement, AchievementHandle) == 0x000008, "Member 'GI_SinglePlayer_C_AsyncCompleteAchievement::AchievementHandle' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AsyncCompleteAchievement, UserTag) == 0x000018, "Member 'GI_SinglePlayer_C_AsyncCompleteAchievement::UserTag' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.OnLoaded_5F20C05541B420AAFDF306B06AF3128C
// 0x0008 (0x0008 - 0x0000)
struct GI_SinglePlayer_C_OnLoaded_5F20C05541B420AAFDF306B06AF3128C final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_OnLoaded_5F20C05541B420AAFDF306B06AF3128C) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_OnLoaded_5F20C05541B420AAFDF306B06AF3128C");
static_assert(sizeof(GI_SinglePlayer_C_OnLoaded_5F20C05541B420AAFDF306B06AF3128C) == 0x000008, "Wrong size on GI_SinglePlayer_C_OnLoaded_5F20C05541B420AAFDF306B06AF3128C");
static_assert(offsetof(GI_SinglePlayer_C_OnLoaded_5F20C05541B420AAFDF306B06AF3128C, Loaded) == 0x000000, "Member 'GI_SinglePlayer_C_OnLoaded_5F20C05541B420AAFDF306B06AF3128C::Loaded' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.OnLoaded_8813AF2B47A0C9D07AFC5599A36960DC
// 0x0008 (0x0008 - 0x0000)
struct GI_SinglePlayer_C_OnLoaded_8813AF2B47A0C9D07AFC5599A36960DC final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_OnLoaded_8813AF2B47A0C9D07AFC5599A36960DC) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_OnLoaded_8813AF2B47A0C9D07AFC5599A36960DC");
static_assert(sizeof(GI_SinglePlayer_C_OnLoaded_8813AF2B47A0C9D07AFC5599A36960DC) == 0x000008, "Wrong size on GI_SinglePlayer_C_OnLoaded_8813AF2B47A0C9D07AFC5599A36960DC");
static_assert(offsetof(GI_SinglePlayer_C_OnLoaded_8813AF2B47A0C9D07AFC5599A36960DC, Loaded) == 0x000000, "Member 'GI_SinglePlayer_C_OnLoaded_8813AF2B47A0C9D07AFC5599A36960DC::Loaded' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.OnLoaded_C37B164D45E88D137228229CBD66276C
// 0x0008 (0x0008 - 0x0000)
struct GI_SinglePlayer_C_OnLoaded_C37B164D45E88D137228229CBD66276C final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_OnLoaded_C37B164D45E88D137228229CBD66276C) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_OnLoaded_C37B164D45E88D137228229CBD66276C");
static_assert(sizeof(GI_SinglePlayer_C_OnLoaded_C37B164D45E88D137228229CBD66276C) == 0x000008, "Wrong size on GI_SinglePlayer_C_OnLoaded_C37B164D45E88D137228229CBD66276C");
static_assert(offsetof(GI_SinglePlayer_C_OnLoaded_C37B164D45E88D137228229CBD66276C, Loaded) == 0x000000, "Member 'GI_SinglePlayer_C_OnLoaded_C37B164D45E88D137228229CBD66276C::Loaded' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.OnLoaded_902273224FDEF301060954979477BC10
// 0x0008 (0x0008 - 0x0000)
struct GI_SinglePlayer_C_OnLoaded_902273224FDEF301060954979477BC10 final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_OnLoaded_902273224FDEF301060954979477BC10) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_OnLoaded_902273224FDEF301060954979477BC10");
static_assert(sizeof(GI_SinglePlayer_C_OnLoaded_902273224FDEF301060954979477BC10) == 0x000008, "Wrong size on GI_SinglePlayer_C_OnLoaded_902273224FDEF301060954979477BC10");
static_assert(offsetof(GI_SinglePlayer_C_OnLoaded_902273224FDEF301060954979477BC10, Loaded) == 0x000000, "Member 'GI_SinglePlayer_C_OnLoaded_902273224FDEF301060954979477BC10::Loaded' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.OnLoaded_27DE819F4EE56836C47D57B5FC573DF3
// 0x0008 (0x0008 - 0x0000)
struct GI_SinglePlayer_C_OnLoaded_27DE819F4EE56836C47D57B5FC573DF3 final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_OnLoaded_27DE819F4EE56836C47D57B5FC573DF3) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_OnLoaded_27DE819F4EE56836C47D57B5FC573DF3");
static_assert(sizeof(GI_SinglePlayer_C_OnLoaded_27DE819F4EE56836C47D57B5FC573DF3) == 0x000008, "Wrong size on GI_SinglePlayer_C_OnLoaded_27DE819F4EE56836C47D57B5FC573DF3");
static_assert(offsetof(GI_SinglePlayer_C_OnLoaded_27DE819F4EE56836C47D57B5FC573DF3, Loaded) == 0x000000, "Member 'GI_SinglePlayer_C_OnLoaded_27DE819F4EE56836C47D57B5FC573DF3::Loaded' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.OnLoaded_0AE72DE7432C87D6E53955A12395D8C0
// 0x0008 (0x0008 - 0x0000)
struct GI_SinglePlayer_C_OnLoaded_0AE72DE7432C87D6E53955A12395D8C0 final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_OnLoaded_0AE72DE7432C87D6E53955A12395D8C0) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_OnLoaded_0AE72DE7432C87D6E53955A12395D8C0");
static_assert(sizeof(GI_SinglePlayer_C_OnLoaded_0AE72DE7432C87D6E53955A12395D8C0) == 0x000008, "Wrong size on GI_SinglePlayer_C_OnLoaded_0AE72DE7432C87D6E53955A12395D8C0");
static_assert(offsetof(GI_SinglePlayer_C_OnLoaded_0AE72DE7432C87D6E53955A12395D8C0, Loaded) == 0x000000, "Member 'GI_SinglePlayer_C_OnLoaded_0AE72DE7432C87D6E53955A12395D8C0::Loaded' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.OnLoaded_A8C87E1843AC479AC213708C6EA1A5CC
// 0x0008 (0x0008 - 0x0000)
struct GI_SinglePlayer_C_OnLoaded_A8C87E1843AC479AC213708C6EA1A5CC final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_OnLoaded_A8C87E1843AC479AC213708C6EA1A5CC) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_OnLoaded_A8C87E1843AC479AC213708C6EA1A5CC");
static_assert(sizeof(GI_SinglePlayer_C_OnLoaded_A8C87E1843AC479AC213708C6EA1A5CC) == 0x000008, "Wrong size on GI_SinglePlayer_C_OnLoaded_A8C87E1843AC479AC213708C6EA1A5CC");
static_assert(offsetof(GI_SinglePlayer_C_OnLoaded_A8C87E1843AC479AC213708C6EA1A5CC, Loaded) == 0x000000, "Member 'GI_SinglePlayer_C_OnLoaded_A8C87E1843AC479AC213708C6EA1A5CC::Loaded' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.OnLoaded_E3F818954DA5FE57518113AEA34DB5C9
// 0x0008 (0x0008 - 0x0000)
struct GI_SinglePlayer_C_OnLoaded_E3F818954DA5FE57518113AEA34DB5C9 final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_OnLoaded_E3F818954DA5FE57518113AEA34DB5C9) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_OnLoaded_E3F818954DA5FE57518113AEA34DB5C9");
static_assert(sizeof(GI_SinglePlayer_C_OnLoaded_E3F818954DA5FE57518113AEA34DB5C9) == 0x000008, "Wrong size on GI_SinglePlayer_C_OnLoaded_E3F818954DA5FE57518113AEA34DB5C9");
static_assert(offsetof(GI_SinglePlayer_C_OnLoaded_E3F818954DA5FE57518113AEA34DB5C9, Loaded) == 0x000000, "Member 'GI_SinglePlayer_C_OnLoaded_E3F818954DA5FE57518113AEA34DB5C9::Loaded' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.OnLoaded_AD81EB1046C74F24ACB5A9951ACF845E
// 0x0008 (0x0008 - 0x0000)
struct GI_SinglePlayer_C_OnLoaded_AD81EB1046C74F24ACB5A9951ACF845E final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_OnLoaded_AD81EB1046C74F24ACB5A9951ACF845E) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_OnLoaded_AD81EB1046C74F24ACB5A9951ACF845E");
static_assert(sizeof(GI_SinglePlayer_C_OnLoaded_AD81EB1046C74F24ACB5A9951ACF845E) == 0x000008, "Wrong size on GI_SinglePlayer_C_OnLoaded_AD81EB1046C74F24ACB5A9951ACF845E");
static_assert(offsetof(GI_SinglePlayer_C_OnLoaded_AD81EB1046C74F24ACB5A9951ACF845E, Loaded) == 0x000000, "Member 'GI_SinglePlayer_C_OnLoaded_AD81EB1046C74F24ACB5A9951ACF845E::Loaded' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.OnSuccess_1E3D796F4FD7EC1D6937C7BD8033813A
// 0x0010 (0x0010 - 0x0000)
struct GI_SinglePlayer_C_OnSuccess_1E3D796F4FD7EC1D6937C7BD8033813A final
{
public:
	class FName                                   WrittenAchievementName;                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WrittenProgress;                                   // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         WrittenUserTag;                                    // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_OnSuccess_1E3D796F4FD7EC1D6937C7BD8033813A) == 0x000004, "Wrong alignment on GI_SinglePlayer_C_OnSuccess_1E3D796F4FD7EC1D6937C7BD8033813A");
static_assert(sizeof(GI_SinglePlayer_C_OnSuccess_1E3D796F4FD7EC1D6937C7BD8033813A) == 0x000010, "Wrong size on GI_SinglePlayer_C_OnSuccess_1E3D796F4FD7EC1D6937C7BD8033813A");
static_assert(offsetof(GI_SinglePlayer_C_OnSuccess_1E3D796F4FD7EC1D6937C7BD8033813A, WrittenAchievementName) == 0x000000, "Member 'GI_SinglePlayer_C_OnSuccess_1E3D796F4FD7EC1D6937C7BD8033813A::WrittenAchievementName' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnSuccess_1E3D796F4FD7EC1D6937C7BD8033813A, WrittenProgress) == 0x000008, "Member 'GI_SinglePlayer_C_OnSuccess_1E3D796F4FD7EC1D6937C7BD8033813A::WrittenProgress' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnSuccess_1E3D796F4FD7EC1D6937C7BD8033813A, WrittenUserTag) == 0x00000C, "Member 'GI_SinglePlayer_C_OnSuccess_1E3D796F4FD7EC1D6937C7BD8033813A::WrittenUserTag' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.OnFailure_1E3D796F4FD7EC1D6937C7BD8033813A
// 0x0010 (0x0010 - 0x0000)
struct GI_SinglePlayer_C_OnFailure_1E3D796F4FD7EC1D6937C7BD8033813A final
{
public:
	class FName                                   WrittenAchievementName;                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WrittenProgress;                                   // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         WrittenUserTag;                                    // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_OnFailure_1E3D796F4FD7EC1D6937C7BD8033813A) == 0x000004, "Wrong alignment on GI_SinglePlayer_C_OnFailure_1E3D796F4FD7EC1D6937C7BD8033813A");
static_assert(sizeof(GI_SinglePlayer_C_OnFailure_1E3D796F4FD7EC1D6937C7BD8033813A) == 0x000010, "Wrong size on GI_SinglePlayer_C_OnFailure_1E3D796F4FD7EC1D6937C7BD8033813A");
static_assert(offsetof(GI_SinglePlayer_C_OnFailure_1E3D796F4FD7EC1D6937C7BD8033813A, WrittenAchievementName) == 0x000000, "Member 'GI_SinglePlayer_C_OnFailure_1E3D796F4FD7EC1D6937C7BD8033813A::WrittenAchievementName' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnFailure_1E3D796F4FD7EC1D6937C7BD8033813A, WrittenProgress) == 0x000008, "Member 'GI_SinglePlayer_C_OnFailure_1E3D796F4FD7EC1D6937C7BD8033813A::WrittenProgress' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnFailure_1E3D796F4FD7EC1D6937C7BD8033813A, WrittenUserTag) == 0x00000C, "Member 'GI_SinglePlayer_C_OnFailure_1E3D796F4FD7EC1D6937C7BD8033813A::WrittenUserTag' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.LowerSecurityLevel
// 0x0028 (0x0028 - 0x0000)
struct GI_SinglePlayer_C_LowerSecurityLevel final
{
public:
	int32                                         SubtractAmount;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NewSecurityLevel;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentSecurityLevel;                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   LevelNameToUse;                                    // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetSecurityForLevel_Result;               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetCurrentLevelName_Result;               // 0x001C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_LowerSecurityLevel) == 0x000004, "Wrong alignment on GI_SinglePlayer_C_LowerSecurityLevel");
static_assert(sizeof(GI_SinglePlayer_C_LowerSecurityLevel) == 0x000028, "Wrong size on GI_SinglePlayer_C_LowerSecurityLevel");
static_assert(offsetof(GI_SinglePlayer_C_LowerSecurityLevel, SubtractAmount) == 0x000000, "Member 'GI_SinglePlayer_C_LowerSecurityLevel::SubtractAmount' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_LowerSecurityLevel, NewSecurityLevel) == 0x000004, "Member 'GI_SinglePlayer_C_LowerSecurityLevel::NewSecurityLevel' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_LowerSecurityLevel, CurrentSecurityLevel) == 0x000008, "Member 'GI_SinglePlayer_C_LowerSecurityLevel::CurrentSecurityLevel' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_LowerSecurityLevel, LevelNameToUse) == 0x00000C, "Member 'GI_SinglePlayer_C_LowerSecurityLevel::LevelNameToUse' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_LowerSecurityLevel, CallFunc_Greater_IntInt_ReturnValue) == 0x000014, "Member 'GI_SinglePlayer_C_LowerSecurityLevel::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_LowerSecurityLevel, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000015, "Member 'GI_SinglePlayer_C_LowerSecurityLevel::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_LowerSecurityLevel, CallFunc_GetSecurityForLevel_Result) == 0x000018, "Member 'GI_SinglePlayer_C_LowerSecurityLevel::CallFunc_GetSecurityForLevel_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_LowerSecurityLevel, CallFunc_GetCurrentLevelName_Result) == 0x00001C, "Member 'GI_SinglePlayer_C_LowerSecurityLevel::CallFunc_GetCurrentLevelName_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_LowerSecurityLevel, CallFunc_Subtract_IntInt_ReturnValue) == 0x000024, "Member 'GI_SinglePlayer_C_LowerSecurityLevel::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.HasCompletedStoryQuest
// 0x0014 (0x0014 - 0x0000)
struct GI_SinglePlayer_C_HasCompletedStoryQuest final
{
public:
	class FName                                   QuestName;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Completed;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Map_Find_Value;                           // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_HasCompletedStoryQuest) == 0x000004, "Wrong alignment on GI_SinglePlayer_C_HasCompletedStoryQuest");
static_assert(sizeof(GI_SinglePlayer_C_HasCompletedStoryQuest) == 0x000014, "Wrong size on GI_SinglePlayer_C_HasCompletedStoryQuest");
static_assert(offsetof(GI_SinglePlayer_C_HasCompletedStoryQuest, QuestName) == 0x000000, "Member 'GI_SinglePlayer_C_HasCompletedStoryQuest::QuestName' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_HasCompletedStoryQuest, Completed) == 0x000008, "Member 'GI_SinglePlayer_C_HasCompletedStoryQuest::Completed' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_HasCompletedStoryQuest, CallFunc_Map_Find_Value) == 0x00000C, "Member 'GI_SinglePlayer_C_HasCompletedStoryQuest::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_HasCompletedStoryQuest, CallFunc_Map_Find_ReturnValue) == 0x000010, "Member 'GI_SinglePlayer_C_HasCompletedStoryQuest::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.GetStoryQuestCompletionTimestamp
// 0x0014 (0x0014 - 0x0000)
struct GI_SinglePlayer_C_GetStoryQuestCompletionTimestamp final
{
public:
	class FName                                   QuestName;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timestamp;                                         // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Map_Find_Value;                           // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_GetStoryQuestCompletionTimestamp) == 0x000004, "Wrong alignment on GI_SinglePlayer_C_GetStoryQuestCompletionTimestamp");
static_assert(sizeof(GI_SinglePlayer_C_GetStoryQuestCompletionTimestamp) == 0x000014, "Wrong size on GI_SinglePlayer_C_GetStoryQuestCompletionTimestamp");
static_assert(offsetof(GI_SinglePlayer_C_GetStoryQuestCompletionTimestamp, QuestName) == 0x000000, "Member 'GI_SinglePlayer_C_GetStoryQuestCompletionTimestamp::QuestName' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetStoryQuestCompletionTimestamp, Timestamp) == 0x000008, "Member 'GI_SinglePlayer_C_GetStoryQuestCompletionTimestamp::Timestamp' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetStoryQuestCompletionTimestamp, CallFunc_Map_Find_Value) == 0x00000C, "Member 'GI_SinglePlayer_C_GetStoryQuestCompletionTimestamp::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetStoryQuestCompletionTimestamp, CallFunc_Map_Find_ReturnValue) == 0x000010, "Member 'GI_SinglePlayer_C_GetStoryQuestCompletionTimestamp::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.SetCompletedStoryQuest
// 0x00D0 (0x00D0 - 0x0000)
struct GI_SinglePlayer_C_SetCompletedStoryQuest final
{
public:
	class FName                                   QuestName;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Value;                                             // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LogString;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	float                                         NotificationDelay;                                 // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   NotificationText;                                  // 0x0028(0x0018)(Edit, BlueprintVisible)
	struct FSTRUCT_StoryQuestInfo                 CallFunc_GetDataTableRowFromName_OutRow;           // 0x0040(0x0020)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TextIsEmpty_ReturnValue;                  // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_63[0x5];                                       // 0x0063(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_NameToString_ReturnValue_1;          // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_NameToString_ReturnValue_2;          // 0x00A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasCompletedStoryQuest_Completed;         // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Map_Remove_ReturnValue;                   // 0x00CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CB[0x1];                                       // 0x00CB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetPlayTimeInSeconds_ReturnValue;         // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_SetCompletedStoryQuest) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_SetCompletedStoryQuest");
static_assert(sizeof(GI_SinglePlayer_C_SetCompletedStoryQuest) == 0x0000D0, "Wrong size on GI_SinglePlayer_C_SetCompletedStoryQuest");
static_assert(offsetof(GI_SinglePlayer_C_SetCompletedStoryQuest, QuestName) == 0x000000, "Member 'GI_SinglePlayer_C_SetCompletedStoryQuest::QuestName' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetCompletedStoryQuest, Value) == 0x000008, "Member 'GI_SinglePlayer_C_SetCompletedStoryQuest::Value' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetCompletedStoryQuest, LogString) == 0x000010, "Member 'GI_SinglePlayer_C_SetCompletedStoryQuest::LogString' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetCompletedStoryQuest, NotificationDelay) == 0x000020, "Member 'GI_SinglePlayer_C_SetCompletedStoryQuest::NotificationDelay' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetCompletedStoryQuest, NotificationText) == 0x000028, "Member 'GI_SinglePlayer_C_SetCompletedStoryQuest::NotificationText' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetCompletedStoryQuest, CallFunc_GetDataTableRowFromName_OutRow) == 0x000040, "Member 'GI_SinglePlayer_C_SetCompletedStoryQuest::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetCompletedStoryQuest, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000060, "Member 'GI_SinglePlayer_C_SetCompletedStoryQuest::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetCompletedStoryQuest, CallFunc_TextIsEmpty_ReturnValue) == 0x000061, "Member 'GI_SinglePlayer_C_SetCompletedStoryQuest::CallFunc_TextIsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetCompletedStoryQuest, CallFunc_Not_PreBool_ReturnValue) == 0x000062, "Member 'GI_SinglePlayer_C_SetCompletedStoryQuest::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetCompletedStoryQuest, CallFunc_Conv_NameToString_ReturnValue) == 0x000068, "Member 'GI_SinglePlayer_C_SetCompletedStoryQuest::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetCompletedStoryQuest, CallFunc_Concat_StrStr_ReturnValue) == 0x000078, "Member 'GI_SinglePlayer_C_SetCompletedStoryQuest::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetCompletedStoryQuest, CallFunc_Conv_NameToString_ReturnValue_1) == 0x000088, "Member 'GI_SinglePlayer_C_SetCompletedStoryQuest::CallFunc_Conv_NameToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetCompletedStoryQuest, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000098, "Member 'GI_SinglePlayer_C_SetCompletedStoryQuest::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetCompletedStoryQuest, CallFunc_Conv_NameToString_ReturnValue_2) == 0x0000A8, "Member 'GI_SinglePlayer_C_SetCompletedStoryQuest::CallFunc_Conv_NameToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetCompletedStoryQuest, CallFunc_Concat_StrStr_ReturnValue_2) == 0x0000B8, "Member 'GI_SinglePlayer_C_SetCompletedStoryQuest::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetCompletedStoryQuest, CallFunc_HasCompletedStoryQuest_Completed) == 0x0000C8, "Member 'GI_SinglePlayer_C_SetCompletedStoryQuest::CallFunc_HasCompletedStoryQuest_Completed' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetCompletedStoryQuest, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x0000C9, "Member 'GI_SinglePlayer_C_SetCompletedStoryQuest::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetCompletedStoryQuest, CallFunc_Map_Remove_ReturnValue) == 0x0000CA, "Member 'GI_SinglePlayer_C_SetCompletedStoryQuest::CallFunc_Map_Remove_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetCompletedStoryQuest, CallFunc_GetPlayTimeInSeconds_ReturnValue) == 0x0000CC, "Member 'GI_SinglePlayer_C_SetCompletedStoryQuest::CallFunc_GetPlayTimeInSeconds_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.SetSecurityLevel
// 0x0030 (0x0030 - 0x0000)
struct GI_SinglePlayer_C_SetSecurityLevel final
{
public:
	int32                                         NewSecurityLevel;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    ZeroSecurityAchievementHandle;                     // 0x0008(0x0010)(Edit, BlueprintVisible, NoDestructor)
	class FName                                   LevelNameToUse;                                    // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetCurrentLevelName_Result;               // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TryIncrementOrderedAchievement_Result;    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_SetSecurityLevel) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_SetSecurityLevel");
static_assert(sizeof(GI_SinglePlayer_C_SetSecurityLevel) == 0x000030, "Wrong size on GI_SinglePlayer_C_SetSecurityLevel");
static_assert(offsetof(GI_SinglePlayer_C_SetSecurityLevel, NewSecurityLevel) == 0x000000, "Member 'GI_SinglePlayer_C_SetSecurityLevel::NewSecurityLevel' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetSecurityLevel, ZeroSecurityAchievementHandle) == 0x000008, "Member 'GI_SinglePlayer_C_SetSecurityLevel::ZeroSecurityAchievementHandle' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetSecurityLevel, LevelNameToUse) == 0x000018, "Member 'GI_SinglePlayer_C_SetSecurityLevel::LevelNameToUse' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetSecurityLevel, CallFunc_GetCurrentLevelName_Result) == 0x000020, "Member 'GI_SinglePlayer_C_SetSecurityLevel::CallFunc_GetCurrentLevelName_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetSecurityLevel, CallFunc_TryIncrementOrderedAchievement_Result) == 0x000028, "Member 'GI_SinglePlayer_C_SetSecurityLevel::CallFunc_TryIncrementOrderedAchievement_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetSecurityLevel, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000029, "Member 'GI_SinglePlayer_C_SetSecurityLevel::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.IsLoadingScreenVisible
// 0x0003 (0x0003 - 0x0000)
struct GI_SinglePlayer_C_IsLoadingScreenVisible final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_IsLoadingScreenVisible) == 0x000001, "Wrong alignment on GI_SinglePlayer_C_IsLoadingScreenVisible");
static_assert(sizeof(GI_SinglePlayer_C_IsLoadingScreenVisible) == 0x000003, "Wrong size on GI_SinglePlayer_C_IsLoadingScreenVisible");
static_assert(offsetof(GI_SinglePlayer_C_IsLoadingScreenVisible, Result) == 0x000000, "Member 'GI_SinglePlayer_C_IsLoadingScreenVisible::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_IsLoadingScreenVisible, CallFunc_IsVisible_ReturnValue) == 0x000001, "Member 'GI_SinglePlayer_C_IsLoadingScreenVisible::CallFunc_IsVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_IsLoadingScreenVisible, CallFunc_IsValid_ReturnValue) == 0x000002, "Member 'GI_SinglePlayer_C_IsLoadingScreenVisible::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.HasAssignedCurrentLevel
// 0x0002 (0x0002 - 0x0000)
struct GI_SinglePlayer_C_HasAssignedCurrentLevel final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_HasAssignedCurrentLevel) == 0x000001, "Wrong alignment on GI_SinglePlayer_C_HasAssignedCurrentLevel");
static_assert(sizeof(GI_SinglePlayer_C_HasAssignedCurrentLevel) == 0x000002, "Wrong size on GI_SinglePlayer_C_HasAssignedCurrentLevel");
static_assert(offsetof(GI_SinglePlayer_C_HasAssignedCurrentLevel, Result) == 0x000000, "Member 'GI_SinglePlayer_C_HasAssignedCurrentLevel::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_HasAssignedCurrentLevel, CallFunc_NotEqual_NameName_ReturnValue) == 0x000001, "Member 'GI_SinglePlayer_C_HasAssignedCurrentLevel::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.HasAssignedPreviousLevel
// 0x0002 (0x0002 - 0x0000)
struct GI_SinglePlayer_C_HasAssignedPreviousLevel final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_HasAssignedPreviousLevel) == 0x000001, "Wrong alignment on GI_SinglePlayer_C_HasAssignedPreviousLevel");
static_assert(sizeof(GI_SinglePlayer_C_HasAssignedPreviousLevel) == 0x000002, "Wrong size on GI_SinglePlayer_C_HasAssignedPreviousLevel");
static_assert(offsetof(GI_SinglePlayer_C_HasAssignedPreviousLevel, Result) == 0x000000, "Member 'GI_SinglePlayer_C_HasAssignedPreviousLevel::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_HasAssignedPreviousLevel, CallFunc_NotEqual_NameName_ReturnValue) == 0x000001, "Member 'GI_SinglePlayer_C_HasAssignedPreviousLevel::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.GetCurrentLevelName
// 0x0028 (0x0028 - 0x0000)
struct GI_SinglePlayer_C_GetCurrentLevelName final
{
public:
	class FName                                   Result;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetCurrentLevelName_ReturnValue;          // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_GetCurrentLevelName) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_GetCurrentLevelName");
static_assert(sizeof(GI_SinglePlayer_C_GetCurrentLevelName) == 0x000028, "Wrong size on GI_SinglePlayer_C_GetCurrentLevelName");
static_assert(offsetof(GI_SinglePlayer_C_GetCurrentLevelName, Result) == 0x000000, "Member 'GI_SinglePlayer_C_GetCurrentLevelName::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetCurrentLevelName, CallFunc_GetCurrentLevelName_ReturnValue) == 0x000008, "Member 'GI_SinglePlayer_C_GetCurrentLevelName::CallFunc_GetCurrentLevelName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetCurrentLevelName, CallFunc_Conv_StringToName_ReturnValue) == 0x000018, "Member 'GI_SinglePlayer_C_GetCurrentLevelName::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetCurrentLevelName, CallFunc_NotEqual_NameName_ReturnValue) == 0x000020, "Member 'GI_SinglePlayer_C_GetCurrentLevelName::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.GetPreviousLevelName
// 0x0008 (0x0008 - 0x0000)
struct GI_SinglePlayer_C_GetPreviousLevelName final
{
public:
	class FName                                   Result;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_GetPreviousLevelName) == 0x000004, "Wrong alignment on GI_SinglePlayer_C_GetPreviousLevelName");
static_assert(sizeof(GI_SinglePlayer_C_GetPreviousLevelName) == 0x000008, "Wrong size on GI_SinglePlayer_C_GetPreviousLevelName");
static_assert(offsetof(GI_SinglePlayer_C_GetPreviousLevelName, Result) == 0x000000, "Member 'GI_SinglePlayer_C_GetPreviousLevelName::Result' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.GetLevelCollectionFromPrimaryLevelName
// 0x00B0 (0x00B0 - 0x0000)
struct GI_SinglePlayer_C_GetLevelCollectionFromPrimaryLevelName final
{
public:
	class FName                                   PrimaryLevelName;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDataTableRowHandle                    Result;                                            // 0x0008(0x0010)(Parm, OutParm, NoDestructor)
	class FName                                   CurrentRowName;                                    // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             CurrentDataTable;                                  // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDataTableRowHandle                    K2Node_MakeStruct_DataTableRowHandle;              // 0x0038(0x0010)(NoDestructor)
	struct FDataTableRowHandle                    K2Node_MakeStruct_DataTableRowHandle_1;            // 0x0048(0x0010)(NoDestructor)
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_NameToString_ReturnValue_1;          // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Contains_ReturnValue;                     // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    K2Node_MakeStruct_DataTableRowHandle_2;            // 0x0080(0x0010)(NoDestructor)
	TArray<class FName>                           CallFunc_GetDataTableRowNames_OutRowNames;         // 0x0090(0x0010)(ReferenceParm)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_GetLevelCollectionFromPrimaryLevelName) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_GetLevelCollectionFromPrimaryLevelName");
static_assert(sizeof(GI_SinglePlayer_C_GetLevelCollectionFromPrimaryLevelName) == 0x0000B0, "Wrong size on GI_SinglePlayer_C_GetLevelCollectionFromPrimaryLevelName");
static_assert(offsetof(GI_SinglePlayer_C_GetLevelCollectionFromPrimaryLevelName, PrimaryLevelName) == 0x000000, "Member 'GI_SinglePlayer_C_GetLevelCollectionFromPrimaryLevelName::PrimaryLevelName' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetLevelCollectionFromPrimaryLevelName, Result) == 0x000008, "Member 'GI_SinglePlayer_C_GetLevelCollectionFromPrimaryLevelName::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetLevelCollectionFromPrimaryLevelName, CurrentRowName) == 0x000018, "Member 'GI_SinglePlayer_C_GetLevelCollectionFromPrimaryLevelName::CurrentRowName' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetLevelCollectionFromPrimaryLevelName, CurrentDataTable) == 0x000020, "Member 'GI_SinglePlayer_C_GetLevelCollectionFromPrimaryLevelName::CurrentDataTable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetLevelCollectionFromPrimaryLevelName, Temp_int_Loop_Counter_Variable) == 0x000028, "Member 'GI_SinglePlayer_C_GetLevelCollectionFromPrimaryLevelName::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetLevelCollectionFromPrimaryLevelName, CallFunc_IsValid_ReturnValue) == 0x00002C, "Member 'GI_SinglePlayer_C_GetLevelCollectionFromPrimaryLevelName::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetLevelCollectionFromPrimaryLevelName, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'GI_SinglePlayer_C_GetLevelCollectionFromPrimaryLevelName::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetLevelCollectionFromPrimaryLevelName, Temp_int_Array_Index_Variable) == 0x000034, "Member 'GI_SinglePlayer_C_GetLevelCollectionFromPrimaryLevelName::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetLevelCollectionFromPrimaryLevelName, K2Node_MakeStruct_DataTableRowHandle) == 0x000038, "Member 'GI_SinglePlayer_C_GetLevelCollectionFromPrimaryLevelName::K2Node_MakeStruct_DataTableRowHandle' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetLevelCollectionFromPrimaryLevelName, K2Node_MakeStruct_DataTableRowHandle_1) == 0x000048, "Member 'GI_SinglePlayer_C_GetLevelCollectionFromPrimaryLevelName::K2Node_MakeStruct_DataTableRowHandle_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetLevelCollectionFromPrimaryLevelName, CallFunc_Conv_NameToString_ReturnValue) == 0x000058, "Member 'GI_SinglePlayer_C_GetLevelCollectionFromPrimaryLevelName::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetLevelCollectionFromPrimaryLevelName, CallFunc_Conv_NameToString_ReturnValue_1) == 0x000068, "Member 'GI_SinglePlayer_C_GetLevelCollectionFromPrimaryLevelName::CallFunc_Conv_NameToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetLevelCollectionFromPrimaryLevelName, CallFunc_Contains_ReturnValue) == 0x000078, "Member 'GI_SinglePlayer_C_GetLevelCollectionFromPrimaryLevelName::CallFunc_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetLevelCollectionFromPrimaryLevelName, K2Node_MakeStruct_DataTableRowHandle_2) == 0x000080, "Member 'GI_SinglePlayer_C_GetLevelCollectionFromPrimaryLevelName::K2Node_MakeStruct_DataTableRowHandle_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetLevelCollectionFromPrimaryLevelName, CallFunc_GetDataTableRowNames_OutRowNames) == 0x000090, "Member 'GI_SinglePlayer_C_GetLevelCollectionFromPrimaryLevelName::CallFunc_GetDataTableRowNames_OutRowNames' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetLevelCollectionFromPrimaryLevelName, CallFunc_Array_Get_Item) == 0x0000A0, "Member 'GI_SinglePlayer_C_GetLevelCollectionFromPrimaryLevelName::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetLevelCollectionFromPrimaryLevelName, CallFunc_Array_Length_ReturnValue) == 0x0000A8, "Member 'GI_SinglePlayer_C_GetLevelCollectionFromPrimaryLevelName::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetLevelCollectionFromPrimaryLevelName, CallFunc_Less_IntInt_ReturnValue) == 0x0000AC, "Member 'GI_SinglePlayer_C_GetLevelCollectionFromPrimaryLevelName::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.GetPrimaryStreamingLevel
// 0x0090 (0x0090 - 0x0000)
struct GI_SinglePlayer_C_GetPrimaryStreamingLevel final
{
public:
	class ULevelStreaming*                        Level;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULevelStreaming*                        StreamingLevel;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   SearchLevelName;                                   // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetCurrentLevelName_Result;               // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelStreaming*                        CallFunc_GetStreamingLevel_ReturnValue;            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetCurrentLevelName_Result_1;             // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_NameToString_ReturnValue_1;          // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FSTRUCT_LevelCollection                CallFunc_GetDataTableRowFromName_OutRow;           // 0x0068(0x0010)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_StartsWith_ReturnValue;                   // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A[0x2];                                       // 0x007A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue;                          // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_GetPrimaryStreamingLevel) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_GetPrimaryStreamingLevel");
static_assert(sizeof(GI_SinglePlayer_C_GetPrimaryStreamingLevel) == 0x000090, "Wrong size on GI_SinglePlayer_C_GetPrimaryStreamingLevel");
static_assert(offsetof(GI_SinglePlayer_C_GetPrimaryStreamingLevel, Level) == 0x000000, "Member 'GI_SinglePlayer_C_GetPrimaryStreamingLevel::Level' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetPrimaryStreamingLevel, StreamingLevel) == 0x000008, "Member 'GI_SinglePlayer_C_GetPrimaryStreamingLevel::StreamingLevel' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetPrimaryStreamingLevel, SearchLevelName) == 0x000010, "Member 'GI_SinglePlayer_C_GetPrimaryStreamingLevel::SearchLevelName' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetPrimaryStreamingLevel, Temp_int_Array_Index_Variable) == 0x000018, "Member 'GI_SinglePlayer_C_GetPrimaryStreamingLevel::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetPrimaryStreamingLevel, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'GI_SinglePlayer_C_GetPrimaryStreamingLevel::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetPrimaryStreamingLevel, CallFunc_GetCurrentLevelName_Result) == 0x000020, "Member 'GI_SinglePlayer_C_GetPrimaryStreamingLevel::CallFunc_GetCurrentLevelName_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetPrimaryStreamingLevel, CallFunc_Subtract_IntInt_ReturnValue) == 0x000028, "Member 'GI_SinglePlayer_C_GetPrimaryStreamingLevel::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetPrimaryStreamingLevel, CallFunc_Conv_NameToString_ReturnValue) == 0x000030, "Member 'GI_SinglePlayer_C_GetPrimaryStreamingLevel::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetPrimaryStreamingLevel, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000040, "Member 'GI_SinglePlayer_C_GetPrimaryStreamingLevel::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetPrimaryStreamingLevel, CallFunc_IsValid_ReturnValue) == 0x000041, "Member 'GI_SinglePlayer_C_GetPrimaryStreamingLevel::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetPrimaryStreamingLevel, CallFunc_GetStreamingLevel_ReturnValue) == 0x000048, "Member 'GI_SinglePlayer_C_GetPrimaryStreamingLevel::CallFunc_GetStreamingLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetPrimaryStreamingLevel, CallFunc_GetCurrentLevelName_Result_1) == 0x000050, "Member 'GI_SinglePlayer_C_GetPrimaryStreamingLevel::CallFunc_GetCurrentLevelName_Result_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetPrimaryStreamingLevel, CallFunc_Conv_NameToString_ReturnValue_1) == 0x000058, "Member 'GI_SinglePlayer_C_GetPrimaryStreamingLevel::CallFunc_Conv_NameToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetPrimaryStreamingLevel, CallFunc_GetDataTableRowFromName_OutRow) == 0x000068, "Member 'GI_SinglePlayer_C_GetPrimaryStreamingLevel::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetPrimaryStreamingLevel, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000078, "Member 'GI_SinglePlayer_C_GetPrimaryStreamingLevel::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetPrimaryStreamingLevel, CallFunc_StartsWith_ReturnValue) == 0x000079, "Member 'GI_SinglePlayer_C_GetPrimaryStreamingLevel::CallFunc_StartsWith_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetPrimaryStreamingLevel, CallFunc_Array_Length_ReturnValue) == 0x00007C, "Member 'GI_SinglePlayer_C_GetPrimaryStreamingLevel::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetPrimaryStreamingLevel, CallFunc_Array_Get_Item) == 0x000080, "Member 'GI_SinglePlayer_C_GetPrimaryStreamingLevel::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetPrimaryStreamingLevel, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000088, "Member 'GI_SinglePlayer_C_GetPrimaryStreamingLevel::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetPrimaryStreamingLevel, CallFunc_Max_ReturnValue) == 0x00008C, "Member 'GI_SinglePlayer_C_GetPrimaryStreamingLevel::CallFunc_Max_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.GetSharedLevelNamesForMapMove
// 0x0150 (0x0150 - 0x0000)
struct GI_SinglePlayer_C_GetSharedLevelNamesForMapMove final
{
public:
	struct FDataTableRowHandle                    TargetLevelCollection;                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	TArray<class FName>                           SharedLevelNames;                                  // 0x0010(0x0010)(Parm, OutParm)
	TSet<class FName>                             TargetLevelNames;                                  // 0x0020(0x0050)(Edit, BlueprintVisible)
	TSet<class FName>                             SourceLevelNames;                                  // 0x0070(0x0050)(Edit, BlueprintVisible)
	TSet<class FName>                             CallFunc_Set_Intersection_Result;                  // 0x00C0(0x0050)()
	TArray<class FName>                           CallFunc_Set_ToArray_Result;                       // 0x0110(0x0010)(ReferenceParm)
	struct FSTRUCT_LevelCollection                CallFunc_GetDataTableRowFromName_OutRow;           // 0x0120(0x0010)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_LevelCollection                CallFunc_GetDataTableRowFromName_OutRow_1;         // 0x0138(0x0010)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue_1;    // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_GetSharedLevelNamesForMapMove) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_GetSharedLevelNamesForMapMove");
static_assert(sizeof(GI_SinglePlayer_C_GetSharedLevelNamesForMapMove) == 0x000150, "Wrong size on GI_SinglePlayer_C_GetSharedLevelNamesForMapMove");
static_assert(offsetof(GI_SinglePlayer_C_GetSharedLevelNamesForMapMove, TargetLevelCollection) == 0x000000, "Member 'GI_SinglePlayer_C_GetSharedLevelNamesForMapMove::TargetLevelCollection' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetSharedLevelNamesForMapMove, SharedLevelNames) == 0x000010, "Member 'GI_SinglePlayer_C_GetSharedLevelNamesForMapMove::SharedLevelNames' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetSharedLevelNamesForMapMove, TargetLevelNames) == 0x000020, "Member 'GI_SinglePlayer_C_GetSharedLevelNamesForMapMove::TargetLevelNames' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetSharedLevelNamesForMapMove, SourceLevelNames) == 0x000070, "Member 'GI_SinglePlayer_C_GetSharedLevelNamesForMapMove::SourceLevelNames' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetSharedLevelNamesForMapMove, CallFunc_Set_Intersection_Result) == 0x0000C0, "Member 'GI_SinglePlayer_C_GetSharedLevelNamesForMapMove::CallFunc_Set_Intersection_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetSharedLevelNamesForMapMove, CallFunc_Set_ToArray_Result) == 0x000110, "Member 'GI_SinglePlayer_C_GetSharedLevelNamesForMapMove::CallFunc_Set_ToArray_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetSharedLevelNamesForMapMove, CallFunc_GetDataTableRowFromName_OutRow) == 0x000120, "Member 'GI_SinglePlayer_C_GetSharedLevelNamesForMapMove::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetSharedLevelNamesForMapMove, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000130, "Member 'GI_SinglePlayer_C_GetSharedLevelNamesForMapMove::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetSharedLevelNamesForMapMove, CallFunc_GetDataTableRowFromName_OutRow_1) == 0x000138, "Member 'GI_SinglePlayer_C_GetSharedLevelNamesForMapMove::CallFunc_GetDataTableRowFromName_OutRow_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetSharedLevelNamesForMapMove, CallFunc_GetDataTableRowFromName_ReturnValue_1) == 0x000148, "Member 'GI_SinglePlayer_C_GetSharedLevelNamesForMapMove::CallFunc_GetDataTableRowFromName_ReturnValue_1' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.GetLevelAtmosphereSettings
// 0x0128 (0x0128 - 0x0000)
struct GI_SinglePlayer_C_GetLevelAtmosphereSettings final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_LevelAtmosphereSettings        Settings;                                          // 0x0008(0x0024)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_LevelInfo                      CallFunc_GetLevelInfo_LevelInfo;                   // 0x0030(0x00C8)(HasGetValueTypeHash)
	bool                                          CallFunc_GetLevelInfo_Found;                       // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F9[0x3];                                       // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_LevelAtmosphereSettings        CallFunc_GetDataTableRowFromName_OutRow;           // 0x00FC(0x0024)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_GetLevelAtmosphereSettings) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_GetLevelAtmosphereSettings");
static_assert(sizeof(GI_SinglePlayer_C_GetLevelAtmosphereSettings) == 0x000128, "Wrong size on GI_SinglePlayer_C_GetLevelAtmosphereSettings");
static_assert(offsetof(GI_SinglePlayer_C_GetLevelAtmosphereSettings, LevelName) == 0x000000, "Member 'GI_SinglePlayer_C_GetLevelAtmosphereSettings::LevelName' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetLevelAtmosphereSettings, Settings) == 0x000008, "Member 'GI_SinglePlayer_C_GetLevelAtmosphereSettings::Settings' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetLevelAtmosphereSettings, CallFunc_NotEqual_NameName_ReturnValue) == 0x00002C, "Member 'GI_SinglePlayer_C_GetLevelAtmosphereSettings::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetLevelAtmosphereSettings, CallFunc_GetLevelInfo_LevelInfo) == 0x000030, "Member 'GI_SinglePlayer_C_GetLevelAtmosphereSettings::CallFunc_GetLevelInfo_LevelInfo' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetLevelAtmosphereSettings, CallFunc_GetLevelInfo_Found) == 0x0000F8, "Member 'GI_SinglePlayer_C_GetLevelAtmosphereSettings::CallFunc_GetLevelInfo_Found' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetLevelAtmosphereSettings, CallFunc_GetDataTableRowFromName_OutRow) == 0x0000FC, "Member 'GI_SinglePlayer_C_GetLevelAtmosphereSettings::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetLevelAtmosphereSettings, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000120, "Member 'GI_SinglePlayer_C_GetLevelAtmosphereSettings::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.CanRespawnOnLevel
// 0x00E8 (0x00E8 - 0x0000)
struct GI_SinglePlayer_C_CanRespawnOnLevel final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_MissionDifficultySettings      CallFunc_GetMissionDifficultySettings_Settings;    // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_LevelInfo                      CallFunc_GetLevelInfo_LevelInfo;                   // 0x0018(0x00C8)(HasGetValueTypeHash)
	bool                                          CallFunc_GetLevelInfo_Found;                       // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_CanRespawnOnLevel) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_CanRespawnOnLevel");
static_assert(sizeof(GI_SinglePlayer_C_CanRespawnOnLevel) == 0x0000E8, "Wrong size on GI_SinglePlayer_C_CanRespawnOnLevel");
static_assert(offsetof(GI_SinglePlayer_C_CanRespawnOnLevel, LevelName) == 0x000000, "Member 'GI_SinglePlayer_C_CanRespawnOnLevel::LevelName' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_CanRespawnOnLevel, Result) == 0x000008, "Member 'GI_SinglePlayer_C_CanRespawnOnLevel::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_CanRespawnOnLevel, CallFunc_GetMissionDifficultySettings_Settings) == 0x00000C, "Member 'GI_SinglePlayer_C_CanRespawnOnLevel::CallFunc_GetMissionDifficultySettings_Settings' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_CanRespawnOnLevel, CallFunc_GetLevelInfo_LevelInfo) == 0x000018, "Member 'GI_SinglePlayer_C_CanRespawnOnLevel::CallFunc_GetLevelInfo_LevelInfo' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_CanRespawnOnLevel, CallFunc_GetLevelInfo_Found) == 0x0000E0, "Member 'GI_SinglePlayer_C_CanRespawnOnLevel::CallFunc_GetLevelInfo_Found' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_CanRespawnOnLevel, CallFunc_Not_PreBool_ReturnValue) == 0x0000E1, "Member 'GI_SinglePlayer_C_CanRespawnOnLevel::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_CanRespawnOnLevel, K2Node_SwitchEnum_CmpSuccess) == 0x0000E2, "Member 'GI_SinglePlayer_C_CanRespawnOnLevel::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.HasActivatedAnyRespawnChambers
// 0x000C (0x000C - 0x0000)
struct GI_SinglePlayer_C_HasActivatedAnyRespawnChambers final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Set_Length_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_HasActivatedAnyRespawnChambers) == 0x000004, "Wrong alignment on GI_SinglePlayer_C_HasActivatedAnyRespawnChambers");
static_assert(sizeof(GI_SinglePlayer_C_HasActivatedAnyRespawnChambers) == 0x00000C, "Wrong size on GI_SinglePlayer_C_HasActivatedAnyRespawnChambers");
static_assert(offsetof(GI_SinglePlayer_C_HasActivatedAnyRespawnChambers, Result) == 0x000000, "Member 'GI_SinglePlayer_C_HasActivatedAnyRespawnChambers::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_HasActivatedAnyRespawnChambers, CallFunc_Set_Length_ReturnValue) == 0x000004, "Member 'GI_SinglePlayer_C_HasActivatedAnyRespawnChambers::CallFunc_Set_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_HasActivatedAnyRespawnChambers, CallFunc_Greater_IntInt_ReturnValue) == 0x000008, "Member 'GI_SinglePlayer_C_HasActivatedAnyRespawnChambers::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.IsRespawnChamberActiveForLevel
// 0x000C (0x000C - 0x0000)
struct GI_SinglePlayer_C_IsRespawnChamberActiveForLevel final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Set_Contains_ReturnValue;                 // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_IsRespawnChamberActiveForLevel) == 0x000004, "Wrong alignment on GI_SinglePlayer_C_IsRespawnChamberActiveForLevel");
static_assert(sizeof(GI_SinglePlayer_C_IsRespawnChamberActiveForLevel) == 0x00000C, "Wrong size on GI_SinglePlayer_C_IsRespawnChamberActiveForLevel");
static_assert(offsetof(GI_SinglePlayer_C_IsRespawnChamberActiveForLevel, LevelName) == 0x000000, "Member 'GI_SinglePlayer_C_IsRespawnChamberActiveForLevel::LevelName' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_IsRespawnChamberActiveForLevel, Result) == 0x000008, "Member 'GI_SinglePlayer_C_IsRespawnChamberActiveForLevel::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_IsRespawnChamberActiveForLevel, CallFunc_Set_Contains_ReturnValue) == 0x000009, "Member 'GI_SinglePlayer_C_IsRespawnChamberActiveForLevel::CallFunc_Set_Contains_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.GetHackerGender
// 0x0001 (0x0001 - 0x0000)
struct GI_SinglePlayer_C_GetHackerGender final
{
public:
	ENUM_HackerGender                             Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_GetHackerGender) == 0x000001, "Wrong alignment on GI_SinglePlayer_C_GetHackerGender");
static_assert(sizeof(GI_SinglePlayer_C_GetHackerGender) == 0x000001, "Wrong size on GI_SinglePlayer_C_GetHackerGender");
static_assert(offsetof(GI_SinglePlayer_C_GetHackerGender, Result) == 0x000000, "Member 'GI_SinglePlayer_C_GetHackerGender::Result' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.GetLevelInfo
// 0x01A8 (0x01A8 - 0x0000)
struct GI_SinglePlayer_C_GetLevelInfo final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_LevelInfo                      LevelInfo;                                         // 0x0008(0x00C8)(Parm, OutParm, HasGetValueTypeHash)
	bool                                          Found;                                             // 0x00D0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_LevelInfo                      CallFunc_GetDataTableRowFromName_OutRow;           // 0x00D8(0x00C8)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_GetLevelInfo) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_GetLevelInfo");
static_assert(sizeof(GI_SinglePlayer_C_GetLevelInfo) == 0x0001A8, "Wrong size on GI_SinglePlayer_C_GetLevelInfo");
static_assert(offsetof(GI_SinglePlayer_C_GetLevelInfo, LevelName) == 0x000000, "Member 'GI_SinglePlayer_C_GetLevelInfo::LevelName' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetLevelInfo, LevelInfo) == 0x000008, "Member 'GI_SinglePlayer_C_GetLevelInfo::LevelInfo' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetLevelInfo, Found) == 0x0000D0, "Member 'GI_SinglePlayer_C_GetLevelInfo::Found' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetLevelInfo, CallFunc_GetDataTableRowFromName_OutRow) == 0x0000D8, "Member 'GI_SinglePlayer_C_GetLevelInfo::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetLevelInfo, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x0001A0, "Member 'GI_SinglePlayer_C_GetLevelInfo::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.GetSecurityForLevel
// 0x00E8 (0x00E8 - 0x0000)
struct GI_SinglePlayer_C_GetSecurityForLevel final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Result;                                            // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_LevelInfo                      CallFunc_GetDataTableRowFromName_OutRow;           // 0x0010(0x00C8)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Map_Find_Value;                           // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_GetSecurityForLevel) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_GetSecurityForLevel");
static_assert(sizeof(GI_SinglePlayer_C_GetSecurityForLevel) == 0x0000E8, "Wrong size on GI_SinglePlayer_C_GetSecurityForLevel");
static_assert(offsetof(GI_SinglePlayer_C_GetSecurityForLevel, LevelName) == 0x000000, "Member 'GI_SinglePlayer_C_GetSecurityForLevel::LevelName' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetSecurityForLevel, Result) == 0x000008, "Member 'GI_SinglePlayer_C_GetSecurityForLevel::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetSecurityForLevel, CallFunc_GetDataTableRowFromName_OutRow) == 0x000010, "Member 'GI_SinglePlayer_C_GetSecurityForLevel::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetSecurityForLevel, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x0000D8, "Member 'GI_SinglePlayer_C_GetSecurityForLevel::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetSecurityForLevel, CallFunc_Map_Find_Value) == 0x0000DC, "Member 'GI_SinglePlayer_C_GetSecurityForLevel::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetSecurityForLevel, CallFunc_Map_Find_ReturnValue) == 0x0000E0, "Member 'GI_SinglePlayer_C_GetSecurityForLevel::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.GetSecurityForCurrentLevel
// 0x0010 (0x0010 - 0x0000)
struct GI_SinglePlayer_C_GetSecurityForCurrentLevel final
{
public:
	int32                                         Result;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetCurrentLevelName_Result;               // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSecurityForLevel_Result;               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_GetSecurityForCurrentLevel) == 0x000004, "Wrong alignment on GI_SinglePlayer_C_GetSecurityForCurrentLevel");
static_assert(sizeof(GI_SinglePlayer_C_GetSecurityForCurrentLevel) == 0x000010, "Wrong size on GI_SinglePlayer_C_GetSecurityForCurrentLevel");
static_assert(offsetof(GI_SinglePlayer_C_GetSecurityForCurrentLevel, Result) == 0x000000, "Member 'GI_SinglePlayer_C_GetSecurityForCurrentLevel::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetSecurityForCurrentLevel, CallFunc_GetCurrentLevelName_Result) == 0x000004, "Member 'GI_SinglePlayer_C_GetSecurityForCurrentLevel::CallFunc_GetCurrentLevelName_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetSecurityForCurrentLevel, CallFunc_GetSecurityForLevel_Result) == 0x00000C, "Member 'GI_SinglePlayer_C_GetSecurityForCurrentLevel::CallFunc_GetSecurityForLevel_Result' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.StashTransferItemsFromBag
// 0x0058 (0x0058 - 0x0000)
struct GI_SinglePlayer_C_StashTransferItemsFromBag final
{
public:
	class UInventoryBag_C*                        OriginBag;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UITEM_Base_C*>                   ItemsInBag;                                        // 0x0008(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           CallFunc_RemoveItem_RemovedItem;                   // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UITEM_Base_C*>                   CallFunc_GetItemArray_Items;                       // 0x0040(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_StashTransferItemsFromBag) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_StashTransferItemsFromBag");
static_assert(sizeof(GI_SinglePlayer_C_StashTransferItemsFromBag) == 0x000058, "Wrong size on GI_SinglePlayer_C_StashTransferItemsFromBag");
static_assert(offsetof(GI_SinglePlayer_C_StashTransferItemsFromBag, OriginBag) == 0x000000, "Member 'GI_SinglePlayer_C_StashTransferItemsFromBag::OriginBag' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_StashTransferItemsFromBag, ItemsInBag) == 0x000008, "Member 'GI_SinglePlayer_C_StashTransferItemsFromBag::ItemsInBag' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_StashTransferItemsFromBag, Temp_int_Array_Index_Variable) == 0x000018, "Member 'GI_SinglePlayer_C_StashTransferItemsFromBag::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_StashTransferItemsFromBag, CallFunc_Array_Get_Item) == 0x000020, "Member 'GI_SinglePlayer_C_StashTransferItemsFromBag::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_StashTransferItemsFromBag, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'GI_SinglePlayer_C_StashTransferItemsFromBag::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_StashTransferItemsFromBag, Temp_int_Loop_Counter_Variable) == 0x00002C, "Member 'GI_SinglePlayer_C_StashTransferItemsFromBag::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_StashTransferItemsFromBag, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'GI_SinglePlayer_C_StashTransferItemsFromBag::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_StashTransferItemsFromBag, CallFunc_Add_IntInt_ReturnValue) == 0x000034, "Member 'GI_SinglePlayer_C_StashTransferItemsFromBag::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_StashTransferItemsFromBag, CallFunc_RemoveItem_RemovedItem) == 0x000038, "Member 'GI_SinglePlayer_C_StashTransferItemsFromBag::CallFunc_RemoveItem_RemovedItem' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_StashTransferItemsFromBag, CallFunc_GetItemArray_Items) == 0x000040, "Member 'GI_SinglePlayer_C_StashTransferItemsFromBag::CallFunc_GetItemArray_Items' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_StashTransferItemsFromBag, CallFunc_Array_Add_ReturnValue) == 0x000050, "Member 'GI_SinglePlayer_C_StashTransferItemsFromBag::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_StashTransferItemsFromBag, CallFunc_IsValid_ReturnValue) == 0x000054, "Member 'GI_SinglePlayer_C_StashTransferItemsFromBag::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.TransferStashedItemsToBag
// 0x0038 (0x0038 - 0x0000)
struct GI_SinglePlayer_C_TransferStashedItemsToBag final
{
public:
	class UInventoryBag_C*                        TargetBag;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UITEM_Base_C*>                   TransferItems;                                     // 0x0008(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AddItem_Result;                           // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_TransferStashedItemsToBag) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_TransferStashedItemsToBag");
static_assert(sizeof(GI_SinglePlayer_C_TransferStashedItemsToBag) == 0x000038, "Wrong size on GI_SinglePlayer_C_TransferStashedItemsToBag");
static_assert(offsetof(GI_SinglePlayer_C_TransferStashedItemsToBag, TargetBag) == 0x000000, "Member 'GI_SinglePlayer_C_TransferStashedItemsToBag::TargetBag' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TransferStashedItemsToBag, TransferItems) == 0x000008, "Member 'GI_SinglePlayer_C_TransferStashedItemsToBag::TransferItems' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TransferStashedItemsToBag, Temp_int_Array_Index_Variable) == 0x000018, "Member 'GI_SinglePlayer_C_TransferStashedItemsToBag::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TransferStashedItemsToBag, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'GI_SinglePlayer_C_TransferStashedItemsToBag::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TransferStashedItemsToBag, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'GI_SinglePlayer_C_TransferStashedItemsToBag::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TransferStashedItemsToBag, CallFunc_Array_Get_Item) == 0x000028, "Member 'GI_SinglePlayer_C_TransferStashedItemsToBag::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TransferStashedItemsToBag, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'GI_SinglePlayer_C_TransferStashedItemsToBag::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TransferStashedItemsToBag, CallFunc_AddItem_Result) == 0x000034, "Member 'GI_SinglePlayer_C_TransferStashedItemsToBag::CallFunc_AddItem_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TransferStashedItemsToBag, CallFunc_Less_IntInt_ReturnValue) == 0x000035, "Member 'GI_SinglePlayer_C_TransferStashedItemsToBag::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.GetComputerNodesForLevel
// 0x00E8 (0x00E8 - 0x0000)
struct GI_SinglePlayer_C_GetComputerNodesForLevel final
{
public:
	class FName                                   Level;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RemainingNodes;                                    // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_LevelInfo                      CallFunc_GetDataTableRowFromName_OutRow;           // 0x0010(0x00C8)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Map_Find_Value;                           // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_GetComputerNodesForLevel) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_GetComputerNodesForLevel");
static_assert(sizeof(GI_SinglePlayer_C_GetComputerNodesForLevel) == 0x0000E8, "Wrong size on GI_SinglePlayer_C_GetComputerNodesForLevel");
static_assert(offsetof(GI_SinglePlayer_C_GetComputerNodesForLevel, Level) == 0x000000, "Member 'GI_SinglePlayer_C_GetComputerNodesForLevel::Level' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetComputerNodesForLevel, RemainingNodes) == 0x000008, "Member 'GI_SinglePlayer_C_GetComputerNodesForLevel::RemainingNodes' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetComputerNodesForLevel, CallFunc_GetDataTableRowFromName_OutRow) == 0x000010, "Member 'GI_SinglePlayer_C_GetComputerNodesForLevel::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetComputerNodesForLevel, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x0000D8, "Member 'GI_SinglePlayer_C_GetComputerNodesForLevel::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetComputerNodesForLevel, CallFunc_Map_Find_Value) == 0x0000DC, "Member 'GI_SinglePlayer_C_GetComputerNodesForLevel::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetComputerNodesForLevel, CallFunc_Map_Find_ReturnValue) == 0x0000E0, "Member 'GI_SinglePlayer_C_GetComputerNodesForLevel::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.GetComputerNodesForCurrentLevel
// 0x0010 (0x0010 - 0x0000)
struct GI_SinglePlayer_C_GetComputerNodesForCurrentLevel final
{
public:
	int32                                         RemainingNodes;                                    // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetCurrentLevelName_Result;               // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetComputerNodesForLevel_RemainingNodes;  // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_GetComputerNodesForCurrentLevel) == 0x000004, "Wrong alignment on GI_SinglePlayer_C_GetComputerNodesForCurrentLevel");
static_assert(sizeof(GI_SinglePlayer_C_GetComputerNodesForCurrentLevel) == 0x000010, "Wrong size on GI_SinglePlayer_C_GetComputerNodesForCurrentLevel");
static_assert(offsetof(GI_SinglePlayer_C_GetComputerNodesForCurrentLevel, RemainingNodes) == 0x000000, "Member 'GI_SinglePlayer_C_GetComputerNodesForCurrentLevel::RemainingNodes' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetComputerNodesForCurrentLevel, CallFunc_GetCurrentLevelName_Result) == 0x000004, "Member 'GI_SinglePlayer_C_GetComputerNodesForCurrentLevel::CallFunc_GetCurrentLevelName_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetComputerNodesForCurrentLevel, CallFunc_GetComputerNodesForLevel_RemainingNodes) == 0x00000C, "Member 'GI_SinglePlayer_C_GetComputerNodesForCurrentLevel::CallFunc_GetComputerNodesForLevel_RemainingNodes' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.SetCurrentComputerNodes
// 0x001C (0x001C - 0x0000)
struct GI_SinglePlayer_C_SetCurrentComputerNodes final
{
public:
	int32                                         NewCount;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PreviousCount;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetComputerNodesForCurrentLevel_RemainingNodes; // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetCurrentLevelName_Result;               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_SetCurrentComputerNodes) == 0x000004, "Wrong alignment on GI_SinglePlayer_C_SetCurrentComputerNodes");
static_assert(sizeof(GI_SinglePlayer_C_SetCurrentComputerNodes) == 0x00001C, "Wrong size on GI_SinglePlayer_C_SetCurrentComputerNodes");
static_assert(offsetof(GI_SinglePlayer_C_SetCurrentComputerNodes, NewCount) == 0x000000, "Member 'GI_SinglePlayer_C_SetCurrentComputerNodes::NewCount' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetCurrentComputerNodes, PreviousCount) == 0x000004, "Member 'GI_SinglePlayer_C_SetCurrentComputerNodes::PreviousCount' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetCurrentComputerNodes, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000008, "Member 'GI_SinglePlayer_C_SetCurrentComputerNodes::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetCurrentComputerNodes, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000009, "Member 'GI_SinglePlayer_C_SetCurrentComputerNodes::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetCurrentComputerNodes, CallFunc_GetComputerNodesForCurrentLevel_RemainingNodes) == 0x00000C, "Member 'GI_SinglePlayer_C_SetCurrentComputerNodes::CallFunc_GetComputerNodesForCurrentLevel_RemainingNodes' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetCurrentComputerNodes, CallFunc_GetCurrentLevelName_Result) == 0x000010, "Member 'GI_SinglePlayer_C_SetCurrentComputerNodes::CallFunc_GetCurrentLevelName_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetCurrentComputerNodes, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000018, "Member 'GI_SinglePlayer_C_SetCurrentComputerNodes::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.GetLevelNames
// 0x0020 (0x0020 - 0x0000)
struct GI_SinglePlayer_C_GetLevelNames final
{
public:
	TArray<class FName>                           Levels;                                            // 0x0000(0x0010)(Parm, OutParm)
	TArray<class FName>                           CallFunc_GetDataTableRowNames_OutRowNames;         // 0x0010(0x0010)(ReferenceParm)
};
static_assert(alignof(GI_SinglePlayer_C_GetLevelNames) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_GetLevelNames");
static_assert(sizeof(GI_SinglePlayer_C_GetLevelNames) == 0x000020, "Wrong size on GI_SinglePlayer_C_GetLevelNames");
static_assert(offsetof(GI_SinglePlayer_C_GetLevelNames, Levels) == 0x000000, "Member 'GI_SinglePlayer_C_GetLevelNames::Levels' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetLevelNames, CallFunc_GetDataTableRowNames_OutRowNames) == 0x000010, "Member 'GI_SinglePlayer_C_GetLevelNames::CallFunc_GetDataTableRowNames_OutRowNames' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.GetVisitedLevels
// 0x0010 (0x0010 - 0x0000)
struct GI_SinglePlayer_C_GetVisitedLevels final
{
public:
	TArray<class FName>                           VisitedLevels_0;                                   // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(GI_SinglePlayer_C_GetVisitedLevels) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_GetVisitedLevels");
static_assert(sizeof(GI_SinglePlayer_C_GetVisitedLevels) == 0x000010, "Wrong size on GI_SinglePlayer_C_GetVisitedLevels");
static_assert(offsetof(GI_SinglePlayer_C_GetVisitedLevels, VisitedLevels_0) == 0x000000, "Member 'GI_SinglePlayer_C_GetVisitedLevels::VisitedLevels_0' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.GetAutoSaveName
// 0x0010 (0x0010 - 0x0000)
struct GI_SinglePlayer_C_GetAutoSaveName final
{
public:
	class FString                                 Result;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_GetAutoSaveName) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_GetAutoSaveName");
static_assert(sizeof(GI_SinglePlayer_C_GetAutoSaveName) == 0x000010, "Wrong size on GI_SinglePlayer_C_GetAutoSaveName");
static_assert(offsetof(GI_SinglePlayer_C_GetAutoSaveName, Result) == 0x000000, "Member 'GI_SinglePlayer_C_GetAutoSaveName::Result' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.SaveGameInternal
// 0x0050 (0x0050 - 0x0000)
struct GI_SinglePlayer_C_SaveGameInternal final
{
public:
	class FString                                 SaveName;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         UserIndex;                                         // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UStreamingSaveGameSession*              Session;                                           // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStreamingSaveGameSession*              CallFunc_GetGameSession_ReturnValue;               // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AsyncSaveGame_ReturnValue;                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsStreamingLevels_Result;                 // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_Hacker_Simple_C*                  K2Node_DynamicCast_AsPAWN_Hacker_Simple;           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_SaveGameInternal) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_SaveGameInternal");
static_assert(sizeof(GI_SinglePlayer_C_SaveGameInternal) == 0x000050, "Wrong size on GI_SinglePlayer_C_SaveGameInternal");
static_assert(offsetof(GI_SinglePlayer_C_SaveGameInternal, SaveName) == 0x000000, "Member 'GI_SinglePlayer_C_SaveGameInternal::SaveName' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SaveGameInternal, UserIndex) == 0x000010, "Member 'GI_SinglePlayer_C_SaveGameInternal::UserIndex' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SaveGameInternal, Result) == 0x000014, "Member 'GI_SinglePlayer_C_SaveGameInternal::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SaveGameInternal, Session) == 0x000018, "Member 'GI_SinglePlayer_C_SaveGameInternal::Session' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SaveGameInternal, CallFunc_GetGameSession_ReturnValue) == 0x000020, "Member 'GI_SinglePlayer_C_SaveGameInternal::CallFunc_GetGameSession_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SaveGameInternal, CallFunc_AsyncSaveGame_ReturnValue) == 0x000028, "Member 'GI_SinglePlayer_C_SaveGameInternal::CallFunc_AsyncSaveGame_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SaveGameInternal, CallFunc_IsStreamingLevels_Result) == 0x000029, "Member 'GI_SinglePlayer_C_SaveGameInternal::CallFunc_IsStreamingLevels_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SaveGameInternal, CallFunc_GetPlayerPawn_ReturnValue) == 0x000030, "Member 'GI_SinglePlayer_C_SaveGameInternal::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SaveGameInternal, CallFunc_Not_PreBool_ReturnValue) == 0x000038, "Member 'GI_SinglePlayer_C_SaveGameInternal::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SaveGameInternal, K2Node_DynamicCast_AsPAWN_Hacker_Simple) == 0x000040, "Member 'GI_SinglePlayer_C_SaveGameInternal::K2Node_DynamicCast_AsPAWN_Hacker_Simple' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SaveGameInternal, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'GI_SinglePlayer_C_SaveGameInternal::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.AutoSaveWithDelay
// 0x0030 (0x0030 - 0x0000)
struct GI_SinglePlayer_C_AutoSaveWithDelay final
{
public:
	float                                         DelayTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         UserIndex;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ConditionalAutoSave_Result;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x000C(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0020(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_IsTimerActiveHandle_ReturnValue;       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_AutoSaveWithDelay) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_AutoSaveWithDelay");
static_assert(sizeof(GI_SinglePlayer_C_AutoSaveWithDelay) == 0x000030, "Wrong size on GI_SinglePlayer_C_AutoSaveWithDelay");
static_assert(offsetof(GI_SinglePlayer_C_AutoSaveWithDelay, DelayTime) == 0x000000, "Member 'GI_SinglePlayer_C_AutoSaveWithDelay::DelayTime' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AutoSaveWithDelay, UserIndex) == 0x000004, "Member 'GI_SinglePlayer_C_AutoSaveWithDelay::UserIndex' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AutoSaveWithDelay, CallFunc_ConditionalAutoSave_Result) == 0x000008, "Member 'GI_SinglePlayer_C_AutoSaveWithDelay::CallFunc_ConditionalAutoSave_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AutoSaveWithDelay, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000009, "Member 'GI_SinglePlayer_C_AutoSaveWithDelay::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AutoSaveWithDelay, K2Node_CreateDelegate_OutputDelegate) == 0x00000C, "Member 'GI_SinglePlayer_C_AutoSaveWithDelay::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AutoSaveWithDelay, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000020, "Member 'GI_SinglePlayer_C_AutoSaveWithDelay::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AutoSaveWithDelay, CallFunc_K2_IsTimerActiveHandle_ReturnValue) == 0x000028, "Member 'GI_SinglePlayer_C_AutoSaveWithDelay::CallFunc_K2_IsTimerActiveHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AutoSaveWithDelay, CallFunc_Not_PreBool_ReturnValue) == 0x000029, "Member 'GI_SinglePlayer_C_AutoSaveWithDelay::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.ConditionalAutoSave
// 0x0038 (0x0038 - 0x0000)
struct GI_SinglePlayer_C_ConditionalAutoSave final
{
public:
	int32                                         UserIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_Hacker_Simple_C*                  HackerPawn;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsThreatenedByAnyExplosive_Result;        // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_Hacker_Simple_C*                  K2Node_DynamicCast_AsPAWN_Hacker_Simple;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_ConditionalAutoSave) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_ConditionalAutoSave");
static_assert(sizeof(GI_SinglePlayer_C_ConditionalAutoSave) == 0x000038, "Wrong size on GI_SinglePlayer_C_ConditionalAutoSave");
static_assert(offsetof(GI_SinglePlayer_C_ConditionalAutoSave, UserIndex) == 0x000000, "Member 'GI_SinglePlayer_C_ConditionalAutoSave::UserIndex' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ConditionalAutoSave, Result) == 0x000004, "Member 'GI_SinglePlayer_C_ConditionalAutoSave::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ConditionalAutoSave, HackerPawn) == 0x000008, "Member 'GI_SinglePlayer_C_ConditionalAutoSave::HackerPawn' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ConditionalAutoSave, CallFunc_IsThreatenedByAnyExplosive_Result) == 0x000010, "Member 'GI_SinglePlayer_C_ConditionalAutoSave::CallFunc_IsThreatenedByAnyExplosive_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ConditionalAutoSave, CallFunc_GetPlayerPawn_ReturnValue) == 0x000018, "Member 'GI_SinglePlayer_C_ConditionalAutoSave::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ConditionalAutoSave, CallFunc_Not_PreBool_ReturnValue) == 0x000020, "Member 'GI_SinglePlayer_C_ConditionalAutoSave::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ConditionalAutoSave, K2Node_DynamicCast_AsPAWN_Hacker_Simple) == 0x000028, "Member 'GI_SinglePlayer_C_ConditionalAutoSave::K2Node_DynamicCast_AsPAWN_Hacker_Simple' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ConditionalAutoSave, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'GI_SinglePlayer_C_ConditionalAutoSave::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.AutoSave
// 0x0028 (0x0028 - 0x0000)
struct GI_SinglePlayer_C_AutoSave final
{
public:
	int32                                         UserIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_Hacker_Implant_C*                 K2Node_DynamicCast_AsPAWN_Hacker_Implant;          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SaveGameInternal_Result;                  // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UWIDGET_PlayerHUD_C*                    CallFunc_GetNeuralHUD_Result;                      // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_AutoSave) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_AutoSave");
static_assert(sizeof(GI_SinglePlayer_C_AutoSave) == 0x000028, "Wrong size on GI_SinglePlayer_C_AutoSave");
static_assert(offsetof(GI_SinglePlayer_C_AutoSave, UserIndex) == 0x000000, "Member 'GI_SinglePlayer_C_AutoSave::UserIndex' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AutoSave, CallFunc_GetPlayerPawn_ReturnValue) == 0x000008, "Member 'GI_SinglePlayer_C_AutoSave::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AutoSave, K2Node_DynamicCast_AsPAWN_Hacker_Implant) == 0x000010, "Member 'GI_SinglePlayer_C_AutoSave::K2Node_DynamicCast_AsPAWN_Hacker_Implant' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AutoSave, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'GI_SinglePlayer_C_AutoSave::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AutoSave, CallFunc_SaveGameInternal_Result) == 0x000019, "Member 'GI_SinglePlayer_C_AutoSave::CallFunc_SaveGameInternal_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AutoSave, CallFunc_GetNeuralHUD_Result) == 0x000020, "Member 'GI_SinglePlayer_C_AutoSave::CallFunc_GetNeuralHUD_Result' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.AutoLoad
// 0x0028 (0x0028 - 0x0000)
struct GI_SinglePlayer_C_AutoLoad final
{
public:
	int32                                         UserIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStreamingSaveGameSession*              CallFunc_GetGameSession_ReturnValue;               // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsStreamingLevels_Result;                 // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LoadGameWithEvent_ReturnValue;            // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_AutoLoad) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_AutoLoad");
static_assert(sizeof(GI_SinglePlayer_C_AutoLoad) == 0x000028, "Wrong size on GI_SinglePlayer_C_AutoLoad");
static_assert(offsetof(GI_SinglePlayer_C_AutoLoad, UserIndex) == 0x000000, "Member 'GI_SinglePlayer_C_AutoLoad::UserIndex' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AutoLoad, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'GI_SinglePlayer_C_AutoLoad::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AutoLoad, CallFunc_GetGameSession_ReturnValue) == 0x000018, "Member 'GI_SinglePlayer_C_AutoLoad::CallFunc_GetGameSession_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AutoLoad, CallFunc_IsStreamingLevels_Result) == 0x000020, "Member 'GI_SinglePlayer_C_AutoLoad::CallFunc_IsStreamingLevels_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AutoLoad, CallFunc_LoadGameWithEvent_ReturnValue) == 0x000021, "Member 'GI_SinglePlayer_C_AutoLoad::CallFunc_LoadGameWithEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AutoLoad, CallFunc_Not_PreBool_ReturnValue) == 0x000022, "Member 'GI_SinglePlayer_C_AutoLoad::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.QuickSave
// 0x0030 (0x0030 - 0x0000)
struct GI_SinglePlayer_C_QuickSave final
{
public:
	int32                                         UserIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SaveGameInternal_Result;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_Hacker_Implant_C*                 K2Node_DynamicCast_AsPAWN_Hacker_Implant;          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWIDGET_PlayerHUD_C*                    CallFunc_GetNeuralHUD_Result;                      // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_QuickSave) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_QuickSave");
static_assert(sizeof(GI_SinglePlayer_C_QuickSave) == 0x000030, "Wrong size on GI_SinglePlayer_C_QuickSave");
static_assert(offsetof(GI_SinglePlayer_C_QuickSave, UserIndex) == 0x000000, "Member 'GI_SinglePlayer_C_QuickSave::UserIndex' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_QuickSave, CallFunc_GetPlayerPawn_ReturnValue) == 0x000008, "Member 'GI_SinglePlayer_C_QuickSave::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_QuickSave, CallFunc_SaveGameInternal_Result) == 0x000010, "Member 'GI_SinglePlayer_C_QuickSave::CallFunc_SaveGameInternal_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_QuickSave, K2Node_DynamicCast_AsPAWN_Hacker_Implant) == 0x000018, "Member 'GI_SinglePlayer_C_QuickSave::K2Node_DynamicCast_AsPAWN_Hacker_Implant' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_QuickSave, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'GI_SinglePlayer_C_QuickSave::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_QuickSave, CallFunc_GetNeuralHUD_Result) == 0x000028, "Member 'GI_SinglePlayer_C_QuickSave::CallFunc_GetNeuralHUD_Result' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.QuickLoad
// 0x0048 (0x0048 - 0x0000)
struct GI_SinglePlayer_C_QuickLoad final
{
public:
	int32                                         UserIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0010(0x0010)(ZeroConstructor, NoDestructor)
	class APAWN_Hacker_Implant_C*                 K2Node_DynamicCast_AsPAWN_Hacker_Implant;          // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWIDGET_PlayerHUD_C*                    CallFunc_GetNeuralHUD_Result;                      // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStreamingSaveGameSession*              CallFunc_GetGameSession_ReturnValue;               // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsStreamingLevels_Result;                 // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LoadGameWithEvent_ReturnValue;            // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_QuickLoad) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_QuickLoad");
static_assert(sizeof(GI_SinglePlayer_C_QuickLoad) == 0x000048, "Wrong size on GI_SinglePlayer_C_QuickLoad");
static_assert(offsetof(GI_SinglePlayer_C_QuickLoad, UserIndex) == 0x000000, "Member 'GI_SinglePlayer_C_QuickLoad::UserIndex' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_QuickLoad, CallFunc_GetPlayerPawn_ReturnValue) == 0x000008, "Member 'GI_SinglePlayer_C_QuickLoad::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_QuickLoad, K2Node_CreateDelegate_OutputDelegate) == 0x000010, "Member 'GI_SinglePlayer_C_QuickLoad::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_QuickLoad, K2Node_DynamicCast_AsPAWN_Hacker_Implant) == 0x000020, "Member 'GI_SinglePlayer_C_QuickLoad::K2Node_DynamicCast_AsPAWN_Hacker_Implant' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_QuickLoad, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'GI_SinglePlayer_C_QuickLoad::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_QuickLoad, CallFunc_GetNeuralHUD_Result) == 0x000030, "Member 'GI_SinglePlayer_C_QuickLoad::CallFunc_GetNeuralHUD_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_QuickLoad, CallFunc_GetGameSession_ReturnValue) == 0x000038, "Member 'GI_SinglePlayer_C_QuickLoad::CallFunc_GetGameSession_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_QuickLoad, CallFunc_IsStreamingLevels_Result) == 0x000040, "Member 'GI_SinglePlayer_C_QuickLoad::CallFunc_IsStreamingLevels_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_QuickLoad, CallFunc_LoadGameWithEvent_ReturnValue) == 0x000041, "Member 'GI_SinglePlayer_C_QuickLoad::CallFunc_LoadGameWithEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_QuickLoad, CallFunc_Not_PreBool_ReturnValue) == 0x000042, "Member 'GI_SinglePlayer_C_QuickLoad::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_QuickLoad, CallFunc_Not_PreBool_ReturnValue_1) == 0x000043, "Member 'GI_SinglePlayer_C_QuickLoad::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.ManualLoad
// 0x0038 (0x0038 - 0x0000)
struct GI_SinglePlayer_C_ManualLoad final
{
public:
	class FString                                 SaveName;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         UserIndex;                                         // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0014(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStreamingSaveGameSession*              CallFunc_GetGameSession_ReturnValue;               // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsStreamingLevels_Result;                 // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LoadGameWithEvent_ReturnValue;            // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_ManualLoad) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_ManualLoad");
static_assert(sizeof(GI_SinglePlayer_C_ManualLoad) == 0x000038, "Wrong size on GI_SinglePlayer_C_ManualLoad");
static_assert(offsetof(GI_SinglePlayer_C_ManualLoad, SaveName) == 0x000000, "Member 'GI_SinglePlayer_C_ManualLoad::SaveName' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ManualLoad, UserIndex) == 0x000010, "Member 'GI_SinglePlayer_C_ManualLoad::UserIndex' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ManualLoad, K2Node_CreateDelegate_OutputDelegate) == 0x000014, "Member 'GI_SinglePlayer_C_ManualLoad::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ManualLoad, CallFunc_GetGameSession_ReturnValue) == 0x000028, "Member 'GI_SinglePlayer_C_ManualLoad::CallFunc_GetGameSession_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ManualLoad, CallFunc_IsStreamingLevels_Result) == 0x000030, "Member 'GI_SinglePlayer_C_ManualLoad::CallFunc_IsStreamingLevels_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ManualLoad, CallFunc_LoadGameWithEvent_ReturnValue) == 0x000031, "Member 'GI_SinglePlayer_C_ManualLoad::CallFunc_LoadGameWithEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ManualLoad, CallFunc_Not_PreBool_ReturnValue) == 0x000032, "Member 'GI_SinglePlayer_C_ManualLoad::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.OnPreUnloadLevelByName
// 0x0028 (0x0028 - 0x0000)
struct GI_SinglePlayer_C_OnPreUnloadLevelByName final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULevelStreaming*                        StreamingLevel;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULevelStreaming*                        CallFunc_GetStreamingLevel_ReturnValue;            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULevel*                                 CallFunc_GetLoadedLevel_ReturnValue;               // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CreateSaveDataForLevel_ReturnValue;       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_OnPreUnloadLevelByName) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_OnPreUnloadLevelByName");
static_assert(sizeof(GI_SinglePlayer_C_OnPreUnloadLevelByName) == 0x000028, "Wrong size on GI_SinglePlayer_C_OnPreUnloadLevelByName");
static_assert(offsetof(GI_SinglePlayer_C_OnPreUnloadLevelByName, LevelName) == 0x000000, "Member 'GI_SinglePlayer_C_OnPreUnloadLevelByName::LevelName' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnPreUnloadLevelByName, StreamingLevel) == 0x000008, "Member 'GI_SinglePlayer_C_OnPreUnloadLevelByName::StreamingLevel' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnPreUnloadLevelByName, CallFunc_GetStreamingLevel_ReturnValue) == 0x000010, "Member 'GI_SinglePlayer_C_OnPreUnloadLevelByName::CallFunc_GetStreamingLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnPreUnloadLevelByName, CallFunc_GetLoadedLevel_ReturnValue) == 0x000018, "Member 'GI_SinglePlayer_C_OnPreUnloadLevelByName::CallFunc_GetLoadedLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnPreUnloadLevelByName, CallFunc_CreateSaveDataForLevel_ReturnValue) == 0x000020, "Member 'GI_SinglePlayer_C_OnPreUnloadLevelByName::CallFunc_CreateSaveDataForLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnPreUnloadLevelByName, CallFunc_IsValid_ReturnValue) == 0x000021, "Member 'GI_SinglePlayer_C_OnPreUnloadLevelByName::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.OnPostLoadCurrentLevel
// 0x0028 (0x0028 - 0x0000)
struct GI_SinglePlayer_C_OnPostLoadCurrentLevel final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevel*                                 CallFunc_GetLoadedLevel_ReturnValue;               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InitializeLevelFromSaveData_ReturnValue;  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0014(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_OnPostLoadCurrentLevel) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_OnPostLoadCurrentLevel");
static_assert(sizeof(GI_SinglePlayer_C_OnPostLoadCurrentLevel) == 0x000028, "Wrong size on GI_SinglePlayer_C_OnPostLoadCurrentLevel");
static_assert(offsetof(GI_SinglePlayer_C_OnPostLoadCurrentLevel, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'GI_SinglePlayer_C_OnPostLoadCurrentLevel::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnPostLoadCurrentLevel, CallFunc_GetLoadedLevel_ReturnValue) == 0x000008, "Member 'GI_SinglePlayer_C_OnPostLoadCurrentLevel::CallFunc_GetLoadedLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnPostLoadCurrentLevel, CallFunc_InitializeLevelFromSaveData_ReturnValue) == 0x000010, "Member 'GI_SinglePlayer_C_OnPostLoadCurrentLevel::CallFunc_InitializeLevelFromSaveData_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnPostLoadCurrentLevel, K2Node_CreateDelegate_OutputDelegate) == 0x000014, "Member 'GI_SinglePlayer_C_OnPostLoadCurrentLevel::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.HasVisitedLevel
// 0x0018 (0x0018 - 0x0000)
struct GI_SinglePlayer_C_HasVisitedLevel final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetCurrentLevelName_Result;               // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_HasVisitedLevel) == 0x000004, "Wrong alignment on GI_SinglePlayer_C_HasVisitedLevel");
static_assert(sizeof(GI_SinglePlayer_C_HasVisitedLevel) == 0x000018, "Wrong size on GI_SinglePlayer_C_HasVisitedLevel");
static_assert(offsetof(GI_SinglePlayer_C_HasVisitedLevel, LevelName) == 0x000000, "Member 'GI_SinglePlayer_C_HasVisitedLevel::LevelName' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_HasVisitedLevel, Result) == 0x000008, "Member 'GI_SinglePlayer_C_HasVisitedLevel::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_HasVisitedLevel, CallFunc_GetCurrentLevelName_Result) == 0x00000C, "Member 'GI_SinglePlayer_C_HasVisitedLevel::CallFunc_GetCurrentLevelName_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_HasVisitedLevel, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000014, "Member 'GI_SinglePlayer_C_HasVisitedLevel::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_HasVisitedLevel, CallFunc_Array_Contains_ReturnValue) == 0x000015, "Member 'GI_SinglePlayer_C_HasVisitedLevel::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.GetVisitedLevelIndex
// 0x0010 (0x0010 - 0x0000)
struct GI_SinglePlayer_C_GetVisitedLevelIndex final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_GetVisitedLevelIndex) == 0x000004, "Wrong alignment on GI_SinglePlayer_C_GetVisitedLevelIndex");
static_assert(sizeof(GI_SinglePlayer_C_GetVisitedLevelIndex) == 0x000010, "Wrong size on GI_SinglePlayer_C_GetVisitedLevelIndex");
static_assert(offsetof(GI_SinglePlayer_C_GetVisitedLevelIndex, LevelName) == 0x000000, "Member 'GI_SinglePlayer_C_GetVisitedLevelIndex::LevelName' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetVisitedLevelIndex, Index_0) == 0x000008, "Member 'GI_SinglePlayer_C_GetVisitedLevelIndex::Index_0' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetVisitedLevelIndex, CallFunc_Array_Find_ReturnValue) == 0x00000C, "Member 'GI_SinglePlayer_C_GetVisitedLevelIndex::CallFunc_Array_Find_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.GetLevelNameByDeck
// 0x0030 (0x0030 - 0x0000)
struct GI_SinglePlayer_C_GetLevelNameByDeck final
{
public:
	int32                                         DeckNumber;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Level;                                             // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CurrentLevel;                                      // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CallFunc_GetDataTableRowNames_OutRowNames;         // 0x0018(0x0010)(ReferenceParm)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_GetLevelNameByDeck) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_GetLevelNameByDeck");
static_assert(sizeof(GI_SinglePlayer_C_GetLevelNameByDeck) == 0x000030, "Wrong size on GI_SinglePlayer_C_GetLevelNameByDeck");
static_assert(offsetof(GI_SinglePlayer_C_GetLevelNameByDeck, DeckNumber) == 0x000000, "Member 'GI_SinglePlayer_C_GetLevelNameByDeck::DeckNumber' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetLevelNameByDeck, Level) == 0x000004, "Member 'GI_SinglePlayer_C_GetLevelNameByDeck::Level' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetLevelNameByDeck, CurrentLevel) == 0x00000C, "Member 'GI_SinglePlayer_C_GetLevelNameByDeck::CurrentLevel' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetLevelNameByDeck, CallFunc_GetDataTableRowNames_OutRowNames) == 0x000018, "Member 'GI_SinglePlayer_C_GetLevelNameByDeck::CallFunc_GetDataTableRowNames_OutRowNames' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetLevelNameByDeck, CallFunc_Array_Get_Item) == 0x000028, "Member 'GI_SinglePlayer_C_GetLevelNameByDeck::CallFunc_Array_Get_Item' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.RegisterReinforcementVolume
// 0x00B0 (0x00B0 - 0x0000)
struct GI_SinglePlayer_C_RegisterReinforcementVolume final
{
public:
	class AVOLUME_Reinforcements_C*               Volume;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   CurrentEnemyClass;                                 // 0x0008(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftClassPtr<class UClass>>           CallFunc_GetReinforcementVolumeBaseClasses_BaseClasses; // 0x0038(0x0010)(ReferenceParm)
	TSoftClassPtr<class UClass>                   CallFunc_Array_Get_Item;                           // 0x0048(0x0028)(HasGetValueTypeHash)
	TArray<class AVOLUME_Reinforcements_C*>       K2Node_MakeArray_Array;                            // 0x0070(0x0010)(ReferenceParm)
	struct FSTRUCT_EnemyReinforcementVolumes      K2Node_MakeStruct_STRUCT_EnemyReinforcementVolumes; // 0x0080(0x0010)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Map_Find_Value;                           // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_RegisterReinforcementVolume) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_RegisterReinforcementVolume");
static_assert(sizeof(GI_SinglePlayer_C_RegisterReinforcementVolume) == 0x0000B0, "Wrong size on GI_SinglePlayer_C_RegisterReinforcementVolume");
static_assert(offsetof(GI_SinglePlayer_C_RegisterReinforcementVolume, Volume) == 0x000000, "Member 'GI_SinglePlayer_C_RegisterReinforcementVolume::Volume' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterReinforcementVolume, CurrentEnemyClass) == 0x000008, "Member 'GI_SinglePlayer_C_RegisterReinforcementVolume::CurrentEnemyClass' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterReinforcementVolume, Temp_int_Array_Index_Variable) == 0x000030, "Member 'GI_SinglePlayer_C_RegisterReinforcementVolume::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterReinforcementVolume, CallFunc_IsValid_ReturnValue) == 0x000034, "Member 'GI_SinglePlayer_C_RegisterReinforcementVolume::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterReinforcementVolume, CallFunc_GetReinforcementVolumeBaseClasses_BaseClasses) == 0x000038, "Member 'GI_SinglePlayer_C_RegisterReinforcementVolume::CallFunc_GetReinforcementVolumeBaseClasses_BaseClasses' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterReinforcementVolume, CallFunc_Array_Get_Item) == 0x000048, "Member 'GI_SinglePlayer_C_RegisterReinforcementVolume::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterReinforcementVolume, K2Node_MakeArray_Array) == 0x000070, "Member 'GI_SinglePlayer_C_RegisterReinforcementVolume::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterReinforcementVolume, K2Node_MakeStruct_STRUCT_EnemyReinforcementVolumes) == 0x000080, "Member 'GI_SinglePlayer_C_RegisterReinforcementVolume::K2Node_MakeStruct_STRUCT_EnemyReinforcementVolumes' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterReinforcementVolume, CallFunc_Array_Length_ReturnValue) == 0x000090, "Member 'GI_SinglePlayer_C_RegisterReinforcementVolume::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterReinforcementVolume, Temp_int_Loop_Counter_Variable) == 0x000094, "Member 'GI_SinglePlayer_C_RegisterReinforcementVolume::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterReinforcementVolume, CallFunc_Less_IntInt_ReturnValue) == 0x000098, "Member 'GI_SinglePlayer_C_RegisterReinforcementVolume::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterReinforcementVolume, CallFunc_Add_IntInt_ReturnValue) == 0x00009C, "Member 'GI_SinglePlayer_C_RegisterReinforcementVolume::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterReinforcementVolume, CallFunc_Map_Find_Value) == 0x0000A0, "Member 'GI_SinglePlayer_C_RegisterReinforcementVolume::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterReinforcementVolume, CallFunc_Map_Find_ReturnValue) == 0x0000A4, "Member 'GI_SinglePlayer_C_RegisterReinforcementVolume::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterReinforcementVolume, CallFunc_Array_Add_ReturnValue) == 0x0000A8, "Member 'GI_SinglePlayer_C_RegisterReinforcementVolume::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterReinforcementVolume, CallFunc_Array_Add_ReturnValue_1) == 0x0000AC, "Member 'GI_SinglePlayer_C_RegisterReinforcementVolume::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.UnregisterReinforcementVolume
// 0x0068 (0x0068 - 0x0000)
struct GI_SinglePlayer_C_UnregisterReinforcementVolume final
{
public:
	class AVOLUME_Reinforcements_C*               Volume;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftClassPtr<class UClass>>           CallFunc_GetReinforcementVolumeBaseClasses_BaseClasses; // 0x0010(0x0010)(ReferenceParm)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   CallFunc_Array_Get_Item;                           // 0x0028(0x0028)(HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Map_Find_Value;                           // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_UnregisterReinforcementVolume) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_UnregisterReinforcementVolume");
static_assert(sizeof(GI_SinglePlayer_C_UnregisterReinforcementVolume) == 0x000068, "Wrong size on GI_SinglePlayer_C_UnregisterReinforcementVolume");
static_assert(offsetof(GI_SinglePlayer_C_UnregisterReinforcementVolume, Volume) == 0x000000, "Member 'GI_SinglePlayer_C_UnregisterReinforcementVolume::Volume' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UnregisterReinforcementVolume, Temp_int_Array_Index_Variable) == 0x000008, "Member 'GI_SinglePlayer_C_UnregisterReinforcementVolume::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UnregisterReinforcementVolume, CallFunc_IsValid_ReturnValue) == 0x00000C, "Member 'GI_SinglePlayer_C_UnregisterReinforcementVolume::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UnregisterReinforcementVolume, CallFunc_GetReinforcementVolumeBaseClasses_BaseClasses) == 0x000010, "Member 'GI_SinglePlayer_C_UnregisterReinforcementVolume::CallFunc_GetReinforcementVolumeBaseClasses_BaseClasses' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UnregisterReinforcementVolume, Temp_int_Loop_Counter_Variable) == 0x000020, "Member 'GI_SinglePlayer_C_UnregisterReinforcementVolume::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UnregisterReinforcementVolume, CallFunc_Array_Get_Item) == 0x000028, "Member 'GI_SinglePlayer_C_UnregisterReinforcementVolume::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UnregisterReinforcementVolume, CallFunc_Add_IntInt_ReturnValue) == 0x000050, "Member 'GI_SinglePlayer_C_UnregisterReinforcementVolume::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UnregisterReinforcementVolume, CallFunc_Array_Length_ReturnValue) == 0x000054, "Member 'GI_SinglePlayer_C_UnregisterReinforcementVolume::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UnregisterReinforcementVolume, CallFunc_Less_IntInt_ReturnValue) == 0x000058, "Member 'GI_SinglePlayer_C_UnregisterReinforcementVolume::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UnregisterReinforcementVolume, CallFunc_Map_Find_Value) == 0x00005C, "Member 'GI_SinglePlayer_C_UnregisterReinforcementVolume::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UnregisterReinforcementVolume, CallFunc_Map_Find_ReturnValue) == 0x000060, "Member 'GI_SinglePlayer_C_UnregisterReinforcementVolume::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UnregisterReinforcementVolume, CallFunc_Array_RemoveItem_ReturnValue) == 0x000061, "Member 'GI_SinglePlayer_C_UnregisterReinforcementVolume::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.RegisterEnemy
// 0x0020 (0x0020 - 0x0000)
struct GI_SinglePlayer_C_RegisterEnemy final
{
public:
	class APAWN_Enemy_C*                          Enemy;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Set_Remove_ReturnValue;                   // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ModifyEnemyPopulation_Result;             // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_RegisterEnemy) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_RegisterEnemy");
static_assert(sizeof(GI_SinglePlayer_C_RegisterEnemy) == 0x000020, "Wrong size on GI_SinglePlayer_C_RegisterEnemy");
static_assert(offsetof(GI_SinglePlayer_C_RegisterEnemy, Enemy) == 0x000000, "Member 'GI_SinglePlayer_C_RegisterEnemy::Enemy' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterEnemy, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'GI_SinglePlayer_C_RegisterEnemy::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterEnemy, CallFunc_Set_Remove_ReturnValue) == 0x000009, "Member 'GI_SinglePlayer_C_RegisterEnemy::CallFunc_Set_Remove_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterEnemy, CallFunc_GetObjectClass_ReturnValue) == 0x000010, "Member 'GI_SinglePlayer_C_RegisterEnemy::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterEnemy, CallFunc_IsValid_ReturnValue_1) == 0x000018, "Member 'GI_SinglePlayer_C_RegisterEnemy::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterEnemy, CallFunc_ModifyEnemyPopulation_Result) == 0x000019, "Member 'GI_SinglePlayer_C_RegisterEnemy::CallFunc_ModifyEnemyPopulation_Result' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.UnregisterEnemy
// 0x0028 (0x0028 - 0x0000)
struct GI_SinglePlayer_C_UnregisterEnemy final
{
public:
	class APAWN_Enemy_C*                          Enemy;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 EnemyClass;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_UnregisterLowFiBehaviorEnemy_Result;      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLowFiBehaviorEnabled_Result;            // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Set_Remove_ReturnValue;                   // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ModifyEnemyPopulation_Result;             // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_UnregisterEnemy) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_UnregisterEnemy");
static_assert(sizeof(GI_SinglePlayer_C_UnregisterEnemy) == 0x000028, "Wrong size on GI_SinglePlayer_C_UnregisterEnemy");
static_assert(offsetof(GI_SinglePlayer_C_UnregisterEnemy, Enemy) == 0x000000, "Member 'GI_SinglePlayer_C_UnregisterEnemy::Enemy' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UnregisterEnemy, EnemyClass) == 0x000008, "Member 'GI_SinglePlayer_C_UnregisterEnemy::EnemyClass' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UnregisterEnemy, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'GI_SinglePlayer_C_UnregisterEnemy::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UnregisterEnemy, CallFunc_UnregisterLowFiBehaviorEnemy_Result) == 0x000011, "Member 'GI_SinglePlayer_C_UnregisterEnemy::CallFunc_UnregisterLowFiBehaviorEnemy_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UnregisterEnemy, CallFunc_IsLowFiBehaviorEnabled_Result) == 0x000012, "Member 'GI_SinglePlayer_C_UnregisterEnemy::CallFunc_IsLowFiBehaviorEnabled_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UnregisterEnemy, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000013, "Member 'GI_SinglePlayer_C_UnregisterEnemy::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UnregisterEnemy, CallFunc_IsValid_ReturnValue_1) == 0x000014, "Member 'GI_SinglePlayer_C_UnregisterEnemy::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UnregisterEnemy, CallFunc_Set_Remove_ReturnValue) == 0x000015, "Member 'GI_SinglePlayer_C_UnregisterEnemy::CallFunc_Set_Remove_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UnregisterEnemy, CallFunc_GetObjectClass_ReturnValue) == 0x000018, "Member 'GI_SinglePlayer_C_UnregisterEnemy::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UnregisterEnemy, CallFunc_ModifyEnemyPopulation_Result) == 0x000020, "Member 'GI_SinglePlayer_C_UnregisterEnemy::CallFunc_ModifyEnemyPopulation_Result' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.ModifyEnemyPopulation
// 0x0238 (0x0238 - 0x0000)
struct GI_SinglePlayer_C_ModifyEnemyPopulation final
{
public:
	class UClass*                                 EnemyClass;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PopulationChange;                                  // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_EnemyReinforcementSettings     ReinforcementSettings;                             // 0x0010(0x0098)(Edit, BlueprintVisible, HasGetValueTypeHash)
	int32                                         NewPopulationCount;                                // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 SpawnClass;                                        // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidClass_ReturnValue;                 // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetPlayTimeInSeconds_ReturnValue;         // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetReinforcementSettingsFromClass_Success; // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_EnemyReinforcementSettings     CallFunc_GetReinforcementSettingsFromClass_Settings; // 0x00C8(0x0098)(HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0160(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   CallFunc_Conv_ClassToSoftClassReference_ReturnValue; // 0x0170(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   CallFunc_Conv_ClassToSoftClassReference_ReturnValue_1; // 0x0198(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	class FString                                 CallFunc_GetReinforceClassNameFromClass_ClassName; // 0x01C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x01D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   CallFunc_Conv_ClassToSoftClassReference_ReturnValue_2; // 0x01E0(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0208(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0218(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0229(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22A[0x2];                                      // 0x022A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Map_Find_Value;                           // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_231[0x3];                                      // 0x0231(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_ModifyEnemyPopulation) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_ModifyEnemyPopulation");
static_assert(sizeof(GI_SinglePlayer_C_ModifyEnemyPopulation) == 0x000238, "Wrong size on GI_SinglePlayer_C_ModifyEnemyPopulation");
static_assert(offsetof(GI_SinglePlayer_C_ModifyEnemyPopulation, EnemyClass) == 0x000000, "Member 'GI_SinglePlayer_C_ModifyEnemyPopulation::EnemyClass' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ModifyEnemyPopulation, PopulationChange) == 0x000008, "Member 'GI_SinglePlayer_C_ModifyEnemyPopulation::PopulationChange' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ModifyEnemyPopulation, Result) == 0x00000C, "Member 'GI_SinglePlayer_C_ModifyEnemyPopulation::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ModifyEnemyPopulation, ReinforcementSettings) == 0x000010, "Member 'GI_SinglePlayer_C_ModifyEnemyPopulation::ReinforcementSettings' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ModifyEnemyPopulation, NewPopulationCount) == 0x0000A8, "Member 'GI_SinglePlayer_C_ModifyEnemyPopulation::NewPopulationCount' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ModifyEnemyPopulation, SpawnClass) == 0x0000B0, "Member 'GI_SinglePlayer_C_ModifyEnemyPopulation::SpawnClass' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ModifyEnemyPopulation, CallFunc_IsValidClass_ReturnValue) == 0x0000B8, "Member 'GI_SinglePlayer_C_ModifyEnemyPopulation::CallFunc_IsValidClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ModifyEnemyPopulation, CallFunc_GetPlayTimeInSeconds_ReturnValue) == 0x0000BC, "Member 'GI_SinglePlayer_C_ModifyEnemyPopulation::CallFunc_GetPlayTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ModifyEnemyPopulation, CallFunc_GetReinforcementSettingsFromClass_Success) == 0x0000C0, "Member 'GI_SinglePlayer_C_ModifyEnemyPopulation::CallFunc_GetReinforcementSettingsFromClass_Success' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ModifyEnemyPopulation, CallFunc_GetReinforcementSettingsFromClass_Settings) == 0x0000C8, "Member 'GI_SinglePlayer_C_ModifyEnemyPopulation::CallFunc_GetReinforcementSettingsFromClass_Settings' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ModifyEnemyPopulation, CallFunc_Conv_IntToString_ReturnValue) == 0x000160, "Member 'GI_SinglePlayer_C_ModifyEnemyPopulation::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ModifyEnemyPopulation, CallFunc_Conv_ClassToSoftClassReference_ReturnValue) == 0x000170, "Member 'GI_SinglePlayer_C_ModifyEnemyPopulation::CallFunc_Conv_ClassToSoftClassReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ModifyEnemyPopulation, CallFunc_Conv_ClassToSoftClassReference_ReturnValue_1) == 0x000198, "Member 'GI_SinglePlayer_C_ModifyEnemyPopulation::CallFunc_Conv_ClassToSoftClassReference_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ModifyEnemyPopulation, CallFunc_GetReinforceClassNameFromClass_ClassName) == 0x0001C0, "Member 'GI_SinglePlayer_C_ModifyEnemyPopulation::CallFunc_GetReinforceClassNameFromClass_ClassName' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ModifyEnemyPopulation, CallFunc_Concat_StrStr_ReturnValue) == 0x0001D0, "Member 'GI_SinglePlayer_C_ModifyEnemyPopulation::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ModifyEnemyPopulation, CallFunc_Conv_ClassToSoftClassReference_ReturnValue_2) == 0x0001E0, "Member 'GI_SinglePlayer_C_ModifyEnemyPopulation::CallFunc_Conv_ClassToSoftClassReference_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ModifyEnemyPopulation, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000208, "Member 'GI_SinglePlayer_C_ModifyEnemyPopulation::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ModifyEnemyPopulation, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000218, "Member 'GI_SinglePlayer_C_ModifyEnemyPopulation::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ModifyEnemyPopulation, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000228, "Member 'GI_SinglePlayer_C_ModifyEnemyPopulation::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ModifyEnemyPopulation, CallFunc_Greater_IntInt_ReturnValue) == 0x000229, "Member 'GI_SinglePlayer_C_ModifyEnemyPopulation::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ModifyEnemyPopulation, CallFunc_Map_Find_Value) == 0x00022C, "Member 'GI_SinglePlayer_C_ModifyEnemyPopulation::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ModifyEnemyPopulation, CallFunc_Map_Find_ReturnValue) == 0x000230, "Member 'GI_SinglePlayer_C_ModifyEnemyPopulation::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ModifyEnemyPopulation, CallFunc_Add_IntInt_ReturnValue) == 0x000234, "Member 'GI_SinglePlayer_C_ModifyEnemyPopulation::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.GetReinforcementVolumeBaseClasses
// 0x00E8 (0x00E8 - 0x0000)
struct GI_SinglePlayer_C_GetReinforcementVolumeBaseClasses final
{
public:
	class AVOLUME_Reinforcements_C*               Volume;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<TSoftClassPtr<class UClass>>           BaseClasses;                                       // 0x0008(0x0010)(Parm, OutParm)
	TSoftClassPtr<class UClass>                   CurrentEnemyClass;                                 // 0x0018(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TSet<TSoftClassPtr<class UClass>>             EnemyClasses;                                      // 0x0040(0x0050)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_EnemyClassWeight               CallFunc_Array_Get_Item;                           // 0x0098(0x0030)(HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidSoftClassReference_ReturnValue;    // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D5[0x3];                                       // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftClassPtr<class UClass>>           CallFunc_Set_ToArray_Result;                       // 0x00D8(0x0010)(ReferenceParm)
};
static_assert(alignof(GI_SinglePlayer_C_GetReinforcementVolumeBaseClasses) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_GetReinforcementVolumeBaseClasses");
static_assert(sizeof(GI_SinglePlayer_C_GetReinforcementVolumeBaseClasses) == 0x0000E8, "Wrong size on GI_SinglePlayer_C_GetReinforcementVolumeBaseClasses");
static_assert(offsetof(GI_SinglePlayer_C_GetReinforcementVolumeBaseClasses, Volume) == 0x000000, "Member 'GI_SinglePlayer_C_GetReinforcementVolumeBaseClasses::Volume' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetReinforcementVolumeBaseClasses, BaseClasses) == 0x000008, "Member 'GI_SinglePlayer_C_GetReinforcementVolumeBaseClasses::BaseClasses' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetReinforcementVolumeBaseClasses, CurrentEnemyClass) == 0x000018, "Member 'GI_SinglePlayer_C_GetReinforcementVolumeBaseClasses::CurrentEnemyClass' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetReinforcementVolumeBaseClasses, EnemyClasses) == 0x000040, "Member 'GI_SinglePlayer_C_GetReinforcementVolumeBaseClasses::EnemyClasses' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetReinforcementVolumeBaseClasses, Temp_int_Array_Index_Variable) == 0x000090, "Member 'GI_SinglePlayer_C_GetReinforcementVolumeBaseClasses::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetReinforcementVolumeBaseClasses, CallFunc_Array_Length_ReturnValue) == 0x000094, "Member 'GI_SinglePlayer_C_GetReinforcementVolumeBaseClasses::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetReinforcementVolumeBaseClasses, CallFunc_Array_Get_Item) == 0x000098, "Member 'GI_SinglePlayer_C_GetReinforcementVolumeBaseClasses::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetReinforcementVolumeBaseClasses, Temp_int_Loop_Counter_Variable) == 0x0000C8, "Member 'GI_SinglePlayer_C_GetReinforcementVolumeBaseClasses::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetReinforcementVolumeBaseClasses, CallFunc_Less_IntInt_ReturnValue) == 0x0000CC, "Member 'GI_SinglePlayer_C_GetReinforcementVolumeBaseClasses::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetReinforcementVolumeBaseClasses, CallFunc_Add_IntInt_ReturnValue) == 0x0000D0, "Member 'GI_SinglePlayer_C_GetReinforcementVolumeBaseClasses::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetReinforcementVolumeBaseClasses, CallFunc_IsValidSoftClassReference_ReturnValue) == 0x0000D4, "Member 'GI_SinglePlayer_C_GetReinforcementVolumeBaseClasses::CallFunc_IsValidSoftClassReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetReinforcementVolumeBaseClasses, CallFunc_Set_ToArray_Result) == 0x0000D8, "Member 'GI_SinglePlayer_C_GetReinforcementVolumeBaseClasses::CallFunc_Set_ToArray_Result' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.TryPrintDebugReinforcementMessage
// 0x0020 (0x0020 - 0x0000)
struct GI_SinglePlayer_C_TryPrintDebugReinforcementMessage final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_TryPrintDebugReinforcementMessage) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_TryPrintDebugReinforcementMessage");
static_assert(sizeof(GI_SinglePlayer_C_TryPrintDebugReinforcementMessage) == 0x000020, "Wrong size on GI_SinglePlayer_C_TryPrintDebugReinforcementMessage");
static_assert(offsetof(GI_SinglePlayer_C_TryPrintDebugReinforcementMessage, Message) == 0x000000, "Member 'GI_SinglePlayer_C_TryPrintDebugReinforcementMessage::Message' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryPrintDebugReinforcementMessage, CallFunc_Concat_StrStr_ReturnValue) == 0x000010, "Member 'GI_SinglePlayer_C_TryPrintDebugReinforcementMessage::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.TryStartReinforcingWithSettings
// 0x01A0 (0x01A0 - 0x0000)
struct GI_SinglePlayer_C_TryStartReinforcingWithSettings final
{
public:
	struct FSTRUCT_EnemyReinforcementSettings     ReinforcementSettings;                             // 0x0000(0x0098)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	int32                                         PopulationCount;                                   // 0x0098(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartTimestamp;                                    // 0x009C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NextRespawnTimestamp;                              // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_CurrentReinforcementSettings   RespawnSettings;                                   // 0x00A4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_CurrentReinforcementSettings   CallFunc_GetRespawnSettingsFromReinforcementSettings_RespawnSettings; // 0x00B4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetPlayTimeInSeconds_ReturnValue;         // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetReinforceClassNameFromClass_ClassName; // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetReinforceClassNameFromClass_ClassName_1; // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FSTRUCT_EnemyRespawnData               K2Node_MakeStruct_STRUCT_EnemyRespawnData;         // 0x00F8(0x0018)(ZeroConstructor, HasGetValueTypeHash)
	struct FSTRUCT_EnemyRespawnData               K2Node_MakeStruct_STRUCT_EnemyRespawnData_1;       // 0x0110(0x0018)(ZeroConstructor, HasGetValueTypeHash)
	TArray<struct FSTRUCT_EnemyRespawnData>       K2Node_MakeArray_Array;                            // 0x0128(0x0010)(ReferenceParm)
	bool                                          CallFunc_HasStartedRespawningEnemyClass_Result;    // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0139(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13A[0x2];                                      // 0x013A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0144(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_145[0x3];                                      // 0x0145(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetCurrentLevelName_Result;               // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetCurrentLevelName_Result_1;             // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_LevelRespawnData               K2Node_MakeStruct_STRUCT_LevelRespawnData;         // 0x0158(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_171[0x3];                                      // 0x0171(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_LevelRespawnData               CallFunc_Array_Get_Item;                           // 0x0178(0x0018)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0194(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_195[0x3];                                      // 0x0195(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x019C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_TryStartReinforcingWithSettings) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_TryStartReinforcingWithSettings");
static_assert(sizeof(GI_SinglePlayer_C_TryStartReinforcingWithSettings) == 0x0001A0, "Wrong size on GI_SinglePlayer_C_TryStartReinforcingWithSettings");
static_assert(offsetof(GI_SinglePlayer_C_TryStartReinforcingWithSettings, ReinforcementSettings) == 0x000000, "Member 'GI_SinglePlayer_C_TryStartReinforcingWithSettings::ReinforcementSettings' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartReinforcingWithSettings, PopulationCount) == 0x000098, "Member 'GI_SinglePlayer_C_TryStartReinforcingWithSettings::PopulationCount' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartReinforcingWithSettings, StartTimestamp) == 0x00009C, "Member 'GI_SinglePlayer_C_TryStartReinforcingWithSettings::StartTimestamp' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartReinforcingWithSettings, NextRespawnTimestamp) == 0x0000A0, "Member 'GI_SinglePlayer_C_TryStartReinforcingWithSettings::NextRespawnTimestamp' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartReinforcingWithSettings, RespawnSettings) == 0x0000A4, "Member 'GI_SinglePlayer_C_TryStartReinforcingWithSettings::RespawnSettings' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartReinforcingWithSettings, CallFunc_GetRespawnSettingsFromReinforcementSettings_RespawnSettings) == 0x0000B4, "Member 'GI_SinglePlayer_C_TryStartReinforcingWithSettings::CallFunc_GetRespawnSettingsFromReinforcementSettings_RespawnSettings' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartReinforcingWithSettings, Temp_int_Array_Index_Variable) == 0x0000C4, "Member 'GI_SinglePlayer_C_TryStartReinforcingWithSettings::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartReinforcingWithSettings, Temp_int_Loop_Counter_Variable) == 0x0000C8, "Member 'GI_SinglePlayer_C_TryStartReinforcingWithSettings::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartReinforcingWithSettings, CallFunc_GetPlayTimeInSeconds_ReturnValue) == 0x0000CC, "Member 'GI_SinglePlayer_C_TryStartReinforcingWithSettings::CallFunc_GetPlayTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartReinforcingWithSettings, CallFunc_Add_IntInt_ReturnValue) == 0x0000D0, "Member 'GI_SinglePlayer_C_TryStartReinforcingWithSettings::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartReinforcingWithSettings, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0000D4, "Member 'GI_SinglePlayer_C_TryStartReinforcingWithSettings::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartReinforcingWithSettings, CallFunc_GetReinforceClassNameFromClass_ClassName) == 0x0000D8, "Member 'GI_SinglePlayer_C_TryStartReinforcingWithSettings::CallFunc_GetReinforceClassNameFromClass_ClassName' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartReinforcingWithSettings, CallFunc_GetReinforceClassNameFromClass_ClassName_1) == 0x0000E8, "Member 'GI_SinglePlayer_C_TryStartReinforcingWithSettings::CallFunc_GetReinforceClassNameFromClass_ClassName_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartReinforcingWithSettings, K2Node_MakeStruct_STRUCT_EnemyRespawnData) == 0x0000F8, "Member 'GI_SinglePlayer_C_TryStartReinforcingWithSettings::K2Node_MakeStruct_STRUCT_EnemyRespawnData' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartReinforcingWithSettings, K2Node_MakeStruct_STRUCT_EnemyRespawnData_1) == 0x000110, "Member 'GI_SinglePlayer_C_TryStartReinforcingWithSettings::K2Node_MakeStruct_STRUCT_EnemyRespawnData_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartReinforcingWithSettings, K2Node_MakeArray_Array) == 0x000128, "Member 'GI_SinglePlayer_C_TryStartReinforcingWithSettings::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartReinforcingWithSettings, CallFunc_HasStartedRespawningEnemyClass_Result) == 0x000138, "Member 'GI_SinglePlayer_C_TryStartReinforcingWithSettings::CallFunc_HasStartedRespawningEnemyClass_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartReinforcingWithSettings, CallFunc_Not_PreBool_ReturnValue) == 0x000139, "Member 'GI_SinglePlayer_C_TryStartReinforcingWithSettings::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartReinforcingWithSettings, CallFunc_Conv_IntToFloat_ReturnValue) == 0x00013C, "Member 'GI_SinglePlayer_C_TryStartReinforcingWithSettings::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartReinforcingWithSettings, CallFunc_Add_FloatFloat_ReturnValue) == 0x000140, "Member 'GI_SinglePlayer_C_TryStartReinforcingWithSettings::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartReinforcingWithSettings, CallFunc_Greater_IntInt_ReturnValue) == 0x000144, "Member 'GI_SinglePlayer_C_TryStartReinforcingWithSettings::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartReinforcingWithSettings, CallFunc_GetCurrentLevelName_Result) == 0x000148, "Member 'GI_SinglePlayer_C_TryStartReinforcingWithSettings::CallFunc_GetCurrentLevelName_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartReinforcingWithSettings, CallFunc_GetCurrentLevelName_Result_1) == 0x000150, "Member 'GI_SinglePlayer_C_TryStartReinforcingWithSettings::CallFunc_GetCurrentLevelName_Result_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartReinforcingWithSettings, K2Node_MakeStruct_STRUCT_LevelRespawnData) == 0x000158, "Member 'GI_SinglePlayer_C_TryStartReinforcingWithSettings::K2Node_MakeStruct_STRUCT_LevelRespawnData' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartReinforcingWithSettings, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000170, "Member 'GI_SinglePlayer_C_TryStartReinforcingWithSettings::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartReinforcingWithSettings, CallFunc_Array_Add_ReturnValue) == 0x000174, "Member 'GI_SinglePlayer_C_TryStartReinforcingWithSettings::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartReinforcingWithSettings, CallFunc_Array_Get_Item) == 0x000178, "Member 'GI_SinglePlayer_C_TryStartReinforcingWithSettings::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartReinforcingWithSettings, CallFunc_Array_Add_ReturnValue_1) == 0x000190, "Member 'GI_SinglePlayer_C_TryStartReinforcingWithSettings::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartReinforcingWithSettings, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000194, "Member 'GI_SinglePlayer_C_TryStartReinforcingWithSettings::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartReinforcingWithSettings, CallFunc_Array_Length_ReturnValue) == 0x000198, "Member 'GI_SinglePlayer_C_TryStartReinforcingWithSettings::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartReinforcingWithSettings, CallFunc_Less_IntInt_ReturnValue) == 0x00019C, "Member 'GI_SinglePlayer_C_TryStartReinforcingWithSettings::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.TryStartReinforcingOnQuestChanged
// 0x00E0 (0x00E0 - 0x0000)
struct GI_SinglePlayer_C_TryStartReinforcingOnQuestChanged final
{
public:
	class FName                                   QuestName;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetPlayTimeInSeconds_ReturnValue;         // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetCurrentLevelName_Result;               // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_LevelReinforcementSettings     CallFunc_GetDataTableRowFromName_OutRow;           // 0x0020(0x0010)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_EnemyReinforcementSettings     CallFunc_Array_Get_Item;                           // 0x0038(0x0098)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x00D5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D6[0x2];                                       // 0x00D6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Map_Find_Value;                           // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_TryStartReinforcingOnQuestChanged) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_TryStartReinforcingOnQuestChanged");
static_assert(sizeof(GI_SinglePlayer_C_TryStartReinforcingOnQuestChanged) == 0x0000E0, "Wrong size on GI_SinglePlayer_C_TryStartReinforcingOnQuestChanged");
static_assert(offsetof(GI_SinglePlayer_C_TryStartReinforcingOnQuestChanged, QuestName) == 0x000000, "Member 'GI_SinglePlayer_C_TryStartReinforcingOnQuestChanged::QuestName' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartReinforcingOnQuestChanged, Temp_int_Array_Index_Variable) == 0x000008, "Member 'GI_SinglePlayer_C_TryStartReinforcingOnQuestChanged::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartReinforcingOnQuestChanged, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'GI_SinglePlayer_C_TryStartReinforcingOnQuestChanged::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartReinforcingOnQuestChanged, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'GI_SinglePlayer_C_TryStartReinforcingOnQuestChanged::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartReinforcingOnQuestChanged, CallFunc_GetPlayTimeInSeconds_ReturnValue) == 0x000014, "Member 'GI_SinglePlayer_C_TryStartReinforcingOnQuestChanged::CallFunc_GetPlayTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartReinforcingOnQuestChanged, CallFunc_GetCurrentLevelName_Result) == 0x000018, "Member 'GI_SinglePlayer_C_TryStartReinforcingOnQuestChanged::CallFunc_GetCurrentLevelName_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartReinforcingOnQuestChanged, CallFunc_GetDataTableRowFromName_OutRow) == 0x000020, "Member 'GI_SinglePlayer_C_TryStartReinforcingOnQuestChanged::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartReinforcingOnQuestChanged, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000030, "Member 'GI_SinglePlayer_C_TryStartReinforcingOnQuestChanged::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartReinforcingOnQuestChanged, CallFunc_Array_Get_Item) == 0x000038, "Member 'GI_SinglePlayer_C_TryStartReinforcingOnQuestChanged::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartReinforcingOnQuestChanged, CallFunc_Array_Length_ReturnValue) == 0x0000D0, "Member 'GI_SinglePlayer_C_TryStartReinforcingOnQuestChanged::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartReinforcingOnQuestChanged, CallFunc_Less_IntInt_ReturnValue) == 0x0000D4, "Member 'GI_SinglePlayer_C_TryStartReinforcingOnQuestChanged::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartReinforcingOnQuestChanged, CallFunc_EqualEqual_NameName_ReturnValue) == 0x0000D5, "Member 'GI_SinglePlayer_C_TryStartReinforcingOnQuestChanged::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartReinforcingOnQuestChanged, CallFunc_Map_Find_Value) == 0x0000D8, "Member 'GI_SinglePlayer_C_TryStartReinforcingOnQuestChanged::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartReinforcingOnQuestChanged, CallFunc_Map_Find_ReturnValue) == 0x0000DC, "Member 'GI_SinglePlayer_C_TryStartReinforcingOnQuestChanged::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.TryStartReinforcingOnLevelFinishedLoading
// 0x00E8 (0x00E8 - 0x0000)
struct GI_SinglePlayer_C_TryStartReinforcingOnLevelFinishedLoading final
{
public:
	float                                         CompletionTimestamp;                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetCurrentLevelName_Result;               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_LevelReinforcementSettings     CallFunc_GetDataTableRowFromName_OutRow;           // 0x0020(0x0010)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_EnemyReinforcementSettings     CallFunc_Array_Get_Item;                           // 0x0038(0x0098)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D5[0x3];                                       // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetStoryQuestCompletionTimestamp_Timestamp; // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DD[0x3];                                       // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Map_Find_Value;                           // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x00E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_TryStartReinforcingOnLevelFinishedLoading) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_TryStartReinforcingOnLevelFinishedLoading");
static_assert(sizeof(GI_SinglePlayer_C_TryStartReinforcingOnLevelFinishedLoading) == 0x0000E8, "Wrong size on GI_SinglePlayer_C_TryStartReinforcingOnLevelFinishedLoading");
static_assert(offsetof(GI_SinglePlayer_C_TryStartReinforcingOnLevelFinishedLoading, CompletionTimestamp) == 0x000000, "Member 'GI_SinglePlayer_C_TryStartReinforcingOnLevelFinishedLoading::CompletionTimestamp' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartReinforcingOnLevelFinishedLoading, Temp_int_Array_Index_Variable) == 0x000004, "Member 'GI_SinglePlayer_C_TryStartReinforcingOnLevelFinishedLoading::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartReinforcingOnLevelFinishedLoading, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'GI_SinglePlayer_C_TryStartReinforcingOnLevelFinishedLoading::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartReinforcingOnLevelFinishedLoading, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'GI_SinglePlayer_C_TryStartReinforcingOnLevelFinishedLoading::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartReinforcingOnLevelFinishedLoading, CallFunc_GetCurrentLevelName_Result) == 0x000010, "Member 'GI_SinglePlayer_C_TryStartReinforcingOnLevelFinishedLoading::CallFunc_GetCurrentLevelName_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartReinforcingOnLevelFinishedLoading, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000018, "Member 'GI_SinglePlayer_C_TryStartReinforcingOnLevelFinishedLoading::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartReinforcingOnLevelFinishedLoading, CallFunc_GetDataTableRowFromName_OutRow) == 0x000020, "Member 'GI_SinglePlayer_C_TryStartReinforcingOnLevelFinishedLoading::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartReinforcingOnLevelFinishedLoading, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000030, "Member 'GI_SinglePlayer_C_TryStartReinforcingOnLevelFinishedLoading::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartReinforcingOnLevelFinishedLoading, CallFunc_Array_Get_Item) == 0x000038, "Member 'GI_SinglePlayer_C_TryStartReinforcingOnLevelFinishedLoading::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartReinforcingOnLevelFinishedLoading, CallFunc_Array_Length_ReturnValue) == 0x0000D0, "Member 'GI_SinglePlayer_C_TryStartReinforcingOnLevelFinishedLoading::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartReinforcingOnLevelFinishedLoading, CallFunc_Less_IntInt_ReturnValue) == 0x0000D4, "Member 'GI_SinglePlayer_C_TryStartReinforcingOnLevelFinishedLoading::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartReinforcingOnLevelFinishedLoading, CallFunc_GetStoryQuestCompletionTimestamp_Timestamp) == 0x0000D8, "Member 'GI_SinglePlayer_C_TryStartReinforcingOnLevelFinishedLoading::CallFunc_GetStoryQuestCompletionTimestamp_Timestamp' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartReinforcingOnLevelFinishedLoading, CallFunc_NotEqual_NameName_ReturnValue) == 0x0000DC, "Member 'GI_SinglePlayer_C_TryStartReinforcingOnLevelFinishedLoading::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartReinforcingOnLevelFinishedLoading, CallFunc_Map_Find_Value) == 0x0000E0, "Member 'GI_SinglePlayer_C_TryStartReinforcingOnLevelFinishedLoading::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartReinforcingOnLevelFinishedLoading, CallFunc_Map_Find_ReturnValue) == 0x0000E4, "Member 'GI_SinglePlayer_C_TryStartReinforcingOnLevelFinishedLoading::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.TryStartRespawnTimerForFirstRespawnEvent
// 0x0168 (0x0168 - 0x0000)
struct GI_SinglePlayer_C_TryStartRespawnTimerForFirstRespawnEvent final
{
public:
	bool                                          HasRespawnEventToStart;                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FirstRespawnEventDelay;                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_CurrentReinforcementSettings   CurrentRespawnSettings;                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_EnemyRespawnData               EnemyRespawnData;                                  // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	struct FSTRUCT_LevelRespawnData               LevelRespawnData;                                  // 0x0030(0x0018)(Edit, BlueprintVisible, HasGetValueTypeHash)
	int32                                         LevelDataIndex;                                    // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetPlayTimeInSeconds_ReturnValue;         // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetCurrentLevelName_Result;               // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetRespawnDataIndexForLevel_LevelDataIndex; // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetReinforcementSettingsFromClassName_Success; // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   CallFunc_GetReinforcementSettingsFromClassName_Class; // 0x0078(0x0028)(HasGetValueTypeHash)
	struct FSTRUCT_EnemyReinforcementSettings     CallFunc_GetReinforcementSettingsFromClassName_Settings; // 0x00A0(0x0098)(HasGetValueTypeHash)
	struct FSTRUCT_CurrentReinforcementSettings   CallFunc_GetRespawnSettingsFromReinforcementSettings_RespawnSettings; // 0x0138(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_EnemyRespawnData               CallFunc_Array_Get_Item;                           // 0x0148(0x0018)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0164(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0165(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_TryStartRespawnTimerForFirstRespawnEvent) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_TryStartRespawnTimerForFirstRespawnEvent");
static_assert(sizeof(GI_SinglePlayer_C_TryStartRespawnTimerForFirstRespawnEvent) == 0x000168, "Wrong size on GI_SinglePlayer_C_TryStartRespawnTimerForFirstRespawnEvent");
static_assert(offsetof(GI_SinglePlayer_C_TryStartRespawnTimerForFirstRespawnEvent, HasRespawnEventToStart) == 0x000000, "Member 'GI_SinglePlayer_C_TryStartRespawnTimerForFirstRespawnEvent::HasRespawnEventToStart' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartRespawnTimerForFirstRespawnEvent, FirstRespawnEventDelay) == 0x000004, "Member 'GI_SinglePlayer_C_TryStartRespawnTimerForFirstRespawnEvent::FirstRespawnEventDelay' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartRespawnTimerForFirstRespawnEvent, CurrentRespawnSettings) == 0x000008, "Member 'GI_SinglePlayer_C_TryStartRespawnTimerForFirstRespawnEvent::CurrentRespawnSettings' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartRespawnTimerForFirstRespawnEvent, EnemyRespawnData) == 0x000018, "Member 'GI_SinglePlayer_C_TryStartRespawnTimerForFirstRespawnEvent::EnemyRespawnData' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartRespawnTimerForFirstRespawnEvent, LevelRespawnData) == 0x000030, "Member 'GI_SinglePlayer_C_TryStartRespawnTimerForFirstRespawnEvent::LevelRespawnData' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartRespawnTimerForFirstRespawnEvent, LevelDataIndex) == 0x000048, "Member 'GI_SinglePlayer_C_TryStartRespawnTimerForFirstRespawnEvent::LevelDataIndex' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartRespawnTimerForFirstRespawnEvent, Temp_int_Array_Index_Variable) == 0x00004C, "Member 'GI_SinglePlayer_C_TryStartRespawnTimerForFirstRespawnEvent::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartRespawnTimerForFirstRespawnEvent, Temp_int_Loop_Counter_Variable) == 0x000050, "Member 'GI_SinglePlayer_C_TryStartRespawnTimerForFirstRespawnEvent::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartRespawnTimerForFirstRespawnEvent, CallFunc_Add_IntInt_ReturnValue) == 0x000054, "Member 'GI_SinglePlayer_C_TryStartRespawnTimerForFirstRespawnEvent::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartRespawnTimerForFirstRespawnEvent, CallFunc_GetPlayTimeInSeconds_ReturnValue) == 0x000058, "Member 'GI_SinglePlayer_C_TryStartRespawnTimerForFirstRespawnEvent::CallFunc_GetPlayTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartRespawnTimerForFirstRespawnEvent, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00005C, "Member 'GI_SinglePlayer_C_TryStartRespawnTimerForFirstRespawnEvent::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartRespawnTimerForFirstRespawnEvent, CallFunc_GetCurrentLevelName_Result) == 0x000060, "Member 'GI_SinglePlayer_C_TryStartRespawnTimerForFirstRespawnEvent::CallFunc_GetCurrentLevelName_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartRespawnTimerForFirstRespawnEvent, CallFunc_GetRespawnDataIndexForLevel_LevelDataIndex) == 0x000068, "Member 'GI_SinglePlayer_C_TryStartRespawnTimerForFirstRespawnEvent::CallFunc_GetRespawnDataIndexForLevel_LevelDataIndex' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartRespawnTimerForFirstRespawnEvent, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00006C, "Member 'GI_SinglePlayer_C_TryStartRespawnTimerForFirstRespawnEvent::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartRespawnTimerForFirstRespawnEvent, CallFunc_FMin_ReturnValue) == 0x000070, "Member 'GI_SinglePlayer_C_TryStartRespawnTimerForFirstRespawnEvent::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartRespawnTimerForFirstRespawnEvent, CallFunc_GetReinforcementSettingsFromClassName_Success) == 0x000074, "Member 'GI_SinglePlayer_C_TryStartRespawnTimerForFirstRespawnEvent::CallFunc_GetReinforcementSettingsFromClassName_Success' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartRespawnTimerForFirstRespawnEvent, CallFunc_GetReinforcementSettingsFromClassName_Class) == 0x000078, "Member 'GI_SinglePlayer_C_TryStartRespawnTimerForFirstRespawnEvent::CallFunc_GetReinforcementSettingsFromClassName_Class' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartRespawnTimerForFirstRespawnEvent, CallFunc_GetReinforcementSettingsFromClassName_Settings) == 0x0000A0, "Member 'GI_SinglePlayer_C_TryStartRespawnTimerForFirstRespawnEvent::CallFunc_GetReinforcementSettingsFromClassName_Settings' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartRespawnTimerForFirstRespawnEvent, CallFunc_GetRespawnSettingsFromReinforcementSettings_RespawnSettings) == 0x000138, "Member 'GI_SinglePlayer_C_TryStartRespawnTimerForFirstRespawnEvent::CallFunc_GetRespawnSettingsFromReinforcementSettings_RespawnSettings' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartRespawnTimerForFirstRespawnEvent, CallFunc_Array_Get_Item) == 0x000148, "Member 'GI_SinglePlayer_C_TryStartRespawnTimerForFirstRespawnEvent::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartRespawnTimerForFirstRespawnEvent, CallFunc_Array_Length_ReturnValue) == 0x000160, "Member 'GI_SinglePlayer_C_TryStartRespawnTimerForFirstRespawnEvent::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartRespawnTimerForFirstRespawnEvent, CallFunc_Less_IntInt_ReturnValue) == 0x000164, "Member 'GI_SinglePlayer_C_TryStartRespawnTimerForFirstRespawnEvent::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartRespawnTimerForFirstRespawnEvent, CallFunc_Greater_IntInt_ReturnValue) == 0x000165, "Member 'GI_SinglePlayer_C_TryStartRespawnTimerForFirstRespawnEvent::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.TryStartRespawnTimer
// 0x0060 (0x0060 - 0x0000)
struct GI_SinglePlayer_C_TryStartRespawnTimer final
{
public:
	float                                         RespawnDelay;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ClampedRespawnDelay;                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue;           // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_GetTimerRemainingTimeHandle_ReturnValue; // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_IsTimerActiveHandle_ReturnValue;       // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0048(0x0010)(ZeroConstructor, NoDestructor)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0058(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_TryStartRespawnTimer) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_TryStartRespawnTimer");
static_assert(sizeof(GI_SinglePlayer_C_TryStartRespawnTimer) == 0x000060, "Wrong size on GI_SinglePlayer_C_TryStartRespawnTimer");
static_assert(offsetof(GI_SinglePlayer_C_TryStartRespawnTimer, RespawnDelay) == 0x000000, "Member 'GI_SinglePlayer_C_TryStartRespawnTimer::RespawnDelay' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartRespawnTimer, ClampedRespawnDelay) == 0x000004, "Member 'GI_SinglePlayer_C_TryStartRespawnTimer::ClampedRespawnDelay' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartRespawnTimer, CallFunc_FMax_ReturnValue) == 0x000008, "Member 'GI_SinglePlayer_C_TryStartRespawnTimer::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartRespawnTimer, CallFunc_Conv_FloatToString_ReturnValue) == 0x000010, "Member 'GI_SinglePlayer_C_TryStartRespawnTimer::CallFunc_Conv_FloatToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartRespawnTimer, CallFunc_Concat_StrStr_ReturnValue) == 0x000020, "Member 'GI_SinglePlayer_C_TryStartRespawnTimer::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartRespawnTimer, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000030, "Member 'GI_SinglePlayer_C_TryStartRespawnTimer::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartRespawnTimer, CallFunc_K2_GetTimerRemainingTimeHandle_ReturnValue) == 0x000040, "Member 'GI_SinglePlayer_C_TryStartRespawnTimer::CallFunc_K2_GetTimerRemainingTimeHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartRespawnTimer, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000044, "Member 'GI_SinglePlayer_C_TryStartRespawnTimer::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartRespawnTimer, CallFunc_K2_IsTimerActiveHandle_ReturnValue) == 0x000045, "Member 'GI_SinglePlayer_C_TryStartRespawnTimer::CallFunc_K2_IsTimerActiveHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartRespawnTimer, K2Node_CreateDelegate_OutputDelegate) == 0x000048, "Member 'GI_SinglePlayer_C_TryStartRespawnTimer::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartRespawnTimer, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000058, "Member 'GI_SinglePlayer_C_TryStartRespawnTimer::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.HasStartedRespawningEnemyClass
// 0x00A0 (0x00A0 - 0x0000)
struct GI_SinglePlayer_C_HasStartedRespawningEnemyClass final
{
public:
	TSoftClassPtr<class UClass>                   EnemyClass;                                        // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetReinforceClassNameFromClass_ClassName; // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetCurrentLevelName_Result;               // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_LevelRespawnData               CallFunc_Array_Get_Item;                           // 0x0060(0x0018)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_EnemyRespawnData               CallFunc_Array_Get_Item_1;                         // 0x0080(0x0018)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue;            // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x009D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x009E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_HasStartedRespawningEnemyClass) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_HasStartedRespawningEnemyClass");
static_assert(sizeof(GI_SinglePlayer_C_HasStartedRespawningEnemyClass) == 0x0000A0, "Wrong size on GI_SinglePlayer_C_HasStartedRespawningEnemyClass");
static_assert(offsetof(GI_SinglePlayer_C_HasStartedRespawningEnemyClass, EnemyClass) == 0x000000, "Member 'GI_SinglePlayer_C_HasStartedRespawningEnemyClass::EnemyClass' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_HasStartedRespawningEnemyClass, Result) == 0x000028, "Member 'GI_SinglePlayer_C_HasStartedRespawningEnemyClass::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_HasStartedRespawningEnemyClass, Temp_int_Loop_Counter_Variable) == 0x00002C, "Member 'GI_SinglePlayer_C_HasStartedRespawningEnemyClass::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_HasStartedRespawningEnemyClass, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'GI_SinglePlayer_C_HasStartedRespawningEnemyClass::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_HasStartedRespawningEnemyClass, Temp_int_Array_Index_Variable) == 0x000034, "Member 'GI_SinglePlayer_C_HasStartedRespawningEnemyClass::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_HasStartedRespawningEnemyClass, CallFunc_GetReinforceClassNameFromClass_ClassName) == 0x000038, "Member 'GI_SinglePlayer_C_HasStartedRespawningEnemyClass::CallFunc_GetReinforceClassNameFromClass_ClassName' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_HasStartedRespawningEnemyClass, CallFunc_GetCurrentLevelName_Result) == 0x000048, "Member 'GI_SinglePlayer_C_HasStartedRespawningEnemyClass::CallFunc_GetCurrentLevelName_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_HasStartedRespawningEnemyClass, Temp_int_Array_Index_Variable_1) == 0x000050, "Member 'GI_SinglePlayer_C_HasStartedRespawningEnemyClass::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_HasStartedRespawningEnemyClass, Temp_int_Loop_Counter_Variable_1) == 0x000054, "Member 'GI_SinglePlayer_C_HasStartedRespawningEnemyClass::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_HasStartedRespawningEnemyClass, CallFunc_Add_IntInt_ReturnValue_1) == 0x000058, "Member 'GI_SinglePlayer_C_HasStartedRespawningEnemyClass::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_HasStartedRespawningEnemyClass, CallFunc_Array_Get_Item) == 0x000060, "Member 'GI_SinglePlayer_C_HasStartedRespawningEnemyClass::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_HasStartedRespawningEnemyClass, CallFunc_Array_Length_ReturnValue) == 0x000078, "Member 'GI_SinglePlayer_C_HasStartedRespawningEnemyClass::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_HasStartedRespawningEnemyClass, CallFunc_Less_IntInt_ReturnValue) == 0x00007C, "Member 'GI_SinglePlayer_C_HasStartedRespawningEnemyClass::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_HasStartedRespawningEnemyClass, CallFunc_Array_Get_Item_1) == 0x000080, "Member 'GI_SinglePlayer_C_HasStartedRespawningEnemyClass::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_HasStartedRespawningEnemyClass, CallFunc_Array_Length_ReturnValue_1) == 0x000098, "Member 'GI_SinglePlayer_C_HasStartedRespawningEnemyClass::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_HasStartedRespawningEnemyClass, CallFunc_EqualEqual_StrStr_ReturnValue) == 0x00009C, "Member 'GI_SinglePlayer_C_HasStartedRespawningEnemyClass::CallFunc_EqualEqual_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_HasStartedRespawningEnemyClass, CallFunc_Less_IntInt_ReturnValue_1) == 0x00009D, "Member 'GI_SinglePlayer_C_HasStartedRespawningEnemyClass::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_HasStartedRespawningEnemyClass, CallFunc_EqualEqual_NameName_ReturnValue) == 0x00009E, "Member 'GI_SinglePlayer_C_HasStartedRespawningEnemyClass::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.GetReinforcementSettingsFromClassName
// 0x01C0 (0x01C0 - 0x0000)
struct GI_SinglePlayer_C_GetReinforcementSettingsFromClassName final
{
public:
	class FString                                 EnemyClassName;                                    // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   Class_0;                                           // 0x0018(0x0028)(Parm, OutParm, HasGetValueTypeHash)
	struct FSTRUCT_EnemyReinforcementSettings     Settings;                                          // 0x0040(0x0098)(Parm, OutParm, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetCurrentLevelName_Result;               // 0x00E4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_LevelReinforcementSettings     CallFunc_GetDataTableRowFromName_OutRow;           // 0x00F0(0x0010)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_EnemyReinforcementSettings     CallFunc_Array_Get_Item;                           // 0x0108(0x0098)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x01A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A5[0x3];                                      // 0x01A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetReinforceClassNameFromClass_ClassName; // 0x01A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue;            // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_GetReinforcementSettingsFromClassName) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_GetReinforcementSettingsFromClassName");
static_assert(sizeof(GI_SinglePlayer_C_GetReinforcementSettingsFromClassName) == 0x0001C0, "Wrong size on GI_SinglePlayer_C_GetReinforcementSettingsFromClassName");
static_assert(offsetof(GI_SinglePlayer_C_GetReinforcementSettingsFromClassName, EnemyClassName) == 0x000000, "Member 'GI_SinglePlayer_C_GetReinforcementSettingsFromClassName::EnemyClassName' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetReinforcementSettingsFromClassName, Success) == 0x000010, "Member 'GI_SinglePlayer_C_GetReinforcementSettingsFromClassName::Success' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetReinforcementSettingsFromClassName, Class_0) == 0x000018, "Member 'GI_SinglePlayer_C_GetReinforcementSettingsFromClassName::Class_0' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetReinforcementSettingsFromClassName, Settings) == 0x000040, "Member 'GI_SinglePlayer_C_GetReinforcementSettingsFromClassName::Settings' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetReinforcementSettingsFromClassName, Temp_int_Array_Index_Variable) == 0x0000D8, "Member 'GI_SinglePlayer_C_GetReinforcementSettingsFromClassName::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetReinforcementSettingsFromClassName, Temp_int_Loop_Counter_Variable) == 0x0000DC, "Member 'GI_SinglePlayer_C_GetReinforcementSettingsFromClassName::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetReinforcementSettingsFromClassName, CallFunc_Add_IntInt_ReturnValue) == 0x0000E0, "Member 'GI_SinglePlayer_C_GetReinforcementSettingsFromClassName::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetReinforcementSettingsFromClassName, CallFunc_GetCurrentLevelName_Result) == 0x0000E4, "Member 'GI_SinglePlayer_C_GetReinforcementSettingsFromClassName::CallFunc_GetCurrentLevelName_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetReinforcementSettingsFromClassName, CallFunc_GetDataTableRowFromName_OutRow) == 0x0000F0, "Member 'GI_SinglePlayer_C_GetReinforcementSettingsFromClassName::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetReinforcementSettingsFromClassName, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000100, "Member 'GI_SinglePlayer_C_GetReinforcementSettingsFromClassName::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetReinforcementSettingsFromClassName, CallFunc_Array_Get_Item) == 0x000108, "Member 'GI_SinglePlayer_C_GetReinforcementSettingsFromClassName::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetReinforcementSettingsFromClassName, CallFunc_Array_Length_ReturnValue) == 0x0001A0, "Member 'GI_SinglePlayer_C_GetReinforcementSettingsFromClassName::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetReinforcementSettingsFromClassName, CallFunc_Less_IntInt_ReturnValue) == 0x0001A4, "Member 'GI_SinglePlayer_C_GetReinforcementSettingsFromClassName::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetReinforcementSettingsFromClassName, CallFunc_GetReinforceClassNameFromClass_ClassName) == 0x0001A8, "Member 'GI_SinglePlayer_C_GetReinforcementSettingsFromClassName::CallFunc_GetReinforceClassNameFromClass_ClassName' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetReinforcementSettingsFromClassName, CallFunc_EqualEqual_StrStr_ReturnValue) == 0x0001B8, "Member 'GI_SinglePlayer_C_GetReinforcementSettingsFromClassName::CallFunc_EqualEqual_StrStr_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.GetReinforcementSettingsFromClass
// 0x01A0 (0x01A0 - 0x0000)
struct GI_SinglePlayer_C_GetReinforcementSettingsFromClass final
{
public:
	class UClass*                                 EnemyClass;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_EnemyReinforcementSettings     Settings;                                          // 0x0010(0x0098)(Parm, OutParm, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetCurrentLevelName_Result;               // 0x00B4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   CallFunc_Conv_ClassToSoftClassReference_ReturnValue; // 0x00C0(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	struct FSTRUCT_LevelReinforcementSettings     CallFunc_GetDataTableRowFromName_OutRow;           // 0x00E8(0x0010)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F9[0x3];                                       // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_EnemyReinforcementSettings     CallFunc_Array_Get_Item;                           // 0x0100(0x0098)(HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_SoftClassReference_ReturnValue; // 0x0199(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_GetReinforcementSettingsFromClass) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_GetReinforcementSettingsFromClass");
static_assert(sizeof(GI_SinglePlayer_C_GetReinforcementSettingsFromClass) == 0x0001A0, "Wrong size on GI_SinglePlayer_C_GetReinforcementSettingsFromClass");
static_assert(offsetof(GI_SinglePlayer_C_GetReinforcementSettingsFromClass, EnemyClass) == 0x000000, "Member 'GI_SinglePlayer_C_GetReinforcementSettingsFromClass::EnemyClass' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetReinforcementSettingsFromClass, Success) == 0x000008, "Member 'GI_SinglePlayer_C_GetReinforcementSettingsFromClass::Success' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetReinforcementSettingsFromClass, Settings) == 0x000010, "Member 'GI_SinglePlayer_C_GetReinforcementSettingsFromClass::Settings' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetReinforcementSettingsFromClass, Temp_int_Array_Index_Variable) == 0x0000A8, "Member 'GI_SinglePlayer_C_GetReinforcementSettingsFromClass::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetReinforcementSettingsFromClass, Temp_int_Loop_Counter_Variable) == 0x0000AC, "Member 'GI_SinglePlayer_C_GetReinforcementSettingsFromClass::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetReinforcementSettingsFromClass, CallFunc_Add_IntInt_ReturnValue) == 0x0000B0, "Member 'GI_SinglePlayer_C_GetReinforcementSettingsFromClass::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetReinforcementSettingsFromClass, CallFunc_GetCurrentLevelName_Result) == 0x0000B4, "Member 'GI_SinglePlayer_C_GetReinforcementSettingsFromClass::CallFunc_GetCurrentLevelName_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetReinforcementSettingsFromClass, CallFunc_Conv_ClassToSoftClassReference_ReturnValue) == 0x0000C0, "Member 'GI_SinglePlayer_C_GetReinforcementSettingsFromClass::CallFunc_Conv_ClassToSoftClassReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetReinforcementSettingsFromClass, CallFunc_GetDataTableRowFromName_OutRow) == 0x0000E8, "Member 'GI_SinglePlayer_C_GetReinforcementSettingsFromClass::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetReinforcementSettingsFromClass, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x0000F8, "Member 'GI_SinglePlayer_C_GetReinforcementSettingsFromClass::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetReinforcementSettingsFromClass, CallFunc_Array_Length_ReturnValue) == 0x0000FC, "Member 'GI_SinglePlayer_C_GetReinforcementSettingsFromClass::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetReinforcementSettingsFromClass, CallFunc_Array_Get_Item) == 0x000100, "Member 'GI_SinglePlayer_C_GetReinforcementSettingsFromClass::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetReinforcementSettingsFromClass, CallFunc_Less_IntInt_ReturnValue) == 0x000198, "Member 'GI_SinglePlayer_C_GetReinforcementSettingsFromClass::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetReinforcementSettingsFromClass, CallFunc_EqualEqual_SoftClassReference_ReturnValue) == 0x000199, "Member 'GI_SinglePlayer_C_GetReinforcementSettingsFromClass::CallFunc_EqualEqual_SoftClassReference_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.GetRespawnSettingsFromReinforcementSettings
// 0x00F8 (0x00F8 - 0x0000)
struct GI_SinglePlayer_C_GetRespawnSettingsFromReinforcementSettings final
{
public:
	struct FSTRUCT_EnemyReinforcementSettings     ReinforcementSettings;                             // 0x0000(0x0098)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	struct FSTRUCT_CurrentReinforcementSettings   RespawnSettings;                                   // 0x0098(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_GameDifficulty                           CombatDifficulty;                                  // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_GameDifficulty                           Temp_byte_Variable;                                // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_GameDifficulty                           Temp_byte_Variable_1;                              // 0x00AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_GameDifficulty                           Temp_byte_Variable_2;                              // 0x00AB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasCompletedStoryQuest_Completed;         // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x00AD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ENUM_GameDifficulty                           Temp_byte_Variable_3;                              // 0x00AE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_GameDifficulty                           Temp_byte_Variable_4;                              // 0x00AF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_GameDifficulty                           CallFunc_GetDifficultyByType_Difficulty;           // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_GameDifficulty                           Temp_byte_Variable_5;                              // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_GameDifficulty                           Temp_byte_Variable_6;                              // 0x00B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B3[0x1];                                       // 0x00B3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default_1;                           // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_GameDifficulty                           Temp_byte_Variable_7;                              // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default_2;                           // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default_3;                           // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_CurrentReinforcementSettings   K2Node_MakeStruct_STRUCT_CurrentReinforcementSettings; // 0x00C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default_4;                           // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default_5;                           // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default_6;                           // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default_7;                           // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_CurrentReinforcementSettings   K2Node_MakeStruct_STRUCT_CurrentReinforcementSettings_1; // 0x00E8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_GetRespawnSettingsFromReinforcementSettings) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_GetRespawnSettingsFromReinforcementSettings");
static_assert(sizeof(GI_SinglePlayer_C_GetRespawnSettingsFromReinforcementSettings) == 0x0000F8, "Wrong size on GI_SinglePlayer_C_GetRespawnSettingsFromReinforcementSettings");
static_assert(offsetof(GI_SinglePlayer_C_GetRespawnSettingsFromReinforcementSettings, ReinforcementSettings) == 0x000000, "Member 'GI_SinglePlayer_C_GetRespawnSettingsFromReinforcementSettings::ReinforcementSettings' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetRespawnSettingsFromReinforcementSettings, RespawnSettings) == 0x000098, "Member 'GI_SinglePlayer_C_GetRespawnSettingsFromReinforcementSettings::RespawnSettings' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetRespawnSettingsFromReinforcementSettings, CombatDifficulty) == 0x0000A8, "Member 'GI_SinglePlayer_C_GetRespawnSettingsFromReinforcementSettings::CombatDifficulty' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetRespawnSettingsFromReinforcementSettings, Temp_byte_Variable) == 0x0000A9, "Member 'GI_SinglePlayer_C_GetRespawnSettingsFromReinforcementSettings::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetRespawnSettingsFromReinforcementSettings, Temp_byte_Variable_1) == 0x0000AA, "Member 'GI_SinglePlayer_C_GetRespawnSettingsFromReinforcementSettings::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetRespawnSettingsFromReinforcementSettings, Temp_byte_Variable_2) == 0x0000AB, "Member 'GI_SinglePlayer_C_GetRespawnSettingsFromReinforcementSettings::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetRespawnSettingsFromReinforcementSettings, CallFunc_HasCompletedStoryQuest_Completed) == 0x0000AC, "Member 'GI_SinglePlayer_C_GetRespawnSettingsFromReinforcementSettings::CallFunc_HasCompletedStoryQuest_Completed' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetRespawnSettingsFromReinforcementSettings, CallFunc_NotEqual_NameName_ReturnValue) == 0x0000AD, "Member 'GI_SinglePlayer_C_GetRespawnSettingsFromReinforcementSettings::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetRespawnSettingsFromReinforcementSettings, Temp_byte_Variable_3) == 0x0000AE, "Member 'GI_SinglePlayer_C_GetRespawnSettingsFromReinforcementSettings::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetRespawnSettingsFromReinforcementSettings, Temp_byte_Variable_4) == 0x0000AF, "Member 'GI_SinglePlayer_C_GetRespawnSettingsFromReinforcementSettings::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetRespawnSettingsFromReinforcementSettings, CallFunc_GetDifficultyByType_Difficulty) == 0x0000B0, "Member 'GI_SinglePlayer_C_GetRespawnSettingsFromReinforcementSettings::CallFunc_GetDifficultyByType_Difficulty' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetRespawnSettingsFromReinforcementSettings, Temp_byte_Variable_5) == 0x0000B1, "Member 'GI_SinglePlayer_C_GetRespawnSettingsFromReinforcementSettings::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetRespawnSettingsFromReinforcementSettings, Temp_byte_Variable_6) == 0x0000B2, "Member 'GI_SinglePlayer_C_GetRespawnSettingsFromReinforcementSettings::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetRespawnSettingsFromReinforcementSettings, K2Node_Select_Default) == 0x0000B4, "Member 'GI_SinglePlayer_C_GetRespawnSettingsFromReinforcementSettings::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetRespawnSettingsFromReinforcementSettings, K2Node_Select_Default_1) == 0x0000B8, "Member 'GI_SinglePlayer_C_GetRespawnSettingsFromReinforcementSettings::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetRespawnSettingsFromReinforcementSettings, Temp_byte_Variable_7) == 0x0000BC, "Member 'GI_SinglePlayer_C_GetRespawnSettingsFromReinforcementSettings::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetRespawnSettingsFromReinforcementSettings, K2Node_Select_Default_2) == 0x0000C0, "Member 'GI_SinglePlayer_C_GetRespawnSettingsFromReinforcementSettings::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetRespawnSettingsFromReinforcementSettings, K2Node_Select_Default_3) == 0x0000C4, "Member 'GI_SinglePlayer_C_GetRespawnSettingsFromReinforcementSettings::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetRespawnSettingsFromReinforcementSettings, K2Node_MakeStruct_STRUCT_CurrentReinforcementSettings) == 0x0000C8, "Member 'GI_SinglePlayer_C_GetRespawnSettingsFromReinforcementSettings::K2Node_MakeStruct_STRUCT_CurrentReinforcementSettings' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetRespawnSettingsFromReinforcementSettings, K2Node_Select_Default_4) == 0x0000D8, "Member 'GI_SinglePlayer_C_GetRespawnSettingsFromReinforcementSettings::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetRespawnSettingsFromReinforcementSettings, K2Node_Select_Default_5) == 0x0000DC, "Member 'GI_SinglePlayer_C_GetRespawnSettingsFromReinforcementSettings::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetRespawnSettingsFromReinforcementSettings, K2Node_Select_Default_6) == 0x0000E0, "Member 'GI_SinglePlayer_C_GetRespawnSettingsFromReinforcementSettings::K2Node_Select_Default_6' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetRespawnSettingsFromReinforcementSettings, K2Node_Select_Default_7) == 0x0000E4, "Member 'GI_SinglePlayer_C_GetRespawnSettingsFromReinforcementSettings::K2Node_Select_Default_7' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetRespawnSettingsFromReinforcementSettings, K2Node_MakeStruct_STRUCT_CurrentReinforcementSettings_1) == 0x0000E8, "Member 'GI_SinglePlayer_C_GetRespawnSettingsFromReinforcementSettings::K2Node_MakeStruct_STRUCT_CurrentReinforcementSettings_1' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.GetReinforceClassNameFromClass
// 0x0058 (0x0058 - 0x0000)
struct GI_SinglePlayer_C_GetReinforceClassNameFromClass final
{
public:
	TSoftClassPtr<class UClass>                   Class_0;                                           // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	class FString                                 ClassName;                                         // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_SoftClassReferenceToString_ReturnValue; // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetBaseFilename_ReturnValue;              // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_GetReinforceClassNameFromClass) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_GetReinforceClassNameFromClass");
static_assert(sizeof(GI_SinglePlayer_C_GetReinforceClassNameFromClass) == 0x000058, "Wrong size on GI_SinglePlayer_C_GetReinforceClassNameFromClass");
static_assert(offsetof(GI_SinglePlayer_C_GetReinforceClassNameFromClass, Class_0) == 0x000000, "Member 'GI_SinglePlayer_C_GetReinforceClassNameFromClass::Class_0' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetReinforceClassNameFromClass, ClassName) == 0x000028, "Member 'GI_SinglePlayer_C_GetReinforceClassNameFromClass::ClassName' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetReinforceClassNameFromClass, CallFunc_Conv_SoftClassReferenceToString_ReturnValue) == 0x000038, "Member 'GI_SinglePlayer_C_GetReinforceClassNameFromClass::CallFunc_Conv_SoftClassReferenceToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetReinforceClassNameFromClass, CallFunc_GetBaseFilename_ReturnValue) == 0x000048, "Member 'GI_SinglePlayer_C_GetReinforceClassNameFromClass::CallFunc_GetBaseFilename_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.OnRespawnDelayElapsed
// 0x01C0 (0x01C0 - 0x0000)
struct GI_SinglePlayer_C_OnRespawnDelayElapsed final
{
public:
	int32                                         ActualCountSpawned;                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SpawnGroupSize;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpawnDurationRemaining;                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_CurrentReinforcementSettings   EnemyRespawnSettings;                              // 0x000C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   EnemyRespawnClass;                                 // 0x0020(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	float                                         ElapsedSpawnTime;                                  // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_EnemyRespawnData               EnemyRespawnData;                                  // 0x0050(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	int32                                         EnemyDataIndex;                                    // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_LevelRespawnData               LevelRespawnData;                                  // 0x0070(0x0018)(Edit, BlueprintVisible, HasGetValueTypeHash)
	int32                                         LevelDataIndex;                                    // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9A[0x2];                                       // 0x009A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_SpawnEnemyReinforcementsByType_CountSpawned; // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetCurrentLevelName_Result;               // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue;                          // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetRespawnDataIndexForLevel_LevelDataIndex; // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetReinforcementSettingsFromClassName_Success; // 0x00BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BE[0x2];                                       // 0x00BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   CallFunc_GetReinforcementSettingsFromClassName_Class; // 0x00C0(0x0028)(HasGetValueTypeHash)
	struct FSTRUCT_EnemyReinforcementSettings     CallFunc_GetReinforcementSettingsFromClassName_Settings; // 0x00E8(0x0098)(HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_181[0x3];                                      // 0x0181(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_CurrentReinforcementSettings   CallFunc_GetRespawnSettingsFromReinforcementSettings_RespawnSettings; // 0x0184(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0194(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_195[0x3];                                      // 0x0195(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetPlayTimeInSeconds_ReturnValue;         // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_EnemyRespawnData               CallFunc_Array_Get_Item;                           // 0x01A0(0x0018)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x01BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_OnRespawnDelayElapsed) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_OnRespawnDelayElapsed");
static_assert(sizeof(GI_SinglePlayer_C_OnRespawnDelayElapsed) == 0x0001C0, "Wrong size on GI_SinglePlayer_C_OnRespawnDelayElapsed");
static_assert(offsetof(GI_SinglePlayer_C_OnRespawnDelayElapsed, ActualCountSpawned) == 0x000000, "Member 'GI_SinglePlayer_C_OnRespawnDelayElapsed::ActualCountSpawned' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnRespawnDelayElapsed, SpawnGroupSize) == 0x000004, "Member 'GI_SinglePlayer_C_OnRespawnDelayElapsed::SpawnGroupSize' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnRespawnDelayElapsed, SpawnDurationRemaining) == 0x000008, "Member 'GI_SinglePlayer_C_OnRespawnDelayElapsed::SpawnDurationRemaining' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnRespawnDelayElapsed, EnemyRespawnSettings) == 0x00000C, "Member 'GI_SinglePlayer_C_OnRespawnDelayElapsed::EnemyRespawnSettings' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnRespawnDelayElapsed, EnemyRespawnClass) == 0x000020, "Member 'GI_SinglePlayer_C_OnRespawnDelayElapsed::EnemyRespawnClass' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnRespawnDelayElapsed, ElapsedSpawnTime) == 0x000048, "Member 'GI_SinglePlayer_C_OnRespawnDelayElapsed::ElapsedSpawnTime' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnRespawnDelayElapsed, EnemyRespawnData) == 0x000050, "Member 'GI_SinglePlayer_C_OnRespawnDelayElapsed::EnemyRespawnData' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnRespawnDelayElapsed, EnemyDataIndex) == 0x000068, "Member 'GI_SinglePlayer_C_OnRespawnDelayElapsed::EnemyDataIndex' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnRespawnDelayElapsed, LevelRespawnData) == 0x000070, "Member 'GI_SinglePlayer_C_OnRespawnDelayElapsed::LevelRespawnData' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnRespawnDelayElapsed, LevelDataIndex) == 0x000088, "Member 'GI_SinglePlayer_C_OnRespawnDelayElapsed::LevelDataIndex' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnRespawnDelayElapsed, Temp_int_Array_Index_Variable) == 0x00008C, "Member 'GI_SinglePlayer_C_OnRespawnDelayElapsed::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnRespawnDelayElapsed, Temp_int_Loop_Counter_Variable) == 0x000090, "Member 'GI_SinglePlayer_C_OnRespawnDelayElapsed::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnRespawnDelayElapsed, CallFunc_Add_IntInt_ReturnValue) == 0x000094, "Member 'GI_SinglePlayer_C_OnRespawnDelayElapsed::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnRespawnDelayElapsed, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000098, "Member 'GI_SinglePlayer_C_OnRespawnDelayElapsed::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnRespawnDelayElapsed, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000099, "Member 'GI_SinglePlayer_C_OnRespawnDelayElapsed::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnRespawnDelayElapsed, CallFunc_SpawnEnemyReinforcementsByType_CountSpawned) == 0x00009C, "Member 'GI_SinglePlayer_C_OnRespawnDelayElapsed::CallFunc_SpawnEnemyReinforcementsByType_CountSpawned' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnRespawnDelayElapsed, CallFunc_GetCurrentLevelName_Result) == 0x0000A0, "Member 'GI_SinglePlayer_C_OnRespawnDelayElapsed::CallFunc_GetCurrentLevelName_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnRespawnDelayElapsed, CallFunc_Max_ReturnValue) == 0x0000A8, "Member 'GI_SinglePlayer_C_OnRespawnDelayElapsed::CallFunc_Max_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnRespawnDelayElapsed, CallFunc_GetRespawnDataIndexForLevel_LevelDataIndex) == 0x0000AC, "Member 'GI_SinglePlayer_C_OnRespawnDelayElapsed::CallFunc_GetRespawnDataIndexForLevel_LevelDataIndex' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnRespawnDelayElapsed, CallFunc_Conv_IntToFloat_ReturnValue) == 0x0000B0, "Member 'GI_SinglePlayer_C_OnRespawnDelayElapsed::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnRespawnDelayElapsed, CallFunc_Add_IntInt_ReturnValue_1) == 0x0000B4, "Member 'GI_SinglePlayer_C_OnRespawnDelayElapsed::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnRespawnDelayElapsed, CallFunc_Add_FloatFloat_ReturnValue) == 0x0000B8, "Member 'GI_SinglePlayer_C_OnRespawnDelayElapsed::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnRespawnDelayElapsed, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x0000BC, "Member 'GI_SinglePlayer_C_OnRespawnDelayElapsed::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnRespawnDelayElapsed, CallFunc_GetReinforcementSettingsFromClassName_Success) == 0x0000BD, "Member 'GI_SinglePlayer_C_OnRespawnDelayElapsed::CallFunc_GetReinforcementSettingsFromClassName_Success' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnRespawnDelayElapsed, CallFunc_GetReinforcementSettingsFromClassName_Class) == 0x0000C0, "Member 'GI_SinglePlayer_C_OnRespawnDelayElapsed::CallFunc_GetReinforcementSettingsFromClassName_Class' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnRespawnDelayElapsed, CallFunc_GetReinforcementSettingsFromClassName_Settings) == 0x0000E8, "Member 'GI_SinglePlayer_C_OnRespawnDelayElapsed::CallFunc_GetReinforcementSettingsFromClassName_Settings' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnRespawnDelayElapsed, CallFunc_Less_IntInt_ReturnValue) == 0x000180, "Member 'GI_SinglePlayer_C_OnRespawnDelayElapsed::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnRespawnDelayElapsed, CallFunc_GetRespawnSettingsFromReinforcementSettings_RespawnSettings) == 0x000184, "Member 'GI_SinglePlayer_C_OnRespawnDelayElapsed::CallFunc_GetRespawnSettingsFromReinforcementSettings_RespawnSettings' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnRespawnDelayElapsed, CallFunc_Greater_IntInt_ReturnValue) == 0x000194, "Member 'GI_SinglePlayer_C_OnRespawnDelayElapsed::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnRespawnDelayElapsed, CallFunc_GetPlayTimeInSeconds_ReturnValue) == 0x000198, "Member 'GI_SinglePlayer_C_OnRespawnDelayElapsed::CallFunc_GetPlayTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnRespawnDelayElapsed, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00019C, "Member 'GI_SinglePlayer_C_OnRespawnDelayElapsed::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnRespawnDelayElapsed, CallFunc_Array_Get_Item) == 0x0001A0, "Member 'GI_SinglePlayer_C_OnRespawnDelayElapsed::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnRespawnDelayElapsed, CallFunc_Array_Length_ReturnValue) == 0x0001B8, "Member 'GI_SinglePlayer_C_OnRespawnDelayElapsed::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnRespawnDelayElapsed, CallFunc_Less_IntInt_ReturnValue_1) == 0x0001BC, "Member 'GI_SinglePlayer_C_OnRespawnDelayElapsed::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.IsStreamingLevels
// 0x0014 (0x0014 - 0x0000)
struct GI_SinglePlayer_C_IsStreamingLevels final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_IsStreamingLevels) == 0x000004, "Wrong alignment on GI_SinglePlayer_C_IsStreamingLevels");
static_assert(sizeof(GI_SinglePlayer_C_IsStreamingLevels) == 0x000014, "Wrong size on GI_SinglePlayer_C_IsStreamingLevels");
static_assert(offsetof(GI_SinglePlayer_C_IsStreamingLevels, Result) == 0x000000, "Member 'GI_SinglePlayer_C_IsStreamingLevels::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_IsStreamingLevels, CallFunc_Array_Length_ReturnValue) == 0x000004, "Member 'GI_SinglePlayer_C_IsStreamingLevels::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_IsStreamingLevels, CallFunc_Array_Length_ReturnValue_1) == 0x000008, "Member 'GI_SinglePlayer_C_IsStreamingLevels::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_IsStreamingLevels, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'GI_SinglePlayer_C_IsStreamingLevels::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_IsStreamingLevels, CallFunc_Greater_IntInt_ReturnValue) == 0x000010, "Member 'GI_SinglePlayer_C_IsStreamingLevels::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.OpenPersistentMapByType
// 0x0038 (0x0038 - 0x0000)
struct GI_SinglePlayer_C_OpenPersistentMapByType final
{
public:
	ENUM_MapType                                  LevelType;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_Hacker_Simple_C*                  K2Node_DynamicCast_AsPAWN_Hacker_Simple;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IINTERF_HUD_C>         K2Node_DynamicCast_AsINTERF_HUD;                   // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnPersistentMapMove_Result;               // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_OpenPersistentMapByType) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_OpenPersistentMapByType");
static_assert(sizeof(GI_SinglePlayer_C_OpenPersistentMapByType) == 0x000038, "Wrong size on GI_SinglePlayer_C_OpenPersistentMapByType");
static_assert(offsetof(GI_SinglePlayer_C_OpenPersistentMapByType, LevelType) == 0x000000, "Member 'GI_SinglePlayer_C_OpenPersistentMapByType::LevelType' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OpenPersistentMapByType, CallFunc_GetPlayerPawn_ReturnValue) == 0x000008, "Member 'GI_SinglePlayer_C_OpenPersistentMapByType::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OpenPersistentMapByType, K2Node_DynamicCast_AsPAWN_Hacker_Simple) == 0x000010, "Member 'GI_SinglePlayer_C_OpenPersistentMapByType::K2Node_DynamicCast_AsPAWN_Hacker_Simple' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OpenPersistentMapByType, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'GI_SinglePlayer_C_OpenPersistentMapByType::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OpenPersistentMapByType, K2Node_DynamicCast_AsINTERF_HUD) == 0x000020, "Member 'GI_SinglePlayer_C_OpenPersistentMapByType::K2Node_DynamicCast_AsINTERF_HUD' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OpenPersistentMapByType, K2Node_DynamicCast_bSuccess_1) == 0x000030, "Member 'GI_SinglePlayer_C_OpenPersistentMapByType::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OpenPersistentMapByType, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000031, "Member 'GI_SinglePlayer_C_OpenPersistentMapByType::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OpenPersistentMapByType, CallFunc_OnPersistentMapMove_Result) == 0x000032, "Member 'GI_SinglePlayer_C_OpenPersistentMapByType::CallFunc_OnPersistentMapMove_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OpenPersistentMapByType, K2Node_SwitchEnum_CmpSuccess) == 0x000033, "Member 'GI_SinglePlayer_C_OpenPersistentMapByType::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.OnBeginLoadingLevelCollectionInternal
// 0x0010 (0x0010 - 0x0000)
struct GI_SinglePlayer_C_OnBeginLoadingLevelCollectionInternal final
{
public:
	bool                                          CallFunc_TryStopPublicAddressTimer_Result;         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryStopGameCountdownTimer_Result;         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetCurrentLevelName_Result;               // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetCurrentLevel_ReturnValue;              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_OnBeginLoadingLevelCollectionInternal) == 0x000004, "Wrong alignment on GI_SinglePlayer_C_OnBeginLoadingLevelCollectionInternal");
static_assert(sizeof(GI_SinglePlayer_C_OnBeginLoadingLevelCollectionInternal) == 0x000010, "Wrong size on GI_SinglePlayer_C_OnBeginLoadingLevelCollectionInternal");
static_assert(offsetof(GI_SinglePlayer_C_OnBeginLoadingLevelCollectionInternal, CallFunc_TryStopPublicAddressTimer_Result) == 0x000000, "Member 'GI_SinglePlayer_C_OnBeginLoadingLevelCollectionInternal::CallFunc_TryStopPublicAddressTimer_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnBeginLoadingLevelCollectionInternal, CallFunc_TryStopGameCountdownTimer_Result) == 0x000001, "Member 'GI_SinglePlayer_C_OnBeginLoadingLevelCollectionInternal::CallFunc_TryStopGameCountdownTimer_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnBeginLoadingLevelCollectionInternal, CallFunc_GetCurrentLevelName_Result) == 0x000004, "Member 'GI_SinglePlayer_C_OnBeginLoadingLevelCollectionInternal::CallFunc_GetCurrentLevelName_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnBeginLoadingLevelCollectionInternal, CallFunc_SetCurrentLevel_ReturnValue) == 0x00000C, "Member 'GI_SinglePlayer_C_OnBeginLoadingLevelCollectionInternal::CallFunc_SetCurrentLevel_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.OnFinishedLoadingLevelCollectionInternal
// 0x0002 (0x0002 - 0x0000)
struct GI_SinglePlayer_C_OnFinishedLoadingLevelCollectionInternal final
{
public:
	bool                                          CallFunc_TryResumePublicAddressMessage_Result;     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryResumeGameCountdownTimer_Result;       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_OnFinishedLoadingLevelCollectionInternal) == 0x000001, "Wrong alignment on GI_SinglePlayer_C_OnFinishedLoadingLevelCollectionInternal");
static_assert(sizeof(GI_SinglePlayer_C_OnFinishedLoadingLevelCollectionInternal) == 0x000002, "Wrong size on GI_SinglePlayer_C_OnFinishedLoadingLevelCollectionInternal");
static_assert(offsetof(GI_SinglePlayer_C_OnFinishedLoadingLevelCollectionInternal, CallFunc_TryResumePublicAddressMessage_Result) == 0x000000, "Member 'GI_SinglePlayer_C_OnFinishedLoadingLevelCollectionInternal::CallFunc_TryResumePublicAddressMessage_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnFinishedLoadingLevelCollectionInternal, CallFunc_TryResumeGameCountdownTimer_Result) == 0x000001, "Member 'GI_SinglePlayer_C_OnFinishedLoadingLevelCollectionInternal::CallFunc_TryResumeGameCountdownTimer_Result' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.OnBeginUnloadingLevelCollectionInternal
// 0x0002 (0x0002 - 0x0000)
struct GI_SinglePlayer_C_OnBeginUnloadingLevelCollectionInternal final
{
public:
	bool                                          CallFunc_TryStopPublicAddressTimer_Result;         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryStopGameCountdownTimer_Result;         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_OnBeginUnloadingLevelCollectionInternal) == 0x000001, "Wrong alignment on GI_SinglePlayer_C_OnBeginUnloadingLevelCollectionInternal");
static_assert(sizeof(GI_SinglePlayer_C_OnBeginUnloadingLevelCollectionInternal) == 0x000002, "Wrong size on GI_SinglePlayer_C_OnBeginUnloadingLevelCollectionInternal");
static_assert(offsetof(GI_SinglePlayer_C_OnBeginUnloadingLevelCollectionInternal, CallFunc_TryStopPublicAddressTimer_Result) == 0x000000, "Member 'GI_SinglePlayer_C_OnBeginUnloadingLevelCollectionInternal::CallFunc_TryStopPublicAddressTimer_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnBeginUnloadingLevelCollectionInternal, CallFunc_TryStopGameCountdownTimer_Result) == 0x000001, "Member 'GI_SinglePlayer_C_OnBeginUnloadingLevelCollectionInternal::CallFunc_TryStopGameCountdownTimer_Result' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.GetRespawnDataIndexForLevel
// 0x0040 (0x0040 - 0x0000)
struct GI_SinglePlayer_C_GetRespawnDataIndexForLevel final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LevelDataIndex;                                    // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_LevelRespawnData               CallFunc_Array_Get_Item;                           // 0x0020(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_GetRespawnDataIndexForLevel) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_GetRespawnDataIndexForLevel");
static_assert(sizeof(GI_SinglePlayer_C_GetRespawnDataIndexForLevel) == 0x000040, "Wrong size on GI_SinglePlayer_C_GetRespawnDataIndexForLevel");
static_assert(offsetof(GI_SinglePlayer_C_GetRespawnDataIndexForLevel, LevelName) == 0x000000, "Member 'GI_SinglePlayer_C_GetRespawnDataIndexForLevel::LevelName' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetRespawnDataIndexForLevel, LevelDataIndex) == 0x000008, "Member 'GI_SinglePlayer_C_GetRespawnDataIndexForLevel::LevelDataIndex' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetRespawnDataIndexForLevel, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'GI_SinglePlayer_C_GetRespawnDataIndexForLevel::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetRespawnDataIndexForLevel, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'GI_SinglePlayer_C_GetRespawnDataIndexForLevel::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetRespawnDataIndexForLevel, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'GI_SinglePlayer_C_GetRespawnDataIndexForLevel::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetRespawnDataIndexForLevel, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'GI_SinglePlayer_C_GetRespawnDataIndexForLevel::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetRespawnDataIndexForLevel, CallFunc_Array_Get_Item) == 0x000020, "Member 'GI_SinglePlayer_C_GetRespawnDataIndexForLevel::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetRespawnDataIndexForLevel, CallFunc_Less_IntInt_ReturnValue) == 0x000038, "Member 'GI_SinglePlayer_C_GetRespawnDataIndexForLevel::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetRespawnDataIndexForLevel, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000039, "Member 'GI_SinglePlayer_C_GetRespawnDataIndexForLevel::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.SpawnEnemyReinforcementsByType
// 0x0240 (0x0240 - 0x0000)
struct GI_SinglePlayer_C_SpawnEnemyReinforcementsByType final
{
public:
	TSoftClassPtr<class UClass>                   EnemyClass;                                        // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	int32                                         SpawnCount;                                        // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RequireAmbush;                                     // 0x002C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CountSpawned;                                      // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_Enemy_C*                          SpawnedEnemy;                                      // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReinforcementVolumeIndex;                          // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SpawnCountRemaining;                               // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReinforcementVolumeCount;                          // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AVOLUME_Reinforcements_C*               ChosenReinforcementVolume;                         // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AVOLUME_Reinforcements_C*               ReinforcementVolume;                               // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AVOLUME_Reinforcements_C*               AvailableAmbushVolume;                             // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AVOLUME_Reinforcements_C*>       AvailableReinforcementVolumes;                     // 0x0068(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<class AVOLUME_Reinforcements_C*>       CandidateReinforcementVolumes;                     // 0x0078(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         EnemyVolumeIndex;                                  // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AVOLUME_Reinforcements_C*               CallFunc_Array_Get_Item;                           // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x00AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AB[0x1];                                       // 0x00AB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetReinforceClassNameFromClass_ClassName; // 0x00B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_SpawnReinforcementsAsAmbush_CountSpawned; // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0110(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x0120(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanTriggerAmbush_Result;                  // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetReinforceClassNameFromClass_ClassName_1; // 0x0138(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetReinforceClassNameFromClass_ClassName_2; // 0x0148(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_1;           // 0x0158(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x0168(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_17C[0x4];                                      // 0x017C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_5;              // 0x0180(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_6;              // 0x0190(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_7;              // 0x01A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B1[0x3];                                      // 0x01B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_2;            // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_2;             // 0x01B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x01BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x01BB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanSpawnAsEcology_Result;                 // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1C1[0x7];                                      // 0x01C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AVOLUME_Reinforcements_C*               CallFunc_Array_Get_Item_1;                         // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_SpawnReinforcementsAsEcology_CountSpawned; // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D4[0x4];                                      // 0x01D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_2;           // 0x01D8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_3;            // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1EC[0x4];                                      // 0x01EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_8;              // 0x01F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_9;              // 0x0200(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_10;             // 0x0210(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_11;             // 0x0220(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_4;            // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue;         // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Map_Find_Value;                           // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x023C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_SpawnEnemyReinforcementsByType");
static_assert(sizeof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType) == 0x000240, "Wrong size on GI_SinglePlayer_C_SpawnEnemyReinforcementsByType");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, EnemyClass) == 0x000000, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::EnemyClass' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, SpawnCount) == 0x000028, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::SpawnCount' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, RequireAmbush) == 0x00002C, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::RequireAmbush' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, CountSpawned) == 0x000030, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::CountSpawned' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, SpawnedEnemy) == 0x000038, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::SpawnedEnemy' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, ReinforcementVolumeIndex) == 0x000040, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::ReinforcementVolumeIndex' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, SpawnCountRemaining) == 0x000044, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::SpawnCountRemaining' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, ReinforcementVolumeCount) == 0x000048, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::ReinforcementVolumeCount' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, ChosenReinforcementVolume) == 0x000050, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::ChosenReinforcementVolume' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, ReinforcementVolume) == 0x000058, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::ReinforcementVolume' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, AvailableAmbushVolume) == 0x000060, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::AvailableAmbushVolume' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, AvailableReinforcementVolumes) == 0x000068, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::AvailableReinforcementVolumes' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, CandidateReinforcementVolumes) == 0x000078, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::CandidateReinforcementVolumes' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, EnemyVolumeIndex) == 0x000088, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::EnemyVolumeIndex' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, Temp_int_Array_Index_Variable) == 0x00008C, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, CallFunc_Greater_IntInt_ReturnValue) == 0x000090, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, CallFunc_Array_Get_Item) == 0x000098, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, CallFunc_Array_Length_ReturnValue) == 0x0000A0, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, CallFunc_Array_Add_ReturnValue) == 0x0000A4, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, CallFunc_Not_PreBool_ReturnValue) == 0x0000A8, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, CallFunc_IsValid_ReturnValue) == 0x0000A9, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, CallFunc_Not_PreBool_ReturnValue_1) == 0x0000AA, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, Temp_int_Loop_Counter_Variable) == 0x0000AC, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, CallFunc_GetReinforceClassNameFromClass_ClassName) == 0x0000B0, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::CallFunc_GetReinforceClassNameFromClass_ClassName' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, CallFunc_Less_IntInt_ReturnValue) == 0x0000C0, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, CallFunc_Add_IntInt_ReturnValue) == 0x0000C4, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, Temp_int_Variable) == 0x0000C8, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, CallFunc_SpawnReinforcementsAsAmbush_CountSpawned) == 0x0000CC, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::CallFunc_SpawnReinforcementsAsAmbush_CountSpawned' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, CallFunc_Conv_IntToString_ReturnValue) == 0x0000D0, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, CallFunc_IsValid_ReturnValue_1) == 0x0000E0, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, CallFunc_Concat_StrStr_ReturnValue) == 0x0000E8, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, CallFunc_Concat_StrStr_ReturnValue_1) == 0x0000F8, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, CallFunc_Subtract_IntInt_ReturnValue) == 0x000108, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000110, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, CallFunc_Concat_StrStr_ReturnValue_3) == 0x000120, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, CallFunc_CanTriggerAmbush_Result) == 0x000130, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::CallFunc_CanTriggerAmbush_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, CallFunc_GetReinforceClassNameFromClass_ClassName_1) == 0x000138, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::CallFunc_GetReinforceClassNameFromClass_ClassName_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, CallFunc_GetReinforceClassNameFromClass_ClassName_2) == 0x000148, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::CallFunc_GetReinforceClassNameFromClass_ClassName_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, CallFunc_Conv_IntToString_ReturnValue_1) == 0x000158, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::CallFunc_Conv_IntToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, CallFunc_Concat_StrStr_ReturnValue_4) == 0x000168, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000178, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, CallFunc_Concat_StrStr_ReturnValue_5) == 0x000180, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::CallFunc_Concat_StrStr_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, CallFunc_Concat_StrStr_ReturnValue_6) == 0x000190, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::CallFunc_Concat_StrStr_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, CallFunc_Concat_StrStr_ReturnValue_7) == 0x0001A0, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::CallFunc_Concat_StrStr_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, CallFunc_IsValid_ReturnValue_2) == 0x0001B0, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, CallFunc_Subtract_IntInt_ReturnValue_2) == 0x0001B4, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::CallFunc_Subtract_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, CallFunc_Greater_IntInt_ReturnValue_1) == 0x0001B8, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, CallFunc_Greater_IntInt_ReturnValue_2) == 0x0001B9, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::CallFunc_Greater_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, CallFunc_BooleanAND_ReturnValue) == 0x0001BA, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, CallFunc_Array_IsValidIndex_ReturnValue) == 0x0001BB, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, CallFunc_Array_Length_ReturnValue_1) == 0x0001BC, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, CallFunc_CanSpawnAsEcology_Result) == 0x0001C0, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::CallFunc_CanSpawnAsEcology_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, CallFunc_Array_Get_Item_1) == 0x0001C8, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, CallFunc_SpawnReinforcementsAsEcology_CountSpawned) == 0x0001D0, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::CallFunc_SpawnReinforcementsAsEcology_CountSpawned' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, CallFunc_Conv_IntToString_ReturnValue_2) == 0x0001D8, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::CallFunc_Conv_IntToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, CallFunc_Subtract_IntInt_ReturnValue_3) == 0x0001E8, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::CallFunc_Subtract_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, CallFunc_Concat_StrStr_ReturnValue_8) == 0x0001F0, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::CallFunc_Concat_StrStr_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, CallFunc_Concat_StrStr_ReturnValue_9) == 0x000200, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::CallFunc_Concat_StrStr_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, CallFunc_Concat_StrStr_ReturnValue_10) == 0x000210, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::CallFunc_Concat_StrStr_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, CallFunc_Concat_StrStr_ReturnValue_11) == 0x000220, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::CallFunc_Concat_StrStr_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, CallFunc_Subtract_IntInt_ReturnValue_4) == 0x000230, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::CallFunc_Subtract_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, CallFunc_RandomIntegerInRange_ReturnValue) == 0x000234, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::CallFunc_RandomIntegerInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, CallFunc_Map_Find_Value) == 0x000238, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SpawnEnemyReinforcementsByType, CallFunc_Map_Find_ReturnValue) == 0x00023C, "Member 'GI_SinglePlayer_C_SpawnEnemyReinforcementsByType::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.RequestNewSpawnedEnemyID
// 0x000C (0x000C - 0x0000)
struct GI_SinglePlayer_C_RequestNewSpawnedEnemyID final
{
public:
	int32                                         NewID;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_RequestNewSpawnedEnemyID) == 0x000004, "Wrong alignment on GI_SinglePlayer_C_RequestNewSpawnedEnemyID");
static_assert(sizeof(GI_SinglePlayer_C_RequestNewSpawnedEnemyID) == 0x00000C, "Wrong size on GI_SinglePlayer_C_RequestNewSpawnedEnemyID");
static_assert(offsetof(GI_SinglePlayer_C_RequestNewSpawnedEnemyID, NewID) == 0x000000, "Member 'GI_SinglePlayer_C_RequestNewSpawnedEnemyID::NewID' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RequestNewSpawnedEnemyID, Temp_int_Variable) == 0x000004, "Member 'GI_SinglePlayer_C_RequestNewSpawnedEnemyID::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RequestNewSpawnedEnemyID, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'GI_SinglePlayer_C_RequestNewSpawnedEnemyID::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.RequestNewSpawnedEnemyName
// 0x0068 (0x0068 - 0x0000)
struct GI_SinglePlayer_C_RequestNewSpawnedEnemyName final
{
public:
	class UClass*                                 EnemyClass;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   EnemyName;                                         // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SpawnID;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetUClassName_ReturnValue;                // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_RequestNewSpawnedEnemyID_NewID;           // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_RequestNewSpawnedEnemyName) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_RequestNewSpawnedEnemyName");
static_assert(sizeof(GI_SinglePlayer_C_RequestNewSpawnedEnemyName) == 0x000068, "Wrong size on GI_SinglePlayer_C_RequestNewSpawnedEnemyName");
static_assert(offsetof(GI_SinglePlayer_C_RequestNewSpawnedEnemyName, EnemyClass) == 0x000000, "Member 'GI_SinglePlayer_C_RequestNewSpawnedEnemyName::EnemyClass' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RequestNewSpawnedEnemyName, EnemyName) == 0x000008, "Member 'GI_SinglePlayer_C_RequestNewSpawnedEnemyName::EnemyName' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RequestNewSpawnedEnemyName, SpawnID) == 0x000010, "Member 'GI_SinglePlayer_C_RequestNewSpawnedEnemyName::SpawnID' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RequestNewSpawnedEnemyName, CallFunc_GetUClassName_ReturnValue) == 0x000018, "Member 'GI_SinglePlayer_C_RequestNewSpawnedEnemyName::CallFunc_GetUClassName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RequestNewSpawnedEnemyName, CallFunc_Conv_IntToString_ReturnValue) == 0x000028, "Member 'GI_SinglePlayer_C_RequestNewSpawnedEnemyName::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RequestNewSpawnedEnemyName, CallFunc_Concat_StrStr_ReturnValue) == 0x000038, "Member 'GI_SinglePlayer_C_RequestNewSpawnedEnemyName::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RequestNewSpawnedEnemyName, CallFunc_RequestNewSpawnedEnemyID_NewID) == 0x000048, "Member 'GI_SinglePlayer_C_RequestNewSpawnedEnemyName::CallFunc_RequestNewSpawnedEnemyID_NewID' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RequestNewSpawnedEnemyName, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000050, "Member 'GI_SinglePlayer_C_RequestNewSpawnedEnemyName::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RequestNewSpawnedEnemyName, CallFunc_Conv_StringToName_ReturnValue) == 0x000060, "Member 'GI_SinglePlayer_C_RequestNewSpawnedEnemyName::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.RegisterPatrolNode
// 0x00B8 (0x00B8 - 0x0000)
struct GI_SinglePlayer_C_RegisterPatrolNode final
{
public:
	class APatrolNode_C*                          PatrolNode;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CurrentNodeValid;                                  // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APatrolNode_C*                          CurrentPatrolNode;                                 // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSet<class APatrolNode_C*>                    VisitedPatrolNodeSet;                              // 0x0018(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         PathID;                                            // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x007D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x007E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x007F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Set_Contains_ReturnValue;                 // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0083(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class APatrolNode_C*>                  CallFunc_Set_ToArray_Result;                       // 0x0088(0x0010)(ReferenceParm)
	class APatrolNode_C*                          CallFunc_Array_Get_Item;                           // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_4;                // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_RegisterPatrolNode) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_RegisterPatrolNode");
static_assert(sizeof(GI_SinglePlayer_C_RegisterPatrolNode) == 0x0000B8, "Wrong size on GI_SinglePlayer_C_RegisterPatrolNode");
static_assert(offsetof(GI_SinglePlayer_C_RegisterPatrolNode, PatrolNode) == 0x000000, "Member 'GI_SinglePlayer_C_RegisterPatrolNode::PatrolNode' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterPatrolNode, CurrentNodeValid) == 0x000008, "Member 'GI_SinglePlayer_C_RegisterPatrolNode::CurrentNodeValid' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterPatrolNode, CurrentPatrolNode) == 0x000010, "Member 'GI_SinglePlayer_C_RegisterPatrolNode::CurrentPatrolNode' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterPatrolNode, VisitedPatrolNodeSet) == 0x000018, "Member 'GI_SinglePlayer_C_RegisterPatrolNode::VisitedPatrolNodeSet' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterPatrolNode, PathID) == 0x000068, "Member 'GI_SinglePlayer_C_RegisterPatrolNode::PathID' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterPatrolNode, Temp_int_Loop_Counter_Variable) == 0x00006C, "Member 'GI_SinglePlayer_C_RegisterPatrolNode::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterPatrolNode, CallFunc_IsValid_ReturnValue) == 0x000070, "Member 'GI_SinglePlayer_C_RegisterPatrolNode::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterPatrolNode, CallFunc_Add_IntInt_ReturnValue) == 0x000074, "Member 'GI_SinglePlayer_C_RegisterPatrolNode::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterPatrolNode, Temp_int_Array_Index_Variable) == 0x000078, "Member 'GI_SinglePlayer_C_RegisterPatrolNode::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterPatrolNode, CallFunc_Less_IntInt_ReturnValue) == 0x00007C, "Member 'GI_SinglePlayer_C_RegisterPatrolNode::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterPatrolNode, CallFunc_IsValid_ReturnValue_1) == 0x00007D, "Member 'GI_SinglePlayer_C_RegisterPatrolNode::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterPatrolNode, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00007E, "Member 'GI_SinglePlayer_C_RegisterPatrolNode::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterPatrolNode, CallFunc_Less_IntInt_ReturnValue_1) == 0x00007F, "Member 'GI_SinglePlayer_C_RegisterPatrolNode::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterPatrolNode, CallFunc_Set_Contains_ReturnValue) == 0x000080, "Member 'GI_SinglePlayer_C_RegisterPatrolNode::CallFunc_Set_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterPatrolNode, CallFunc_IsValid_ReturnValue_2) == 0x000081, "Member 'GI_SinglePlayer_C_RegisterPatrolNode::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterPatrolNode, CallFunc_Not_PreBool_ReturnValue) == 0x000082, "Member 'GI_SinglePlayer_C_RegisterPatrolNode::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterPatrolNode, CallFunc_BooleanAND_ReturnValue) == 0x000083, "Member 'GI_SinglePlayer_C_RegisterPatrolNode::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterPatrolNode, CallFunc_Less_IntInt_ReturnValue_2) == 0x000084, "Member 'GI_SinglePlayer_C_RegisterPatrolNode::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterPatrolNode, CallFunc_Set_ToArray_Result) == 0x000088, "Member 'GI_SinglePlayer_C_RegisterPatrolNode::CallFunc_Set_ToArray_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterPatrolNode, CallFunc_Array_Get_Item) == 0x000098, "Member 'GI_SinglePlayer_C_RegisterPatrolNode::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterPatrolNode, CallFunc_Array_Length_ReturnValue) == 0x0000A0, "Member 'GI_SinglePlayer_C_RegisterPatrolNode::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterPatrolNode, CallFunc_Less_IntInt_ReturnValue_3) == 0x0000A4, "Member 'GI_SinglePlayer_C_RegisterPatrolNode::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterPatrolNode, Temp_int_Variable) == 0x0000A8, "Member 'GI_SinglePlayer_C_RegisterPatrolNode::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterPatrolNode, CallFunc_Add_IntInt_ReturnValue_1) == 0x0000AC, "Member 'GI_SinglePlayer_C_RegisterPatrolNode::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterPatrolNode, CallFunc_Less_IntInt_ReturnValue_4) == 0x0000B0, "Member 'GI_SinglePlayer_C_RegisterPatrolNode::CallFunc_Less_IntInt_ReturnValue_4' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.UnregisterPatrolNode
// 0x0010 (0x0010 - 0x0000)
struct GI_SinglePlayer_C_UnregisterPatrolNode final
{
public:
	class APatrolNode_C*                          PatrolNode;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Set_Remove_ReturnValue;                   // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_UnregisterPatrolNode) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_UnregisterPatrolNode");
static_assert(sizeof(GI_SinglePlayer_C_UnregisterPatrolNode) == 0x000010, "Wrong size on GI_SinglePlayer_C_UnregisterPatrolNode");
static_assert(offsetof(GI_SinglePlayer_C_UnregisterPatrolNode, PatrolNode) == 0x000000, "Member 'GI_SinglePlayer_C_UnregisterPatrolNode::PatrolNode' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UnregisterPatrolNode, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'GI_SinglePlayer_C_UnregisterPatrolNode::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UnregisterPatrolNode, CallFunc_Set_Remove_ReturnValue) == 0x000009, "Member 'GI_SinglePlayer_C_UnregisterPatrolNode::CallFunc_Set_Remove_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UnregisterPatrolNode, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00000A, "Member 'GI_SinglePlayer_C_UnregisterPatrolNode::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.InitMusicSystemSettings
// 0x0008 (0x0008 - 0x0000)
struct GI_SinglePlayer_C_InitMusicSystemSettings final
{
public:
	class UPDA_MusicSystemSettings_C*             MusicSystemSettings;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_InitMusicSystemSettings) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_InitMusicSystemSettings");
static_assert(sizeof(GI_SinglePlayer_C_InitMusicSystemSettings) == 0x000008, "Wrong size on GI_SinglePlayer_C_InitMusicSystemSettings");
static_assert(offsetof(GI_SinglePlayer_C_InitMusicSystemSettings, MusicSystemSettings) == 0x000000, "Member 'GI_SinglePlayer_C_InitMusicSystemSettings::MusicSystemSettings' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.PlayStoryMusic
// 0x0040 (0x0040 - 0x0000)
struct GI_SinglePlayer_C_PlayStoryMusic final
{
public:
	struct FSTRUCT_MusicParams                    MusicParams;                                       // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	class UBP_MusicCue_C*                         MusicCue;                                          // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_MusicCue_C*                         CallFunc_SetMusicState_MusicCue;                   // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_PlayStoryMusic) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_PlayStoryMusic");
static_assert(sizeof(GI_SinglePlayer_C_PlayStoryMusic) == 0x000040, "Wrong size on GI_SinglePlayer_C_PlayStoryMusic");
static_assert(offsetof(GI_SinglePlayer_C_PlayStoryMusic, MusicParams) == 0x000000, "Member 'GI_SinglePlayer_C_PlayStoryMusic::MusicParams' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PlayStoryMusic, MusicCue) == 0x000030, "Member 'GI_SinglePlayer_C_PlayStoryMusic::MusicCue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PlayStoryMusic, CallFunc_SetMusicState_MusicCue) == 0x000038, "Member 'GI_SinglePlayer_C_PlayStoryMusic::CallFunc_SetMusicState_MusicCue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.PlayMusicInternal
// 0x0080 (0x0080 - 0x0000)
struct GI_SinglePlayer_C_PlayMusicInternal final
{
public:
	struct FSTRUCT_MusicParams                    NewMusicParams;                                    // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	class UBP_MusicCue_C*                         MusicCue;                                          // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 MusicCueClass;                                     // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TryFadeInStoppedMusicByClass_Result;      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryInterruptCurrentMusic_Result;          // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryInterruptCurrentMusic_Result_1;        // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_MusicCue_C*                         CallFunc_SpawnObject_ReturnValue;                  // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidSoftClassReference_ReturnValue;    // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UBP_MusicCue_C* MusicCue)> K2Node_CreateDelegate_OutputDelegate;              // 0x0054(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_LoadClassAsset_Blocking_ReturnValue;      // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 K2Node_ClassDynamicCast_AsBP_Music_Cue;            // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess;                  // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_PlayMusicInternal) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_PlayMusicInternal");
static_assert(sizeof(GI_SinglePlayer_C_PlayMusicInternal) == 0x000080, "Wrong size on GI_SinglePlayer_C_PlayMusicInternal");
static_assert(offsetof(GI_SinglePlayer_C_PlayMusicInternal, NewMusicParams) == 0x000000, "Member 'GI_SinglePlayer_C_PlayMusicInternal::NewMusicParams' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PlayMusicInternal, MusicCue) == 0x000030, "Member 'GI_SinglePlayer_C_PlayMusicInternal::MusicCue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PlayMusicInternal, MusicCueClass) == 0x000038, "Member 'GI_SinglePlayer_C_PlayMusicInternal::MusicCueClass' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PlayMusicInternal, CallFunc_TryFadeInStoppedMusicByClass_Result) == 0x000040, "Member 'GI_SinglePlayer_C_PlayMusicInternal::CallFunc_TryFadeInStoppedMusicByClass_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PlayMusicInternal, CallFunc_Not_PreBool_ReturnValue) == 0x000041, "Member 'GI_SinglePlayer_C_PlayMusicInternal::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PlayMusicInternal, CallFunc_TryInterruptCurrentMusic_Result) == 0x000042, "Member 'GI_SinglePlayer_C_PlayMusicInternal::CallFunc_TryInterruptCurrentMusic_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PlayMusicInternal, CallFunc_TryInterruptCurrentMusic_Result_1) == 0x000043, "Member 'GI_SinglePlayer_C_PlayMusicInternal::CallFunc_TryInterruptCurrentMusic_Result_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PlayMusicInternal, CallFunc_SpawnObject_ReturnValue) == 0x000048, "Member 'GI_SinglePlayer_C_PlayMusicInternal::CallFunc_SpawnObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PlayMusicInternal, CallFunc_IsValidSoftClassReference_ReturnValue) == 0x000050, "Member 'GI_SinglePlayer_C_PlayMusicInternal::CallFunc_IsValidSoftClassReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PlayMusicInternal, K2Node_CreateDelegate_OutputDelegate) == 0x000054, "Member 'GI_SinglePlayer_C_PlayMusicInternal::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PlayMusicInternal, CallFunc_LoadClassAsset_Blocking_ReturnValue) == 0x000068, "Member 'GI_SinglePlayer_C_PlayMusicInternal::CallFunc_LoadClassAsset_Blocking_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PlayMusicInternal, K2Node_ClassDynamicCast_AsBP_Music_Cue) == 0x000070, "Member 'GI_SinglePlayer_C_PlayMusicInternal::K2Node_ClassDynamicCast_AsBP_Music_Cue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PlayMusicInternal, K2Node_ClassDynamicCast_bSuccess) == 0x000078, "Member 'GI_SinglePlayer_C_PlayMusicInternal::K2Node_ClassDynamicCast_bSuccess' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.TryInterruptCurrentMusic
// 0x0038 (0x0038 - 0x0000)
struct GI_SinglePlayer_C_TryInterruptCurrentMusic final
{
public:
	class UClass*                                 NewMusicClass;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_MusicCue_C*                         PreviousMusicCue;                                  // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsMusicPlaying_Result;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ClassClass_ReturnValue;          // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_TryInterruptCurrentMusic) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_TryInterruptCurrentMusic");
static_assert(sizeof(GI_SinglePlayer_C_TryInterruptCurrentMusic) == 0x000038, "Wrong size on GI_SinglePlayer_C_TryInterruptCurrentMusic");
static_assert(offsetof(GI_SinglePlayer_C_TryInterruptCurrentMusic, NewMusicClass) == 0x000000, "Member 'GI_SinglePlayer_C_TryInterruptCurrentMusic::NewMusicClass' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryInterruptCurrentMusic, Result) == 0x000008, "Member 'GI_SinglePlayer_C_TryInterruptCurrentMusic::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryInterruptCurrentMusic, PreviousMusicCue) == 0x000010, "Member 'GI_SinglePlayer_C_TryInterruptCurrentMusic::PreviousMusicCue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryInterruptCurrentMusic, CallFunc_Array_Add_ReturnValue) == 0x000018, "Member 'GI_SinglePlayer_C_TryInterruptCurrentMusic::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryInterruptCurrentMusic, CallFunc_Array_Add_ReturnValue_1) == 0x00001C, "Member 'GI_SinglePlayer_C_TryInterruptCurrentMusic::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryInterruptCurrentMusic, CallFunc_IsMusicPlaying_Result) == 0x000020, "Member 'GI_SinglePlayer_C_TryInterruptCurrentMusic::CallFunc_IsMusicPlaying_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryInterruptCurrentMusic, CallFunc_GetObjectClass_ReturnValue) == 0x000028, "Member 'GI_SinglePlayer_C_TryInterruptCurrentMusic::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryInterruptCurrentMusic, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'GI_SinglePlayer_C_TryInterruptCurrentMusic::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryInterruptCurrentMusic, CallFunc_NotEqual_ClassClass_ReturnValue) == 0x000031, "Member 'GI_SinglePlayer_C_TryInterruptCurrentMusic::CallFunc_NotEqual_ClassClass_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.TryUpdateExplorationMusic
// 0x0010 (0x0010 - 0x0000)
struct GI_SinglePlayer_C_TryUpdateExplorationMusic final
{
public:
	class UBP_MusicCue_C*                         CallFunc_OnMusicStateUpdated_MusicCue;             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_TryUpdateExplorationMusic) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_TryUpdateExplorationMusic");
static_assert(sizeof(GI_SinglePlayer_C_TryUpdateExplorationMusic) == 0x000010, "Wrong size on GI_SinglePlayer_C_TryUpdateExplorationMusic");
static_assert(offsetof(GI_SinglePlayer_C_TryUpdateExplorationMusic, CallFunc_OnMusicStateUpdated_MusicCue) == 0x000000, "Member 'GI_SinglePlayer_C_TryUpdateExplorationMusic::CallFunc_OnMusicStateUpdated_MusicCue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryUpdateExplorationMusic, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000008, "Member 'GI_SinglePlayer_C_TryUpdateExplorationMusic::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryUpdateExplorationMusic, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000009, "Member 'GI_SinglePlayer_C_TryUpdateExplorationMusic::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryUpdateExplorationMusic, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x00000A, "Member 'GI_SinglePlayer_C_TryUpdateExplorationMusic::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.OnMusicStateUpdated
// 0x0400 (0x0400 - 0x0000)
struct GI_SinglePlayer_C_OnMusicStateUpdated final
{
public:
	struct FSTRUCT_MusicParams                    ExplicitMusicAssignment;                           // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	class UBP_MusicCue_C*                         MusicCue;                                          // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   MusicLevelName;                                    // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_MusicParams                    NewMusicParams;                                    // 0x0040(0x0030)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FSTRUCT_MusicParams                    CallFunc_GetDataTableRowFromName_OutRow;           // 0x0070(0x0030)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A2[0x2];                                       // 0x00A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetCurrentLevelName_Result;               // 0x00A4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_MusicParams                    CallFunc_GetDataTableRowFromName_OutRow_1;         // 0x00B0(0x0030)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue_1;    // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_LevelMusicSettings             CallFunc_GetDataTableRowFromName_OutRow_2;         // 0x00E8(0x0078)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue_2;    // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_161[0x7];                                      // 0x0161(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_MusicParams                    K2Node_MakeStruct_STRUCT_MusicParams;              // 0x0168(0x0030)(HasGetValueTypeHash)
	struct FSTRUCT_MusicParams                    CallFunc_GetDataTableRowFromName_OutRow_3;         // 0x0198(0x0030)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue_3;    // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x01C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1CA[0x6];                                      // 0x01CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_MusicParams                    CallFunc_GetDataTableRowFromName_OutRow_4;         // 0x01D0(0x0030)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue_4;    // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_201[0x3];                                      // 0x0201(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Select_Default;                             // 0x0204(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_20C[0x4];                                      // 0x020C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_MusicCue_C*                         CallFunc_PlayMusicInternal_MusicCue;               // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_LevelMusicSettings             CallFunc_GetDataTableRowFromName_OutRow_5;         // 0x0218(0x0078)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue_5;    // 0x0290(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValidSoftClassReference_ReturnValue;    // 0x0291(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_292[0x6];                                      // 0x0292(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_MusicParams                    K2Node_MakeStruct_STRUCT_MusicParams_1;            // 0x0298(0x0030)(HasGetValueTypeHash)
	struct FSTRUCT_LevelMusicSettings             CallFunc_GetDataTableRowFromName_OutRow_6;         // 0x02C8(0x0078)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue_6;    // 0x0340(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_341[0x7];                                      // 0x0341(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x0348(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0358(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_MusicParams                    K2Node_MakeStruct_STRUCT_MusicParams_2;            // 0x0360(0x0030)(HasGetValueTypeHash)
	struct FSTRUCT_MusicParams                    CallFunc_GetDataTableRowFromName_OutRow_7;         // 0x0390(0x0030)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue_7;    // 0x03C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C1[0x7];                                      // 0x03C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_MusicParams                    CallFunc_GetDataTableRowFromName_OutRow_8;         // 0x03C8(0x0030)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue_8;    // 0x03F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x03F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x03FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_2;                    // 0x03FB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_OnMusicStateUpdated) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_OnMusicStateUpdated");
static_assert(sizeof(GI_SinglePlayer_C_OnMusicStateUpdated) == 0x000400, "Wrong size on GI_SinglePlayer_C_OnMusicStateUpdated");
static_assert(offsetof(GI_SinglePlayer_C_OnMusicStateUpdated, ExplicitMusicAssignment) == 0x000000, "Member 'GI_SinglePlayer_C_OnMusicStateUpdated::ExplicitMusicAssignment' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnMusicStateUpdated, MusicCue) == 0x000030, "Member 'GI_SinglePlayer_C_OnMusicStateUpdated::MusicCue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnMusicStateUpdated, MusicLevelName) == 0x000038, "Member 'GI_SinglePlayer_C_OnMusicStateUpdated::MusicLevelName' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnMusicStateUpdated, NewMusicParams) == 0x000040, "Member 'GI_SinglePlayer_C_OnMusicStateUpdated::NewMusicParams' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnMusicStateUpdated, CallFunc_GetDataTableRowFromName_OutRow) == 0x000070, "Member 'GI_SinglePlayer_C_OnMusicStateUpdated::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnMusicStateUpdated, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x0000A0, "Member 'GI_SinglePlayer_C_OnMusicStateUpdated::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnMusicStateUpdated, CallFunc_NotEqual_NameName_ReturnValue) == 0x0000A1, "Member 'GI_SinglePlayer_C_OnMusicStateUpdated::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnMusicStateUpdated, CallFunc_GetCurrentLevelName_Result) == 0x0000A4, "Member 'GI_SinglePlayer_C_OnMusicStateUpdated::CallFunc_GetCurrentLevelName_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnMusicStateUpdated, CallFunc_GetDataTableRowFromName_OutRow_1) == 0x0000B0, "Member 'GI_SinglePlayer_C_OnMusicStateUpdated::CallFunc_GetDataTableRowFromName_OutRow_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnMusicStateUpdated, CallFunc_GetDataTableRowFromName_ReturnValue_1) == 0x0000E0, "Member 'GI_SinglePlayer_C_OnMusicStateUpdated::CallFunc_GetDataTableRowFromName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnMusicStateUpdated, CallFunc_GetDataTableRowFromName_OutRow_2) == 0x0000E8, "Member 'GI_SinglePlayer_C_OnMusicStateUpdated::CallFunc_GetDataTableRowFromName_OutRow_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnMusicStateUpdated, CallFunc_GetDataTableRowFromName_ReturnValue_2) == 0x000160, "Member 'GI_SinglePlayer_C_OnMusicStateUpdated::CallFunc_GetDataTableRowFromName_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnMusicStateUpdated, K2Node_MakeStruct_STRUCT_MusicParams) == 0x000168, "Member 'GI_SinglePlayer_C_OnMusicStateUpdated::K2Node_MakeStruct_STRUCT_MusicParams' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnMusicStateUpdated, CallFunc_GetDataTableRowFromName_OutRow_3) == 0x000198, "Member 'GI_SinglePlayer_C_OnMusicStateUpdated::CallFunc_GetDataTableRowFromName_OutRow_3' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnMusicStateUpdated, CallFunc_GetDataTableRowFromName_ReturnValue_3) == 0x0001C8, "Member 'GI_SinglePlayer_C_OnMusicStateUpdated::CallFunc_GetDataTableRowFromName_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnMusicStateUpdated, Temp_bool_Variable) == 0x0001C9, "Member 'GI_SinglePlayer_C_OnMusicStateUpdated::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnMusicStateUpdated, CallFunc_GetDataTableRowFromName_OutRow_4) == 0x0001D0, "Member 'GI_SinglePlayer_C_OnMusicStateUpdated::CallFunc_GetDataTableRowFromName_OutRow_4' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnMusicStateUpdated, CallFunc_GetDataTableRowFromName_ReturnValue_4) == 0x000200, "Member 'GI_SinglePlayer_C_OnMusicStateUpdated::CallFunc_GetDataTableRowFromName_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnMusicStateUpdated, K2Node_Select_Default) == 0x000204, "Member 'GI_SinglePlayer_C_OnMusicStateUpdated::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnMusicStateUpdated, CallFunc_PlayMusicInternal_MusicCue) == 0x000210, "Member 'GI_SinglePlayer_C_OnMusicStateUpdated::CallFunc_PlayMusicInternal_MusicCue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnMusicStateUpdated, CallFunc_GetDataTableRowFromName_OutRow_5) == 0x000218, "Member 'GI_SinglePlayer_C_OnMusicStateUpdated::CallFunc_GetDataTableRowFromName_OutRow_5' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnMusicStateUpdated, CallFunc_GetDataTableRowFromName_ReturnValue_5) == 0x000290, "Member 'GI_SinglePlayer_C_OnMusicStateUpdated::CallFunc_GetDataTableRowFromName_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnMusicStateUpdated, CallFunc_IsValidSoftClassReference_ReturnValue) == 0x000291, "Member 'GI_SinglePlayer_C_OnMusicStateUpdated::CallFunc_IsValidSoftClassReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnMusicStateUpdated, K2Node_MakeStruct_STRUCT_MusicParams_1) == 0x000298, "Member 'GI_SinglePlayer_C_OnMusicStateUpdated::K2Node_MakeStruct_STRUCT_MusicParams_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnMusicStateUpdated, CallFunc_GetDataTableRowFromName_OutRow_6) == 0x0002C8, "Member 'GI_SinglePlayer_C_OnMusicStateUpdated::CallFunc_GetDataTableRowFromName_OutRow_6' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnMusicStateUpdated, CallFunc_GetDataTableRowFromName_ReturnValue_6) == 0x000340, "Member 'GI_SinglePlayer_C_OnMusicStateUpdated::CallFunc_GetDataTableRowFromName_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnMusicStateUpdated, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x000348, "Member 'GI_SinglePlayer_C_OnMusicStateUpdated::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnMusicStateUpdated, CallFunc_Conv_StringToName_ReturnValue) == 0x000358, "Member 'GI_SinglePlayer_C_OnMusicStateUpdated::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnMusicStateUpdated, K2Node_MakeStruct_STRUCT_MusicParams_2) == 0x000360, "Member 'GI_SinglePlayer_C_OnMusicStateUpdated::K2Node_MakeStruct_STRUCT_MusicParams_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnMusicStateUpdated, CallFunc_GetDataTableRowFromName_OutRow_7) == 0x000390, "Member 'GI_SinglePlayer_C_OnMusicStateUpdated::CallFunc_GetDataTableRowFromName_OutRow_7' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnMusicStateUpdated, CallFunc_GetDataTableRowFromName_ReturnValue_7) == 0x0003C0, "Member 'GI_SinglePlayer_C_OnMusicStateUpdated::CallFunc_GetDataTableRowFromName_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnMusicStateUpdated, CallFunc_GetDataTableRowFromName_OutRow_8) == 0x0003C8, "Member 'GI_SinglePlayer_C_OnMusicStateUpdated::CallFunc_GetDataTableRowFromName_OutRow_8' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnMusicStateUpdated, CallFunc_GetDataTableRowFromName_ReturnValue_8) == 0x0003F8, "Member 'GI_SinglePlayer_C_OnMusicStateUpdated::CallFunc_GetDataTableRowFromName_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnMusicStateUpdated, K2Node_SwitchEnum_CmpSuccess) == 0x0003F9, "Member 'GI_SinglePlayer_C_OnMusicStateUpdated::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnMusicStateUpdated, K2Node_SwitchEnum_CmpSuccess_1) == 0x0003FA, "Member 'GI_SinglePlayer_C_OnMusicStateUpdated::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnMusicStateUpdated, K2Node_SwitchEnum_CmpSuccess_2) == 0x0003FB, "Member 'GI_SinglePlayer_C_OnMusicStateUpdated::K2Node_SwitchEnum_CmpSuccess_2' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.TickMusic
// 0x0028 (0x0028 - 0x0000)
struct GI_SinglePlayer_C_TickMusic final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_MusicCue_C*                         CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_TickMusic) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_TickMusic");
static_assert(sizeof(GI_SinglePlayer_C_TickMusic) == 0x000028, "Wrong size on GI_SinglePlayer_C_TickMusic");
static_assert(offsetof(GI_SinglePlayer_C_TickMusic, DeltaTime) == 0x000000, "Member 'GI_SinglePlayer_C_TickMusic::DeltaTime' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TickMusic, Temp_int_Array_Index_Variable) == 0x000004, "Member 'GI_SinglePlayer_C_TickMusic::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TickMusic, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'GI_SinglePlayer_C_TickMusic::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TickMusic, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'GI_SinglePlayer_C_TickMusic::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TickMusic, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'GI_SinglePlayer_C_TickMusic::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TickMusic, CallFunc_Array_Length_ReturnValue) == 0x000014, "Member 'GI_SinglePlayer_C_TickMusic::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TickMusic, CallFunc_Array_Get_Item) == 0x000018, "Member 'GI_SinglePlayer_C_TickMusic::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TickMusic, CallFunc_Less_IntInt_ReturnValue) == 0x000020, "Member 'GI_SinglePlayer_C_TickMusic::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.SetGameplayMusicState
// 0x0010 (0x0010 - 0x0000)
struct GI_SinglePlayer_C_SetGameplayMusicState final
{
public:
	EGameplayState                                Gameplay_State;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_MusicCue_C*                         CallFunc_SetMusicState_MusicCue;                   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_SetGameplayMusicState) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_SetGameplayMusicState");
static_assert(sizeof(GI_SinglePlayer_C_SetGameplayMusicState) == 0x000010, "Wrong size on GI_SinglePlayer_C_SetGameplayMusicState");
static_assert(offsetof(GI_SinglePlayer_C_SetGameplayMusicState, Gameplay_State) == 0x000000, "Member 'GI_SinglePlayer_C_SetGameplayMusicState::Gameplay_State' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetGameplayMusicState, CallFunc_SetMusicState_MusicCue) == 0x000008, "Member 'GI_SinglePlayer_C_SetGameplayMusicState::CallFunc_SetMusicState_MusicCue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.SetInGameMusicState
// 0x0010 (0x0010 - 0x0000)
struct GI_SinglePlayer_C_SetInGameMusicState final
{
public:
	EInGameState                                  In_Game_State;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_MusicCue_C*                         CallFunc_SetMusicState_MusicCue;                   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_SetInGameMusicState) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_SetInGameMusicState");
static_assert(sizeof(GI_SinglePlayer_C_SetInGameMusicState) == 0x000010, "Wrong size on GI_SinglePlayer_C_SetInGameMusicState");
static_assert(offsetof(GI_SinglePlayer_C_SetInGameMusicState, In_Game_State) == 0x000000, "Member 'GI_SinglePlayer_C_SetInGameMusicState::In_Game_State' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetInGameMusicState, CallFunc_SetMusicState_MusicCue) == 0x000008, "Member 'GI_SinglePlayer_C_SetInGameMusicState::CallFunc_SetMusicState_MusicCue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.GetAmbienceMusicState
// 0x0001 (0x0001 - 0x0000)
struct GI_SinglePlayer_C_GetAmbienceMusicState final
{
public:
	ExplorationState                              NewParam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_GetAmbienceMusicState) == 0x000001, "Wrong alignment on GI_SinglePlayer_C_GetAmbienceMusicState");
static_assert(sizeof(GI_SinglePlayer_C_GetAmbienceMusicState) == 0x000001, "Wrong size on GI_SinglePlayer_C_GetAmbienceMusicState");
static_assert(offsetof(GI_SinglePlayer_C_GetAmbienceMusicState, NewParam) == 0x000000, "Member 'GI_SinglePlayer_C_GetAmbienceMusicState::NewParam' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.SetAmbienceMusicState
// 0x0010 (0x0010 - 0x0000)
struct GI_SinglePlayer_C_SetAmbienceMusicState final
{
public:
	ExplorationState                              In_Game_State;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_MusicCue_C*                         CallFunc_OnMusicStateUpdated_MusicCue;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_SetAmbienceMusicState) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_SetAmbienceMusicState");
static_assert(sizeof(GI_SinglePlayer_C_SetAmbienceMusicState) == 0x000010, "Wrong size on GI_SinglePlayer_C_SetAmbienceMusicState");
static_assert(offsetof(GI_SinglePlayer_C_SetAmbienceMusicState, In_Game_State) == 0x000000, "Member 'GI_SinglePlayer_C_SetAmbienceMusicState::In_Game_State' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetAmbienceMusicState, CallFunc_OnMusicStateUpdated_MusicCue) == 0x000008, "Member 'GI_SinglePlayer_C_SetAmbienceMusicState::CallFunc_OnMusicStateUpdated_MusicCue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.InitializeShockSettings
// 0x0078 (0x0078 - 0x0000)
struct GI_SinglePlayer_C_InitializeShockSettings final
{
public:
	class ACON_Hacker_C*                          HackerController;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USAVE_Settings_C*                       SettingsObject;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EUDLSSMode                                    Temp_byte_Variable;                                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUDLSSMode                                    Temp_byte_Variable_1;                              // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetInputActionPrefixForCategory_Result;   // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetInputActionPrefixForCategory_Result_1; // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetInputActionPrefixForCategory_Result_2; // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDLSSSupported_ReturnValue;              // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EUDLSSMode                                    K2Node_Select_Default;                             // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USAVE_Settings_C*                       CallFunc_LoadShockSettings_Settings;               // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SaveShockSettings_Result;                 // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameUserSettings*                      CallFunc_GetGameUserSettings_ReturnValue;          // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USAVE_Settings_C*                       CallFunc_LoadShockSettings_Settings_1;             // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_InitializeShockSettings) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_InitializeShockSettings");
static_assert(sizeof(GI_SinglePlayer_C_InitializeShockSettings) == 0x000078, "Wrong size on GI_SinglePlayer_C_InitializeShockSettings");
static_assert(offsetof(GI_SinglePlayer_C_InitializeShockSettings, HackerController) == 0x000000, "Member 'GI_SinglePlayer_C_InitializeShockSettings::HackerController' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_InitializeShockSettings, SettingsObject) == 0x000008, "Member 'GI_SinglePlayer_C_InitializeShockSettings::SettingsObject' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_InitializeShockSettings, Temp_bool_Variable) == 0x000010, "Member 'GI_SinglePlayer_C_InitializeShockSettings::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_InitializeShockSettings, Temp_byte_Variable) == 0x000011, "Member 'GI_SinglePlayer_C_InitializeShockSettings::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_InitializeShockSettings, Temp_byte_Variable_1) == 0x000012, "Member 'GI_SinglePlayer_C_InitializeShockSettings::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_InitializeShockSettings, CallFunc_GetInputActionPrefixForCategory_Result) == 0x000018, "Member 'GI_SinglePlayer_C_InitializeShockSettings::CallFunc_GetInputActionPrefixForCategory_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_InitializeShockSettings, CallFunc_GetInputActionPrefixForCategory_Result_1) == 0x000028, "Member 'GI_SinglePlayer_C_InitializeShockSettings::CallFunc_GetInputActionPrefixForCategory_Result_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_InitializeShockSettings, CallFunc_GetInputActionPrefixForCategory_Result_2) == 0x000038, "Member 'GI_SinglePlayer_C_InitializeShockSettings::CallFunc_GetInputActionPrefixForCategory_Result_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_InitializeShockSettings, CallFunc_IsDLSSSupported_ReturnValue) == 0x000048, "Member 'GI_SinglePlayer_C_InitializeShockSettings::CallFunc_IsDLSSSupported_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_InitializeShockSettings, K2Node_Select_Default) == 0x000049, "Member 'GI_SinglePlayer_C_InitializeShockSettings::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_InitializeShockSettings, CallFunc_LoadShockSettings_Settings) == 0x000050, "Member 'GI_SinglePlayer_C_InitializeShockSettings::CallFunc_LoadShockSettings_Settings' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_InitializeShockSettings, CallFunc_SaveShockSettings_Result) == 0x000058, "Member 'GI_SinglePlayer_C_InitializeShockSettings::CallFunc_SaveShockSettings_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_InitializeShockSettings, CallFunc_GetGameUserSettings_ReturnValue) == 0x000060, "Member 'GI_SinglePlayer_C_InitializeShockSettings::CallFunc_GetGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_InitializeShockSettings, CallFunc_Not_PreBool_ReturnValue) == 0x000068, "Member 'GI_SinglePlayer_C_InitializeShockSettings::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_InitializeShockSettings, CallFunc_LoadShockSettings_Settings_1) == 0x000070, "Member 'GI_SinglePlayer_C_InitializeShockSettings::CallFunc_LoadShockSettings_Settings_1' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.SetDefaultDifficultyValues
// 0x0008 (0x0008 - 0x0000)
struct GI_SinglePlayer_C_SetDefaultDifficultyValues final
{
public:
	ENUM_GameDifficulty                           Combat;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_GameDifficulty                           Mission;                                           // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_GameDifficulty                           Puzzle;                                            // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_GameDifficulty                           Cyber;                                             // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_MakeShockDifficultyBitfield_DifficultyBitfield; // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_SetDefaultDifficultyValues) == 0x000004, "Wrong alignment on GI_SinglePlayer_C_SetDefaultDifficultyValues");
static_assert(sizeof(GI_SinglePlayer_C_SetDefaultDifficultyValues) == 0x000008, "Wrong size on GI_SinglePlayer_C_SetDefaultDifficultyValues");
static_assert(offsetof(GI_SinglePlayer_C_SetDefaultDifficultyValues, Combat) == 0x000000, "Member 'GI_SinglePlayer_C_SetDefaultDifficultyValues::Combat' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetDefaultDifficultyValues, Mission) == 0x000001, "Member 'GI_SinglePlayer_C_SetDefaultDifficultyValues::Mission' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetDefaultDifficultyValues, Puzzle) == 0x000002, "Member 'GI_SinglePlayer_C_SetDefaultDifficultyValues::Puzzle' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetDefaultDifficultyValues, Cyber) == 0x000003, "Member 'GI_SinglePlayer_C_SetDefaultDifficultyValues::Cyber' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetDefaultDifficultyValues, CallFunc_MakeShockDifficultyBitfield_DifficultyBitfield) == 0x000004, "Member 'GI_SinglePlayer_C_SetDefaultDifficultyValues::CallFunc_MakeShockDifficultyBitfield_DifficultyBitfield' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.SetDifficultyValues
// 0x0018 (0x0018 - 0x0000)
struct GI_SinglePlayer_C_SetDifficultyValues final
{
public:
	ENUM_GameDifficulty                           Combat;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_GameDifficulty                           Mission;                                           // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_GameDifficulty                           Puzzle;                                            // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_GameDifficulty                           Cyber;                                             // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStreamingSaveGameSession*              CallFunc_GetGameSession_ReturnValue;               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_MakeShockDifficultyBitfield_DifficultyBitfield; // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_SetDifficultyValues) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_SetDifficultyValues");
static_assert(sizeof(GI_SinglePlayer_C_SetDifficultyValues) == 0x000018, "Wrong size on GI_SinglePlayer_C_SetDifficultyValues");
static_assert(offsetof(GI_SinglePlayer_C_SetDifficultyValues, Combat) == 0x000000, "Member 'GI_SinglePlayer_C_SetDifficultyValues::Combat' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetDifficultyValues, Mission) == 0x000001, "Member 'GI_SinglePlayer_C_SetDifficultyValues::Mission' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetDifficultyValues, Puzzle) == 0x000002, "Member 'GI_SinglePlayer_C_SetDifficultyValues::Puzzle' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetDifficultyValues, Cyber) == 0x000003, "Member 'GI_SinglePlayer_C_SetDifficultyValues::Cyber' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetDifficultyValues, CallFunc_GetGameSession_ReturnValue) == 0x000008, "Member 'GI_SinglePlayer_C_SetDifficultyValues::CallFunc_GetGameSession_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetDifficultyValues, CallFunc_MakeShockDifficultyBitfield_DifficultyBitfield) == 0x000010, "Member 'GI_SinglePlayer_C_SetDifficultyValues::CallFunc_MakeShockDifficultyBitfield_DifficultyBitfield' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.GetDifficultyValues
// 0x0018 (0x0018 - 0x0000)
struct GI_SinglePlayer_C_GetDifficultyValues final
{
public:
	ENUM_GameDifficulty                           Combat;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_GameDifficulty                           Mission;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_GameDifficulty                           Puzzle;                                            // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_GameDifficulty                           Cyber;                                             // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStreamingSaveGameSession*              CallFunc_GetGameSession_ReturnValue;               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_GameDifficulty                           CallFunc_GetShockDifficultyValuesFromBitfield_Combat; // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_GameDifficulty                           CallFunc_GetShockDifficultyValuesFromBitfield_Mission; // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_GameDifficulty                           CallFunc_GetShockDifficultyValuesFromBitfield_Puzzle; // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_GameDifficulty                           CallFunc_GetShockDifficultyValuesFromBitfield_Cyber; // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_GetDifficultyValues) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_GetDifficultyValues");
static_assert(sizeof(GI_SinglePlayer_C_GetDifficultyValues) == 0x000018, "Wrong size on GI_SinglePlayer_C_GetDifficultyValues");
static_assert(offsetof(GI_SinglePlayer_C_GetDifficultyValues, Combat) == 0x000000, "Member 'GI_SinglePlayer_C_GetDifficultyValues::Combat' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetDifficultyValues, Mission) == 0x000001, "Member 'GI_SinglePlayer_C_GetDifficultyValues::Mission' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetDifficultyValues, Puzzle) == 0x000002, "Member 'GI_SinglePlayer_C_GetDifficultyValues::Puzzle' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetDifficultyValues, Cyber) == 0x000003, "Member 'GI_SinglePlayer_C_GetDifficultyValues::Cyber' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetDifficultyValues, CallFunc_GetGameSession_ReturnValue) == 0x000008, "Member 'GI_SinglePlayer_C_GetDifficultyValues::CallFunc_GetGameSession_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetDifficultyValues, CallFunc_GetShockDifficultyValuesFromBitfield_Combat) == 0x000010, "Member 'GI_SinglePlayer_C_GetDifficultyValues::CallFunc_GetShockDifficultyValuesFromBitfield_Combat' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetDifficultyValues, CallFunc_GetShockDifficultyValuesFromBitfield_Mission) == 0x000011, "Member 'GI_SinglePlayer_C_GetDifficultyValues::CallFunc_GetShockDifficultyValuesFromBitfield_Mission' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetDifficultyValues, CallFunc_GetShockDifficultyValuesFromBitfield_Puzzle) == 0x000012, "Member 'GI_SinglePlayer_C_GetDifficultyValues::CallFunc_GetShockDifficultyValuesFromBitfield_Puzzle' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetDifficultyValues, CallFunc_GetShockDifficultyValuesFromBitfield_Cyber) == 0x000013, "Member 'GI_SinglePlayer_C_GetDifficultyValues::CallFunc_GetShockDifficultyValuesFromBitfield_Cyber' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.GetDifficultyByType
// 0x0018 (0x0018 - 0x0000)
struct GI_SinglePlayer_C_GetDifficultyByType final
{
public:
	ENUM_GameDifficultyConfigCategory             Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_GameDifficulty                           Difficulty;                                        // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UStreamingSaveGameSession*              CallFunc_GetGameSession_ReturnValue;               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_GameDifficulty                           CallFunc_GetShockDifficultyByType_Difficulty;      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_GetDifficultyByType) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_GetDifficultyByType");
static_assert(sizeof(GI_SinglePlayer_C_GetDifficultyByType) == 0x000018, "Wrong size on GI_SinglePlayer_C_GetDifficultyByType");
static_assert(offsetof(GI_SinglePlayer_C_GetDifficultyByType, Type) == 0x000000, "Member 'GI_SinglePlayer_C_GetDifficultyByType::Type' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetDifficultyByType, Difficulty) == 0x000001, "Member 'GI_SinglePlayer_C_GetDifficultyByType::Difficulty' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetDifficultyByType, CallFunc_GetGameSession_ReturnValue) == 0x000008, "Member 'GI_SinglePlayer_C_GetDifficultyByType::CallFunc_GetGameSession_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetDifficultyByType, CallFunc_GetShockDifficultyByType_Difficulty) == 0x000010, "Member 'GI_SinglePlayer_C_GetDifficultyByType::CallFunc_GetShockDifficultyByType_Difficulty' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.GetCombatDifficultySettings
// 0x0088 (0x0088 - 0x0000)
struct GI_SinglePlayer_C_GetCombatDifficultySettings final
{
public:
	struct FSTRUCT_CombatDifficultySettings       Settings;                                          // 0x0000(0x0034)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_GameDifficulty                           CallFunc_GetDifficultyByType_Difficulty;           // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_CombatDifficultySettings       CallFunc_GetDataTableRowFromName_OutRow;           // 0x0050(0x0034)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_GetCombatDifficultySettings) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_GetCombatDifficultySettings");
static_assert(sizeof(GI_SinglePlayer_C_GetCombatDifficultySettings) == 0x000088, "Wrong size on GI_SinglePlayer_C_GetCombatDifficultySettings");
static_assert(offsetof(GI_SinglePlayer_C_GetCombatDifficultySettings, Settings) == 0x000000, "Member 'GI_SinglePlayer_C_GetCombatDifficultySettings::Settings' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetCombatDifficultySettings, CallFunc_GetDifficultyByType_Difficulty) == 0x000034, "Member 'GI_SinglePlayer_C_GetCombatDifficultySettings::CallFunc_GetDifficultyByType_Difficulty' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetCombatDifficultySettings, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x000038, "Member 'GI_SinglePlayer_C_GetCombatDifficultySettings::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetCombatDifficultySettings, CallFunc_Conv_StringToName_ReturnValue) == 0x000048, "Member 'GI_SinglePlayer_C_GetCombatDifficultySettings::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetCombatDifficultySettings, CallFunc_GetDataTableRowFromName_OutRow) == 0x000050, "Member 'GI_SinglePlayer_C_GetCombatDifficultySettings::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetCombatDifficultySettings, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000084, "Member 'GI_SinglePlayer_C_GetCombatDifficultySettings::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.GetMissionDifficultySettings
// 0x0038 (0x0038 - 0x0000)
struct GI_SinglePlayer_C_GetMissionDifficultySettings final
{
public:
	struct FSTRUCT_MissionDifficultySettings      Settings;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_GameDifficulty                           CallFunc_GetDifficultyByType_Difficulty;           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_MissionDifficultySettings      CallFunc_GetDataTableRowFromName_OutRow;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_GetMissionDifficultySettings) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_GetMissionDifficultySettings");
static_assert(sizeof(GI_SinglePlayer_C_GetMissionDifficultySettings) == 0x000038, "Wrong size on GI_SinglePlayer_C_GetMissionDifficultySettings");
static_assert(offsetof(GI_SinglePlayer_C_GetMissionDifficultySettings, Settings) == 0x000000, "Member 'GI_SinglePlayer_C_GetMissionDifficultySettings::Settings' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetMissionDifficultySettings, CallFunc_GetDifficultyByType_Difficulty) == 0x000008, "Member 'GI_SinglePlayer_C_GetMissionDifficultySettings::CallFunc_GetDifficultyByType_Difficulty' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetMissionDifficultySettings, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x000010, "Member 'GI_SinglePlayer_C_GetMissionDifficultySettings::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetMissionDifficultySettings, CallFunc_Conv_StringToName_ReturnValue) == 0x000020, "Member 'GI_SinglePlayer_C_GetMissionDifficultySettings::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetMissionDifficultySettings, CallFunc_GetDataTableRowFromName_OutRow) == 0x000028, "Member 'GI_SinglePlayer_C_GetMissionDifficultySettings::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetMissionDifficultySettings, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000030, "Member 'GI_SinglePlayer_C_GetMissionDifficultySettings::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.SetVolume
// 0x0008 (0x0008 - 0x0000)
struct GI_SinglePlayer_C_SetVolume final
{
public:
	float                                         Volume;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_VolumeType                               Type;                                              // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_SetVolume) == 0x000004, "Wrong alignment on GI_SinglePlayer_C_SetVolume");
static_assert(sizeof(GI_SinglePlayer_C_SetVolume) == 0x000008, "Wrong size on GI_SinglePlayer_C_SetVolume");
static_assert(offsetof(GI_SinglePlayer_C_SetVolume, Volume) == 0x000000, "Member 'GI_SinglePlayer_C_SetVolume::Volume' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetVolume, Type) == 0x000004, "Member 'GI_SinglePlayer_C_SetVolume::Type' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.SetVolumeInternal
// 0x0008 (0x0008 - 0x0000)
struct GI_SinglePlayer_C_SetVolumeInternal final
{
public:
	float                                         Volume;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_VolumeType                               Type;                                              // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_SetVolumeInternal) == 0x000004, "Wrong alignment on GI_SinglePlayer_C_SetVolumeInternal");
static_assert(sizeof(GI_SinglePlayer_C_SetVolumeInternal) == 0x000008, "Wrong size on GI_SinglePlayer_C_SetVolumeInternal");
static_assert(offsetof(GI_SinglePlayer_C_SetVolumeInternal, Volume) == 0x000000, "Member 'GI_SinglePlayer_C_SetVolumeInternal::Volume' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetVolumeInternal, Type) == 0x000004, "Member 'GI_SinglePlayer_C_SetVolumeInternal::Type' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetVolumeInternal, K2Node_SwitchEnum_CmpSuccess) == 0x000005, "Member 'GI_SinglePlayer_C_SetVolumeInternal::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.LoadShockSettings
// 0x0048 (0x0048 - 0x0000)
struct GI_SinglePlayer_C_LoadShockSettings final
{
public:
	int32                                         UserIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USAVE_Settings_C*                       Settings;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDefaultLanguage_ReturnValue;           // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SaveGameToSlot_ReturnValue;               // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USAVE_Settings_C*                       CallFunc_CreateSaveGameObject_ReturnValue;         // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USaveGame*                              CallFunc_LoadGameFromSlot_ReturnValue;             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USAVE_Settings_C*                       K2Node_DynamicCast_AsSAVE_Settings;                // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_LoadShockSettings) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_LoadShockSettings");
static_assert(sizeof(GI_SinglePlayer_C_LoadShockSettings) == 0x000048, "Wrong size on GI_SinglePlayer_C_LoadShockSettings");
static_assert(offsetof(GI_SinglePlayer_C_LoadShockSettings, UserIndex) == 0x000000, "Member 'GI_SinglePlayer_C_LoadShockSettings::UserIndex' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_LoadShockSettings, Settings) == 0x000008, "Member 'GI_SinglePlayer_C_LoadShockSettings::Settings' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_LoadShockSettings, CallFunc_GetDefaultLanguage_ReturnValue) == 0x000010, "Member 'GI_SinglePlayer_C_LoadShockSettings::CallFunc_GetDefaultLanguage_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_LoadShockSettings, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'GI_SinglePlayer_C_LoadShockSettings::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_LoadShockSettings, CallFunc_SaveGameToSlot_ReturnValue) == 0x000021, "Member 'GI_SinglePlayer_C_LoadShockSettings::CallFunc_SaveGameToSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_LoadShockSettings, CallFunc_CreateSaveGameObject_ReturnValue) == 0x000028, "Member 'GI_SinglePlayer_C_LoadShockSettings::CallFunc_CreateSaveGameObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_LoadShockSettings, CallFunc_LoadGameFromSlot_ReturnValue) == 0x000030, "Member 'GI_SinglePlayer_C_LoadShockSettings::CallFunc_LoadGameFromSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_LoadShockSettings, K2Node_DynamicCast_AsSAVE_Settings) == 0x000038, "Member 'GI_SinglePlayer_C_LoadShockSettings::K2Node_DynamicCast_AsSAVE_Settings' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_LoadShockSettings, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'GI_SinglePlayer_C_LoadShockSettings::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.SaveShockSettings
// 0x0010 (0x0010 - 0x0000)
struct GI_SinglePlayer_C_SaveShockSettings final
{
public:
	class USAVE_Settings_C*                       Settings;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         UserIndex;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SaveGameToSlot_ReturnValue;               // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_SaveShockSettings) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_SaveShockSettings");
static_assert(sizeof(GI_SinglePlayer_C_SaveShockSettings) == 0x000010, "Wrong size on GI_SinglePlayer_C_SaveShockSettings");
static_assert(offsetof(GI_SinglePlayer_C_SaveShockSettings, Settings) == 0x000000, "Member 'GI_SinglePlayer_C_SaveShockSettings::Settings' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SaveShockSettings, UserIndex) == 0x000008, "Member 'GI_SinglePlayer_C_SaveShockSettings::UserIndex' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SaveShockSettings, Result) == 0x00000C, "Member 'GI_SinglePlayer_C_SaveShockSettings::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SaveShockSettings, CallFunc_SaveGameToSlot_ReturnValue) == 0x00000D, "Member 'GI_SinglePlayer_C_SaveShockSettings::CallFunc_SaveGameToSlot_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.SetMusicState
// 0x0048 (0x0048 - 0x0000)
struct GI_SinglePlayer_C_SetMusicState final
{
public:
	EMenuState                                    MenuState;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInGameState                                  GameState;                                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGameplayState                                GameplayState;                                     // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_MusicParams                    ExplicitAudioAssignment;                           // 0x0008(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	class UBP_MusicCue_C*                         MusicCue;                                          // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_MusicCue_C*                         CallFunc_OnMusicStateUpdated_MusicCue;             // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_SetMusicState) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_SetMusicState");
static_assert(sizeof(GI_SinglePlayer_C_SetMusicState) == 0x000048, "Wrong size on GI_SinglePlayer_C_SetMusicState");
static_assert(offsetof(GI_SinglePlayer_C_SetMusicState, MenuState) == 0x000000, "Member 'GI_SinglePlayer_C_SetMusicState::MenuState' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetMusicState, GameState) == 0x000001, "Member 'GI_SinglePlayer_C_SetMusicState::GameState' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetMusicState, GameplayState) == 0x000002, "Member 'GI_SinglePlayer_C_SetMusicState::GameplayState' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetMusicState, ExplicitAudioAssignment) == 0x000008, "Member 'GI_SinglePlayer_C_SetMusicState::ExplicitAudioAssignment' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetMusicState, MusicCue) == 0x000038, "Member 'GI_SinglePlayer_C_SetMusicState::MusicCue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetMusicState, CallFunc_OnMusicStateUpdated_MusicCue) == 0x000040, "Member 'GI_SinglePlayer_C_SetMusicState::CallFunc_OnMusicStateUpdated_MusicCue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.EVENT_OnMusicFinished
// 0x0020 (0x0020 - 0x0000)
struct GI_SinglePlayer_C_EVENT_OnMusicFinished final
{
public:
	class UBP_MusicCue_C*                         MusicCue;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UBP_MusicCue_C* MusicCue)> K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_EVENT_OnMusicFinished) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_EVENT_OnMusicFinished");
static_assert(sizeof(GI_SinglePlayer_C_EVENT_OnMusicFinished) == 0x000020, "Wrong size on GI_SinglePlayer_C_EVENT_OnMusicFinished");
static_assert(offsetof(GI_SinglePlayer_C_EVENT_OnMusicFinished, MusicCue) == 0x000000, "Member 'GI_SinglePlayer_C_EVENT_OnMusicFinished::MusicCue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_EVENT_OnMusicFinished, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'GI_SinglePlayer_C_EVENT_OnMusicFinished::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_EVENT_OnMusicFinished, CallFunc_Array_RemoveItem_ReturnValue) == 0x000018, "Member 'GI_SinglePlayer_C_EVENT_OnMusicFinished::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_EVENT_OnMusicFinished, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000019, "Member 'GI_SinglePlayer_C_EVENT_OnMusicFinished::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_EVENT_OnMusicFinished, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x00001A, "Member 'GI_SinglePlayer_C_EVENT_OnMusicFinished::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.SetMusicLevelOverride
// 0x0108 (0x0108 - 0x0000)
struct GI_SinglePlayer_C_SetMusicLevelOverride final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_MusicCue_C*                         CallFunc_OnMusicStateUpdated_MusicCue;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_LevelInfo                      CallFunc_GetLevelInfo_LevelInfo;                   // 0x0018(0x00C8)(HasGetValueTypeHash)
	bool                                          CallFunc_GetLevelInfo_Found;                       // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_SetMusicLevelOverride) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_SetMusicLevelOverride");
static_assert(sizeof(GI_SinglePlayer_C_SetMusicLevelOverride) == 0x000108, "Wrong size on GI_SinglePlayer_C_SetMusicLevelOverride");
static_assert(offsetof(GI_SinglePlayer_C_SetMusicLevelOverride, LevelName) == 0x000000, "Member 'GI_SinglePlayer_C_SetMusicLevelOverride::LevelName' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetMusicLevelOverride, Result) == 0x000008, "Member 'GI_SinglePlayer_C_SetMusicLevelOverride::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetMusicLevelOverride, CallFunc_NotEqual_NameName_ReturnValue) == 0x000009, "Member 'GI_SinglePlayer_C_SetMusicLevelOverride::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetMusicLevelOverride, CallFunc_OnMusicStateUpdated_MusicCue) == 0x000010, "Member 'GI_SinglePlayer_C_SetMusicLevelOverride::CallFunc_OnMusicStateUpdated_MusicCue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetMusicLevelOverride, CallFunc_GetLevelInfo_LevelInfo) == 0x000018, "Member 'GI_SinglePlayer_C_SetMusicLevelOverride::CallFunc_GetLevelInfo_LevelInfo' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetMusicLevelOverride, CallFunc_GetLevelInfo_Found) == 0x0000E0, "Member 'GI_SinglePlayer_C_SetMusicLevelOverride::CallFunc_GetLevelInfo_Found' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetMusicLevelOverride, CallFunc_Conv_NameToString_ReturnValue) == 0x0000E8, "Member 'GI_SinglePlayer_C_SetMusicLevelOverride::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetMusicLevelOverride, CallFunc_Concat_StrStr_ReturnValue) == 0x0000F8, "Member 'GI_SinglePlayer_C_SetMusicLevelOverride::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.IsMusicInState
// 0x0009 (0x0009 - 0x0000)
struct GI_SinglePlayer_C_IsMusicInState final
{
public:
	EMenuState                                    MenuState;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInGameState                                  GameState;                                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGameplayState                                GameplayState;                                     // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_IsMusicInState) == 0x000001, "Wrong alignment on GI_SinglePlayer_C_IsMusicInState");
static_assert(sizeof(GI_SinglePlayer_C_IsMusicInState) == 0x000009, "Wrong size on GI_SinglePlayer_C_IsMusicInState");
static_assert(offsetof(GI_SinglePlayer_C_IsMusicInState, MenuState) == 0x000000, "Member 'GI_SinglePlayer_C_IsMusicInState::MenuState' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_IsMusicInState, GameState) == 0x000001, "Member 'GI_SinglePlayer_C_IsMusicInState::GameState' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_IsMusicInState, GameplayState) == 0x000002, "Member 'GI_SinglePlayer_C_IsMusicInState::GameplayState' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_IsMusicInState, Result) == 0x000003, "Member 'GI_SinglePlayer_C_IsMusicInState::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_IsMusicInState, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000004, "Member 'GI_SinglePlayer_C_IsMusicInState::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_IsMusicInState, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000005, "Member 'GI_SinglePlayer_C_IsMusicInState::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_IsMusicInState, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000006, "Member 'GI_SinglePlayer_C_IsMusicInState::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_IsMusicInState, CallFunc_BooleanAND_ReturnValue) == 0x000007, "Member 'GI_SinglePlayer_C_IsMusicInState::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_IsMusicInState, CallFunc_BooleanAND_ReturnValue_1) == 0x000008, "Member 'GI_SinglePlayer_C_IsMusicInState::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.ApplyDefaultUserSettings
// 0x0010 (0x0010 - 0x0000)
struct GI_SinglePlayer_C_ApplyDefaultUserSettings final
{
public:
	class UGameUserSettings*                      CallFunc_GetGameUserSettings_ReturnValue;          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              CallFunc_GetDesktopResolution_ReturnValue;         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_ApplyDefaultUserSettings) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_ApplyDefaultUserSettings");
static_assert(sizeof(GI_SinglePlayer_C_ApplyDefaultUserSettings) == 0x000010, "Wrong size on GI_SinglePlayer_C_ApplyDefaultUserSettings");
static_assert(offsetof(GI_SinglePlayer_C_ApplyDefaultUserSettings, CallFunc_GetGameUserSettings_ReturnValue) == 0x000000, "Member 'GI_SinglePlayer_C_ApplyDefaultUserSettings::CallFunc_GetGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ApplyDefaultUserSettings, CallFunc_GetDesktopResolution_ReturnValue) == 0x000008, "Member 'GI_SinglePlayer_C_ApplyDefaultUserSettings::CallFunc_GetDesktopResolution_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.TryGenerateDestructCode
// 0x0098 (0x0098 - 0x0000)
struct GI_SinglePlayer_C_TryGenerateDestructCode final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CandidateDigits;                                   // 0x0008(0x0010)(Edit, BlueprintVisible)
	int32                                         DigitIndex;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RandomSeed;                                        // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRandomStream                          RandomStream;                                      // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor)
	int32                                         Temp_int_Variable;                                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRandomStream                          CallFunc_MakeRandomStream_ReturnValue;             // 0x002C(0x0008)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomIntegerInRangeFromStream_ReturnValue; // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomIntegerInRangeFromStream_ReturnValue_1; // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomIntegerInRangeFromStream_ReturnValue_2; // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomIntegerInRangeFromStream_ReturnValue_3; // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_CreateRandomSeedForContext_Seed;          // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_GameDifficulty                           CallFunc_GetDifficultyByType_Difficulty;           // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E[0x2];                                       // 0x006E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_3;                  // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_2;           // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_4;                  // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_TryGenerateDestructCode) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_TryGenerateDestructCode");
static_assert(sizeof(GI_SinglePlayer_C_TryGenerateDestructCode) == 0x000098, "Wrong size on GI_SinglePlayer_C_TryGenerateDestructCode");
static_assert(offsetof(GI_SinglePlayer_C_TryGenerateDestructCode, Result) == 0x000000, "Member 'GI_SinglePlayer_C_TryGenerateDestructCode::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryGenerateDestructCode, CandidateDigits) == 0x000008, "Member 'GI_SinglePlayer_C_TryGenerateDestructCode::CandidateDigits' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryGenerateDestructCode, DigitIndex) == 0x000018, "Member 'GI_SinglePlayer_C_TryGenerateDestructCode::DigitIndex' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryGenerateDestructCode, RandomSeed) == 0x00001C, "Member 'GI_SinglePlayer_C_TryGenerateDestructCode::RandomSeed' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryGenerateDestructCode, RandomStream) == 0x000020, "Member 'GI_SinglePlayer_C_TryGenerateDestructCode::RandomStream' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryGenerateDestructCode, Temp_int_Variable) == 0x000028, "Member 'GI_SinglePlayer_C_TryGenerateDestructCode::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryGenerateDestructCode, CallFunc_MakeRandomStream_ReturnValue) == 0x00002C, "Member 'GI_SinglePlayer_C_TryGenerateDestructCode::CallFunc_MakeRandomStream_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryGenerateDestructCode, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000034, "Member 'GI_SinglePlayer_C_TryGenerateDestructCode::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryGenerateDestructCode, CallFunc_Add_IntInt_ReturnValue) == 0x000038, "Member 'GI_SinglePlayer_C_TryGenerateDestructCode::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryGenerateDestructCode, Temp_int_Variable_1) == 0x00003C, "Member 'GI_SinglePlayer_C_TryGenerateDestructCode::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryGenerateDestructCode, CallFunc_Array_Get_Item) == 0x000040, "Member 'GI_SinglePlayer_C_TryGenerateDestructCode::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryGenerateDestructCode, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x000044, "Member 'GI_SinglePlayer_C_TryGenerateDestructCode::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryGenerateDestructCode, CallFunc_Add_IntInt_ReturnValue_1) == 0x000048, "Member 'GI_SinglePlayer_C_TryGenerateDestructCode::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryGenerateDestructCode, CallFunc_Array_Length_ReturnValue) == 0x00004C, "Member 'GI_SinglePlayer_C_TryGenerateDestructCode::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryGenerateDestructCode, CallFunc_Subtract_IntInt_ReturnValue) == 0x000050, "Member 'GI_SinglePlayer_C_TryGenerateDestructCode::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryGenerateDestructCode, CallFunc_RandomIntegerInRangeFromStream_ReturnValue) == 0x000054, "Member 'GI_SinglePlayer_C_TryGenerateDestructCode::CallFunc_RandomIntegerInRangeFromStream_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryGenerateDestructCode, CallFunc_RandomIntegerInRangeFromStream_ReturnValue_1) == 0x000058, "Member 'GI_SinglePlayer_C_TryGenerateDestructCode::CallFunc_RandomIntegerInRangeFromStream_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryGenerateDestructCode, CallFunc_Array_Add_ReturnValue) == 0x00005C, "Member 'GI_SinglePlayer_C_TryGenerateDestructCode::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryGenerateDestructCode, CallFunc_RandomIntegerInRangeFromStream_ReturnValue_2) == 0x000060, "Member 'GI_SinglePlayer_C_TryGenerateDestructCode::CallFunc_RandomIntegerInRangeFromStream_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryGenerateDestructCode, CallFunc_RandomIntegerInRangeFromStream_ReturnValue_3) == 0x000064, "Member 'GI_SinglePlayer_C_TryGenerateDestructCode::CallFunc_RandomIntegerInRangeFromStream_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryGenerateDestructCode, CallFunc_CreateRandomSeedForContext_Seed) == 0x000068, "Member 'GI_SinglePlayer_C_TryGenerateDestructCode::CallFunc_CreateRandomSeedForContext_Seed' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryGenerateDestructCode, CallFunc_GetDifficultyByType_Difficulty) == 0x00006C, "Member 'GI_SinglePlayer_C_TryGenerateDestructCode::CallFunc_GetDifficultyByType_Difficulty' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryGenerateDestructCode, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00006D, "Member 'GI_SinglePlayer_C_TryGenerateDestructCode::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryGenerateDestructCode, CallFunc_Array_Add_ReturnValue_1) == 0x000070, "Member 'GI_SinglePlayer_C_TryGenerateDestructCode::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryGenerateDestructCode, Temp_int_Variable_2) == 0x000074, "Member 'GI_SinglePlayer_C_TryGenerateDestructCode::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryGenerateDestructCode, CallFunc_Array_Add_ReturnValue_2) == 0x000078, "Member 'GI_SinglePlayer_C_TryGenerateDestructCode::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryGenerateDestructCode, CallFunc_Array_Add_ReturnValue_3) == 0x00007C, "Member 'GI_SinglePlayer_C_TryGenerateDestructCode::CallFunc_Array_Add_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryGenerateDestructCode, CallFunc_LessEqual_IntInt_ReturnValue_2) == 0x000080, "Member 'GI_SinglePlayer_C_TryGenerateDestructCode::CallFunc_LessEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryGenerateDestructCode, CallFunc_Add_IntInt_ReturnValue_2) == 0x000084, "Member 'GI_SinglePlayer_C_TryGenerateDestructCode::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryGenerateDestructCode, CallFunc_Array_Add_ReturnValue_4) == 0x000088, "Member 'GI_SinglePlayer_C_TryGenerateDestructCode::CallFunc_Array_Add_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryGenerateDestructCode, CallFunc_Array_Length_ReturnValue_1) == 0x00008C, "Member 'GI_SinglePlayer_C_TryGenerateDestructCode::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryGenerateDestructCode, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000090, "Member 'GI_SinglePlayer_C_TryGenerateDestructCode::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.TryGenerateStoryKeycodes
// 0x0040 (0x0040 - 0x0000)
struct GI_SinglePlayer_C_TryGenerateStoryKeycodes final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           CallFunc_GetDataTableRowNames_OutRowNames;         // 0x0010(0x0010)(ReferenceParm)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Set_Length_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_KeycodeSettings                CallFunc_GetDataTableRowFromName_OutRow;           // 0x002C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_TryGenerateStoryKeycodes) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_TryGenerateStoryKeycodes");
static_assert(sizeof(GI_SinglePlayer_C_TryGenerateStoryKeycodes) == 0x000040, "Wrong size on GI_SinglePlayer_C_TryGenerateStoryKeycodes");
static_assert(offsetof(GI_SinglePlayer_C_TryGenerateStoryKeycodes, Result) == 0x000000, "Member 'GI_SinglePlayer_C_TryGenerateStoryKeycodes::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryGenerateStoryKeycodes, Temp_int_Array_Index_Variable) == 0x000004, "Member 'GI_SinglePlayer_C_TryGenerateStoryKeycodes::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryGenerateStoryKeycodes, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'GI_SinglePlayer_C_TryGenerateStoryKeycodes::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryGenerateStoryKeycodes, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'GI_SinglePlayer_C_TryGenerateStoryKeycodes::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryGenerateStoryKeycodes, CallFunc_GetDataTableRowNames_OutRowNames) == 0x000010, "Member 'GI_SinglePlayer_C_TryGenerateStoryKeycodes::CallFunc_GetDataTableRowNames_OutRowNames' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryGenerateStoryKeycodes, CallFunc_Array_Get_Item) == 0x000020, "Member 'GI_SinglePlayer_C_TryGenerateStoryKeycodes::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryGenerateStoryKeycodes, CallFunc_Set_Length_ReturnValue) == 0x000028, "Member 'GI_SinglePlayer_C_TryGenerateStoryKeycodes::CallFunc_Set_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryGenerateStoryKeycodes, CallFunc_GetDataTableRowFromName_OutRow) == 0x00002C, "Member 'GI_SinglePlayer_C_TryGenerateStoryKeycodes::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryGenerateStoryKeycodes, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000034, "Member 'GI_SinglePlayer_C_TryGenerateStoryKeycodes::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryGenerateStoryKeycodes, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000035, "Member 'GI_SinglePlayer_C_TryGenerateStoryKeycodes::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryGenerateStoryKeycodes, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'GI_SinglePlayer_C_TryGenerateStoryKeycodes::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryGenerateStoryKeycodes, CallFunc_Not_PreBool_ReturnValue) == 0x00003C, "Member 'GI_SinglePlayer_C_TryGenerateStoryKeycodes::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryGenerateStoryKeycodes, CallFunc_Less_IntInt_ReturnValue) == 0x00003D, "Member 'GI_SinglePlayer_C_TryGenerateStoryKeycodes::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.GetDestructionCode
// 0x003C (0x003C - 0x0000)
struct GI_SinglePlayer_C_GetDestructionCode final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TensPlaceValue;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DestructCode;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TryGenerateDestructCode_Result;           // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue_1;            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue;                          // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_GetDestructionCode) == 0x000004, "Wrong alignment on GI_SinglePlayer_C_GetDestructionCode");
static_assert(sizeof(GI_SinglePlayer_C_GetDestructionCode) == 0x00003C, "Wrong size on GI_SinglePlayer_C_GetDestructionCode");
static_assert(offsetof(GI_SinglePlayer_C_GetDestructionCode, Code) == 0x000000, "Member 'GI_SinglePlayer_C_GetDestructionCode::Code' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetDestructionCode, TensPlaceValue) == 0x000004, "Member 'GI_SinglePlayer_C_GetDestructionCode::TensPlaceValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetDestructionCode, DestructCode) == 0x000008, "Member 'GI_SinglePlayer_C_GetDestructionCode::DestructCode' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetDestructionCode, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'GI_SinglePlayer_C_GetDestructionCode::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetDestructionCode, CallFunc_Subtract_IntInt_ReturnValue) == 0x000010, "Member 'GI_SinglePlayer_C_GetDestructionCode::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetDestructionCode, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000014, "Member 'GI_SinglePlayer_C_GetDestructionCode::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetDestructionCode, Temp_int_Array_Index_Variable) == 0x000018, "Member 'GI_SinglePlayer_C_GetDestructionCode::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetDestructionCode, CallFunc_TryGenerateDestructCode_Result) == 0x00001C, "Member 'GI_SinglePlayer_C_GetDestructionCode::CallFunc_TryGenerateDestructCode_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetDestructionCode, CallFunc_Multiply_IntInt_ReturnValue) == 0x000020, "Member 'GI_SinglePlayer_C_GetDestructionCode::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetDestructionCode, CallFunc_Array_Get_Item) == 0x000024, "Member 'GI_SinglePlayer_C_GetDestructionCode::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetDestructionCode, CallFunc_Multiply_IntInt_ReturnValue_1) == 0x000028, "Member 'GI_SinglePlayer_C_GetDestructionCode::CallFunc_Multiply_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetDestructionCode, CallFunc_Array_Length_ReturnValue) == 0x00002C, "Member 'GI_SinglePlayer_C_GetDestructionCode::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetDestructionCode, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'GI_SinglePlayer_C_GetDestructionCode::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetDestructionCode, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000034, "Member 'GI_SinglePlayer_C_GetDestructionCode::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetDestructionCode, CallFunc_Max_ReturnValue) == 0x000038, "Member 'GI_SinglePlayer_C_GetDestructionCode::CallFunc_Max_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.GetDestructionCodeDigitForCurrentLevel
// 0x00F8 (0x00F8 - 0x0000)
struct GI_SinglePlayer_C_GetDestructionCodeDigitForCurrentLevel final
{
public:
	int32                                         Result;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DestructionCodeIndex;                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UShuffler*                              Shuffler;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TryGenerateDestructCode_Result;           // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetCurrentLevelName_Result;               // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_LevelInfo                      CallFunc_GetDataTableRowFromName_OutRow;           // 0x0020(0x00C8)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E9[0x3];                                       // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetDestructionCodeDigitByIndex_Digit;     // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_StringToInt_ReturnValue;             // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_GetDestructionCodeDigitForCurrentLevel) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_GetDestructionCodeDigitForCurrentLevel");
static_assert(sizeof(GI_SinglePlayer_C_GetDestructionCodeDigitForCurrentLevel) == 0x0000F8, "Wrong size on GI_SinglePlayer_C_GetDestructionCodeDigitForCurrentLevel");
static_assert(offsetof(GI_SinglePlayer_C_GetDestructionCodeDigitForCurrentLevel, Result) == 0x000000, "Member 'GI_SinglePlayer_C_GetDestructionCodeDigitForCurrentLevel::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetDestructionCodeDigitForCurrentLevel, DestructionCodeIndex) == 0x000004, "Member 'GI_SinglePlayer_C_GetDestructionCodeDigitForCurrentLevel::DestructionCodeIndex' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetDestructionCodeDigitForCurrentLevel, Shuffler) == 0x000008, "Member 'GI_SinglePlayer_C_GetDestructionCodeDigitForCurrentLevel::Shuffler' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetDestructionCodeDigitForCurrentLevel, CallFunc_TryGenerateDestructCode_Result) == 0x000010, "Member 'GI_SinglePlayer_C_GetDestructionCodeDigitForCurrentLevel::CallFunc_TryGenerateDestructCode_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetDestructionCodeDigitForCurrentLevel, CallFunc_GetCurrentLevelName_Result) == 0x000014, "Member 'GI_SinglePlayer_C_GetDestructionCodeDigitForCurrentLevel::CallFunc_GetCurrentLevelName_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetDestructionCodeDigitForCurrentLevel, CallFunc_GetDataTableRowFromName_OutRow) == 0x000020, "Member 'GI_SinglePlayer_C_GetDestructionCodeDigitForCurrentLevel::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetDestructionCodeDigitForCurrentLevel, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x0000E8, "Member 'GI_SinglePlayer_C_GetDestructionCodeDigitForCurrentLevel::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetDestructionCodeDigitForCurrentLevel, CallFunc_GetDestructionCodeDigitByIndex_Digit) == 0x0000EC, "Member 'GI_SinglePlayer_C_GetDestructionCodeDigitForCurrentLevel::CallFunc_GetDestructionCodeDigitByIndex_Digit' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetDestructionCodeDigitForCurrentLevel, CallFunc_Conv_StringToInt_ReturnValue) == 0x0000F0, "Member 'GI_SinglePlayer_C_GetDestructionCodeDigitForCurrentLevel::CallFunc_Conv_StringToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetDestructionCodeDigitForCurrentLevel, CallFunc_Subtract_IntInt_ReturnValue) == 0x0000F4, "Member 'GI_SinglePlayer_C_GetDestructionCodeDigitForCurrentLevel::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.GetDestructionCodeDigitByIndex
// 0x0018 (0x0018 - 0x0000)
struct GI_SinglePlayer_C_GetDestructionCodeDigitByIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Digit;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_GetDestructionCodeDigitByIndex) == 0x000004, "Wrong alignment on GI_SinglePlayer_C_GetDestructionCodeDigitByIndex");
static_assert(sizeof(GI_SinglePlayer_C_GetDestructionCodeDigitByIndex) == 0x000018, "Wrong size on GI_SinglePlayer_C_GetDestructionCodeDigitByIndex");
static_assert(offsetof(GI_SinglePlayer_C_GetDestructionCodeDigitByIndex, Index_0) == 0x000000, "Member 'GI_SinglePlayer_C_GetDestructionCodeDigitByIndex::Index_0' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetDestructionCodeDigitByIndex, Digit) == 0x000004, "Member 'GI_SinglePlayer_C_GetDestructionCodeDigitByIndex::Digit' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetDestructionCodeDigitByIndex, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000008, "Member 'GI_SinglePlayer_C_GetDestructionCodeDigitByIndex::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetDestructionCodeDigitByIndex, CallFunc_Array_Length_ReturnValue) == 0x00000C, "Member 'GI_SinglePlayer_C_GetDestructionCodeDigitByIndex::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetDestructionCodeDigitByIndex, CallFunc_Array_Get_Item) == 0x000010, "Member 'GI_SinglePlayer_C_GetDestructionCodeDigitByIndex::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetDestructionCodeDigitByIndex, CallFunc_Less_IntInt_ReturnValue) == 0x000014, "Member 'GI_SinglePlayer_C_GetDestructionCodeDigitByIndex::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetDestructionCodeDigitByIndex, CallFunc_BooleanAND_ReturnValue) == 0x000015, "Member 'GI_SinglePlayer_C_GetDestructionCodeDigitByIndex::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.RegisterGroupedTrap
// 0x0030 (0x0030 - 0x0000)
struct GI_SinglePlayer_C_RegisterGroupedTrap final
{
public:
	class ATRAP_Trigger_C*                        Trap;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATRAP_Trigger_C*                        FirstTrap;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasTrapBeenTriggered_Result;              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ATRAP_Trigger_C*                        CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_RegisterGroupedTrap) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_RegisterGroupedTrap");
static_assert(sizeof(GI_SinglePlayer_C_RegisterGroupedTrap) == 0x000030, "Wrong size on GI_SinglePlayer_C_RegisterGroupedTrap");
static_assert(offsetof(GI_SinglePlayer_C_RegisterGroupedTrap, Trap) == 0x000000, "Member 'GI_SinglePlayer_C_RegisterGroupedTrap::Trap' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterGroupedTrap, FirstTrap) == 0x000008, "Member 'GI_SinglePlayer_C_RegisterGroupedTrap::FirstTrap' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterGroupedTrap, CallFunc_HasTrapBeenTriggered_Result) == 0x000010, "Member 'GI_SinglePlayer_C_RegisterGroupedTrap::CallFunc_HasTrapBeenTriggered_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterGroupedTrap, CallFunc_Array_Get_Item) == 0x000018, "Member 'GI_SinglePlayer_C_RegisterGroupedTrap::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterGroupedTrap, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000020, "Member 'GI_SinglePlayer_C_RegisterGroupedTrap::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterGroupedTrap, CallFunc_Array_Add_ReturnValue) == 0x000024, "Member 'GI_SinglePlayer_C_RegisterGroupedTrap::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterGroupedTrap, CallFunc_Greater_IntInt_ReturnValue) == 0x000028, "Member 'GI_SinglePlayer_C_RegisterGroupedTrap::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.UnregisterGroupedTrap
// 0x0010 (0x0010 - 0x0000)
struct GI_SinglePlayer_C_UnregisterGroupedTrap final
{
public:
	class ATRAP_Trigger_C*                        Trap;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_UnregisterGroupedTrap) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_UnregisterGroupedTrap");
static_assert(sizeof(GI_SinglePlayer_C_UnregisterGroupedTrap) == 0x000010, "Wrong size on GI_SinglePlayer_C_UnregisterGroupedTrap");
static_assert(offsetof(GI_SinglePlayer_C_UnregisterGroupedTrap, Trap) == 0x000000, "Member 'GI_SinglePlayer_C_UnregisterGroupedTrap::Trap' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UnregisterGroupedTrap, CallFunc_Array_RemoveItem_ReturnValue) == 0x000008, "Member 'GI_SinglePlayer_C_UnregisterGroupedTrap::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.DismantleTrapsInGroup
// 0x0038 (0x0038 - 0x0000)
struct GI_SinglePlayer_C_DismantleTrapsInGroup final
{
public:
	class ATRAP_Trigger_C*                        Trap;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATRAP_Trigger_C*                        CurrentTrap;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATRAP_Trigger_C*                        CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_DismantleTrapsInGroup) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_DismantleTrapsInGroup");
static_assert(sizeof(GI_SinglePlayer_C_DismantleTrapsInGroup) == 0x000038, "Wrong size on GI_SinglePlayer_C_DismantleTrapsInGroup");
static_assert(offsetof(GI_SinglePlayer_C_DismantleTrapsInGroup, Trap) == 0x000000, "Member 'GI_SinglePlayer_C_DismantleTrapsInGroup::Trap' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_DismantleTrapsInGroup, CurrentTrap) == 0x000008, "Member 'GI_SinglePlayer_C_DismantleTrapsInGroup::CurrentTrap' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_DismantleTrapsInGroup, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'GI_SinglePlayer_C_DismantleTrapsInGroup::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_DismantleTrapsInGroup, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'GI_SinglePlayer_C_DismantleTrapsInGroup::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_DismantleTrapsInGroup, Temp_int_Array_Index_Variable) == 0x000018, "Member 'GI_SinglePlayer_C_DismantleTrapsInGroup::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_DismantleTrapsInGroup, CallFunc_IsValid_ReturnValue) == 0x00001C, "Member 'GI_SinglePlayer_C_DismantleTrapsInGroup::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_DismantleTrapsInGroup, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00001D, "Member 'GI_SinglePlayer_C_DismantleTrapsInGroup::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_DismantleTrapsInGroup, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x00001E, "Member 'GI_SinglePlayer_C_DismantleTrapsInGroup::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_DismantleTrapsInGroup, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'GI_SinglePlayer_C_DismantleTrapsInGroup::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_DismantleTrapsInGroup, CallFunc_Array_Get_Item) == 0x000028, "Member 'GI_SinglePlayer_C_DismantleTrapsInGroup::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_DismantleTrapsInGroup, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'GI_SinglePlayer_C_DismantleTrapsInGroup::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.IsPatrolPathInUse
// 0x0010 (0x0010 - 0x0000)
struct GI_SinglePlayer_C_IsPatrolPathInUse final
{
public:
	class APatrolNode_C*                          PatrolNode;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Set_Contains_ReturnValue;                 // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_IsPatrolPathInUse) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_IsPatrolPathInUse");
static_assert(sizeof(GI_SinglePlayer_C_IsPatrolPathInUse) == 0x000010, "Wrong size on GI_SinglePlayer_C_IsPatrolPathInUse");
static_assert(offsetof(GI_SinglePlayer_C_IsPatrolPathInUse, PatrolNode) == 0x000000, "Member 'GI_SinglePlayer_C_IsPatrolPathInUse::PatrolNode' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_IsPatrolPathInUse, Result) == 0x000008, "Member 'GI_SinglePlayer_C_IsPatrolPathInUse::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_IsPatrolPathInUse, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'GI_SinglePlayer_C_IsPatrolPathInUse::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_IsPatrolPathInUse, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00000A, "Member 'GI_SinglePlayer_C_IsPatrolPathInUse::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_IsPatrolPathInUse, CallFunc_Set_Contains_ReturnValue) == 0x00000B, "Member 'GI_SinglePlayer_C_IsPatrolPathInUse::CallFunc_Set_Contains_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.GetUniqueRandomKeycode
// 0x00A8 (0x00A8 - 0x0000)
struct GI_SinglePlayer_C_GetUniqueRandomKeycode final
{
public:
	class FName                                   Tag;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Keycode;                                           // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRandomStream                          RandomStream;                                      // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 TaggedKeycodes;                                    // 0x0018(0x0010)(Edit, BlueprintVisible)
	int32                                         CandidateCode;                                     // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_RandomIntegerInRangeFromStream_ReturnValue; // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_TryGenerateStoryKeycodes_Result;          // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_CreateRandomSeedForContext_Seed;          // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRandomStream                          CallFunc_MakeRandomStream_ReturnValue;             // 0x0064(0x0008)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_Map_Values_Values;                        // 0x0070(0x0010)(ReferenceParm)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Map_Find_Value;                           // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_1;                               // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Set_Contains_ReturnValue;                 // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x00A5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x00A6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_GetUniqueRandomKeycode) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_GetUniqueRandomKeycode");
static_assert(sizeof(GI_SinglePlayer_C_GetUniqueRandomKeycode) == 0x0000A8, "Wrong size on GI_SinglePlayer_C_GetUniqueRandomKeycode");
static_assert(offsetof(GI_SinglePlayer_C_GetUniqueRandomKeycode, Tag) == 0x000000, "Member 'GI_SinglePlayer_C_GetUniqueRandomKeycode::Tag' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetUniqueRandomKeycode, Keycode) == 0x000008, "Member 'GI_SinglePlayer_C_GetUniqueRandomKeycode::Keycode' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetUniqueRandomKeycode, RandomStream) == 0x00000C, "Member 'GI_SinglePlayer_C_GetUniqueRandomKeycode::RandomStream' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetUniqueRandomKeycode, TaggedKeycodes) == 0x000018, "Member 'GI_SinglePlayer_C_GetUniqueRandomKeycode::TaggedKeycodes' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetUniqueRandomKeycode, CandidateCode) == 0x000028, "Member 'GI_SinglePlayer_C_GetUniqueRandomKeycode::CandidateCode' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetUniqueRandomKeycode, CallFunc_NotEqual_NameName_ReturnValue) == 0x00002C, "Member 'GI_SinglePlayer_C_GetUniqueRandomKeycode::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetUniqueRandomKeycode, CallFunc_RandomIntegerInRangeFromStream_ReturnValue) == 0x000030, "Member 'GI_SinglePlayer_C_GetUniqueRandomKeycode::CallFunc_RandomIntegerInRangeFromStream_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetUniqueRandomKeycode, CallFunc_Conv_NameToString_ReturnValue) == 0x000038, "Member 'GI_SinglePlayer_C_GetUniqueRandomKeycode::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetUniqueRandomKeycode, CallFunc_TryGenerateStoryKeycodes_Result) == 0x000048, "Member 'GI_SinglePlayer_C_GetUniqueRandomKeycode::CallFunc_TryGenerateStoryKeycodes_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetUniqueRandomKeycode, CallFunc_Concat_StrStr_ReturnValue) == 0x000050, "Member 'GI_SinglePlayer_C_GetUniqueRandomKeycode::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetUniqueRandomKeycode, CallFunc_CreateRandomSeedForContext_Seed) == 0x000060, "Member 'GI_SinglePlayer_C_GetUniqueRandomKeycode::CallFunc_CreateRandomSeedForContext_Seed' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetUniqueRandomKeycode, CallFunc_MakeRandomStream_ReturnValue) == 0x000064, "Member 'GI_SinglePlayer_C_GetUniqueRandomKeycode::CallFunc_MakeRandomStream_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetUniqueRandomKeycode, CallFunc_Array_Contains_ReturnValue) == 0x00006C, "Member 'GI_SinglePlayer_C_GetUniqueRandomKeycode::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetUniqueRandomKeycode, CallFunc_Map_Values_Values) == 0x000070, "Member 'GI_SinglePlayer_C_GetUniqueRandomKeycode::CallFunc_Map_Values_Values' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetUniqueRandomKeycode, CallFunc_Not_PreBool_ReturnValue) == 0x000080, "Member 'GI_SinglePlayer_C_GetUniqueRandomKeycode::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetUniqueRandomKeycode, Temp_int_Variable) == 0x000084, "Member 'GI_SinglePlayer_C_GetUniqueRandomKeycode::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetUniqueRandomKeycode, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000088, "Member 'GI_SinglePlayer_C_GetUniqueRandomKeycode::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetUniqueRandomKeycode, CallFunc_Add_IntInt_ReturnValue) == 0x00008C, "Member 'GI_SinglePlayer_C_GetUniqueRandomKeycode::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetUniqueRandomKeycode, CallFunc_Map_Find_Value) == 0x000090, "Member 'GI_SinglePlayer_C_GetUniqueRandomKeycode::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetUniqueRandomKeycode, CallFunc_Map_Find_ReturnValue) == 0x000094, "Member 'GI_SinglePlayer_C_GetUniqueRandomKeycode::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetUniqueRandomKeycode, Temp_int_Variable_1) == 0x000098, "Member 'GI_SinglePlayer_C_GetUniqueRandomKeycode::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetUniqueRandomKeycode, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x00009C, "Member 'GI_SinglePlayer_C_GetUniqueRandomKeycode::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetUniqueRandomKeycode, CallFunc_Add_IntInt_ReturnValue_1) == 0x0000A0, "Member 'GI_SinglePlayer_C_GetUniqueRandomKeycode::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetUniqueRandomKeycode, CallFunc_Set_Contains_ReturnValue) == 0x0000A4, "Member 'GI_SinglePlayer_C_GetUniqueRandomKeycode::CallFunc_Set_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetUniqueRandomKeycode, CallFunc_NotEqual_IntInt_ReturnValue) == 0x0000A5, "Member 'GI_SinglePlayer_C_GetUniqueRandomKeycode::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetUniqueRandomKeycode, CallFunc_Not_PreBool_ReturnValue_1) == 0x0000A6, "Member 'GI_SinglePlayer_C_GetUniqueRandomKeycode::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.OnNewGameStarted
// 0x0001 (0x0001 - 0x0000)
struct GI_SinglePlayer_C_OnNewGameStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_OnNewGameStarted) == 0x000001, "Wrong alignment on GI_SinglePlayer_C_OnNewGameStarted");
static_assert(sizeof(GI_SinglePlayer_C_OnNewGameStarted) == 0x000001, "Wrong size on GI_SinglePlayer_C_OnNewGameStarted");
static_assert(offsetof(GI_SinglePlayer_C_OnNewGameStarted, ReturnValue) == 0x000000, "Member 'GI_SinglePlayer_C_OnNewGameStarted::ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.AddPickupToPendingLostList
// 0x0058 (0x0058 - 0x0000)
struct GI_SinglePlayer_C_AddPickupToPendingLostList final
{
public:
	class APICKUP_Base_C*                         Pickup;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           CreatedItem;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetItemClass_Result;                      // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           CallFunc_GetItem_Result;                           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_HardItemParams                 K2Node_MakeStruct_STRUCT_HardItemParams;           // 0x0028(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CallFunc_CreateInventoryItem_Item;                 // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           CallFunc_DuplicateObject_ReturnValue;              // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_AddPickupToPendingLostList) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_AddPickupToPendingLostList");
static_assert(sizeof(GI_SinglePlayer_C_AddPickupToPendingLostList) == 0x000058, "Wrong size on GI_SinglePlayer_C_AddPickupToPendingLostList");
static_assert(offsetof(GI_SinglePlayer_C_AddPickupToPendingLostList, Pickup) == 0x000000, "Member 'GI_SinglePlayer_C_AddPickupToPendingLostList::Pickup' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddPickupToPendingLostList, CreatedItem) == 0x000008, "Member 'GI_SinglePlayer_C_AddPickupToPendingLostList::CreatedItem' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddPickupToPendingLostList, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'GI_SinglePlayer_C_AddPickupToPendingLostList::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddPickupToPendingLostList, CallFunc_GetItemClass_Result) == 0x000018, "Member 'GI_SinglePlayer_C_AddPickupToPendingLostList::CallFunc_GetItemClass_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddPickupToPendingLostList, CallFunc_GetItem_Result) == 0x000020, "Member 'GI_SinglePlayer_C_AddPickupToPendingLostList::CallFunc_GetItem_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddPickupToPendingLostList, K2Node_MakeStruct_STRUCT_HardItemParams) == 0x000028, "Member 'GI_SinglePlayer_C_AddPickupToPendingLostList::K2Node_MakeStruct_STRUCT_HardItemParams' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddPickupToPendingLostList, CallFunc_IsValid_ReturnValue_1) == 0x000038, "Member 'GI_SinglePlayer_C_AddPickupToPendingLostList::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddPickupToPendingLostList, CallFunc_CreateInventoryItem_Item) == 0x000040, "Member 'GI_SinglePlayer_C_AddPickupToPendingLostList::CallFunc_CreateInventoryItem_Item' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddPickupToPendingLostList, CallFunc_DuplicateObject_ReturnValue) == 0x000048, "Member 'GI_SinglePlayer_C_AddPickupToPendingLostList::CallFunc_DuplicateObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddPickupToPendingLostList, CallFunc_Array_Add_ReturnValue) == 0x000050, "Member 'GI_SinglePlayer_C_AddPickupToPendingLostList::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.AddInventoryToPendingLostList
// 0x0068 (0x0068 - 0x0000)
struct GI_SinglePlayer_C_AddInventoryToPendingLostList final
{
public:
	class UCOMP_Inventory_C*                      Inventory;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           CreatedItem;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInventoryBag_C*                        MainBag;                                           // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBagEmpty_Result;                        // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<class UITEM_Base_C*>                   CallFunc_GetItemArray_Items;                       // 0x0020(0x0010)(ReferenceParm)
	class UITEM_Base_C*                           CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CallFunc_DuplicateObject_ReturnValue;              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UInventoryBag_C*                        CallFunc_GetBagByIndex_Bag;                        // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_AddInventoryToPendingLostList) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_AddInventoryToPendingLostList");
static_assert(sizeof(GI_SinglePlayer_C_AddInventoryToPendingLostList) == 0x000068, "Wrong size on GI_SinglePlayer_C_AddInventoryToPendingLostList");
static_assert(offsetof(GI_SinglePlayer_C_AddInventoryToPendingLostList, Inventory) == 0x000000, "Member 'GI_SinglePlayer_C_AddInventoryToPendingLostList::Inventory' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddInventoryToPendingLostList, CreatedItem) == 0x000008, "Member 'GI_SinglePlayer_C_AddInventoryToPendingLostList::CreatedItem' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddInventoryToPendingLostList, MainBag) == 0x000010, "Member 'GI_SinglePlayer_C_AddInventoryToPendingLostList::MainBag' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddInventoryToPendingLostList, Temp_int_Array_Index_Variable) == 0x000018, "Member 'GI_SinglePlayer_C_AddInventoryToPendingLostList::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddInventoryToPendingLostList, CallFunc_IsValid_ReturnValue) == 0x00001C, "Member 'GI_SinglePlayer_C_AddInventoryToPendingLostList::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddInventoryToPendingLostList, CallFunc_IsValid_ReturnValue_1) == 0x00001D, "Member 'GI_SinglePlayer_C_AddInventoryToPendingLostList::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddInventoryToPendingLostList, CallFunc_IsBagEmpty_Result) == 0x00001E, "Member 'GI_SinglePlayer_C_AddInventoryToPendingLostList::CallFunc_IsBagEmpty_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddInventoryToPendingLostList, CallFunc_Not_PreBool_ReturnValue) == 0x00001F, "Member 'GI_SinglePlayer_C_AddInventoryToPendingLostList::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddInventoryToPendingLostList, CallFunc_GetItemArray_Items) == 0x000020, "Member 'GI_SinglePlayer_C_AddInventoryToPendingLostList::CallFunc_GetItemArray_Items' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddInventoryToPendingLostList, CallFunc_Array_Get_Item) == 0x000030, "Member 'GI_SinglePlayer_C_AddInventoryToPendingLostList::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddInventoryToPendingLostList, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'GI_SinglePlayer_C_AddInventoryToPendingLostList::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddInventoryToPendingLostList, CallFunc_DuplicateObject_ReturnValue) == 0x000040, "Member 'GI_SinglePlayer_C_AddInventoryToPendingLostList::CallFunc_DuplicateObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddInventoryToPendingLostList, Temp_int_Loop_Counter_Variable) == 0x000048, "Member 'GI_SinglePlayer_C_AddInventoryToPendingLostList::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddInventoryToPendingLostList, CallFunc_Less_IntInt_ReturnValue) == 0x00004C, "Member 'GI_SinglePlayer_C_AddInventoryToPendingLostList::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddInventoryToPendingLostList, CallFunc_Add_IntInt_ReturnValue) == 0x000050, "Member 'GI_SinglePlayer_C_AddInventoryToPendingLostList::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddInventoryToPendingLostList, CallFunc_GetBagByIndex_Bag) == 0x000058, "Member 'GI_SinglePlayer_C_AddInventoryToPendingLostList::CallFunc_GetBagByIndex_Bag' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddInventoryToPendingLostList, CallFunc_Array_Add_ReturnValue) == 0x000060, "Member 'GI_SinglePlayer_C_AddInventoryToPendingLostList::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.TryMergeLostItemsToBag
// 0x0060 (0x0060 - 0x0000)
struct GI_SinglePlayer_C_TryMergeLostItemsToBag final
{
public:
	class UInventoryBag_C*                        Bag;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OnlyPendingItems;                                  // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CopiedItem;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           PendingItem;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PendingIndex;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSlotIndex_Result;                      // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AddItem_Result;                           // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CallFunc_DuplicateObject_ReturnValue;              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CallFunc_Array_Get_Item;                           // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue;                          // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_TryMergeLostItemsToBag) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_TryMergeLostItemsToBag");
static_assert(sizeof(GI_SinglePlayer_C_TryMergeLostItemsToBag) == 0x000060, "Wrong size on GI_SinglePlayer_C_TryMergeLostItemsToBag");
static_assert(offsetof(GI_SinglePlayer_C_TryMergeLostItemsToBag, Bag) == 0x000000, "Member 'GI_SinglePlayer_C_TryMergeLostItemsToBag::Bag' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryMergeLostItemsToBag, OnlyPendingItems) == 0x000008, "Member 'GI_SinglePlayer_C_TryMergeLostItemsToBag::OnlyPendingItems' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryMergeLostItemsToBag, CopiedItem) == 0x000010, "Member 'GI_SinglePlayer_C_TryMergeLostItemsToBag::CopiedItem' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryMergeLostItemsToBag, PendingItem) == 0x000018, "Member 'GI_SinglePlayer_C_TryMergeLostItemsToBag::PendingItem' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryMergeLostItemsToBag, PendingIndex) == 0x000020, "Member 'GI_SinglePlayer_C_TryMergeLostItemsToBag::PendingIndex' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryMergeLostItemsToBag, Temp_int_Array_Index_Variable) == 0x000024, "Member 'GI_SinglePlayer_C_TryMergeLostItemsToBag::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryMergeLostItemsToBag, Temp_int_Loop_Counter_Variable) == 0x000028, "Member 'GI_SinglePlayer_C_TryMergeLostItemsToBag::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryMergeLostItemsToBag, CallFunc_Subtract_IntInt_ReturnValue) == 0x00002C, "Member 'GI_SinglePlayer_C_TryMergeLostItemsToBag::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryMergeLostItemsToBag, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000030, "Member 'GI_SinglePlayer_C_TryMergeLostItemsToBag::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryMergeLostItemsToBag, CallFunc_Array_Add_ReturnValue) == 0x000034, "Member 'GI_SinglePlayer_C_TryMergeLostItemsToBag::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryMergeLostItemsToBag, CallFunc_GetSlotIndex_Result) == 0x000038, "Member 'GI_SinglePlayer_C_TryMergeLostItemsToBag::CallFunc_GetSlotIndex_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryMergeLostItemsToBag, CallFunc_AddItem_Result) == 0x00003C, "Member 'GI_SinglePlayer_C_TryMergeLostItemsToBag::CallFunc_AddItem_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryMergeLostItemsToBag, CallFunc_DuplicateObject_ReturnValue) == 0x000040, "Member 'GI_SinglePlayer_C_TryMergeLostItemsToBag::CallFunc_DuplicateObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryMergeLostItemsToBag, CallFunc_Array_Length_ReturnValue) == 0x000048, "Member 'GI_SinglePlayer_C_TryMergeLostItemsToBag::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryMergeLostItemsToBag, CallFunc_Array_Get_Item) == 0x000050, "Member 'GI_SinglePlayer_C_TryMergeLostItemsToBag::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryMergeLostItemsToBag, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000058, "Member 'GI_SinglePlayer_C_TryMergeLostItemsToBag::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryMergeLostItemsToBag, CallFunc_Max_ReturnValue) == 0x00005C, "Member 'GI_SinglePlayer_C_TryMergeLostItemsToBag::CallFunc_Max_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.CopySharedItemsToBag
// 0x0060 (0x0060 - 0x0000)
struct GI_SinglePlayer_C_CopySharedItemsToBag final
{
public:
	class UInventoryBag_C*                        Bag;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_SharedBagType                            Type;                                              // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CopiedItem;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_SharedBagType                            Temp_byte_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSlotIndex_Result;                      // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AddItemToSlot_Result;                     // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UITEM_Base_C*>                   K2Node_Select_Default;                             // 0x0030(0x0010)(ReferenceParm)
	class UITEM_Base_C*                           CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CallFunc_DuplicateObject_ReturnValue;              // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_CopySharedItemsToBag) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_CopySharedItemsToBag");
static_assert(sizeof(GI_SinglePlayer_C_CopySharedItemsToBag) == 0x000060, "Wrong size on GI_SinglePlayer_C_CopySharedItemsToBag");
static_assert(offsetof(GI_SinglePlayer_C_CopySharedItemsToBag, Bag) == 0x000000, "Member 'GI_SinglePlayer_C_CopySharedItemsToBag::Bag' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_CopySharedItemsToBag, Type) == 0x000008, "Member 'GI_SinglePlayer_C_CopySharedItemsToBag::Type' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_CopySharedItemsToBag, CopiedItem) == 0x000010, "Member 'GI_SinglePlayer_C_CopySharedItemsToBag::CopiedItem' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_CopySharedItemsToBag, Temp_byte_Variable) == 0x000018, "Member 'GI_SinglePlayer_C_CopySharedItemsToBag::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_CopySharedItemsToBag, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'GI_SinglePlayer_C_CopySharedItemsToBag::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_CopySharedItemsToBag, Temp_int_Array_Index_Variable) == 0x00001C, "Member 'GI_SinglePlayer_C_CopySharedItemsToBag::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_CopySharedItemsToBag, CallFunc_GetSlotIndex_Result) == 0x000020, "Member 'GI_SinglePlayer_C_CopySharedItemsToBag::CallFunc_GetSlotIndex_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_CopySharedItemsToBag, CallFunc_AddItemToSlot_Result) == 0x000024, "Member 'GI_SinglePlayer_C_CopySharedItemsToBag::CallFunc_AddItemToSlot_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_CopySharedItemsToBag, Temp_int_Loop_Counter_Variable) == 0x000028, "Member 'GI_SinglePlayer_C_CopySharedItemsToBag::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_CopySharedItemsToBag, K2Node_Select_Default) == 0x000030, "Member 'GI_SinglePlayer_C_CopySharedItemsToBag::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_CopySharedItemsToBag, CallFunc_Array_Get_Item) == 0x000040, "Member 'GI_SinglePlayer_C_CopySharedItemsToBag::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_CopySharedItemsToBag, CallFunc_Array_Length_ReturnValue) == 0x000048, "Member 'GI_SinglePlayer_C_CopySharedItemsToBag::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_CopySharedItemsToBag, CallFunc_DuplicateObject_ReturnValue) == 0x000050, "Member 'GI_SinglePlayer_C_CopySharedItemsToBag::CallFunc_DuplicateObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_CopySharedItemsToBag, CallFunc_Less_IntInt_ReturnValue) == 0x000058, "Member 'GI_SinglePlayer_C_CopySharedItemsToBag::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_CopySharedItemsToBag, CallFunc_Add_IntInt_ReturnValue) == 0x00005C, "Member 'GI_SinglePlayer_C_CopySharedItemsToBag::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.CopySharedItemsFromBag
// 0x0080 (0x0080 - 0x0000)
struct GI_SinglePlayer_C_CopySharedItemsFromBag final
{
public:
	class UInventoryBag_C*                        Bag;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_SharedBagType                            Type;                                              // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CopiedItem;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_SharedBagType                            Temp_byte_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetSlotIndex_Result;                      // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_SharedBagType                            Temp_byte_Variable_1;                              // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UITEM_Base_C*>                   K2Node_Select_Default;                             // 0x0030(0x0010)(ReferenceParm)
	TArray<class UITEM_Base_C*>                   CallFunc_GetItemArray_Items;                       // 0x0040(0x0010)(ReferenceParm)
	class UITEM_Base_C*                           CallFunc_Array_Get_Item;                           // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CallFunc_DuplicateObject_ReturnValue;              // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UITEM_Base_C*>                   K2Node_Select_Default_1;                           // 0x0070(0x0010)(ReferenceParm)
};
static_assert(alignof(GI_SinglePlayer_C_CopySharedItemsFromBag) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_CopySharedItemsFromBag");
static_assert(sizeof(GI_SinglePlayer_C_CopySharedItemsFromBag) == 0x000080, "Wrong size on GI_SinglePlayer_C_CopySharedItemsFromBag");
static_assert(offsetof(GI_SinglePlayer_C_CopySharedItemsFromBag, Bag) == 0x000000, "Member 'GI_SinglePlayer_C_CopySharedItemsFromBag::Bag' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_CopySharedItemsFromBag, Type) == 0x000008, "Member 'GI_SinglePlayer_C_CopySharedItemsFromBag::Type' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_CopySharedItemsFromBag, CopiedItem) == 0x000010, "Member 'GI_SinglePlayer_C_CopySharedItemsFromBag::CopiedItem' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_CopySharedItemsFromBag, Temp_byte_Variable) == 0x000018, "Member 'GI_SinglePlayer_C_CopySharedItemsFromBag::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_CopySharedItemsFromBag, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'GI_SinglePlayer_C_CopySharedItemsFromBag::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_CopySharedItemsFromBag, CallFunc_GetSlotIndex_Result) == 0x00001C, "Member 'GI_SinglePlayer_C_CopySharedItemsFromBag::CallFunc_GetSlotIndex_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_CopySharedItemsFromBag, Temp_int_Loop_Counter_Variable) == 0x000020, "Member 'GI_SinglePlayer_C_CopySharedItemsFromBag::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_CopySharedItemsFromBag, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'GI_SinglePlayer_C_CopySharedItemsFromBag::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_CopySharedItemsFromBag, Temp_int_Array_Index_Variable) == 0x000028, "Member 'GI_SinglePlayer_C_CopySharedItemsFromBag::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_CopySharedItemsFromBag, Temp_byte_Variable_1) == 0x00002C, "Member 'GI_SinglePlayer_C_CopySharedItemsFromBag::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_CopySharedItemsFromBag, K2Node_Select_Default) == 0x000030, "Member 'GI_SinglePlayer_C_CopySharedItemsFromBag::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_CopySharedItemsFromBag, CallFunc_GetItemArray_Items) == 0x000040, "Member 'GI_SinglePlayer_C_CopySharedItemsFromBag::CallFunc_GetItemArray_Items' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_CopySharedItemsFromBag, CallFunc_Array_Get_Item) == 0x000050, "Member 'GI_SinglePlayer_C_CopySharedItemsFromBag::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_CopySharedItemsFromBag, CallFunc_Array_Add_ReturnValue) == 0x000058, "Member 'GI_SinglePlayer_C_CopySharedItemsFromBag::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_CopySharedItemsFromBag, CallFunc_DuplicateObject_ReturnValue) == 0x000060, "Member 'GI_SinglePlayer_C_CopySharedItemsFromBag::CallFunc_DuplicateObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_CopySharedItemsFromBag, CallFunc_Array_Length_ReturnValue) == 0x000068, "Member 'GI_SinglePlayer_C_CopySharedItemsFromBag::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_CopySharedItemsFromBag, CallFunc_Less_IntInt_ReturnValue) == 0x00006C, "Member 'GI_SinglePlayer_C_CopySharedItemsFromBag::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_CopySharedItemsFromBag, K2Node_Select_Default_1) == 0x000070, "Member 'GI_SinglePlayer_C_CopySharedItemsFromBag::K2Node_Select_Default_1' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.SetSharedStorageLevelName
// 0x0008 (0x0008 - 0x0000)
struct GI_SinglePlayer_C_SetSharedStorageLevelName final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_SetSharedStorageLevelName) == 0x000004, "Wrong alignment on GI_SinglePlayer_C_SetSharedStorageLevelName");
static_assert(sizeof(GI_SinglePlayer_C_SetSharedStorageLevelName) == 0x000008, "Wrong size on GI_SinglePlayer_C_SetSharedStorageLevelName");
static_assert(offsetof(GI_SinglePlayer_C_SetSharedStorageLevelName, LevelName) == 0x000000, "Member 'GI_SinglePlayer_C_SetSharedStorageLevelName::LevelName' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.GetSharedStorageLevelName
// 0x0008 (0x0008 - 0x0000)
struct GI_SinglePlayer_C_GetSharedStorageLevelName final
{
public:
	class FName                                   Result;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_GetSharedStorageLevelName) == 0x000004, "Wrong alignment on GI_SinglePlayer_C_GetSharedStorageLevelName");
static_assert(sizeof(GI_SinglePlayer_C_GetSharedStorageLevelName) == 0x000008, "Wrong size on GI_SinglePlayer_C_GetSharedStorageLevelName");
static_assert(offsetof(GI_SinglePlayer_C_GetSharedStorageLevelName, Result) == 0x000000, "Member 'GI_SinglePlayer_C_GetSharedStorageLevelName::Result' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.GetItemGridRenderTarget
// 0x0070 (0x0070 - 0x0000)
struct GI_SinglePlayer_C_GetItemGridRenderTarget final
{
public:
	class UITEM_Base_C*                           Item;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 Result;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 RenderTarget;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FObjectClassCollection                 IconClassCollection;                               // 0x0018(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FObjectClassCollection                 CallFunc_GetIconRenderClassCollection_Result;      // 0x0028(0x0010)(HasGetValueTypeHash)
	struct FIntPoint                              K2Node_MakeStruct_IntPoint;                        // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              CallFunc_Multiply_IntPointInt_ReturnValue;         // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UpdateItemIconPickupActor_IsFullyLoaded;  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 CallFunc_CreateRenderTarget2D_ReturnValue;         // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 CallFunc_Map_Find_Value;                           // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_GetItemGridRenderTarget) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_GetItemGridRenderTarget");
static_assert(sizeof(GI_SinglePlayer_C_GetItemGridRenderTarget) == 0x000070, "Wrong size on GI_SinglePlayer_C_GetItemGridRenderTarget");
static_assert(offsetof(GI_SinglePlayer_C_GetItemGridRenderTarget, Item) == 0x000000, "Member 'GI_SinglePlayer_C_GetItemGridRenderTarget::Item' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetItemGridRenderTarget, Result) == 0x000008, "Member 'GI_SinglePlayer_C_GetItemGridRenderTarget::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetItemGridRenderTarget, RenderTarget) == 0x000010, "Member 'GI_SinglePlayer_C_GetItemGridRenderTarget::RenderTarget' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetItemGridRenderTarget, IconClassCollection) == 0x000018, "Member 'GI_SinglePlayer_C_GetItemGridRenderTarget::IconClassCollection' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetItemGridRenderTarget, CallFunc_GetIconRenderClassCollection_Result) == 0x000028, "Member 'GI_SinglePlayer_C_GetItemGridRenderTarget::CallFunc_GetIconRenderClassCollection_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetItemGridRenderTarget, K2Node_MakeStruct_IntPoint) == 0x000038, "Member 'GI_SinglePlayer_C_GetItemGridRenderTarget::K2Node_MakeStruct_IntPoint' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetItemGridRenderTarget, CallFunc_Multiply_IntPointInt_ReturnValue) == 0x000040, "Member 'GI_SinglePlayer_C_GetItemGridRenderTarget::CallFunc_Multiply_IntPointInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetItemGridRenderTarget, CallFunc_UpdateItemIconPickupActor_IsFullyLoaded) == 0x000048, "Member 'GI_SinglePlayer_C_GetItemGridRenderTarget::CallFunc_UpdateItemIconPickupActor_IsFullyLoaded' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetItemGridRenderTarget, CallFunc_CreateRenderTarget2D_ReturnValue) == 0x000050, "Member 'GI_SinglePlayer_C_GetItemGridRenderTarget::CallFunc_CreateRenderTarget2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetItemGridRenderTarget, CallFunc_IsValid_ReturnValue) == 0x000058, "Member 'GI_SinglePlayer_C_GetItemGridRenderTarget::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetItemGridRenderTarget, CallFunc_Map_Find_Value) == 0x000060, "Member 'GI_SinglePlayer_C_GetItemGridRenderTarget::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetItemGridRenderTarget, CallFunc_Map_Find_ReturnValue) == 0x000068, "Member 'GI_SinglePlayer_C_GetItemGridRenderTarget::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.GetItemHotbarRenderTarget
// 0x0028 (0x0028 - 0x0000)
struct GI_SinglePlayer_C_GetItemHotbarRenderTarget final
{
public:
	class UITEM_Base_C*                           Item;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 Result;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FObjectClassCollection                 CallFunc_GetIconRenderClassCollection_Result;      // 0x0010(0x0010)(HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 CallFunc_GetItemHotbarRenderTargetForPickupClass_Result; // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_GetItemHotbarRenderTarget) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_GetItemHotbarRenderTarget");
static_assert(sizeof(GI_SinglePlayer_C_GetItemHotbarRenderTarget) == 0x000028, "Wrong size on GI_SinglePlayer_C_GetItemHotbarRenderTarget");
static_assert(offsetof(GI_SinglePlayer_C_GetItemHotbarRenderTarget, Item) == 0x000000, "Member 'GI_SinglePlayer_C_GetItemHotbarRenderTarget::Item' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetItemHotbarRenderTarget, Result) == 0x000008, "Member 'GI_SinglePlayer_C_GetItemHotbarRenderTarget::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetItemHotbarRenderTarget, CallFunc_GetIconRenderClassCollection_Result) == 0x000010, "Member 'GI_SinglePlayer_C_GetItemHotbarRenderTarget::CallFunc_GetIconRenderClassCollection_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetItemHotbarRenderTarget, CallFunc_GetItemHotbarRenderTargetForPickupClass_Result) == 0x000020, "Member 'GI_SinglePlayer_C_GetItemHotbarRenderTarget::CallFunc_GetItemHotbarRenderTargetForPickupClass_Result' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.GetItemHotbarRenderTargetForItemClass
// 0x0038 (0x0038 - 0x0000)
struct GI_SinglePlayer_C_GetItemHotbarRenderTargetForItemClass final
{
public:
	class UClass*                                 ItemClass;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 Result;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<TSoftClassPtr<class UClass>>           K2Node_MakeArray_Array;                            // 0x0010(0x0010)(ReferenceParm)
	struct FObjectClassCollection                 K2Node_MakeStruct_ObjectClassCollection;           // 0x0020(0x0010)(HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 CallFunc_GetItemHotbarRenderTargetForPickupClass_Result; // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_GetItemHotbarRenderTargetForItemClass) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_GetItemHotbarRenderTargetForItemClass");
static_assert(sizeof(GI_SinglePlayer_C_GetItemHotbarRenderTargetForItemClass) == 0x000038, "Wrong size on GI_SinglePlayer_C_GetItemHotbarRenderTargetForItemClass");
static_assert(offsetof(GI_SinglePlayer_C_GetItemHotbarRenderTargetForItemClass, ItemClass) == 0x000000, "Member 'GI_SinglePlayer_C_GetItemHotbarRenderTargetForItemClass::ItemClass' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetItemHotbarRenderTargetForItemClass, Result) == 0x000008, "Member 'GI_SinglePlayer_C_GetItemHotbarRenderTargetForItemClass::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetItemHotbarRenderTargetForItemClass, K2Node_MakeArray_Array) == 0x000010, "Member 'GI_SinglePlayer_C_GetItemHotbarRenderTargetForItemClass::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetItemHotbarRenderTargetForItemClass, K2Node_MakeStruct_ObjectClassCollection) == 0x000020, "Member 'GI_SinglePlayer_C_GetItemHotbarRenderTargetForItemClass::K2Node_MakeStruct_ObjectClassCollection' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetItemHotbarRenderTargetForItemClass, CallFunc_GetItemHotbarRenderTargetForPickupClass_Result) == 0x000030, "Member 'GI_SinglePlayer_C_GetItemHotbarRenderTargetForItemClass::CallFunc_GetItemHotbarRenderTargetForPickupClass_Result' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.GetItemHotbarRenderTargetForPickupClass
// 0x0048 (0x0048 - 0x0000)
struct GI_SinglePlayer_C_GetItemHotbarRenderTargetForPickupClass final
{
public:
	struct FObjectClassCollection                 ClassCollection;                                   // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 Result;                                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 RenderTarget;                                      // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UpdateItemIconPickupActor_IsFullyLoaded;  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 CallFunc_Map_Find_Value;                           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 CallFunc_CreateRenderTarget2D_ReturnValue;         // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_GetItemHotbarRenderTargetForPickupClass) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_GetItemHotbarRenderTargetForPickupClass");
static_assert(sizeof(GI_SinglePlayer_C_GetItemHotbarRenderTargetForPickupClass) == 0x000048, "Wrong size on GI_SinglePlayer_C_GetItemHotbarRenderTargetForPickupClass");
static_assert(offsetof(GI_SinglePlayer_C_GetItemHotbarRenderTargetForPickupClass, ClassCollection) == 0x000000, "Member 'GI_SinglePlayer_C_GetItemHotbarRenderTargetForPickupClass::ClassCollection' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetItemHotbarRenderTargetForPickupClass, Result) == 0x000010, "Member 'GI_SinglePlayer_C_GetItemHotbarRenderTargetForPickupClass::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetItemHotbarRenderTargetForPickupClass, RenderTarget) == 0x000018, "Member 'GI_SinglePlayer_C_GetItemHotbarRenderTargetForPickupClass::RenderTarget' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetItemHotbarRenderTargetForPickupClass, CallFunc_UpdateItemIconPickupActor_IsFullyLoaded) == 0x000020, "Member 'GI_SinglePlayer_C_GetItemHotbarRenderTargetForPickupClass::CallFunc_UpdateItemIconPickupActor_IsFullyLoaded' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetItemHotbarRenderTargetForPickupClass, CallFunc_MakeLiteralInt_ReturnValue) == 0x000024, "Member 'GI_SinglePlayer_C_GetItemHotbarRenderTargetForPickupClass::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetItemHotbarRenderTargetForPickupClass, CallFunc_Map_Find_Value) == 0x000028, "Member 'GI_SinglePlayer_C_GetItemHotbarRenderTargetForPickupClass::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetItemHotbarRenderTargetForPickupClass, CallFunc_Map_Find_ReturnValue) == 0x000030, "Member 'GI_SinglePlayer_C_GetItemHotbarRenderTargetForPickupClass::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetItemHotbarRenderTargetForPickupClass, CallFunc_CreateRenderTarget2D_ReturnValue) == 0x000038, "Member 'GI_SinglePlayer_C_GetItemHotbarRenderTargetForPickupClass::CallFunc_CreateRenderTarget2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetItemHotbarRenderTargetForPickupClass, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'GI_SinglePlayer_C_GetItemHotbarRenderTargetForPickupClass::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.TryCreateItemCaptureWorld
// 0x0060 (0x0060 - 0x0000)
struct GI_SinglePlayer_C_TryCreateItemCaptureWorld final
{
public:
	class USceneCaptureComponent2D*               SceneCaptureCompnent;                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0010(0x0030)(IsPlainOldData, NoDestructor)
	class ASceneCapture2D*                        CallFunc_SpawnActorInWorld_ReturnValue;            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneCaptureComponent2D*               CallFunc_CreateSceneCaptureWorld_ReturnValue;      // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanNAND_ReturnValue;                  // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_TryCreateItemCaptureWorld) == 0x000010, "Wrong alignment on GI_SinglePlayer_C_TryCreateItemCaptureWorld");
static_assert(sizeof(GI_SinglePlayer_C_TryCreateItemCaptureWorld) == 0x000060, "Wrong size on GI_SinglePlayer_C_TryCreateItemCaptureWorld");
static_assert(offsetof(GI_SinglePlayer_C_TryCreateItemCaptureWorld, SceneCaptureCompnent) == 0x000000, "Member 'GI_SinglePlayer_C_TryCreateItemCaptureWorld::SceneCaptureCompnent' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryCreateItemCaptureWorld, CallFunc_MakeTransform_ReturnValue) == 0x000010, "Member 'GI_SinglePlayer_C_TryCreateItemCaptureWorld::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryCreateItemCaptureWorld, CallFunc_SpawnActorInWorld_ReturnValue) == 0x000040, "Member 'GI_SinglePlayer_C_TryCreateItemCaptureWorld::CallFunc_SpawnActorInWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryCreateItemCaptureWorld, CallFunc_CreateSceneCaptureWorld_ReturnValue) == 0x000048, "Member 'GI_SinglePlayer_C_TryCreateItemCaptureWorld::CallFunc_CreateSceneCaptureWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryCreateItemCaptureWorld, CallFunc_IsValid_ReturnValue) == 0x000050, "Member 'GI_SinglePlayer_C_TryCreateItemCaptureWorld::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryCreateItemCaptureWorld, CallFunc_IsValid_ReturnValue_1) == 0x000051, "Member 'GI_SinglePlayer_C_TryCreateItemCaptureWorld::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryCreateItemCaptureWorld, CallFunc_BooleanNAND_ReturnValue) == 0x000052, "Member 'GI_SinglePlayer_C_TryCreateItemCaptureWorld::CallFunc_BooleanNAND_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.UpdateItemDetailsRenderTarget
// 0x00C0 (0x00C0 - 0x0000)
struct GI_SinglePlayer_C_UpdateItemDetailsRenderTarget final
{
public:
	class UITEM_Base_C*                           Item;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Progress;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_ItemDetailsIconParams          CustomIconParams;                                  // 0x000C(0x0014)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 Result;                                            // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_ItemDetailsIconParams          IconParams;                                        // 0x0028(0x0014)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              Resolution;                                        // 0x003C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 RenderTarget;                                      // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_53[0x5];                                       // 0x0053(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FObjectClassCollection                 CallFunc_GetIconRenderClassCollection_Result;      // 0x0058(0x0010)(HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              K2Node_MakeStruct_IntPoint;                        // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              K2Node_MakeStruct_IntPoint_1;                      // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_ItemDetailsIconParams          CallFunc_UpdateItemDetailsTexture_IconParams;      // 0x0080(0x0014)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 CallFunc_CreateRenderTarget2D_ReturnValue;         // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 CallFunc_Map_Find_Value;                           // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AA[0x2];                                       // 0x00AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              K2Node_Select_Default;                             // 0x00AC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              CallFunc_Multiply_IntPointInt_ReturnValue;         // 0x00B4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_UpdateItemDetailsRenderTarget) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_UpdateItemDetailsRenderTarget");
static_assert(sizeof(GI_SinglePlayer_C_UpdateItemDetailsRenderTarget) == 0x0000C0, "Wrong size on GI_SinglePlayer_C_UpdateItemDetailsRenderTarget");
static_assert(offsetof(GI_SinglePlayer_C_UpdateItemDetailsRenderTarget, Item) == 0x000000, "Member 'GI_SinglePlayer_C_UpdateItemDetailsRenderTarget::Item' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UpdateItemDetailsRenderTarget, Progress) == 0x000008, "Member 'GI_SinglePlayer_C_UpdateItemDetailsRenderTarget::Progress' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UpdateItemDetailsRenderTarget, CustomIconParams) == 0x00000C, "Member 'GI_SinglePlayer_C_UpdateItemDetailsRenderTarget::CustomIconParams' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UpdateItemDetailsRenderTarget, Result) == 0x000020, "Member 'GI_SinglePlayer_C_UpdateItemDetailsRenderTarget::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UpdateItemDetailsRenderTarget, IconParams) == 0x000028, "Member 'GI_SinglePlayer_C_UpdateItemDetailsRenderTarget::IconParams' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UpdateItemDetailsRenderTarget, Resolution) == 0x00003C, "Member 'GI_SinglePlayer_C_UpdateItemDetailsRenderTarget::Resolution' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UpdateItemDetailsRenderTarget, RenderTarget) == 0x000048, "Member 'GI_SinglePlayer_C_UpdateItemDetailsRenderTarget::RenderTarget' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UpdateItemDetailsRenderTarget, CallFunc_IsValid_ReturnValue) == 0x000050, "Member 'GI_SinglePlayer_C_UpdateItemDetailsRenderTarget::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UpdateItemDetailsRenderTarget, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000051, "Member 'GI_SinglePlayer_C_UpdateItemDetailsRenderTarget::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UpdateItemDetailsRenderTarget, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000052, "Member 'GI_SinglePlayer_C_UpdateItemDetailsRenderTarget::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UpdateItemDetailsRenderTarget, CallFunc_GetIconRenderClassCollection_Result) == 0x000058, "Member 'GI_SinglePlayer_C_UpdateItemDetailsRenderTarget::CallFunc_GetIconRenderClassCollection_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UpdateItemDetailsRenderTarget, CallFunc_BooleanAND_ReturnValue) == 0x000068, "Member 'GI_SinglePlayer_C_UpdateItemDetailsRenderTarget::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UpdateItemDetailsRenderTarget, CallFunc_Multiply_IntInt_ReturnValue) == 0x00006C, "Member 'GI_SinglePlayer_C_UpdateItemDetailsRenderTarget::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UpdateItemDetailsRenderTarget, K2Node_MakeStruct_IntPoint) == 0x000070, "Member 'GI_SinglePlayer_C_UpdateItemDetailsRenderTarget::K2Node_MakeStruct_IntPoint' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UpdateItemDetailsRenderTarget, K2Node_MakeStruct_IntPoint_1) == 0x000078, "Member 'GI_SinglePlayer_C_UpdateItemDetailsRenderTarget::K2Node_MakeStruct_IntPoint_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UpdateItemDetailsRenderTarget, CallFunc_UpdateItemDetailsTexture_IconParams) == 0x000080, "Member 'GI_SinglePlayer_C_UpdateItemDetailsRenderTarget::CallFunc_UpdateItemDetailsTexture_IconParams' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UpdateItemDetailsRenderTarget, CallFunc_CreateRenderTarget2D_ReturnValue) == 0x000098, "Member 'GI_SinglePlayer_C_UpdateItemDetailsRenderTarget::CallFunc_CreateRenderTarget2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UpdateItemDetailsRenderTarget, CallFunc_Map_Find_Value) == 0x0000A0, "Member 'GI_SinglePlayer_C_UpdateItemDetailsRenderTarget::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UpdateItemDetailsRenderTarget, CallFunc_Map_Find_ReturnValue) == 0x0000A8, "Member 'GI_SinglePlayer_C_UpdateItemDetailsRenderTarget::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UpdateItemDetailsRenderTarget, Temp_bool_Variable) == 0x0000A9, "Member 'GI_SinglePlayer_C_UpdateItemDetailsRenderTarget::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UpdateItemDetailsRenderTarget, K2Node_Select_Default) == 0x0000AC, "Member 'GI_SinglePlayer_C_UpdateItemDetailsRenderTarget::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UpdateItemDetailsRenderTarget, CallFunc_Multiply_IntPointInt_ReturnValue) == 0x0000B4, "Member 'GI_SinglePlayer_C_UpdateItemDetailsRenderTarget::CallFunc_Multiply_IntPointInt_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.UpdateItemDetailsPickupActor
// 0x0030 (0x0030 - 0x0000)
struct GI_SinglePlayer_C_UpdateItemDetailsPickupActor final
{
public:
	struct FObjectClassCollection                 IconClassCollection;                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	class APICKUP_Base_C*                         CallFunc_SpawnPickupIconActorByClassCollection_SpawnedActor; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FObjectClassCollection                 CallFunc_GetRenderIconClassCollection_Result;      // 0x0018(0x0010)(HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ObjectClassCollection_Identical_ReturnValue; // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_UpdateItemDetailsPickupActor) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_UpdateItemDetailsPickupActor");
static_assert(sizeof(GI_SinglePlayer_C_UpdateItemDetailsPickupActor) == 0x000030, "Wrong size on GI_SinglePlayer_C_UpdateItemDetailsPickupActor");
static_assert(offsetof(GI_SinglePlayer_C_UpdateItemDetailsPickupActor, IconClassCollection) == 0x000000, "Member 'GI_SinglePlayer_C_UpdateItemDetailsPickupActor::IconClassCollection' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UpdateItemDetailsPickupActor, CallFunc_SpawnPickupIconActorByClassCollection_SpawnedActor) == 0x000010, "Member 'GI_SinglePlayer_C_UpdateItemDetailsPickupActor::CallFunc_SpawnPickupIconActorByClassCollection_SpawnedActor' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UpdateItemDetailsPickupActor, CallFunc_GetRenderIconClassCollection_Result) == 0x000018, "Member 'GI_SinglePlayer_C_UpdateItemDetailsPickupActor::CallFunc_GetRenderIconClassCollection_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UpdateItemDetailsPickupActor, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'GI_SinglePlayer_C_UpdateItemDetailsPickupActor::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UpdateItemDetailsPickupActor, CallFunc_ObjectClassCollection_Identical_ReturnValue) == 0x000029, "Member 'GI_SinglePlayer_C_UpdateItemDetailsPickupActor::CallFunc_ObjectClassCollection_Identical_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.UpdateItemIconPickupActor
// 0x0038 (0x0038 - 0x0000)
struct GI_SinglePlayer_C_UpdateItemIconPickupActor final
{
public:
	struct FObjectClassCollection                 IconClassCollection;                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          IsFullyLoaded;                                     // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasLoadedAllTextureMipsForStaticMeshComponent_ReturnValue; // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FObjectClassCollection                 CallFunc_GetRenderIconClassCollection_Result;      // 0x0018(0x0010)(HasGetValueTypeHash)
	bool                                          CallFunc_ObjectClassCollection_Identical_ReturnValue; // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APICKUP_Base_C*                         CallFunc_SpawnPickupIconActorByClassCollection_SpawnedActor; // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_UpdateItemIconPickupActor) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_UpdateItemIconPickupActor");
static_assert(sizeof(GI_SinglePlayer_C_UpdateItemIconPickupActor) == 0x000038, "Wrong size on GI_SinglePlayer_C_UpdateItemIconPickupActor");
static_assert(offsetof(GI_SinglePlayer_C_UpdateItemIconPickupActor, IconClassCollection) == 0x000000, "Member 'GI_SinglePlayer_C_UpdateItemIconPickupActor::IconClassCollection' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UpdateItemIconPickupActor, IsFullyLoaded) == 0x000010, "Member 'GI_SinglePlayer_C_UpdateItemIconPickupActor::IsFullyLoaded' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UpdateItemIconPickupActor, CallFunc_HasLoadedAllTextureMipsForStaticMeshComponent_ReturnValue) == 0x000011, "Member 'GI_SinglePlayer_C_UpdateItemIconPickupActor::CallFunc_HasLoadedAllTextureMipsForStaticMeshComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UpdateItemIconPickupActor, CallFunc_GetRenderIconClassCollection_Result) == 0x000018, "Member 'GI_SinglePlayer_C_UpdateItemIconPickupActor::CallFunc_GetRenderIconClassCollection_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UpdateItemIconPickupActor, CallFunc_ObjectClassCollection_Identical_ReturnValue) == 0x000028, "Member 'GI_SinglePlayer_C_UpdateItemIconPickupActor::CallFunc_ObjectClassCollection_Identical_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UpdateItemIconPickupActor, CallFunc_IsValid_ReturnValue) == 0x000029, "Member 'GI_SinglePlayer_C_UpdateItemIconPickupActor::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UpdateItemIconPickupActor, CallFunc_SpawnPickupIconActorByClassCollection_SpawnedActor) == 0x000030, "Member 'GI_SinglePlayer_C_UpdateItemIconPickupActor::CallFunc_SpawnPickupIconActorByClassCollection_SpawnedActor' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.ClearLastItemIconPickupActor
// 0x0002 (0x0002 - 0x0000)
struct GI_SinglePlayer_C_ClearLastItemIconPickupActor final
{
public:
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_ClearLastItemIconPickupActor) == 0x000001, "Wrong alignment on GI_SinglePlayer_C_ClearLastItemIconPickupActor");
static_assert(sizeof(GI_SinglePlayer_C_ClearLastItemIconPickupActor) == 0x000002, "Wrong size on GI_SinglePlayer_C_ClearLastItemIconPickupActor");
static_assert(offsetof(GI_SinglePlayer_C_ClearLastItemIconPickupActor, CallFunc_Array_Contains_ReturnValue) == 0x000000, "Member 'GI_SinglePlayer_C_ClearLastItemIconPickupActor::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ClearLastItemIconPickupActor, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'GI_SinglePlayer_C_ClearLastItemIconPickupActor::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.AddPendingGridIconActor
// 0x0058 (0x0058 - 0x0000)
struct GI_SinglePlayer_C_AddPendingGridIconActor final
{
public:
	class APICKUP_Base_C*                         PickupActor;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     CurrentMaterial;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaterialIndex;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     CallFunc_GetMaterial_ReturnValue;                  // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumMaterials_ReturnValue;              // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0030(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0048(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_IsTimerActiveHandle_ReturnValue;       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_53[0x1];                                       // 0x0053(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_AddPendingGridIconActor) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_AddPendingGridIconActor");
static_assert(sizeof(GI_SinglePlayer_C_AddPendingGridIconActor) == 0x000058, "Wrong size on GI_SinglePlayer_C_AddPendingGridIconActor");
static_assert(offsetof(GI_SinglePlayer_C_AddPendingGridIconActor, PickupActor) == 0x000000, "Member 'GI_SinglePlayer_C_AddPendingGridIconActor::PickupActor' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddPendingGridIconActor, CurrentMaterial) == 0x000008, "Member 'GI_SinglePlayer_C_AddPendingGridIconActor::CurrentMaterial' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddPendingGridIconActor, MaterialIndex) == 0x000010, "Member 'GI_SinglePlayer_C_AddPendingGridIconActor::MaterialIndex' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddPendingGridIconActor, CallFunc_IsValid_ReturnValue) == 0x000014, "Member 'GI_SinglePlayer_C_AddPendingGridIconActor::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddPendingGridIconActor, Temp_int_Variable) == 0x000018, "Member 'GI_SinglePlayer_C_AddPendingGridIconActor::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddPendingGridIconActor, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'GI_SinglePlayer_C_AddPendingGridIconActor::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddPendingGridIconActor, CallFunc_GetMaterial_ReturnValue) == 0x000020, "Member 'GI_SinglePlayer_C_AddPendingGridIconActor::CallFunc_GetMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddPendingGridIconActor, CallFunc_GetNumMaterials_ReturnValue) == 0x000028, "Member 'GI_SinglePlayer_C_AddPendingGridIconActor::CallFunc_GetNumMaterials_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddPendingGridIconActor, CallFunc_Subtract_IntInt_ReturnValue) == 0x00002C, "Member 'GI_SinglePlayer_C_AddPendingGridIconActor::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddPendingGridIconActor, K2Node_CreateDelegate_OutputDelegate) == 0x000030, "Member 'GI_SinglePlayer_C_AddPendingGridIconActor::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddPendingGridIconActor, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000040, "Member 'GI_SinglePlayer_C_AddPendingGridIconActor::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddPendingGridIconActor, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000048, "Member 'GI_SinglePlayer_C_AddPendingGridIconActor::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddPendingGridIconActor, CallFunc_K2_IsTimerActiveHandle_ReturnValue) == 0x000050, "Member 'GI_SinglePlayer_C_AddPendingGridIconActor::CallFunc_K2_IsTimerActiveHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddPendingGridIconActor, CallFunc_IsValid_ReturnValue_1) == 0x000051, "Member 'GI_SinglePlayer_C_AddPendingGridIconActor::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddPendingGridIconActor, CallFunc_Not_PreBool_ReturnValue) == 0x000052, "Member 'GI_SinglePlayer_C_AddPendingGridIconActor::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddPendingGridIconActor, CallFunc_Array_AddUnique_ReturnValue) == 0x000054, "Member 'GI_SinglePlayer_C_AddPendingGridIconActor::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.OnUpdatePendingPickupIcons
// 0x0080 (0x0080 - 0x0000)
struct GI_SinglePlayer_C_OnUpdatePendingPickupIcons final
{
public:
	struct FObjectClassCollection                 PickupClassCollection;                             // 0x0000(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class APICKUP_Base_C*                         PickupActor;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PendingIndex;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PendingCountToConsider;                            // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 CallFunc_Map_Find_Value;                           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 CallFunc_Map_Find_Value_1;                         // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_1;                   // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FObjectClassCollection                 CallFunc_GetRenderIconClassCollection_Result;      // 0x0040(0x0010)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Set_Remove_ReturnValue;                   // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Set_Remove_ReturnValue_1;                 // 0x0056(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_57[0x1];                                       // 0x0057(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasLoadedAllTextureMipsForStaticMeshComponent_ReturnValue; // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APICKUP_Base_C*                         CallFunc_Array_Get_Item;                           // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Min_ReturnValue;                          // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_OnUpdatePendingPickupIcons) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_OnUpdatePendingPickupIcons");
static_assert(sizeof(GI_SinglePlayer_C_OnUpdatePendingPickupIcons) == 0x000080, "Wrong size on GI_SinglePlayer_C_OnUpdatePendingPickupIcons");
static_assert(offsetof(GI_SinglePlayer_C_OnUpdatePendingPickupIcons, PickupClassCollection) == 0x000000, "Member 'GI_SinglePlayer_C_OnUpdatePendingPickupIcons::PickupClassCollection' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnUpdatePendingPickupIcons, PickupActor) == 0x000010, "Member 'GI_SinglePlayer_C_OnUpdatePendingPickupIcons::PickupActor' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnUpdatePendingPickupIcons, PendingIndex) == 0x000018, "Member 'GI_SinglePlayer_C_OnUpdatePendingPickupIcons::PendingIndex' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnUpdatePendingPickupIcons, PendingCountToConsider) == 0x00001C, "Member 'GI_SinglePlayer_C_OnUpdatePendingPickupIcons::PendingCountToConsider' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnUpdatePendingPickupIcons, CallFunc_Map_Find_Value) == 0x000020, "Member 'GI_SinglePlayer_C_OnUpdatePendingPickupIcons::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnUpdatePendingPickupIcons, CallFunc_Map_Find_ReturnValue) == 0x000028, "Member 'GI_SinglePlayer_C_OnUpdatePendingPickupIcons::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnUpdatePendingPickupIcons, CallFunc_Map_Find_Value_1) == 0x000030, "Member 'GI_SinglePlayer_C_OnUpdatePendingPickupIcons::CallFunc_Map_Find_Value_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnUpdatePendingPickupIcons, CallFunc_Map_Find_ReturnValue_1) == 0x000038, "Member 'GI_SinglePlayer_C_OnUpdatePendingPickupIcons::CallFunc_Map_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnUpdatePendingPickupIcons, CallFunc_GetRenderIconClassCollection_Result) == 0x000040, "Member 'GI_SinglePlayer_C_OnUpdatePendingPickupIcons::CallFunc_GetRenderIconClassCollection_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnUpdatePendingPickupIcons, CallFunc_Array_Length_ReturnValue) == 0x000050, "Member 'GI_SinglePlayer_C_OnUpdatePendingPickupIcons::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnUpdatePendingPickupIcons, CallFunc_Set_Remove_ReturnValue) == 0x000054, "Member 'GI_SinglePlayer_C_OnUpdatePendingPickupIcons::CallFunc_Set_Remove_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnUpdatePendingPickupIcons, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000055, "Member 'GI_SinglePlayer_C_OnUpdatePendingPickupIcons::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnUpdatePendingPickupIcons, CallFunc_Set_Remove_ReturnValue_1) == 0x000056, "Member 'GI_SinglePlayer_C_OnUpdatePendingPickupIcons::CallFunc_Set_Remove_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnUpdatePendingPickupIcons, Temp_int_Variable) == 0x000058, "Member 'GI_SinglePlayer_C_OnUpdatePendingPickupIcons::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnUpdatePendingPickupIcons, CallFunc_HasLoadedAllTextureMipsForStaticMeshComponent_ReturnValue) == 0x00005C, "Member 'GI_SinglePlayer_C_OnUpdatePendingPickupIcons::CallFunc_HasLoadedAllTextureMipsForStaticMeshComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnUpdatePendingPickupIcons, CallFunc_Add_IntInt_ReturnValue) == 0x000060, "Member 'GI_SinglePlayer_C_OnUpdatePendingPickupIcons::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnUpdatePendingPickupIcons, CallFunc_Array_Get_Item) == 0x000068, "Member 'GI_SinglePlayer_C_OnUpdatePendingPickupIcons::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnUpdatePendingPickupIcons, CallFunc_Subtract_IntInt_ReturnValue) == 0x000070, "Member 'GI_SinglePlayer_C_OnUpdatePendingPickupIcons::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnUpdatePendingPickupIcons, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000074, "Member 'GI_SinglePlayer_C_OnUpdatePendingPickupIcons::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnUpdatePendingPickupIcons, CallFunc_Array_Length_ReturnValue_1) == 0x000078, "Member 'GI_SinglePlayer_C_OnUpdatePendingPickupIcons::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnUpdatePendingPickupIcons, CallFunc_Min_ReturnValue) == 0x00007C, "Member 'GI_SinglePlayer_C_OnUpdatePendingPickupIcons::CallFunc_Min_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.IsInMusicGameplayState
// 0x0003 (0x0003 - 0x0000)
struct GI_SinglePlayer_C_IsInMusicGameplayState final
{
public:
	EGameplayState                                GameplayState;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_IsInMusicGameplayState) == 0x000001, "Wrong alignment on GI_SinglePlayer_C_IsInMusicGameplayState");
static_assert(sizeof(GI_SinglePlayer_C_IsInMusicGameplayState) == 0x000003, "Wrong size on GI_SinglePlayer_C_IsInMusicGameplayState");
static_assert(offsetof(GI_SinglePlayer_C_IsInMusicGameplayState, GameplayState) == 0x000000, "Member 'GI_SinglePlayer_C_IsInMusicGameplayState::GameplayState' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_IsInMusicGameplayState, Result) == 0x000001, "Member 'GI_SinglePlayer_C_IsInMusicGameplayState::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_IsInMusicGameplayState, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000002, "Member 'GI_SinglePlayer_C_IsInMusicGameplayState::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.TryFadeInStoppedMusicByClass
// 0x0050 (0x0050 - 0x0000)
struct GI_SinglePlayer_C_TryFadeInStoppedMusicByClass final
{
public:
	class UClass*                                 MusicCueClass;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StoppedIndex;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_MusicCue_C*                         StoppedMusicCue;                                   // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ClassClass_ReturnValue;        // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_33[0x5];                                       // 0x0033(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_MusicCue_C*                         CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue;                          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_TryFadeInStoppedMusicByClass) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_TryFadeInStoppedMusicByClass");
static_assert(sizeof(GI_SinglePlayer_C_TryFadeInStoppedMusicByClass) == 0x000050, "Wrong size on GI_SinglePlayer_C_TryFadeInStoppedMusicByClass");
static_assert(offsetof(GI_SinglePlayer_C_TryFadeInStoppedMusicByClass, MusicCueClass) == 0x000000, "Member 'GI_SinglePlayer_C_TryFadeInStoppedMusicByClass::MusicCueClass' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryFadeInStoppedMusicByClass, Result) == 0x000008, "Member 'GI_SinglePlayer_C_TryFadeInStoppedMusicByClass::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryFadeInStoppedMusicByClass, StoppedIndex) == 0x00000C, "Member 'GI_SinglePlayer_C_TryFadeInStoppedMusicByClass::StoppedIndex' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryFadeInStoppedMusicByClass, StoppedMusicCue) == 0x000010, "Member 'GI_SinglePlayer_C_TryFadeInStoppedMusicByClass::StoppedMusicCue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryFadeInStoppedMusicByClass, Temp_int_Array_Index_Variable) == 0x000018, "Member 'GI_SinglePlayer_C_TryFadeInStoppedMusicByClass::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryFadeInStoppedMusicByClass, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'GI_SinglePlayer_C_TryFadeInStoppedMusicByClass::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryFadeInStoppedMusicByClass, CallFunc_Subtract_IntInt_ReturnValue) == 0x000020, "Member 'GI_SinglePlayer_C_TryFadeInStoppedMusicByClass::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryFadeInStoppedMusicByClass, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000024, "Member 'GI_SinglePlayer_C_TryFadeInStoppedMusicByClass::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryFadeInStoppedMusicByClass, CallFunc_GetObjectClass_ReturnValue) == 0x000028, "Member 'GI_SinglePlayer_C_TryFadeInStoppedMusicByClass::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryFadeInStoppedMusicByClass, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'GI_SinglePlayer_C_TryFadeInStoppedMusicByClass::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryFadeInStoppedMusicByClass, CallFunc_Not_PreBool_ReturnValue) == 0x000031, "Member 'GI_SinglePlayer_C_TryFadeInStoppedMusicByClass::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryFadeInStoppedMusicByClass, CallFunc_EqualEqual_ClassClass_ReturnValue) == 0x000032, "Member 'GI_SinglePlayer_C_TryFadeInStoppedMusicByClass::CallFunc_EqualEqual_ClassClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryFadeInStoppedMusicByClass, CallFunc_Array_Get_Item) == 0x000038, "Member 'GI_SinglePlayer_C_TryFadeInStoppedMusicByClass::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryFadeInStoppedMusicByClass, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'GI_SinglePlayer_C_TryFadeInStoppedMusicByClass::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryFadeInStoppedMusicByClass, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000044, "Member 'GI_SinglePlayer_C_TryFadeInStoppedMusicByClass::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryFadeInStoppedMusicByClass, CallFunc_Max_ReturnValue) == 0x000048, "Member 'GI_SinglePlayer_C_TryFadeInStoppedMusicByClass::CallFunc_Max_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.ForceStopMusic
// 0x0050 (0x0050 - 0x0000)
struct GI_SinglePlayer_C_ForceStopMusic final
{
public:
	class UBP_MusicCue_C*                         MusicCue;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UBP_MusicCue_C* MusicCue)> K2Node_CreateDelegate_OutputDelegate;              // 0x0018(0x0010)(ZeroConstructor, NoDestructor)
	class UBP_MusicCue_C*                         CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UBP_MusicCue_C* MusicCue)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0038(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_ForceStopMusic) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_ForceStopMusic");
static_assert(sizeof(GI_SinglePlayer_C_ForceStopMusic) == 0x000050, "Wrong size on GI_SinglePlayer_C_ForceStopMusic");
static_assert(offsetof(GI_SinglePlayer_C_ForceStopMusic, MusicCue) == 0x000000, "Member 'GI_SinglePlayer_C_ForceStopMusic::MusicCue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ForceStopMusic, Temp_int_Array_Index_Variable) == 0x000008, "Member 'GI_SinglePlayer_C_ForceStopMusic::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ForceStopMusic, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'GI_SinglePlayer_C_ForceStopMusic::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ForceStopMusic, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'GI_SinglePlayer_C_ForceStopMusic::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ForceStopMusic, CallFunc_IsValid_ReturnValue) == 0x000014, "Member 'GI_SinglePlayer_C_ForceStopMusic::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ForceStopMusic, K2Node_CreateDelegate_OutputDelegate) == 0x000018, "Member 'GI_SinglePlayer_C_ForceStopMusic::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ForceStopMusic, CallFunc_Array_Get_Item) == 0x000028, "Member 'GI_SinglePlayer_C_ForceStopMusic::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ForceStopMusic, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'GI_SinglePlayer_C_ForceStopMusic::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ForceStopMusic, CallFunc_Less_IntInt_ReturnValue) == 0x000034, "Member 'GI_SinglePlayer_C_ForceStopMusic::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ForceStopMusic, K2Node_CreateDelegate_OutputDelegate_1) == 0x000038, "Member 'GI_SinglePlayer_C_ForceStopMusic::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ForceStopMusic, CallFunc_IsValid_ReturnValue_1) == 0x000048, "Member 'GI_SinglePlayer_C_ForceStopMusic::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.ResetSavedData
// 0x0018 (0x0018 - 0x0000)
struct GI_SinglePlayer_C_ResetSavedData final
{
public:
	TArray<class FName>                           CallFunc_GetLevelNames_Levels;                     // 0x0000(0x0010)(ReferenceParm)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_ResetSavedData) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_ResetSavedData");
static_assert(sizeof(GI_SinglePlayer_C_ResetSavedData) == 0x000018, "Wrong size on GI_SinglePlayer_C_ResetSavedData");
static_assert(offsetof(GI_SinglePlayer_C_ResetSavedData, CallFunc_GetLevelNames_Levels) == 0x000000, "Member 'GI_SinglePlayer_C_ResetSavedData::CallFunc_GetLevelNames_Levels' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ResetSavedData, CallFunc_Array_Get_Item) == 0x000010, "Member 'GI_SinglePlayer_C_ResetSavedData::CallFunc_Array_Get_Item' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.OnLevelRegionDiscovered
// 0x0018 (0x0018 - 0x0000)
struct GI_SinglePlayer_C_OnLevelRegionDiscovered final
{
public:
	struct FDataTableRowHandle                    RegionRowHandle;                                   // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_OnLevelRegionDiscovered) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_OnLevelRegionDiscovered");
static_assert(sizeof(GI_SinglePlayer_C_OnLevelRegionDiscovered) == 0x000018, "Wrong size on GI_SinglePlayer_C_OnLevelRegionDiscovered");
static_assert(offsetof(GI_SinglePlayer_C_OnLevelRegionDiscovered, RegionRowHandle) == 0x000000, "Member 'GI_SinglePlayer_C_OnLevelRegionDiscovered::RegionRowHandle' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnLevelRegionDiscovered, CallFunc_Add_FloatFloat_ReturnValue) == 0x000010, "Member 'GI_SinglePlayer_C_OnLevelRegionDiscovered::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnLevelRegionDiscovered, CallFunc_FMin_ReturnValue) == 0x000014, "Member 'GI_SinglePlayer_C_OnLevelRegionDiscovered::CallFunc_FMin_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.EVENT_OnIntensityDecayTimer
// 0x0008 (0x0008 - 0x0000)
struct GI_SinglePlayer_C_EVENT_OnIntensityDecayTimer final
{
public:
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_EVENT_OnIntensityDecayTimer) == 0x000004, "Wrong alignment on GI_SinglePlayer_C_EVENT_OnIntensityDecayTimer");
static_assert(sizeof(GI_SinglePlayer_C_EVENT_OnIntensityDecayTimer) == 0x000008, "Wrong size on GI_SinglePlayer_C_EVENT_OnIntensityDecayTimer");
static_assert(offsetof(GI_SinglePlayer_C_EVENT_OnIntensityDecayTimer, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000000, "Member 'GI_SinglePlayer_C_EVENT_OnIntensityDecayTimer::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_EVENT_OnIntensityDecayTimer, CallFunc_FMax_ReturnValue) == 0x000004, "Member 'GI_SinglePlayer_C_EVENT_OnIntensityDecayTimer::CallFunc_FMax_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.OnVoxelColumnsRevealed
// 0x0004 (0x0004 - 0x0000)
struct GI_SinglePlayer_C_OnVoxelColumnsRevealed final
{
public:
	int32                                         VoxelColumnCount;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_OnVoxelColumnsRevealed) == 0x000004, "Wrong alignment on GI_SinglePlayer_C_OnVoxelColumnsRevealed");
static_assert(sizeof(GI_SinglePlayer_C_OnVoxelColumnsRevealed) == 0x000004, "Wrong size on GI_SinglePlayer_C_OnVoxelColumnsRevealed");
static_assert(offsetof(GI_SinglePlayer_C_OnVoxelColumnsRevealed, VoxelColumnCount) == 0x000000, "Member 'GI_SinglePlayer_C_OnVoxelColumnsRevealed::VoxelColumnCount' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.SetCurrentExploreIntensity
// 0x0030 (0x0030 - 0x0000)
struct GI_SinglePlayer_C_SetCurrentExploreIntensity final
{
public:
	float                                         Intensity;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_IsValidTimerHandle_ReturnValue;        // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_K2_IsValidTimerHandle_ReturnValue_1;      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0020(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_SetCurrentExploreIntensity) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_SetCurrentExploreIntensity");
static_assert(sizeof(GI_SinglePlayer_C_SetCurrentExploreIntensity) == 0x000030, "Wrong size on GI_SinglePlayer_C_SetCurrentExploreIntensity");
static_assert(offsetof(GI_SinglePlayer_C_SetCurrentExploreIntensity, Intensity) == 0x000000, "Member 'GI_SinglePlayer_C_SetCurrentExploreIntensity::Intensity' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetCurrentExploreIntensity, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'GI_SinglePlayer_C_SetCurrentExploreIntensity::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetCurrentExploreIntensity, CallFunc_K2_IsValidTimerHandle_ReturnValue) == 0x000005, "Member 'GI_SinglePlayer_C_SetCurrentExploreIntensity::CallFunc_K2_IsValidTimerHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetCurrentExploreIntensity, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'GI_SinglePlayer_C_SetCurrentExploreIntensity::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetCurrentExploreIntensity, CallFunc_K2_IsValidTimerHandle_ReturnValue_1) == 0x000018, "Member 'GI_SinglePlayer_C_SetCurrentExploreIntensity::CallFunc_K2_IsValidTimerHandle_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetCurrentExploreIntensity, CallFunc_Not_PreBool_ReturnValue) == 0x000019, "Member 'GI_SinglePlayer_C_SetCurrentExploreIntensity::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetCurrentExploreIntensity, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000020, "Member 'GI_SinglePlayer_C_SetCurrentExploreIntensity::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetCurrentExploreIntensity, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000028, "Member 'GI_SinglePlayer_C_SetCurrentExploreIntensity::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.IsTryingToPlaySystemOnComponentAsync
// 0x0018 (0x0018 - 0x0000)
struct GI_SinglePlayer_C_IsTryingToPlaySystemOnComponentAsync final
{
public:
	class UFXSystemComponent*                     SystemComponent;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Map_Find_Value;                           // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_IsTryingToPlaySystemOnComponentAsync) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_IsTryingToPlaySystemOnComponentAsync");
static_assert(sizeof(GI_SinglePlayer_C_IsTryingToPlaySystemOnComponentAsync) == 0x000018, "Wrong size on GI_SinglePlayer_C_IsTryingToPlaySystemOnComponentAsync");
static_assert(offsetof(GI_SinglePlayer_C_IsTryingToPlaySystemOnComponentAsync, SystemComponent) == 0x000000, "Member 'GI_SinglePlayer_C_IsTryingToPlaySystemOnComponentAsync::SystemComponent' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_IsTryingToPlaySystemOnComponentAsync, Result) == 0x000008, "Member 'GI_SinglePlayer_C_IsTryingToPlaySystemOnComponentAsync::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_IsTryingToPlaySystemOnComponentAsync, CallFunc_Map_Find_Value) == 0x00000C, "Member 'GI_SinglePlayer_C_IsTryingToPlaySystemOnComponentAsync::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_IsTryingToPlaySystemOnComponentAsync, CallFunc_Map_Find_ReturnValue) == 0x000010, "Member 'GI_SinglePlayer_C_IsTryingToPlaySystemOnComponentAsync::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_IsTryingToPlaySystemOnComponentAsync, CallFunc_Greater_IntInt_ReturnValue) == 0x000011, "Member 'GI_SinglePlayer_C_IsTryingToPlaySystemOnComponentAsync::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.IsTryingToAttachToSceneComponentAsync
// 0x0018 (0x0018 - 0x0000)
struct GI_SinglePlayer_C_IsTryingToAttachToSceneComponentAsync final
{
public:
	class USceneComponent*                        SceneComponent;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Map_Find_Value;                           // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_IsTryingToAttachToSceneComponentAsync) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_IsTryingToAttachToSceneComponentAsync");
static_assert(sizeof(GI_SinglePlayer_C_IsTryingToAttachToSceneComponentAsync) == 0x000018, "Wrong size on GI_SinglePlayer_C_IsTryingToAttachToSceneComponentAsync");
static_assert(offsetof(GI_SinglePlayer_C_IsTryingToAttachToSceneComponentAsync, SceneComponent) == 0x000000, "Member 'GI_SinglePlayer_C_IsTryingToAttachToSceneComponentAsync::SceneComponent' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_IsTryingToAttachToSceneComponentAsync, Result) == 0x000008, "Member 'GI_SinglePlayer_C_IsTryingToAttachToSceneComponentAsync::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_IsTryingToAttachToSceneComponentAsync, CallFunc_Map_Find_Value) == 0x00000C, "Member 'GI_SinglePlayer_C_IsTryingToAttachToSceneComponentAsync::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_IsTryingToAttachToSceneComponentAsync, CallFunc_Map_Find_ReturnValue) == 0x000010, "Member 'GI_SinglePlayer_C_IsTryingToAttachToSceneComponentAsync::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_IsTryingToAttachToSceneComponentAsync, CallFunc_Greater_IntInt_ReturnValue) == 0x000011, "Member 'GI_SinglePlayer_C_IsTryingToAttachToSceneComponentAsync::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.TryIncrementSystemComponentRefCount
// 0x0018 (0x0018 - 0x0000)
struct GI_SinglePlayer_C_TryIncrementSystemComponentRefCount final
{
public:
	class UFXSystemComponent*                     SystemComponent;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Map_Find_Value;                           // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_TryIncrementSystemComponentRefCount) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_TryIncrementSystemComponentRefCount");
static_assert(sizeof(GI_SinglePlayer_C_TryIncrementSystemComponentRefCount) == 0x000018, "Wrong size on GI_SinglePlayer_C_TryIncrementSystemComponentRefCount");
static_assert(offsetof(GI_SinglePlayer_C_TryIncrementSystemComponentRefCount, SystemComponent) == 0x000000, "Member 'GI_SinglePlayer_C_TryIncrementSystemComponentRefCount::SystemComponent' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryIncrementSystemComponentRefCount, Result) == 0x000008, "Member 'GI_SinglePlayer_C_TryIncrementSystemComponentRefCount::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryIncrementSystemComponentRefCount, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'GI_SinglePlayer_C_TryIncrementSystemComponentRefCount::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryIncrementSystemComponentRefCount, CallFunc_Map_Find_Value) == 0x00000C, "Member 'GI_SinglePlayer_C_TryIncrementSystemComponentRefCount::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryIncrementSystemComponentRefCount, CallFunc_Map_Find_ReturnValue) == 0x000010, "Member 'GI_SinglePlayer_C_TryIncrementSystemComponentRefCount::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryIncrementSystemComponentRefCount, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'GI_SinglePlayer_C_TryIncrementSystemComponentRefCount::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.TryDecrementSystemComponentRefCount
// 0x0028 (0x0028 - 0x0000)
struct GI_SinglePlayer_C_TryDecrementSystemComponentRefCount final
{
public:
	class UFXSystemComponent*                     SystemComponent;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RefCount;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Map_Remove_ReturnValue;                   // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Map_Find_Value;                           // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_TryDecrementSystemComponentRefCount) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_TryDecrementSystemComponentRefCount");
static_assert(sizeof(GI_SinglePlayer_C_TryDecrementSystemComponentRefCount) == 0x000028, "Wrong size on GI_SinglePlayer_C_TryDecrementSystemComponentRefCount");
static_assert(offsetof(GI_SinglePlayer_C_TryDecrementSystemComponentRefCount, SystemComponent) == 0x000000, "Member 'GI_SinglePlayer_C_TryDecrementSystemComponentRefCount::SystemComponent' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryDecrementSystemComponentRefCount, Result) == 0x000008, "Member 'GI_SinglePlayer_C_TryDecrementSystemComponentRefCount::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryDecrementSystemComponentRefCount, RefCount) == 0x00000C, "Member 'GI_SinglePlayer_C_TryDecrementSystemComponentRefCount::RefCount' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryDecrementSystemComponentRefCount, Temp_int_Variable) == 0x000010, "Member 'GI_SinglePlayer_C_TryDecrementSystemComponentRefCount::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryDecrementSystemComponentRefCount, CallFunc_Greater_IntInt_ReturnValue) == 0x000014, "Member 'GI_SinglePlayer_C_TryDecrementSystemComponentRefCount::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryDecrementSystemComponentRefCount, CallFunc_Map_Remove_ReturnValue) == 0x000015, "Member 'GI_SinglePlayer_C_TryDecrementSystemComponentRefCount::CallFunc_Map_Remove_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryDecrementSystemComponentRefCount, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000016, "Member 'GI_SinglePlayer_C_TryDecrementSystemComponentRefCount::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryDecrementSystemComponentRefCount, CallFunc_Subtract_IntInt_ReturnValue) == 0x000018, "Member 'GI_SinglePlayer_C_TryDecrementSystemComponentRefCount::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryDecrementSystemComponentRefCount, CallFunc_Map_Find_Value) == 0x00001C, "Member 'GI_SinglePlayer_C_TryDecrementSystemComponentRefCount::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryDecrementSystemComponentRefCount, CallFunc_Map_Find_ReturnValue) == 0x000020, "Member 'GI_SinglePlayer_C_TryDecrementSystemComponentRefCount::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.TryIncrementSceneComponentRefCount
// 0x0018 (0x0018 - 0x0000)
struct GI_SinglePlayer_C_TryIncrementSceneComponentRefCount final
{
public:
	class USceneComponent*                        SceneComponent;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Map_Find_Value;                           // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_TryIncrementSceneComponentRefCount) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_TryIncrementSceneComponentRefCount");
static_assert(sizeof(GI_SinglePlayer_C_TryIncrementSceneComponentRefCount) == 0x000018, "Wrong size on GI_SinglePlayer_C_TryIncrementSceneComponentRefCount");
static_assert(offsetof(GI_SinglePlayer_C_TryIncrementSceneComponentRefCount, SceneComponent) == 0x000000, "Member 'GI_SinglePlayer_C_TryIncrementSceneComponentRefCount::SceneComponent' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryIncrementSceneComponentRefCount, Result) == 0x000008, "Member 'GI_SinglePlayer_C_TryIncrementSceneComponentRefCount::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryIncrementSceneComponentRefCount, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'GI_SinglePlayer_C_TryIncrementSceneComponentRefCount::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryIncrementSceneComponentRefCount, CallFunc_Map_Find_Value) == 0x00000C, "Member 'GI_SinglePlayer_C_TryIncrementSceneComponentRefCount::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryIncrementSceneComponentRefCount, CallFunc_Map_Find_ReturnValue) == 0x000010, "Member 'GI_SinglePlayer_C_TryIncrementSceneComponentRefCount::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryIncrementSceneComponentRefCount, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'GI_SinglePlayer_C_TryIncrementSceneComponentRefCount::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.TryDecrementSceneComponentRefCount
// 0x0028 (0x0028 - 0x0000)
struct GI_SinglePlayer_C_TryDecrementSceneComponentRefCount final
{
public:
	class USceneComponent*                        SceneComponent;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RefCount;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Map_Remove_ReturnValue;                   // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Map_Find_Value;                           // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_TryDecrementSceneComponentRefCount) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_TryDecrementSceneComponentRefCount");
static_assert(sizeof(GI_SinglePlayer_C_TryDecrementSceneComponentRefCount) == 0x000028, "Wrong size on GI_SinglePlayer_C_TryDecrementSceneComponentRefCount");
static_assert(offsetof(GI_SinglePlayer_C_TryDecrementSceneComponentRefCount, SceneComponent) == 0x000000, "Member 'GI_SinglePlayer_C_TryDecrementSceneComponentRefCount::SceneComponent' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryDecrementSceneComponentRefCount, Result) == 0x000008, "Member 'GI_SinglePlayer_C_TryDecrementSceneComponentRefCount::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryDecrementSceneComponentRefCount, RefCount) == 0x00000C, "Member 'GI_SinglePlayer_C_TryDecrementSceneComponentRefCount::RefCount' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryDecrementSceneComponentRefCount, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'GI_SinglePlayer_C_TryDecrementSceneComponentRefCount::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryDecrementSceneComponentRefCount, CallFunc_Map_Remove_ReturnValue) == 0x000011, "Member 'GI_SinglePlayer_C_TryDecrementSceneComponentRefCount::CallFunc_Map_Remove_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryDecrementSceneComponentRefCount, Temp_int_Variable) == 0x000014, "Member 'GI_SinglePlayer_C_TryDecrementSceneComponentRefCount::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryDecrementSceneComponentRefCount, CallFunc_Map_Find_Value) == 0x000018, "Member 'GI_SinglePlayer_C_TryDecrementSceneComponentRefCount::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryDecrementSceneComponentRefCount, CallFunc_Map_Find_ReturnValue) == 0x00001C, "Member 'GI_SinglePlayer_C_TryDecrementSceneComponentRefCount::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryDecrementSceneComponentRefCount, CallFunc_Greater_IntInt_ReturnValue) == 0x00001D, "Member 'GI_SinglePlayer_C_TryDecrementSceneComponentRefCount::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryDecrementSceneComponentRefCount, CallFunc_Greater_IntInt_ReturnValue_1) == 0x00001E, "Member 'GI_SinglePlayer_C_TryDecrementSceneComponentRefCount::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryDecrementSceneComponentRefCount, CallFunc_Subtract_IntInt_ReturnValue) == 0x000020, "Member 'GI_SinglePlayer_C_TryDecrementSceneComponentRefCount::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.PlaySystemUsingAsyncParams
// 0x01E0 (0x01E0 - 0x0000)
struct GI_SinglePlayer_C_PlaySystemUsingAsyncParams final
{
public:
	class UFXSystemAsset*                         System;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_AsyncParticleParams            SystemParams;                                      // 0x0010(0x00A0)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	class UFXSystemComponent*                     SpawnedSystemComponent;                            // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue;   // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x00BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x00C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue; // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        K2Node_DynamicCast_AsScene_Component;              // 0x00E8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        K2Node_DynamicCast_AsParticle_System;              // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAttached_ReturnValue;         // 0x0108(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         K2Node_DynamicCast_AsNiagara_System;               // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_119[0x3];                                      // 0x0119(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x011C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x0128(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x0134(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue_1; // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CallObjectEventByHandle_ReturnValue;      // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_149[0x7];                                      // 0x0149(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        K2Node_DynamicCast_AsScene_Component_1;            // 0x0150(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_159[0x7];                                      // 0x0159(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      CallFunc_SpawnSystemAttached_ReturnValue;          // 0x0160(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_2;                // 0x0168(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_2;                // 0x0174(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_2;                   // 0x0180(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_3;                // 0x018C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_3;                // 0x0198(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_3;                   // 0x01A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        K2Node_DynamicCast_AsParticle_System_1;            // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B9[0x7];                                      // 0x01B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAtLocation_ReturnValue;       // 0x01C0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         K2Node_DynamicCast_AsNiagara_System_1;             // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D1[0x7];                                      // 0x01D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      CallFunc_SpawnSystemAtLocation_ReturnValue;        // 0x01D8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_PlaySystemUsingAsyncParams) == 0x000010, "Wrong alignment on GI_SinglePlayer_C_PlaySystemUsingAsyncParams");
static_assert(sizeof(GI_SinglePlayer_C_PlaySystemUsingAsyncParams) == 0x0001E0, "Wrong size on GI_SinglePlayer_C_PlaySystemUsingAsyncParams");
static_assert(offsetof(GI_SinglePlayer_C_PlaySystemUsingAsyncParams, System) == 0x000000, "Member 'GI_SinglePlayer_C_PlaySystemUsingAsyncParams::System' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PlaySystemUsingAsyncParams, SystemParams) == 0x000010, "Member 'GI_SinglePlayer_C_PlaySystemUsingAsyncParams::SystemParams' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PlaySystemUsingAsyncParams, SpawnedSystemComponent) == 0x0000B0, "Member 'GI_SinglePlayer_C_PlaySystemUsingAsyncParams::SpawnedSystemComponent' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PlaySystemUsingAsyncParams, CallFunc_IsValidSoftObjectReference_ReturnValue) == 0x0000B8, "Member 'GI_SinglePlayer_C_PlaySystemUsingAsyncParams::CallFunc_IsValidSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PlaySystemUsingAsyncParams, CallFunc_BreakTransform_Location) == 0x0000BC, "Member 'GI_SinglePlayer_C_PlaySystemUsingAsyncParams::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PlaySystemUsingAsyncParams, CallFunc_BreakTransform_Rotation) == 0x0000C8, "Member 'GI_SinglePlayer_C_PlaySystemUsingAsyncParams::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PlaySystemUsingAsyncParams, CallFunc_BreakTransform_Scale) == 0x0000D4, "Member 'GI_SinglePlayer_C_PlaySystemUsingAsyncParams::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PlaySystemUsingAsyncParams, CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue) == 0x0000E0, "Member 'GI_SinglePlayer_C_PlaySystemUsingAsyncParams::CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PlaySystemUsingAsyncParams, K2Node_DynamicCast_AsScene_Component) == 0x0000E8, "Member 'GI_SinglePlayer_C_PlaySystemUsingAsyncParams::K2Node_DynamicCast_AsScene_Component' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PlaySystemUsingAsyncParams, K2Node_DynamicCast_bSuccess) == 0x0000F0, "Member 'GI_SinglePlayer_C_PlaySystemUsingAsyncParams::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PlaySystemUsingAsyncParams, K2Node_DynamicCast_AsParticle_System) == 0x0000F8, "Member 'GI_SinglePlayer_C_PlaySystemUsingAsyncParams::K2Node_DynamicCast_AsParticle_System' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PlaySystemUsingAsyncParams, K2Node_DynamicCast_bSuccess_1) == 0x000100, "Member 'GI_SinglePlayer_C_PlaySystemUsingAsyncParams::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PlaySystemUsingAsyncParams, CallFunc_SpawnEmitterAttached_ReturnValue) == 0x000108, "Member 'GI_SinglePlayer_C_PlaySystemUsingAsyncParams::CallFunc_SpawnEmitterAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PlaySystemUsingAsyncParams, K2Node_DynamicCast_AsNiagara_System) == 0x000110, "Member 'GI_SinglePlayer_C_PlaySystemUsingAsyncParams::K2Node_DynamicCast_AsNiagara_System' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PlaySystemUsingAsyncParams, K2Node_DynamicCast_bSuccess_2) == 0x000118, "Member 'GI_SinglePlayer_C_PlaySystemUsingAsyncParams::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PlaySystemUsingAsyncParams, CallFunc_BreakTransform_Location_1) == 0x00011C, "Member 'GI_SinglePlayer_C_PlaySystemUsingAsyncParams::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PlaySystemUsingAsyncParams, CallFunc_BreakTransform_Rotation_1) == 0x000128, "Member 'GI_SinglePlayer_C_PlaySystemUsingAsyncParams::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PlaySystemUsingAsyncParams, CallFunc_BreakTransform_Scale_1) == 0x000134, "Member 'GI_SinglePlayer_C_PlaySystemUsingAsyncParams::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PlaySystemUsingAsyncParams, CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue_1) == 0x000140, "Member 'GI_SinglePlayer_C_PlaySystemUsingAsyncParams::CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PlaySystemUsingAsyncParams, CallFunc_CallObjectEventByHandle_ReturnValue) == 0x000148, "Member 'GI_SinglePlayer_C_PlaySystemUsingAsyncParams::CallFunc_CallObjectEventByHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PlaySystemUsingAsyncParams, K2Node_DynamicCast_AsScene_Component_1) == 0x000150, "Member 'GI_SinglePlayer_C_PlaySystemUsingAsyncParams::K2Node_DynamicCast_AsScene_Component_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PlaySystemUsingAsyncParams, K2Node_DynamicCast_bSuccess_3) == 0x000158, "Member 'GI_SinglePlayer_C_PlaySystemUsingAsyncParams::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PlaySystemUsingAsyncParams, CallFunc_SpawnSystemAttached_ReturnValue) == 0x000160, "Member 'GI_SinglePlayer_C_PlaySystemUsingAsyncParams::CallFunc_SpawnSystemAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PlaySystemUsingAsyncParams, CallFunc_BreakTransform_Location_2) == 0x000168, "Member 'GI_SinglePlayer_C_PlaySystemUsingAsyncParams::CallFunc_BreakTransform_Location_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PlaySystemUsingAsyncParams, CallFunc_BreakTransform_Rotation_2) == 0x000174, "Member 'GI_SinglePlayer_C_PlaySystemUsingAsyncParams::CallFunc_BreakTransform_Rotation_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PlaySystemUsingAsyncParams, CallFunc_BreakTransform_Scale_2) == 0x000180, "Member 'GI_SinglePlayer_C_PlaySystemUsingAsyncParams::CallFunc_BreakTransform_Scale_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PlaySystemUsingAsyncParams, CallFunc_BreakTransform_Location_3) == 0x00018C, "Member 'GI_SinglePlayer_C_PlaySystemUsingAsyncParams::CallFunc_BreakTransform_Location_3' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PlaySystemUsingAsyncParams, CallFunc_BreakTransform_Rotation_3) == 0x000198, "Member 'GI_SinglePlayer_C_PlaySystemUsingAsyncParams::CallFunc_BreakTransform_Rotation_3' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PlaySystemUsingAsyncParams, CallFunc_BreakTransform_Scale_3) == 0x0001A4, "Member 'GI_SinglePlayer_C_PlaySystemUsingAsyncParams::CallFunc_BreakTransform_Scale_3' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PlaySystemUsingAsyncParams, K2Node_DynamicCast_AsParticle_System_1) == 0x0001B0, "Member 'GI_SinglePlayer_C_PlaySystemUsingAsyncParams::K2Node_DynamicCast_AsParticle_System_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PlaySystemUsingAsyncParams, K2Node_DynamicCast_bSuccess_4) == 0x0001B8, "Member 'GI_SinglePlayer_C_PlaySystemUsingAsyncParams::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PlaySystemUsingAsyncParams, CallFunc_SpawnEmitterAtLocation_ReturnValue) == 0x0001C0, "Member 'GI_SinglePlayer_C_PlaySystemUsingAsyncParams::CallFunc_SpawnEmitterAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PlaySystemUsingAsyncParams, K2Node_DynamicCast_AsNiagara_System_1) == 0x0001C8, "Member 'GI_SinglePlayer_C_PlaySystemUsingAsyncParams::K2Node_DynamicCast_AsNiagara_System_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PlaySystemUsingAsyncParams, K2Node_DynamicCast_bSuccess_5) == 0x0001D0, "Member 'GI_SinglePlayer_C_PlaySystemUsingAsyncParams::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PlaySystemUsingAsyncParams, CallFunc_SpawnSystemAtLocation_ReturnValue) == 0x0001D8, "Member 'GI_SinglePlayer_C_PlaySystemUsingAsyncParams::CallFunc_SpawnSystemAtLocation_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.AddAsyncSystemParamsToQueue
// 0x0110 (0x0110 - 0x0000)
struct GI_SinglePlayer_C_AddAsyncSystemParamsToQueue final
{
public:
	TSoftObjectPtr<class UFXSystemAsset>          System;                                            // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_AsyncParticleParams            SystemParams;                                      // 0x0030(0x00A0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)
	struct FSTRUCT_AsyncParticleParamArray        ParamQueue;                                        // 0x00D0(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	class UObject*                                CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue; // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        K2Node_DynamicCast_AsScene_Component;              // 0x00E8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryIncrementSceneComponentRefCount_Result; // 0x00F2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F3[0x1];                                       // 0x00F3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_AsyncParticleParamArray        CallFunc_Map_Find_Value;                           // 0x00F8(0x0010)(ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_AddAsyncSystemParamsToQueue) == 0x000010, "Wrong alignment on GI_SinglePlayer_C_AddAsyncSystemParamsToQueue");
static_assert(sizeof(GI_SinglePlayer_C_AddAsyncSystemParamsToQueue) == 0x000110, "Wrong size on GI_SinglePlayer_C_AddAsyncSystemParamsToQueue");
static_assert(offsetof(GI_SinglePlayer_C_AddAsyncSystemParamsToQueue, System) == 0x000000, "Member 'GI_SinglePlayer_C_AddAsyncSystemParamsToQueue::System' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddAsyncSystemParamsToQueue, SystemParams) == 0x000030, "Member 'GI_SinglePlayer_C_AddAsyncSystemParamsToQueue::SystemParams' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddAsyncSystemParamsToQueue, ParamQueue) == 0x0000D0, "Member 'GI_SinglePlayer_C_AddAsyncSystemParamsToQueue::ParamQueue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddAsyncSystemParamsToQueue, CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue) == 0x0000E0, "Member 'GI_SinglePlayer_C_AddAsyncSystemParamsToQueue::CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddAsyncSystemParamsToQueue, K2Node_DynamicCast_AsScene_Component) == 0x0000E8, "Member 'GI_SinglePlayer_C_AddAsyncSystemParamsToQueue::K2Node_DynamicCast_AsScene_Component' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddAsyncSystemParamsToQueue, K2Node_DynamicCast_bSuccess) == 0x0000F0, "Member 'GI_SinglePlayer_C_AddAsyncSystemParamsToQueue::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddAsyncSystemParamsToQueue, CallFunc_IsValid_ReturnValue) == 0x0000F1, "Member 'GI_SinglePlayer_C_AddAsyncSystemParamsToQueue::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddAsyncSystemParamsToQueue, CallFunc_TryIncrementSceneComponentRefCount_Result) == 0x0000F2, "Member 'GI_SinglePlayer_C_AddAsyncSystemParamsToQueue::CallFunc_TryIncrementSceneComponentRefCount_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddAsyncSystemParamsToQueue, CallFunc_Array_Add_ReturnValue) == 0x0000F4, "Member 'GI_SinglePlayer_C_AddAsyncSystemParamsToQueue::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddAsyncSystemParamsToQueue, CallFunc_Map_Find_Value) == 0x0000F8, "Member 'GI_SinglePlayer_C_AddAsyncSystemParamsToQueue::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddAsyncSystemParamsToQueue, CallFunc_Map_Find_ReturnValue) == 0x000108, "Member 'GI_SinglePlayer_C_AddAsyncSystemParamsToQueue::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.RemoveAsyncSystemParamsFromQueue
// 0x0310 (0x0310 - 0x0000)
struct GI_SinglePlayer_C_RemoveAsyncSystemParamsFromQueue final
{
public:
	TSoftObjectPtr<class UFXSystemAsset>          System;                                            // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_AsyncParticleParams            SystemParams;                                      // 0x0030(0x00A0)(Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)
	struct FSTRUCT_AsyncParticleParams            RemovedParams;                                     // 0x00D0(0x00A0)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	struct FSTRUCT_AsyncParticleParamArray        ParamQueue;                                        // 0x0170(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	class UObject*                                CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue; // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_188[0x8];                                      // 0x0188(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_AsyncParticleParams            CallFunc_Array_Get_Item;                           // 0x0190(0x00A0)(ContainsInstancedReference, HasGetValueTypeHash)
	class USceneComponent*                        K2Node_DynamicCast_AsScene_Component;              // 0x0230(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryDecrementSceneComponentRefCount_Result; // 0x0239(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue;   // 0x023A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Map_Remove_ReturnValue;                   // 0x023B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23C[0x4];                                      // 0x023C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_AsyncParticleParamArray        CallFunc_Map_Find_Value;                           // 0x0240(0x0010)(ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0250(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_251[0xF];                                      // 0x0251(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_AsyncParticleParams            K2Node_MakeStruct_STRUCT_AsyncParticleParams;      // 0x0260(0x00A0)(ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0300(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0304(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_RemoveAsyncSystemParamsFromQueue) == 0x000010, "Wrong alignment on GI_SinglePlayer_C_RemoveAsyncSystemParamsFromQueue");
static_assert(sizeof(GI_SinglePlayer_C_RemoveAsyncSystemParamsFromQueue) == 0x000310, "Wrong size on GI_SinglePlayer_C_RemoveAsyncSystemParamsFromQueue");
static_assert(offsetof(GI_SinglePlayer_C_RemoveAsyncSystemParamsFromQueue, System) == 0x000000, "Member 'GI_SinglePlayer_C_RemoveAsyncSystemParamsFromQueue::System' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RemoveAsyncSystemParamsFromQueue, Success) == 0x000028, "Member 'GI_SinglePlayer_C_RemoveAsyncSystemParamsFromQueue::Success' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RemoveAsyncSystemParamsFromQueue, SystemParams) == 0x000030, "Member 'GI_SinglePlayer_C_RemoveAsyncSystemParamsFromQueue::SystemParams' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RemoveAsyncSystemParamsFromQueue, RemovedParams) == 0x0000D0, "Member 'GI_SinglePlayer_C_RemoveAsyncSystemParamsFromQueue::RemovedParams' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RemoveAsyncSystemParamsFromQueue, ParamQueue) == 0x000170, "Member 'GI_SinglePlayer_C_RemoveAsyncSystemParamsFromQueue::ParamQueue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RemoveAsyncSystemParamsFromQueue, CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue) == 0x000180, "Member 'GI_SinglePlayer_C_RemoveAsyncSystemParamsFromQueue::CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RemoveAsyncSystemParamsFromQueue, CallFunc_Array_Get_Item) == 0x000190, "Member 'GI_SinglePlayer_C_RemoveAsyncSystemParamsFromQueue::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RemoveAsyncSystemParamsFromQueue, K2Node_DynamicCast_AsScene_Component) == 0x000230, "Member 'GI_SinglePlayer_C_RemoveAsyncSystemParamsFromQueue::K2Node_DynamicCast_AsScene_Component' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RemoveAsyncSystemParamsFromQueue, K2Node_DynamicCast_bSuccess) == 0x000238, "Member 'GI_SinglePlayer_C_RemoveAsyncSystemParamsFromQueue::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RemoveAsyncSystemParamsFromQueue, CallFunc_TryDecrementSceneComponentRefCount_Result) == 0x000239, "Member 'GI_SinglePlayer_C_RemoveAsyncSystemParamsFromQueue::CallFunc_TryDecrementSceneComponentRefCount_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RemoveAsyncSystemParamsFromQueue, CallFunc_IsValidSoftObjectReference_ReturnValue) == 0x00023A, "Member 'GI_SinglePlayer_C_RemoveAsyncSystemParamsFromQueue::CallFunc_IsValidSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RemoveAsyncSystemParamsFromQueue, CallFunc_Map_Remove_ReturnValue) == 0x00023B, "Member 'GI_SinglePlayer_C_RemoveAsyncSystemParamsFromQueue::CallFunc_Map_Remove_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RemoveAsyncSystemParamsFromQueue, CallFunc_Map_Find_Value) == 0x000240, "Member 'GI_SinglePlayer_C_RemoveAsyncSystemParamsFromQueue::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RemoveAsyncSystemParamsFromQueue, CallFunc_Map_Find_ReturnValue) == 0x000250, "Member 'GI_SinglePlayer_C_RemoveAsyncSystemParamsFromQueue::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RemoveAsyncSystemParamsFromQueue, K2Node_MakeStruct_STRUCT_AsyncParticleParams) == 0x000260, "Member 'GI_SinglePlayer_C_RemoveAsyncSystemParamsFromQueue::K2Node_MakeStruct_STRUCT_AsyncParticleParams' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RemoveAsyncSystemParamsFromQueue, CallFunc_Array_Length_ReturnValue) == 0x000300, "Member 'GI_SinglePlayer_C_RemoveAsyncSystemParamsFromQueue::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RemoveAsyncSystemParamsFromQueue, CallFunc_Greater_IntInt_ReturnValue) == 0x000304, "Member 'GI_SinglePlayer_C_RemoveAsyncSystemParamsFromQueue::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.PlaySoundUsingAsyncParams
// 0x00D0 (0x00D0 - 0x0000)
struct GI_SinglePlayer_C_PlaySoundUsingAsyncParams final
{
public:
	class USoundCue*                              SoundCue;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_AsyncSoundParams               SoundParams;                                       // 0x0008(0x0080)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	class UVoxelAudioComponent*                   SpawnedSound;                                      // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue; // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        K2Node_DynamicCast_AsScene_Component;              // 0x0098(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A2[0x6];                                       // 0x00A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UVoxelAudioComponent*                   CallFunc_SpawnVoxelSoundAtLocation_ReturnValue;    // 0x00A8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue_1; // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        K2Node_DynamicCast_AsScene_Component_1;            // 0x00B8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UVoxelAudioComponent*                   CallFunc_SpawnVoxelSoundAttached_ReturnValue;      // 0x00C8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_PlaySoundUsingAsyncParams) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_PlaySoundUsingAsyncParams");
static_assert(sizeof(GI_SinglePlayer_C_PlaySoundUsingAsyncParams) == 0x0000D0, "Wrong size on GI_SinglePlayer_C_PlaySoundUsingAsyncParams");
static_assert(offsetof(GI_SinglePlayer_C_PlaySoundUsingAsyncParams, SoundCue) == 0x000000, "Member 'GI_SinglePlayer_C_PlaySoundUsingAsyncParams::SoundCue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PlaySoundUsingAsyncParams, SoundParams) == 0x000008, "Member 'GI_SinglePlayer_C_PlaySoundUsingAsyncParams::SoundParams' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PlaySoundUsingAsyncParams, SpawnedSound) == 0x000088, "Member 'GI_SinglePlayer_C_PlaySoundUsingAsyncParams::SpawnedSound' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PlaySoundUsingAsyncParams, CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue) == 0x000090, "Member 'GI_SinglePlayer_C_PlaySoundUsingAsyncParams::CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PlaySoundUsingAsyncParams, K2Node_DynamicCast_AsScene_Component) == 0x000098, "Member 'GI_SinglePlayer_C_PlaySoundUsingAsyncParams::K2Node_DynamicCast_AsScene_Component' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PlaySoundUsingAsyncParams, K2Node_DynamicCast_bSuccess) == 0x0000A0, "Member 'GI_SinglePlayer_C_PlaySoundUsingAsyncParams::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PlaySoundUsingAsyncParams, CallFunc_IsValid_ReturnValue) == 0x0000A1, "Member 'GI_SinglePlayer_C_PlaySoundUsingAsyncParams::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PlaySoundUsingAsyncParams, CallFunc_SpawnVoxelSoundAtLocation_ReturnValue) == 0x0000A8, "Member 'GI_SinglePlayer_C_PlaySoundUsingAsyncParams::CallFunc_SpawnVoxelSoundAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PlaySoundUsingAsyncParams, CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue_1) == 0x0000B0, "Member 'GI_SinglePlayer_C_PlaySoundUsingAsyncParams::CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PlaySoundUsingAsyncParams, K2Node_DynamicCast_AsScene_Component_1) == 0x0000B8, "Member 'GI_SinglePlayer_C_PlaySoundUsingAsyncParams::K2Node_DynamicCast_AsScene_Component_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PlaySoundUsingAsyncParams, K2Node_DynamicCast_bSuccess_1) == 0x0000C0, "Member 'GI_SinglePlayer_C_PlaySoundUsingAsyncParams::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PlaySoundUsingAsyncParams, CallFunc_SpawnVoxelSoundAttached_ReturnValue) == 0x0000C8, "Member 'GI_SinglePlayer_C_PlaySoundUsingAsyncParams::CallFunc_SpawnVoxelSoundAttached_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.AddAsyncSoundParamsToQueue
// 0x00D0 (0x00D0 - 0x0000)
struct GI_SinglePlayer_C_AddAsyncSoundParamsToQueue final
{
public:
	TSoftObjectPtr<class USoundCue>               SoundCue;                                          // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	struct FSTRUCT_AsyncSoundParams               SoundParams;                                       // 0x0028(0x0080)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)
	struct FSTRUCT_AsyncSoundParamArray           ParamQueue;                                        // 0x00A8(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	struct FSTRUCT_AsyncSoundParamArray           CallFunc_Map_Find_Value;                           // 0x00B8(0x0010)(ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_AddAsyncSoundParamsToQueue) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_AddAsyncSoundParamsToQueue");
static_assert(sizeof(GI_SinglePlayer_C_AddAsyncSoundParamsToQueue) == 0x0000D0, "Wrong size on GI_SinglePlayer_C_AddAsyncSoundParamsToQueue");
static_assert(offsetof(GI_SinglePlayer_C_AddAsyncSoundParamsToQueue, SoundCue) == 0x000000, "Member 'GI_SinglePlayer_C_AddAsyncSoundParamsToQueue::SoundCue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddAsyncSoundParamsToQueue, SoundParams) == 0x000028, "Member 'GI_SinglePlayer_C_AddAsyncSoundParamsToQueue::SoundParams' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddAsyncSoundParamsToQueue, ParamQueue) == 0x0000A8, "Member 'GI_SinglePlayer_C_AddAsyncSoundParamsToQueue::ParamQueue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddAsyncSoundParamsToQueue, CallFunc_Map_Find_Value) == 0x0000B8, "Member 'GI_SinglePlayer_C_AddAsyncSoundParamsToQueue::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddAsyncSoundParamsToQueue, CallFunc_Map_Find_ReturnValue) == 0x0000C8, "Member 'GI_SinglePlayer_C_AddAsyncSoundParamsToQueue::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddAsyncSoundParamsToQueue, CallFunc_Array_Add_ReturnValue) == 0x0000CC, "Member 'GI_SinglePlayer_C_AddAsyncSoundParamsToQueue::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.RemoveAsyncSoundParamsFromQueue
// 0x01E0 (0x01E0 - 0x0000)
struct GI_SinglePlayer_C_RemoveAsyncSoundParamsFromQueue final
{
public:
	TSoftObjectPtr<class USoundCue>               SoundCue;                                          // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	struct FSTRUCT_AsyncSoundParams               SoundParams;                                       // 0x0028(0x0080)(Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)
	struct FSTRUCT_AsyncSoundParams               RemovedParams;                                     // 0x00A8(0x0080)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	struct FSTRUCT_AsyncSoundParamArray           ParamQueue;                                        // 0x0128(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Remove_ReturnValue;                   // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_139[0x3];                                      // 0x0139(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_AsyncSoundParams               CallFunc_Array_Get_Item;                           // 0x0148(0x0080)(ContainsInstancedReference, HasGetValueTypeHash)
	struct FSTRUCT_AsyncSoundParamArray           CallFunc_Map_Find_Value;                           // 0x01C8(0x0010)(ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_RemoveAsyncSoundParamsFromQueue) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_RemoveAsyncSoundParamsFromQueue");
static_assert(sizeof(GI_SinglePlayer_C_RemoveAsyncSoundParamsFromQueue) == 0x0001E0, "Wrong size on GI_SinglePlayer_C_RemoveAsyncSoundParamsFromQueue");
static_assert(offsetof(GI_SinglePlayer_C_RemoveAsyncSoundParamsFromQueue, SoundCue) == 0x000000, "Member 'GI_SinglePlayer_C_RemoveAsyncSoundParamsFromQueue::SoundCue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RemoveAsyncSoundParamsFromQueue, SoundParams) == 0x000028, "Member 'GI_SinglePlayer_C_RemoveAsyncSoundParamsFromQueue::SoundParams' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RemoveAsyncSoundParamsFromQueue, RemovedParams) == 0x0000A8, "Member 'GI_SinglePlayer_C_RemoveAsyncSoundParamsFromQueue::RemovedParams' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RemoveAsyncSoundParamsFromQueue, ParamQueue) == 0x000128, "Member 'GI_SinglePlayer_C_RemoveAsyncSoundParamsFromQueue::ParamQueue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RemoveAsyncSoundParamsFromQueue, CallFunc_Map_Remove_ReturnValue) == 0x000138, "Member 'GI_SinglePlayer_C_RemoveAsyncSoundParamsFromQueue::CallFunc_Map_Remove_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RemoveAsyncSoundParamsFromQueue, CallFunc_Array_Length_ReturnValue) == 0x00013C, "Member 'GI_SinglePlayer_C_RemoveAsyncSoundParamsFromQueue::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RemoveAsyncSoundParamsFromQueue, CallFunc_Greater_IntInt_ReturnValue) == 0x000140, "Member 'GI_SinglePlayer_C_RemoveAsyncSoundParamsFromQueue::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RemoveAsyncSoundParamsFromQueue, CallFunc_Array_Get_Item) == 0x000148, "Member 'GI_SinglePlayer_C_RemoveAsyncSoundParamsFromQueue::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RemoveAsyncSoundParamsFromQueue, CallFunc_Map_Find_Value) == 0x0001C8, "Member 'GI_SinglePlayer_C_RemoveAsyncSoundParamsFromQueue::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RemoveAsyncSoundParamsFromQueue, CallFunc_Map_Find_ReturnValue) == 0x0001D8, "Member 'GI_SinglePlayer_C_RemoveAsyncSoundParamsFromQueue::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.UpdateLevelAtmosphere
// 0x00C8 (0x00C8 - 0x0000)
struct GI_SinglePlayer_C_UpdateLevelAtmosphere final
{
public:
	float                                         Progress;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_LevelAtmosphereSettings        SourceAtmosphereSettings;                          // 0x0004(0x0024)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_LevelAtmosphereSettings        TargetAtmosphereSettings;                          // 0x0028(0x0024)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADirectionalLight*                      SunLightActor;                                     // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ANiagaraActor*                          SunLensFlareActor;                                 // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SunIntensity;                                      // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SunColor;                                          // 0x0064(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ALevelAtmosphere_C*                     LevelAtmosphereActor;                              // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ADirectionalLight*                      CallFunc_GetActorOfClassInSubLevelByName_ReturnValue; // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ANiagaraActor*                          CallFunc_GetActorOfClassInSubLevelByName_ReturnValue_1; // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ALevelAtmosphere_C*                     CallFunc_GetActorOfClassInSubLevelByName_ReturnValue_2; // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9A[0x2];                                       // 0x009A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue;              // 0x00A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue_1;            // 0x00B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_UpdateLevelAtmosphere) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_UpdateLevelAtmosphere");
static_assert(sizeof(GI_SinglePlayer_C_UpdateLevelAtmosphere) == 0x0000C8, "Wrong size on GI_SinglePlayer_C_UpdateLevelAtmosphere");
static_assert(offsetof(GI_SinglePlayer_C_UpdateLevelAtmosphere, Progress) == 0x000000, "Member 'GI_SinglePlayer_C_UpdateLevelAtmosphere::Progress' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UpdateLevelAtmosphere, SourceAtmosphereSettings) == 0x000004, "Member 'GI_SinglePlayer_C_UpdateLevelAtmosphere::SourceAtmosphereSettings' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UpdateLevelAtmosphere, TargetAtmosphereSettings) == 0x000028, "Member 'GI_SinglePlayer_C_UpdateLevelAtmosphere::TargetAtmosphereSettings' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UpdateLevelAtmosphere, SunLightActor) == 0x000050, "Member 'GI_SinglePlayer_C_UpdateLevelAtmosphere::SunLightActor' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UpdateLevelAtmosphere, SunLensFlareActor) == 0x000058, "Member 'GI_SinglePlayer_C_UpdateLevelAtmosphere::SunLensFlareActor' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UpdateLevelAtmosphere, SunIntensity) == 0x000060, "Member 'GI_SinglePlayer_C_UpdateLevelAtmosphere::SunIntensity' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UpdateLevelAtmosphere, SunColor) == 0x000064, "Member 'GI_SinglePlayer_C_UpdateLevelAtmosphere::SunColor' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UpdateLevelAtmosphere, LevelAtmosphereActor) == 0x000078, "Member 'GI_SinglePlayer_C_UpdateLevelAtmosphere::LevelAtmosphereActor' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UpdateLevelAtmosphere, CallFunc_GetActorOfClassInSubLevelByName_ReturnValue) == 0x000080, "Member 'GI_SinglePlayer_C_UpdateLevelAtmosphere::CallFunc_GetActorOfClassInSubLevelByName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UpdateLevelAtmosphere, CallFunc_GetActorOfClassInSubLevelByName_ReturnValue_1) == 0x000088, "Member 'GI_SinglePlayer_C_UpdateLevelAtmosphere::CallFunc_GetActorOfClassInSubLevelByName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UpdateLevelAtmosphere, CallFunc_GetActorOfClassInSubLevelByName_ReturnValue_2) == 0x000090, "Member 'GI_SinglePlayer_C_UpdateLevelAtmosphere::CallFunc_GetActorOfClassInSubLevelByName_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UpdateLevelAtmosphere, CallFunc_IsValid_ReturnValue) == 0x000098, "Member 'GI_SinglePlayer_C_UpdateLevelAtmosphere::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UpdateLevelAtmosphere, CallFunc_IsValid_ReturnValue_1) == 0x000099, "Member 'GI_SinglePlayer_C_UpdateLevelAtmosphere::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UpdateLevelAtmosphere, CallFunc_Lerp_ReturnValue) == 0x00009C, "Member 'GI_SinglePlayer_C_UpdateLevelAtmosphere::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UpdateLevelAtmosphere, CallFunc_LinearColorLerp_ReturnValue) == 0x0000A0, "Member 'GI_SinglePlayer_C_UpdateLevelAtmosphere::CallFunc_LinearColorLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UpdateLevelAtmosphere, CallFunc_LinearColorLerp_ReturnValue_1) == 0x0000B0, "Member 'GI_SinglePlayer_C_UpdateLevelAtmosphere::CallFunc_LinearColorLerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UpdateLevelAtmosphere, CallFunc_IsValid_ReturnValue_2) == 0x0000C0, "Member 'GI_SinglePlayer_C_UpdateLevelAtmosphere::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.UpdateLevelAtmosphereToCurrent
// 0x002C (0x002C - 0x0000)
struct GI_SinglePlayer_C_UpdateLevelAtmosphereToCurrent final
{
public:
	class FName                                   CallFunc_GetCurrentLevelName_Result;               // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_LevelAtmosphereSettings        CallFunc_GetLevelAtmosphereSettings_Settings;      // 0x0008(0x0024)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_UpdateLevelAtmosphereToCurrent) == 0x000004, "Wrong alignment on GI_SinglePlayer_C_UpdateLevelAtmosphereToCurrent");
static_assert(sizeof(GI_SinglePlayer_C_UpdateLevelAtmosphereToCurrent) == 0x00002C, "Wrong size on GI_SinglePlayer_C_UpdateLevelAtmosphereToCurrent");
static_assert(offsetof(GI_SinglePlayer_C_UpdateLevelAtmosphereToCurrent, CallFunc_GetCurrentLevelName_Result) == 0x000000, "Member 'GI_SinglePlayer_C_UpdateLevelAtmosphereToCurrent::CallFunc_GetCurrentLevelName_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UpdateLevelAtmosphereToCurrent, CallFunc_GetLevelAtmosphereSettings_Settings) == 0x000008, "Member 'GI_SinglePlayer_C_UpdateLevelAtmosphereToCurrent::CallFunc_GetLevelAtmosphereSettings_Settings' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.GetRespawnChamberLevelFromDeckSymbol
// 0x0048 (0x0048 - 0x0000)
struct GI_SinglePlayer_C_GetRespawnChamberLevelFromDeckSymbol final
{
public:
	class FString                                 DeckSymbol;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FName                                   LevelName;                                         // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DeckNumber;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Len_ReturnValue;                          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_StringToInt_ReturnValue;             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Left_ReturnValue;                         // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetLevelNameByDeck_Level;                 // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_StringToInt_ReturnValue_1;           // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_GetRespawnChamberLevelFromDeckSymbol) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_GetRespawnChamberLevelFromDeckSymbol");
static_assert(sizeof(GI_SinglePlayer_C_GetRespawnChamberLevelFromDeckSymbol) == 0x000048, "Wrong size on GI_SinglePlayer_C_GetRespawnChamberLevelFromDeckSymbol");
static_assert(offsetof(GI_SinglePlayer_C_GetRespawnChamberLevelFromDeckSymbol, DeckSymbol) == 0x000000, "Member 'GI_SinglePlayer_C_GetRespawnChamberLevelFromDeckSymbol::DeckSymbol' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetRespawnChamberLevelFromDeckSymbol, LevelName) == 0x000010, "Member 'GI_SinglePlayer_C_GetRespawnChamberLevelFromDeckSymbol::LevelName' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetRespawnChamberLevelFromDeckSymbol, DeckNumber) == 0x000018, "Member 'GI_SinglePlayer_C_GetRespawnChamberLevelFromDeckSymbol::DeckNumber' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetRespawnChamberLevelFromDeckSymbol, CallFunc_Len_ReturnValue) == 0x00001C, "Member 'GI_SinglePlayer_C_GetRespawnChamberLevelFromDeckSymbol::CallFunc_Len_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetRespawnChamberLevelFromDeckSymbol, CallFunc_Conv_StringToInt_ReturnValue) == 0x000020, "Member 'GI_SinglePlayer_C_GetRespawnChamberLevelFromDeckSymbol::CallFunc_Conv_StringToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetRespawnChamberLevelFromDeckSymbol, CallFunc_Greater_IntInt_ReturnValue) == 0x000024, "Member 'GI_SinglePlayer_C_GetRespawnChamberLevelFromDeckSymbol::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetRespawnChamberLevelFromDeckSymbol, CallFunc_Left_ReturnValue) == 0x000028, "Member 'GI_SinglePlayer_C_GetRespawnChamberLevelFromDeckSymbol::CallFunc_Left_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetRespawnChamberLevelFromDeckSymbol, CallFunc_GetLevelNameByDeck_Level) == 0x000038, "Member 'GI_SinglePlayer_C_GetRespawnChamberLevelFromDeckSymbol::CallFunc_GetLevelNameByDeck_Level' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetRespawnChamberLevelFromDeckSymbol, CallFunc_Conv_StringToInt_ReturnValue_1) == 0x000040, "Member 'GI_SinglePlayer_C_GetRespawnChamberLevelFromDeckSymbol::CallFunc_Conv_StringToInt_ReturnValue_1' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.GetRespawnChamberLevelFromLevelName
// 0x00F0 (0x00F0 - 0x0000)
struct GI_SinglePlayer_C_GetRespawnChamberLevelFromLevelName final
{
public:
	class FName                                   QueryLevelName;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   RespawnLevelName;                                  // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetCurrentLevelName_Result;               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_LevelInfo                      CallFunc_GetLevelInfo_LevelInfo;                   // 0x0018(0x00C8)(HasGetValueTypeHash)
	bool                                          CallFunc_GetLevelInfo_Found;                       // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetRespawnChamberLevelFromDeckSymbol_LevelName; // 0x00E4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_GetRespawnChamberLevelFromLevelName) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_GetRespawnChamberLevelFromLevelName");
static_assert(sizeof(GI_SinglePlayer_C_GetRespawnChamberLevelFromLevelName) == 0x0000F0, "Wrong size on GI_SinglePlayer_C_GetRespawnChamberLevelFromLevelName");
static_assert(offsetof(GI_SinglePlayer_C_GetRespawnChamberLevelFromLevelName, QueryLevelName) == 0x000000, "Member 'GI_SinglePlayer_C_GetRespawnChamberLevelFromLevelName::QueryLevelName' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetRespawnChamberLevelFromLevelName, RespawnLevelName) == 0x000008, "Member 'GI_SinglePlayer_C_GetRespawnChamberLevelFromLevelName::RespawnLevelName' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetRespawnChamberLevelFromLevelName, CallFunc_GetCurrentLevelName_Result) == 0x000010, "Member 'GI_SinglePlayer_C_GetRespawnChamberLevelFromLevelName::CallFunc_GetCurrentLevelName_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetRespawnChamberLevelFromLevelName, CallFunc_GetLevelInfo_LevelInfo) == 0x000018, "Member 'GI_SinglePlayer_C_GetRespawnChamberLevelFromLevelName::CallFunc_GetLevelInfo_LevelInfo' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetRespawnChamberLevelFromLevelName, CallFunc_GetLevelInfo_Found) == 0x0000E0, "Member 'GI_SinglePlayer_C_GetRespawnChamberLevelFromLevelName::CallFunc_GetLevelInfo_Found' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetRespawnChamberLevelFromLevelName, CallFunc_GetRespawnChamberLevelFromDeckSymbol_LevelName) == 0x0000E4, "Member 'GI_SinglePlayer_C_GetRespawnChamberLevelFromLevelName::CallFunc_GetRespawnChamberLevelFromDeckSymbol_LevelName' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.GetBestRespawnChamberLevel
// 0x00C8 (0x00C8 - 0x0000)
struct GI_SinglePlayer_C_GetBestRespawnChamberLevel final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SmallestLevelDifference;                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LevelDifference;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CandidateRespawnDeckNumber;                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentRespawnDeckNumber;                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CandidateLevelName;                                // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           LevelNames;                                        // 0x0020(0x0010)(Edit, BlueprintVisible)
	class FName                                   RespawnLevelName;                                  // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsRespawnChamberActiveForLevel_Result;    // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_MissionDifficultySettings      CallFunc_GetMissionDifficultySettings_Settings;    // 0x003C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetCurrentLevelName_Result;               // 0x0044(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanRespawnOnLevel_Result;                 // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_Array_Get_Item;                           // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Min_ReturnValue;                          // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E[0x2];                                       // 0x006E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0075(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0076(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_77[0x1];                                       // 0x0077(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CallFunc_GetLevelNames_Levels;                     // 0x0080(0x0010)(ReferenceParm)
	bool                                          CallFunc_IsRespawnChamberActiveForLevel_Result_1;  // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Abs_Int_ReturnValue;                      // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsRespawnChamberActiveForLevel_Result_2;  // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasActivatedAnyRespawnChambers_Result;    // 0x009D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9E[0x2];                                       // 0x009E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetCurrentLevelName_Result_1;             // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetRespawnChamberLevelFromLevelName_RespawnLevelName; // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetPreviousLevelName_Result;              // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetRespawnChamberLevelFromLevelName_RespawnLevelName_1; // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAssignedPreviousLevel_Result;          // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_GetBestRespawnChamberLevel) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_GetBestRespawnChamberLevel");
static_assert(sizeof(GI_SinglePlayer_C_GetBestRespawnChamberLevel) == 0x0000C8, "Wrong size on GI_SinglePlayer_C_GetBestRespawnChamberLevel");
static_assert(offsetof(GI_SinglePlayer_C_GetBestRespawnChamberLevel, LevelName) == 0x000000, "Member 'GI_SinglePlayer_C_GetBestRespawnChamberLevel::LevelName' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetBestRespawnChamberLevel, SmallestLevelDifference) == 0x000008, "Member 'GI_SinglePlayer_C_GetBestRespawnChamberLevel::SmallestLevelDifference' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetBestRespawnChamberLevel, LevelDifference) == 0x00000C, "Member 'GI_SinglePlayer_C_GetBestRespawnChamberLevel::LevelDifference' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetBestRespawnChamberLevel, CandidateRespawnDeckNumber) == 0x000010, "Member 'GI_SinglePlayer_C_GetBestRespawnChamberLevel::CandidateRespawnDeckNumber' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetBestRespawnChamberLevel, CurrentRespawnDeckNumber) == 0x000014, "Member 'GI_SinglePlayer_C_GetBestRespawnChamberLevel::CurrentRespawnDeckNumber' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetBestRespawnChamberLevel, CandidateLevelName) == 0x000018, "Member 'GI_SinglePlayer_C_GetBestRespawnChamberLevel::CandidateLevelName' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetBestRespawnChamberLevel, LevelNames) == 0x000020, "Member 'GI_SinglePlayer_C_GetBestRespawnChamberLevel::LevelNames' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetBestRespawnChamberLevel, RespawnLevelName) == 0x000030, "Member 'GI_SinglePlayer_C_GetBestRespawnChamberLevel::RespawnLevelName' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetBestRespawnChamberLevel, CallFunc_IsRespawnChamberActiveForLevel_Result) == 0x000038, "Member 'GI_SinglePlayer_C_GetBestRespawnChamberLevel::CallFunc_IsRespawnChamberActiveForLevel_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetBestRespawnChamberLevel, CallFunc_GetMissionDifficultySettings_Settings) == 0x00003C, "Member 'GI_SinglePlayer_C_GetBestRespawnChamberLevel::CallFunc_GetMissionDifficultySettings_Settings' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetBestRespawnChamberLevel, CallFunc_GetCurrentLevelName_Result) == 0x000044, "Member 'GI_SinglePlayer_C_GetBestRespawnChamberLevel::CallFunc_GetCurrentLevelName_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetBestRespawnChamberLevel, CallFunc_CanRespawnOnLevel_Result) == 0x00004C, "Member 'GI_SinglePlayer_C_GetBestRespawnChamberLevel::CallFunc_CanRespawnOnLevel_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetBestRespawnChamberLevel, CallFunc_Array_Get_Item) == 0x000050, "Member 'GI_SinglePlayer_C_GetBestRespawnChamberLevel::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetBestRespawnChamberLevel, CallFunc_Array_Length_ReturnValue) == 0x000058, "Member 'GI_SinglePlayer_C_GetBestRespawnChamberLevel::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetBestRespawnChamberLevel, CallFunc_Min_ReturnValue) == 0x00005C, "Member 'GI_SinglePlayer_C_GetBestRespawnChamberLevel::CallFunc_Min_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetBestRespawnChamberLevel, Temp_int_Variable) == 0x000060, "Member 'GI_SinglePlayer_C_GetBestRespawnChamberLevel::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetBestRespawnChamberLevel, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000064, "Member 'GI_SinglePlayer_C_GetBestRespawnChamberLevel::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetBestRespawnChamberLevel, CallFunc_Add_IntInt_ReturnValue) == 0x000068, "Member 'GI_SinglePlayer_C_GetBestRespawnChamberLevel::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetBestRespawnChamberLevel, CallFunc_Less_IntInt_ReturnValue) == 0x00006C, "Member 'GI_SinglePlayer_C_GetBestRespawnChamberLevel::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetBestRespawnChamberLevel, CallFunc_NotEqual_IntInt_ReturnValue) == 0x00006D, "Member 'GI_SinglePlayer_C_GetBestRespawnChamberLevel::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetBestRespawnChamberLevel, CallFunc_Array_Length_ReturnValue_1) == 0x000070, "Member 'GI_SinglePlayer_C_GetBestRespawnChamberLevel::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetBestRespawnChamberLevel, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000074, "Member 'GI_SinglePlayer_C_GetBestRespawnChamberLevel::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetBestRespawnChamberLevel, CallFunc_Greater_IntInt_ReturnValue) == 0x000075, "Member 'GI_SinglePlayer_C_GetBestRespawnChamberLevel::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetBestRespawnChamberLevel, CallFunc_BooleanAND_ReturnValue) == 0x000076, "Member 'GI_SinglePlayer_C_GetBestRespawnChamberLevel::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetBestRespawnChamberLevel, CallFunc_Array_Find_ReturnValue) == 0x000078, "Member 'GI_SinglePlayer_C_GetBestRespawnChamberLevel::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetBestRespawnChamberLevel, CallFunc_GetLevelNames_Levels) == 0x000080, "Member 'GI_SinglePlayer_C_GetBestRespawnChamberLevel::CallFunc_GetLevelNames_Levels' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetBestRespawnChamberLevel, CallFunc_IsRespawnChamberActiveForLevel_Result_1) == 0x000090, "Member 'GI_SinglePlayer_C_GetBestRespawnChamberLevel::CallFunc_IsRespawnChamberActiveForLevel_Result_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetBestRespawnChamberLevel, CallFunc_Subtract_IntInt_ReturnValue) == 0x000094, "Member 'GI_SinglePlayer_C_GetBestRespawnChamberLevel::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetBestRespawnChamberLevel, CallFunc_Abs_Int_ReturnValue) == 0x000098, "Member 'GI_SinglePlayer_C_GetBestRespawnChamberLevel::CallFunc_Abs_Int_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetBestRespawnChamberLevel, CallFunc_IsRespawnChamberActiveForLevel_Result_2) == 0x00009C, "Member 'GI_SinglePlayer_C_GetBestRespawnChamberLevel::CallFunc_IsRespawnChamberActiveForLevel_Result_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetBestRespawnChamberLevel, CallFunc_HasActivatedAnyRespawnChambers_Result) == 0x00009D, "Member 'GI_SinglePlayer_C_GetBestRespawnChamberLevel::CallFunc_HasActivatedAnyRespawnChambers_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetBestRespawnChamberLevel, CallFunc_GetCurrentLevelName_Result_1) == 0x0000A0, "Member 'GI_SinglePlayer_C_GetBestRespawnChamberLevel::CallFunc_GetCurrentLevelName_Result_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetBestRespawnChamberLevel, CallFunc_GetRespawnChamberLevelFromLevelName_RespawnLevelName) == 0x0000A8, "Member 'GI_SinglePlayer_C_GetBestRespawnChamberLevel::CallFunc_GetRespawnChamberLevelFromLevelName_RespawnLevelName' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetBestRespawnChamberLevel, CallFunc_GetPreviousLevelName_Result) == 0x0000B0, "Member 'GI_SinglePlayer_C_GetBestRespawnChamberLevel::CallFunc_GetPreviousLevelName_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetBestRespawnChamberLevel, CallFunc_GetRespawnChamberLevelFromLevelName_RespawnLevelName_1) == 0x0000B8, "Member 'GI_SinglePlayer_C_GetBestRespawnChamberLevel::CallFunc_GetRespawnChamberLevelFromLevelName_RespawnLevelName_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetBestRespawnChamberLevel, CallFunc_HasAssignedPreviousLevel_Result) == 0x0000C0, "Member 'GI_SinglePlayer_C_GetBestRespawnChamberLevel::CallFunc_HasAssignedPreviousLevel_Result' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.ActivateRespawnChamberOnLevel
// 0x000C (0x000C - 0x0000)
struct GI_SinglePlayer_C_ActivateRespawnChamberOnLevel final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_ActivateRespawnChamberOnLevel) == 0x000004, "Wrong alignment on GI_SinglePlayer_C_ActivateRespawnChamberOnLevel");
static_assert(sizeof(GI_SinglePlayer_C_ActivateRespawnChamberOnLevel) == 0x00000C, "Wrong size on GI_SinglePlayer_C_ActivateRespawnChamberOnLevel");
static_assert(offsetof(GI_SinglePlayer_C_ActivateRespawnChamberOnLevel, LevelName) == 0x000000, "Member 'GI_SinglePlayer_C_ActivateRespawnChamberOnLevel::LevelName' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ActivateRespawnChamberOnLevel, CallFunc_NotEqual_NameName_ReturnValue) == 0x000008, "Member 'GI_SinglePlayer_C_ActivateRespawnChamberOnLevel::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.DeactivateRespawnChamberOnLevel
// 0x000C (0x000C - 0x0000)
struct GI_SinglePlayer_C_DeactivateRespawnChamberOnLevel final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Set_Remove_ReturnValue;                   // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_DeactivateRespawnChamberOnLevel) == 0x000004, "Wrong alignment on GI_SinglePlayer_C_DeactivateRespawnChamberOnLevel");
static_assert(sizeof(GI_SinglePlayer_C_DeactivateRespawnChamberOnLevel) == 0x00000C, "Wrong size on GI_SinglePlayer_C_DeactivateRespawnChamberOnLevel");
static_assert(offsetof(GI_SinglePlayer_C_DeactivateRespawnChamberOnLevel, LevelName) == 0x000000, "Member 'GI_SinglePlayer_C_DeactivateRespawnChamberOnLevel::LevelName' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_DeactivateRespawnChamberOnLevel, CallFunc_Set_Remove_ReturnValue) == 0x000008, "Member 'GI_SinglePlayer_C_DeactivateRespawnChamberOnLevel::CallFunc_Set_Remove_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.TryUpdateCurrentSubLevelName
// 0x0020 (0x0020 - 0x0000)
struct GI_SinglePlayer_C_TryUpdateCurrentSubLevelName final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStreamingSaveGameSession*              CallFunc_GetGameSession_ReturnValue;               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_TryUpdateCurrentSubLevelName) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_TryUpdateCurrentSubLevelName");
static_assert(sizeof(GI_SinglePlayer_C_TryUpdateCurrentSubLevelName) == 0x000020, "Wrong size on GI_SinglePlayer_C_TryUpdateCurrentSubLevelName");
static_assert(offsetof(GI_SinglePlayer_C_TryUpdateCurrentSubLevelName, LevelName) == 0x000000, "Member 'GI_SinglePlayer_C_TryUpdateCurrentSubLevelName::LevelName' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryUpdateCurrentSubLevelName, Result) == 0x000008, "Member 'GI_SinglePlayer_C_TryUpdateCurrentSubLevelName::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryUpdateCurrentSubLevelName, CallFunc_GetGameSession_ReturnValue) == 0x000010, "Member 'GI_SinglePlayer_C_TryUpdateCurrentSubLevelName::CallFunc_GetGameSession_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryUpdateCurrentSubLevelName, CallFunc_NotEqual_NameName_ReturnValue) == 0x000018, "Member 'GI_SinglePlayer_C_TryUpdateCurrentSubLevelName::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.TryCreateLevelLoadingScreenWidget
// 0x0018 (0x0018 - 0x0000)
struct GI_SinglePlayer_C_TryCreateLevelLoadingScreenWidget final
{
public:
	bool                                          CallFunc_IsInViewport_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWIDGET_LoadingScreen_C*                CallFunc_Create_ReturnValue;                       // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_TryCreateLevelLoadingScreenWidget) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_TryCreateLevelLoadingScreenWidget");
static_assert(sizeof(GI_SinglePlayer_C_TryCreateLevelLoadingScreenWidget) == 0x000018, "Wrong size on GI_SinglePlayer_C_TryCreateLevelLoadingScreenWidget");
static_assert(offsetof(GI_SinglePlayer_C_TryCreateLevelLoadingScreenWidget, CallFunc_IsInViewport_ReturnValue) == 0x000000, "Member 'GI_SinglePlayer_C_TryCreateLevelLoadingScreenWidget::CallFunc_IsInViewport_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryCreateLevelLoadingScreenWidget, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'GI_SinglePlayer_C_TryCreateLevelLoadingScreenWidget::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryCreateLevelLoadingScreenWidget, CallFunc_IsValid_ReturnValue) == 0x000002, "Member 'GI_SinglePlayer_C_TryCreateLevelLoadingScreenWidget::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryCreateLevelLoadingScreenWidget, CallFunc_GetPlayerController_ReturnValue) == 0x000008, "Member 'GI_SinglePlayer_C_TryCreateLevelLoadingScreenWidget::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryCreateLevelLoadingScreenWidget, CallFunc_Create_ReturnValue) == 0x000010, "Member 'GI_SinglePlayer_C_TryCreateLevelLoadingScreenWidget::CallFunc_Create_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.TryDestroyLevelLoadingScreenWidget
// 0x0001 (0x0001 - 0x0000)
struct GI_SinglePlayer_C_TryDestroyLevelLoadingScreenWidget final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_TryDestroyLevelLoadingScreenWidget) == 0x000001, "Wrong alignment on GI_SinglePlayer_C_TryDestroyLevelLoadingScreenWidget");
static_assert(sizeof(GI_SinglePlayer_C_TryDestroyLevelLoadingScreenWidget) == 0x000001, "Wrong size on GI_SinglePlayer_C_TryDestroyLevelLoadingScreenWidget");
static_assert(offsetof(GI_SinglePlayer_C_TryDestroyLevelLoadingScreenWidget, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'GI_SinglePlayer_C_TryDestroyLevelLoadingScreenWidget::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.RegisterLowFiBehaviorEnemy
// 0x00B0 (0x00B0 - 0x0000)
struct GI_SinglePlayer_C_RegisterLowFiBehaviorEnemy final
{
public:
	class APAWN_Enemy_C*                          Enemy;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_TryStartLowBehaviorTicks_Result;          // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   CallFunc_Conv_ClassToSoftClassReference_ReturnValue; // 0x0050(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	class FString                                 CallFunc_GetReinforceClassNameFromClass_ClassName; // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AA[0x2];                                       // 0x00AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_RegisterLowFiBehaviorEnemy) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_RegisterLowFiBehaviorEnemy");
static_assert(sizeof(GI_SinglePlayer_C_RegisterLowFiBehaviorEnemy) == 0x0000B0, "Wrong size on GI_SinglePlayer_C_RegisterLowFiBehaviorEnemy");
static_assert(offsetof(GI_SinglePlayer_C_RegisterLowFiBehaviorEnemy, Enemy) == 0x000000, "Member 'GI_SinglePlayer_C_RegisterLowFiBehaviorEnemy::Enemy' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterLowFiBehaviorEnemy, Result) == 0x000008, "Member 'GI_SinglePlayer_C_RegisterLowFiBehaviorEnemy::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterLowFiBehaviorEnemy, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'GI_SinglePlayer_C_RegisterLowFiBehaviorEnemy::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterLowFiBehaviorEnemy, CallFunc_GetDisplayName_ReturnValue) == 0x000010, "Member 'GI_SinglePlayer_C_RegisterLowFiBehaviorEnemy::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterLowFiBehaviorEnemy, CallFunc_Concat_StrStr_ReturnValue) == 0x000020, "Member 'GI_SinglePlayer_C_RegisterLowFiBehaviorEnemy::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterLowFiBehaviorEnemy, CallFunc_TryStartLowBehaviorTicks_Result) == 0x000030, "Member 'GI_SinglePlayer_C_RegisterLowFiBehaviorEnemy::CallFunc_TryStartLowBehaviorTicks_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterLowFiBehaviorEnemy, CallFunc_Array_Length_ReturnValue) == 0x000034, "Member 'GI_SinglePlayer_C_RegisterLowFiBehaviorEnemy::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterLowFiBehaviorEnemy, CallFunc_Conv_IntToString_ReturnValue) == 0x000038, "Member 'GI_SinglePlayer_C_RegisterLowFiBehaviorEnemy::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterLowFiBehaviorEnemy, CallFunc_GetObjectClass_ReturnValue) == 0x000048, "Member 'GI_SinglePlayer_C_RegisterLowFiBehaviorEnemy::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterLowFiBehaviorEnemy, CallFunc_Conv_ClassToSoftClassReference_ReturnValue) == 0x000050, "Member 'GI_SinglePlayer_C_RegisterLowFiBehaviorEnemy::CallFunc_Conv_ClassToSoftClassReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterLowFiBehaviorEnemy, CallFunc_GetReinforceClassNameFromClass_ClassName) == 0x000078, "Member 'GI_SinglePlayer_C_RegisterLowFiBehaviorEnemy::CallFunc_GetReinforceClassNameFromClass_ClassName' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterLowFiBehaviorEnemy, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000088, "Member 'GI_SinglePlayer_C_RegisterLowFiBehaviorEnemy::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterLowFiBehaviorEnemy, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000098, "Member 'GI_SinglePlayer_C_RegisterLowFiBehaviorEnemy::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterLowFiBehaviorEnemy, CallFunc_Array_Contains_ReturnValue) == 0x0000A8, "Member 'GI_SinglePlayer_C_RegisterLowFiBehaviorEnemy::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterLowFiBehaviorEnemy, CallFunc_Not_PreBool_ReturnValue) == 0x0000A9, "Member 'GI_SinglePlayer_C_RegisterLowFiBehaviorEnemy::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterLowFiBehaviorEnemy, CallFunc_Array_Add_ReturnValue) == 0x0000AC, "Member 'GI_SinglePlayer_C_RegisterLowFiBehaviorEnemy::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.UnregisterLowFiBehaviorEnemy
// 0x00B0 (0x00B0 - 0x0000)
struct GI_SinglePlayer_C_UnregisterLowFiBehaviorEnemy final
{
public:
	class APAWN_Enemy_C*                          Enemy;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LowFiBehaviorIndex;                                // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_WrapIntUpperbound_ReturnValue;            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TryStopLowBehaviorTicks_Result;           // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   CallFunc_Conv_ClassToSoftClassReference_ReturnValue; // 0x0050(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	class FString                                 CallFunc_GetReinforceClassNameFromClass_ClassName; // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_UnregisterLowFiBehaviorEnemy) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_UnregisterLowFiBehaviorEnemy");
static_assert(sizeof(GI_SinglePlayer_C_UnregisterLowFiBehaviorEnemy) == 0x0000B0, "Wrong size on GI_SinglePlayer_C_UnregisterLowFiBehaviorEnemy");
static_assert(offsetof(GI_SinglePlayer_C_UnregisterLowFiBehaviorEnemy, Enemy) == 0x000000, "Member 'GI_SinglePlayer_C_UnregisterLowFiBehaviorEnemy::Enemy' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UnregisterLowFiBehaviorEnemy, Result) == 0x000008, "Member 'GI_SinglePlayer_C_UnregisterLowFiBehaviorEnemy::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UnregisterLowFiBehaviorEnemy, LowFiBehaviorIndex) == 0x00000C, "Member 'GI_SinglePlayer_C_UnregisterLowFiBehaviorEnemy::LowFiBehaviorIndex' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UnregisterLowFiBehaviorEnemy, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'GI_SinglePlayer_C_UnregisterLowFiBehaviorEnemy::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UnregisterLowFiBehaviorEnemy, Temp_int_Variable) == 0x000014, "Member 'GI_SinglePlayer_C_UnregisterLowFiBehaviorEnemy::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UnregisterLowFiBehaviorEnemy, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'GI_SinglePlayer_C_UnregisterLowFiBehaviorEnemy::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UnregisterLowFiBehaviorEnemy, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00001C, "Member 'GI_SinglePlayer_C_UnregisterLowFiBehaviorEnemy::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UnregisterLowFiBehaviorEnemy, CallFunc_WrapIntUpperbound_ReturnValue) == 0x000020, "Member 'GI_SinglePlayer_C_UnregisterLowFiBehaviorEnemy::CallFunc_WrapIntUpperbound_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UnregisterLowFiBehaviorEnemy, CallFunc_Subtract_IntInt_ReturnValue) == 0x000024, "Member 'GI_SinglePlayer_C_UnregisterLowFiBehaviorEnemy::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UnregisterLowFiBehaviorEnemy, CallFunc_TryStopLowBehaviorTicks_Result) == 0x000028, "Member 'GI_SinglePlayer_C_UnregisterLowFiBehaviorEnemy::CallFunc_TryStopLowBehaviorTicks_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UnregisterLowFiBehaviorEnemy, CallFunc_Greater_IntInt_ReturnValue) == 0x000029, "Member 'GI_SinglePlayer_C_UnregisterLowFiBehaviorEnemy::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UnregisterLowFiBehaviorEnemy, CallFunc_Array_Length_ReturnValue_1) == 0x00002C, "Member 'GI_SinglePlayer_C_UnregisterLowFiBehaviorEnemy::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UnregisterLowFiBehaviorEnemy, CallFunc_Conv_IntToString_ReturnValue) == 0x000030, "Member 'GI_SinglePlayer_C_UnregisterLowFiBehaviorEnemy::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UnregisterLowFiBehaviorEnemy, CallFunc_GetObjectClass_ReturnValue) == 0x000040, "Member 'GI_SinglePlayer_C_UnregisterLowFiBehaviorEnemy::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UnregisterLowFiBehaviorEnemy, CallFunc_Array_Find_ReturnValue) == 0x000048, "Member 'GI_SinglePlayer_C_UnregisterLowFiBehaviorEnemy::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UnregisterLowFiBehaviorEnemy, CallFunc_Conv_ClassToSoftClassReference_ReturnValue) == 0x000050, "Member 'GI_SinglePlayer_C_UnregisterLowFiBehaviorEnemy::CallFunc_Conv_ClassToSoftClassReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UnregisterLowFiBehaviorEnemy, CallFunc_GetReinforceClassNameFromClass_ClassName) == 0x000078, "Member 'GI_SinglePlayer_C_UnregisterLowFiBehaviorEnemy::CallFunc_GetReinforceClassNameFromClass_ClassName' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UnregisterLowFiBehaviorEnemy, CallFunc_Concat_StrStr_ReturnValue) == 0x000088, "Member 'GI_SinglePlayer_C_UnregisterLowFiBehaviorEnemy::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UnregisterLowFiBehaviorEnemy, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000098, "Member 'GI_SinglePlayer_C_UnregisterLowFiBehaviorEnemy::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UnregisterLowFiBehaviorEnemy, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x0000A8, "Member 'GI_SinglePlayer_C_UnregisterLowFiBehaviorEnemy::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.TryPrintDebugLowFiBehaviorMessage
// 0x0020 (0x0020 - 0x0000)
struct GI_SinglePlayer_C_TryPrintDebugLowFiBehaviorMessage final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_TryPrintDebugLowFiBehaviorMessage) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_TryPrintDebugLowFiBehaviorMessage");
static_assert(sizeof(GI_SinglePlayer_C_TryPrintDebugLowFiBehaviorMessage) == 0x000020, "Wrong size on GI_SinglePlayer_C_TryPrintDebugLowFiBehaviorMessage");
static_assert(offsetof(GI_SinglePlayer_C_TryPrintDebugLowFiBehaviorMessage, Message) == 0x000000, "Member 'GI_SinglePlayer_C_TryPrintDebugLowFiBehaviorMessage::Message' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryPrintDebugLowFiBehaviorMessage, CallFunc_Concat_StrStr_ReturnValue) == 0x000010, "Member 'GI_SinglePlayer_C_TryPrintDebugLowFiBehaviorMessage::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.TryDrawLowFiBehaviorDebugBox
// 0x0070 (0x0070 - 0x0000)
struct GI_SinglePlayer_C_TryDrawLowFiBehaviorDebugBox final
{
public:
	class APAWN_Enemy_C*                          Enemy;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color;                                             // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MovementVector;                                    // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Vector_IsZero_ReturnValue;                // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleRadius_ReturnValue;       // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_1;    // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_TryDrawLowFiBehaviorDebugBox) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_TryDrawLowFiBehaviorDebugBox");
static_assert(sizeof(GI_SinglePlayer_C_TryDrawLowFiBehaviorDebugBox) == 0x000070, "Wrong size on GI_SinglePlayer_C_TryDrawLowFiBehaviorDebugBox");
static_assert(offsetof(GI_SinglePlayer_C_TryDrawLowFiBehaviorDebugBox, Enemy) == 0x000000, "Member 'GI_SinglePlayer_C_TryDrawLowFiBehaviorDebugBox::Enemy' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryDrawLowFiBehaviorDebugBox, Color) == 0x000008, "Member 'GI_SinglePlayer_C_TryDrawLowFiBehaviorDebugBox::Color' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryDrawLowFiBehaviorDebugBox, MovementVector) == 0x000018, "Member 'GI_SinglePlayer_C_TryDrawLowFiBehaviorDebugBox::MovementVector' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryDrawLowFiBehaviorDebugBox, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000024, "Member 'GI_SinglePlayer_C_TryDrawLowFiBehaviorDebugBox::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryDrawLowFiBehaviorDebugBox, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000030, "Member 'GI_SinglePlayer_C_TryDrawLowFiBehaviorDebugBox::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryDrawLowFiBehaviorDebugBox, CallFunc_Vector_IsZero_ReturnValue) == 0x00003C, "Member 'GI_SinglePlayer_C_TryDrawLowFiBehaviorDebugBox::CallFunc_Vector_IsZero_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryDrawLowFiBehaviorDebugBox, CallFunc_Not_PreBool_ReturnValue) == 0x00003D, "Member 'GI_SinglePlayer_C_TryDrawLowFiBehaviorDebugBox::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryDrawLowFiBehaviorDebugBox, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x000040, "Member 'GI_SinglePlayer_C_TryDrawLowFiBehaviorDebugBox::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryDrawLowFiBehaviorDebugBox, CallFunc_GetScaledCapsuleRadius_ReturnValue) == 0x000044, "Member 'GI_SinglePlayer_C_TryDrawLowFiBehaviorDebugBox::CallFunc_GetScaledCapsuleRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryDrawLowFiBehaviorDebugBox, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000048, "Member 'GI_SinglePlayer_C_TryDrawLowFiBehaviorDebugBox::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryDrawLowFiBehaviorDebugBox, CallFunc_MakeVector_ReturnValue) == 0x000054, "Member 'GI_SinglePlayer_C_TryDrawLowFiBehaviorDebugBox::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryDrawLowFiBehaviorDebugBox, CallFunc_K2_GetComponentLocation_ReturnValue_1) == 0x000060, "Member 'GI_SinglePlayer_C_TryDrawLowFiBehaviorDebugBox::CallFunc_K2_GetComponentLocation_ReturnValue_1' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.TryStartLowBehaviorTicks
// 0x0028 (0x0028 - 0x0000)
struct GI_SinglePlayer_C_TryStartLowBehaviorTicks final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0018(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_IsTimerActiveHandle_ReturnValue;       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_TryStartLowBehaviorTicks) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_TryStartLowBehaviorTicks");
static_assert(sizeof(GI_SinglePlayer_C_TryStartLowBehaviorTicks) == 0x000028, "Wrong size on GI_SinglePlayer_C_TryStartLowBehaviorTicks");
static_assert(offsetof(GI_SinglePlayer_C_TryStartLowBehaviorTicks, Result) == 0x000000, "Member 'GI_SinglePlayer_C_TryStartLowBehaviorTicks::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartLowBehaviorTicks, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'GI_SinglePlayer_C_TryStartLowBehaviorTicks::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartLowBehaviorTicks, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000018, "Member 'GI_SinglePlayer_C_TryStartLowBehaviorTicks::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartLowBehaviorTicks, CallFunc_K2_IsTimerActiveHandle_ReturnValue) == 0x000020, "Member 'GI_SinglePlayer_C_TryStartLowBehaviorTicks::CallFunc_K2_IsTimerActiveHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartLowBehaviorTicks, CallFunc_Not_PreBool_ReturnValue) == 0x000021, "Member 'GI_SinglePlayer_C_TryStartLowBehaviorTicks::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.TryStopLowBehaviorTicks
// 0x000C (0x000C - 0x0000)
struct GI_SinglePlayer_C_TryStopLowBehaviorTicks final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_IsValidTimerHandle_ReturnValue;        // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_TryStopLowBehaviorTicks) == 0x000004, "Wrong alignment on GI_SinglePlayer_C_TryStopLowBehaviorTicks");
static_assert(sizeof(GI_SinglePlayer_C_TryStopLowBehaviorTicks) == 0x00000C, "Wrong size on GI_SinglePlayer_C_TryStopLowBehaviorTicks");
static_assert(offsetof(GI_SinglePlayer_C_TryStopLowBehaviorTicks, Result) == 0x000000, "Member 'GI_SinglePlayer_C_TryStopLowBehaviorTicks::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStopLowBehaviorTicks, CallFunc_Array_Length_ReturnValue) == 0x000004, "Member 'GI_SinglePlayer_C_TryStopLowBehaviorTicks::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStopLowBehaviorTicks, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000008, "Member 'GI_SinglePlayer_C_TryStopLowBehaviorTicks::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStopLowBehaviorTicks, CallFunc_K2_IsValidTimerHandle_ReturnValue) == 0x000009, "Member 'GI_SinglePlayer_C_TryStopLowBehaviorTicks::CallFunc_K2_IsValidTimerHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStopLowBehaviorTicks, CallFunc_BooleanAND_ReturnValue) == 0x00000A, "Member 'GI_SinglePlayer_C_TryStopLowBehaviorTicks::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.OnTickNextLowFiBehaviorEnemy
// 0x0148 (0x0148 - 0x0000)
struct GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy final
{
public:
	struct FBox                                   TargetBox;                                         // 0x0000(0x001C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FBox                                   SourceBox;                                         // 0x001C(0x001C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               TargetRotation;                                    // 0x0038(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                TargetLocation;                                    // 0x0044(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ElapsedLowFiBehaviorTime;                          // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULocalBehaviorComponent_C*              LocalBehaviorComponent;                            // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_Enemy_C*                          CurrentEnemy;                                      // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetShockAgentLocation_Location;           // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromX_ReturnValue;                 // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotFromX_ReturnValue_1;               // 0x0094(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_Enemy_C*                          K2Node_DynamicCast_AsPAWN_Enemy;                   // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x00B4(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x00C8(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E2[0x2];                                       // 0x00E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x00E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEnemyMobile_Result;                     // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F1[0x3];                                       // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TryClaimNextPointOfInterest_Result;       // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetShouldExplorePointsOfInterest_Result;  // 0x00FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsStunned_Result;                         // 0x00FB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x00FD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00FE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_FF[0x1];                                       // 0x00FF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class ULocalBehaviorComponent_C*              CallFunc_GetLocalBehaviorComponent_LocalBehaviorComponent; // 0x0100(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0108(0x0010)(ZeroConstructor, NoDestructor)
	float                                         CallFunc_GetElapsedTimeSinceLastLowFiBehavior_Result; // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_1;        // 0x0120(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0129(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12A[0x6];                                      // 0x012A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_Enemy_C*                          CallFunc_Array_Get_Item;                           // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_WrapIntUpperbound_ReturnValue;            // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy");
static_assert(sizeof(GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy) == 0x000148, "Wrong size on GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy");
static_assert(offsetof(GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy, TargetBox) == 0x000000, "Member 'GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy::TargetBox' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy, SourceBox) == 0x00001C, "Member 'GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy::SourceBox' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy, TargetRotation) == 0x000038, "Member 'GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy::TargetRotation' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy, TargetLocation) == 0x000044, "Member 'GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy::TargetLocation' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy, ElapsedLowFiBehaviorTime) == 0x000050, "Member 'GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy::ElapsedLowFiBehaviorTime' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy, LocalBehaviorComponent) == 0x000058, "Member 'GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy::LocalBehaviorComponent' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy, CurrentEnemy) == 0x000060, "Member 'GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy::CurrentEnemy' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy, CallFunc_IsValid_ReturnValue) == 0x000068, "Member 'GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy, CallFunc_GetShockAgentLocation_Location) == 0x00006C, "Member 'GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy::CallFunc_GetShockAgentLocation_Location' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000078, "Member 'GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy, CallFunc_MakeRotFromX_ReturnValue) == 0x000084, "Member 'GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy::CallFunc_MakeRotFromX_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy, CallFunc_IsValid_ReturnValue_1) == 0x000090, "Member 'GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy, CallFunc_MakeRotFromX_ReturnValue_1) == 0x000094, "Member 'GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy::CallFunc_MakeRotFromX_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy, CallFunc_GetOwner_ReturnValue) == 0x0000A0, "Member 'GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy, K2Node_DynamicCast_AsPAWN_Enemy) == 0x0000A8, "Member 'GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy::K2Node_DynamicCast_AsPAWN_Enemy' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy, K2Node_DynamicCast_bSuccess) == 0x0000B0, "Member 'GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy, K2Node_CreateDelegate_OutputDelegate) == 0x0000B4, "Member 'GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x0000C8, "Member 'GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x0000D0, "Member 'GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy, CallFunc_Array_Length_ReturnValue) == 0x0000DC, "Member 'GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy, CallFunc_Greater_IntInt_ReturnValue) == 0x0000E0, "Member 'GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000E1, "Member 'GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x0000E4, "Member 'GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy, CallFunc_IsEnemyMobile_Result) == 0x0000F0, "Member 'GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy::CallFunc_IsEnemyMobile_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy, CallFunc_Array_Length_ReturnValue_1) == 0x0000F4, "Member 'GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy, CallFunc_TryClaimNextPointOfInterest_Result) == 0x0000F8, "Member 'GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy::CallFunc_TryClaimNextPointOfInterest_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy, CallFunc_Greater_IntInt_ReturnValue_1) == 0x0000F9, "Member 'GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy, CallFunc_GetShouldExplorePointsOfInterest_Result) == 0x0000FA, "Member 'GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy::CallFunc_GetShouldExplorePointsOfInterest_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy, CallFunc_IsStunned_Result) == 0x0000FB, "Member 'GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy::CallFunc_IsStunned_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy, CallFunc_Not_PreBool_ReturnValue) == 0x0000FC, "Member 'GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0000FD, "Member 'GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy, CallFunc_BooleanAND_ReturnValue) == 0x0000FE, "Member 'GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy, CallFunc_GetLocalBehaviorComponent_LocalBehaviorComponent) == 0x000100, "Member 'GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy::CallFunc_GetLocalBehaviorComponent_LocalBehaviorComponent' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy, K2Node_CreateDelegate_OutputDelegate_1) == 0x000108, "Member 'GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy, CallFunc_GetElapsedTimeSinceLastLowFiBehavior_Result) == 0x000118, "Member 'GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy::CallFunc_GetElapsedTimeSinceLastLowFiBehavior_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy, CallFunc_K2_SetTimerDelegate_ReturnValue_1) == 0x000120, "Member 'GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy::CallFunc_K2_SetTimerDelegate_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy, CallFunc_IsValid_ReturnValue_2) == 0x000128, "Member 'GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000129, "Member 'GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy, CallFunc_Array_Get_Item) == 0x000130, "Member 'GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy, CallFunc_Array_Length_ReturnValue_2) == 0x000138, "Member 'GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy, CallFunc_Add_IntInt_ReturnValue) == 0x00013C, "Member 'GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy, CallFunc_WrapIntUpperbound_ReturnValue) == 0x000140, "Member 'GI_SinglePlayer_C_OnTickNextLowFiBehaviorEnemy::CallFunc_WrapIntUpperbound_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.PerformLowFiBehaviorForEnemy
// 0x0390 (0x0390 - 0x0000)
struct GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy final
{
public:
	class APAWN_Enemy_C*                          CurrentEnemy;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetLocation;                                    // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               TargetRotation;                                    // 0x0014(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         ElapsedTime;                                       // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WaitTime;                                          // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AcceptanceRadius;                                  // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_Enemy_C*                          DeadEnemy;                                         // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCOMP_Inventory_C*                      DeadEnemyInventory;                                // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EnemyCapsuleHalfExtents;                           // 0x0040(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TeleportLocation;                                  // 0x004C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               TeleportRotation;                                  // 0x0058(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FBox                                   TargetAcceptBox;                                   // 0x0064(0x001C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FBox                                   SourceAcceptBox;                                   // 0x0080(0x001C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         TimeToTarget;                                      // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SimulationSpeedScale;                              // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DistanceFromTarget;                                // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AcceptanceHalfExtents;                             // 0x00A8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                VectorToTarget;                                    // 0x00B4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AdjustedTargetLocation;                            // 0x00C0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               AdjustedTargetRotation;                            // 0x00CC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class ULocalBehaviorComponent_C*              CallFunc_GetLocalBehaviorComponent_LocalBehaviorComponent; // 0x00D8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPointOfInterestComponent_C*            K2Node_DynamicCast_AsPoint_Of_Interest_Component;  // 0x00E0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_EA[0x2];                                       // 0x00EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TryPathToBounds_ReturnValue;              // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F9[0x3];                                       // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetUpVector_ReturnValue;                  // 0x00FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetShockAgentLocation_Location;           // 0x0108(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0114(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0120(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMaxElement_ReturnValue;                // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0130(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasCurrentNavigationTarget_ReturnValue;   // 0x013C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13D[0x3];                                      // 0x013D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetCurrentNavigationTargetLocation_ReturnValue; // 0x0140(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x014C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x014D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_14E[0x2];                                      // 0x014E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0150(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x015C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15D[0x3];                                      // 0x015D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetScaledBoxExtent_ReturnValue;           // 0x0160(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x016C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x0178(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBox                                   CallFunc_MakeBox_ReturnValue;                      // 0x0184(0x001C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IntersectBoxes_ReturnValue;               // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x01A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A2[0x6];                                      // 0x01A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x01A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x01B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UCOMP_Inventory_C*                      CallFunc_GetInventoryComponent_Inventory;          // 0x01C8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TryGenerateLoot_Result;                   // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D1[0x7];                                      // 0x01D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCOMP_Inventory_C*                      CallFunc_GetInventoryComponent_Inventory_1;        // 0x01D8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E1[0x7];                                      // 0x01E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x01E8(0x0010)(ConstParm, ReferenceParm)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleRadius_ReturnValue;       // 0x01FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0200(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue_1; // 0x020C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleRadius_ReturnValue_1;     // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0214(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetShockAgentLocation_Location_1;         // 0x0220(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInventoryEmpty_Result;                  // 0x022C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x022D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x022E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22F[0x1];                                      // 0x022F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UITEM_Base_C*>                   K2Node_MakeArray_Array_1;                          // 0x0230(0x0010)(ReferenceParm)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0244(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0248(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_MergeItems_Success;                       // 0x024C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_24D[0x3];                                      // 0x024D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0250(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x025C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25D[0x3];                                      // 0x025D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_GetAdjustedNavigationWorldLocationAtWorldTransform_OutAdjustedWorldRotation; // 0x0260(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetAdjustedNavigationWorldLocationAtWorldTransform_ReturnValue; // 0x026C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_2;      // 0x0278(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0284(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x0290(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_3;      // 0x029C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBox                                   CallFunc_MakeBox_ReturnValue_1;                    // 0x02A8(0x001C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Multiply_VectorInt_ReturnValue;           // 0x02C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x02D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D1[0x3];                                      // 0x02D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Vector_DistanceSquared_ReturnValue;       // 0x02D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x02D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D9[0x3];                                      // 0x02D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetUpVector_ReturnValue_1;                // 0x02DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x02E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_3;           // 0x02F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_4;           // 0x0300(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_4;      // 0x030C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBox                                   CallFunc_MakeBox_ReturnValue_2;                    // 0x0318(0x001C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_334[0x4];                                      // 0x0334(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array_2;                          // 0x0338(0x0010)(ConstParm, ReferenceParm)
	TArray<class AActor*>                         CallFunc_CapsuleOverlapActors_OutActors;           // 0x0348(0x0010)(ReferenceParm)
	bool                                          CallFunc_CapsuleOverlapActors_ReturnValue;         // 0x0358(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_359[0x7];                                      // 0x0359(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UVoxelNavAgentComponent*>        CallFunc_GetNavigationAgentsInWorldBounds_ReturnValue; // 0x0360(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0370(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0374(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_TeleportTo_ReturnValue;                // 0x0375(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x0376(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAnyRoomPerceptibleBetweenWorldPoints_ReturnValue; // 0x0377(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0378(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x037C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0380(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_381[0x3];                                      // 0x0381(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0384(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0388(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy");
static_assert(sizeof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy) == 0x000390, "Wrong size on GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CurrentEnemy) == 0x000000, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CurrentEnemy' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, TargetLocation) == 0x000008, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::TargetLocation' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, TargetRotation) == 0x000014, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::TargetRotation' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, ElapsedTime) == 0x000020, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::ElapsedTime' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, WaitTime) == 0x000024, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::WaitTime' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, AcceptanceRadius) == 0x000028, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::AcceptanceRadius' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, DeadEnemy) == 0x000030, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::DeadEnemy' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, DeadEnemyInventory) == 0x000038, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::DeadEnemyInventory' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, EnemyCapsuleHalfExtents) == 0x000040, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::EnemyCapsuleHalfExtents' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, TeleportLocation) == 0x00004C, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::TeleportLocation' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, TeleportRotation) == 0x000058, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::TeleportRotation' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, TargetAcceptBox) == 0x000064, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::TargetAcceptBox' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, SourceAcceptBox) == 0x000080, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::SourceAcceptBox' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, TimeToTarget) == 0x00009C, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::TimeToTarget' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, SimulationSpeedScale) == 0x0000A0, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::SimulationSpeedScale' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, DistanceFromTarget) == 0x0000A4, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::DistanceFromTarget' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, AcceptanceHalfExtents) == 0x0000A8, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::AcceptanceHalfExtents' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, VectorToTarget) == 0x0000B4, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::VectorToTarget' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, AdjustedTargetLocation) == 0x0000C0, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::AdjustedTargetLocation' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, AdjustedTargetRotation) == 0x0000CC, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::AdjustedTargetRotation' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_GetLocalBehaviorComponent_LocalBehaviorComponent) == 0x0000D8, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_GetLocalBehaviorComponent_LocalBehaviorComponent' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, K2Node_DynamicCast_AsPoint_Of_Interest_Component) == 0x0000E0, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::K2Node_DynamicCast_AsPoint_Of_Interest_Component' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, K2Node_DynamicCast_bSuccess) == 0x0000E8, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, K2Node_SwitchEnum_CmpSuccess) == 0x0000E9, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_MakeVector_ReturnValue) == 0x0000EC, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_TryPathToBounds_ReturnValue) == 0x0000F8, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_TryPathToBounds_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_GetUpVector_ReturnValue) == 0x0000FC, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_GetUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_GetShockAgentLocation_Location) == 0x000108, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_GetShockAgentLocation_Location' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000114, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000120, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_GetMaxElement_ReturnValue) == 0x00012C, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_GetMaxElement_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000130, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_HasCurrentNavigationTarget_ReturnValue) == 0x00013C, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_HasCurrentNavigationTarget_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_GetCurrentNavigationTargetLocation_ReturnValue) == 0x000140, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_GetCurrentNavigationTargetLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_IsValid_ReturnValue) == 0x00014C, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x00014D, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000150, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_BooleanOR_ReturnValue) == 0x00015C, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_GetScaledBoxExtent_ReturnValue) == 0x000160, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_GetScaledBoxExtent_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_Add_VectorVector_ReturnValue) == 0x00016C, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x000178, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_MakeBox_ReturnValue) == 0x000184, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_MakeBox_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_IntersectBoxes_ReturnValue) == 0x0001A0, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_IntersectBoxes_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_Not_PreBool_ReturnValue) == 0x0001A1, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_GetDisplayName_ReturnValue) == 0x0001A8, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_Concat_StrStr_ReturnValue) == 0x0001B8, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_GetInventoryComponent_Inventory) == 0x0001C8, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_GetInventoryComponent_Inventory' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_TryGenerateLoot_Result) == 0x0001D0, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_TryGenerateLoot_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_GetInventoryComponent_Inventory_1) == 0x0001D8, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_GetInventoryComponent_Inventory_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_IsValid_ReturnValue_1) == 0x0001E0, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, K2Node_MakeArray_Array) == 0x0001E8, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x0001F8, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_GetScaledCapsuleRadius_ReturnValue) == 0x0001FC, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_GetScaledCapsuleRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000200, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue_1) == 0x00020C, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_GetScaledCapsuleRadius_ReturnValue_1) == 0x000210, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_GetScaledCapsuleRadius_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_MakeVector_ReturnValue_1) == 0x000214, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_GetShockAgentLocation_Location_1) == 0x000220, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_GetShockAgentLocation_Location_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_IsInventoryEmpty_Result) == 0x00022C, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_IsInventoryEmpty_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_Not_PreBool_ReturnValue_1) == 0x00022D, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_IsValid_ReturnValue_2) == 0x00022E, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, K2Node_MakeArray_Array_1) == 0x000230, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_BreakRotator_Roll) == 0x000240, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_BreakRotator_Pitch) == 0x000244, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_BreakRotator_Yaw) == 0x000248, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_MergeItems_Success) == 0x00024C, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_MergeItems_Success' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_MakeRotator_ReturnValue) == 0x000250, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_Not_PreBool_ReturnValue_2) == 0x00025C, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_GetAdjustedNavigationWorldLocationAtWorldTransform_OutAdjustedWorldRotation) == 0x000260, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_GetAdjustedNavigationWorldLocationAtWorldTransform_OutAdjustedWorldRotation' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_GetAdjustedNavigationWorldLocationAtWorldTransform_ReturnValue) == 0x00026C, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_GetAdjustedNavigationWorldLocationAtWorldTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_Subtract_VectorVector_ReturnValue_2) == 0x000278, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_Subtract_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000284, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_Add_VectorVector_ReturnValue_2) == 0x000290, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_Subtract_VectorVector_ReturnValue_3) == 0x00029C, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_Subtract_VectorVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_MakeBox_ReturnValue_1) == 0x0002A8, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_MakeBox_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_Multiply_VectorInt_ReturnValue) == 0x0002C4, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_Multiply_VectorInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0002D0, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_Vector_DistanceSquared_ReturnValue) == 0x0002D4, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_Vector_DistanceSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_Less_FloatFloat_ReturnValue) == 0x0002D8, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_GetUpVector_ReturnValue_1) == 0x0002DC, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_GetUpVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x0002E8, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_Add_VectorVector_ReturnValue_3) == 0x0002F4, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_Add_VectorVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_Add_VectorVector_ReturnValue_4) == 0x000300, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_Add_VectorVector_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_Subtract_VectorVector_ReturnValue_4) == 0x00030C, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_Subtract_VectorVector_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_MakeBox_ReturnValue_2) == 0x000318, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_MakeBox_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, K2Node_MakeArray_Array_2) == 0x000338, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_CapsuleOverlapActors_OutActors) == 0x000348, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_CapsuleOverlapActors_OutActors' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_CapsuleOverlapActors_ReturnValue) == 0x000358, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_CapsuleOverlapActors_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_GetNavigationAgentsInWorldBounds_ReturnValue) == 0x000360, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_GetNavigationAgentsInWorldBounds_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_Array_Length_ReturnValue) == 0x000370, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_Greater_IntInt_ReturnValue) == 0x000374, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_K2_TeleportTo_ReturnValue) == 0x000375, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_K2_TeleportTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_Not_PreBool_ReturnValue_3) == 0x000376, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_IsAnyRoomPerceptibleBetweenWorldPoints_ReturnValue) == 0x000377, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_IsAnyRoomPerceptibleBetweenWorldPoints_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_Add_FloatFloat_ReturnValue) == 0x000378, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00037C, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000380, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000384, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy, CallFunc_VSize_ReturnValue) == 0x000388, "Member 'GI_SinglePlayer_C_PerformLowFiBehaviorForEnemy::CallFunc_VSize_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.ValidateCurrentLowFiState
// 0x000C (0x000C - 0x0000)
struct GI_SinglePlayer_C_ValidateCurrentLowFiState final
{
public:
	bool                                          CallFunc_IsPackagedForDistribution_ReturnValue;    // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_ValidateCurrentLowFiState) == 0x000004, "Wrong alignment on GI_SinglePlayer_C_ValidateCurrentLowFiState");
static_assert(sizeof(GI_SinglePlayer_C_ValidateCurrentLowFiState) == 0x00000C, "Wrong size on GI_SinglePlayer_C_ValidateCurrentLowFiState");
static_assert(offsetof(GI_SinglePlayer_C_ValidateCurrentLowFiState, CallFunc_IsPackagedForDistribution_ReturnValue) == 0x000000, "Member 'GI_SinglePlayer_C_ValidateCurrentLowFiState::CallFunc_IsPackagedForDistribution_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ValidateCurrentLowFiState, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'GI_SinglePlayer_C_ValidateCurrentLowFiState::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ValidateCurrentLowFiState, CallFunc_Array_Length_ReturnValue) == 0x000004, "Member 'GI_SinglePlayer_C_ValidateCurrentLowFiState::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ValidateCurrentLowFiState, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000008, "Member 'GI_SinglePlayer_C_ValidateCurrentLowFiState::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ValidateCurrentLowFiState, CallFunc_Greater_IntInt_ReturnValue) == 0x000009, "Member 'GI_SinglePlayer_C_ValidateCurrentLowFiState::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ValidateCurrentLowFiState, CallFunc_Not_PreBool_ReturnValue_1) == 0x00000A, "Member 'GI_SinglePlayer_C_ValidateCurrentLowFiState::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.GetCurrentExploreIntensity
// 0x0004 (0x0004 - 0x0000)
struct GI_SinglePlayer_C_GetCurrentExploreIntensity final
{
public:
	float                                         Intensity;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_GetCurrentExploreIntensity) == 0x000004, "Wrong alignment on GI_SinglePlayer_C_GetCurrentExploreIntensity");
static_assert(sizeof(GI_SinglePlayer_C_GetCurrentExploreIntensity) == 0x000004, "Wrong size on GI_SinglePlayer_C_GetCurrentExploreIntensity");
static_assert(offsetof(GI_SinglePlayer_C_GetCurrentExploreIntensity, Intensity) == 0x000000, "Member 'GI_SinglePlayer_C_GetCurrentExploreIntensity::Intensity' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.HasCompletedAchievement
// 0x0028 (0x0028 - 0x0000)
struct GI_SinglePlayer_C_HasCompletedAchievement final
{
public:
	class FName                                   AchievementName;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetCachedAchievementProgress_bFoundID;    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCachedAchievementProgress_Progress;    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_HasCompletedAchievement) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_HasCompletedAchievement");
static_assert(sizeof(GI_SinglePlayer_C_HasCompletedAchievement) == 0x000028, "Wrong size on GI_SinglePlayer_C_HasCompletedAchievement");
static_assert(offsetof(GI_SinglePlayer_C_HasCompletedAchievement, AchievementName) == 0x000000, "Member 'GI_SinglePlayer_C_HasCompletedAchievement::AchievementName' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_HasCompletedAchievement, Result) == 0x000008, "Member 'GI_SinglePlayer_C_HasCompletedAchievement::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_HasCompletedAchievement, CallFunc_GetPlayerController_ReturnValue) == 0x000010, "Member 'GI_SinglePlayer_C_HasCompletedAchievement::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_HasCompletedAchievement, CallFunc_GetCachedAchievementProgress_bFoundID) == 0x000018, "Member 'GI_SinglePlayer_C_HasCompletedAchievement::CallFunc_GetCachedAchievementProgress_bFoundID' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_HasCompletedAchievement, CallFunc_GetCachedAchievementProgress_Progress) == 0x00001C, "Member 'GI_SinglePlayer_C_HasCompletedAchievement::CallFunc_GetCachedAchievementProgress_Progress' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_HasCompletedAchievement, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000020, "Member 'GI_SinglePlayer_C_HasCompletedAchievement::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.HasCompletedAllAchievements
// 0x0070 (0x0070 - 0x0000)
struct GI_SinglePlayer_C_HasCompletedAllAchievements final
{
public:
	class FName                                   IgnoreAchievementName;                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CurrentAchievementName;                            // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      PlayerController;                                  // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetCachedAchievementProgress_bFoundID;    // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCachedAchievementProgress_Progress;    // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue_1;          // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_43[0x5];                                       // 0x0043(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CallFunc_GetDataTableRowNames_OutRowNames;         // 0x0048(0x0010)(ReferenceParm)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_Array_Get_Item;                           // 0x005C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_HasCompletedAllAchievements) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_HasCompletedAllAchievements");
static_assert(sizeof(GI_SinglePlayer_C_HasCompletedAllAchievements) == 0x000070, "Wrong size on GI_SinglePlayer_C_HasCompletedAllAchievements");
static_assert(offsetof(GI_SinglePlayer_C_HasCompletedAllAchievements, IgnoreAchievementName) == 0x000000, "Member 'GI_SinglePlayer_C_HasCompletedAllAchievements::IgnoreAchievementName' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_HasCompletedAllAchievements, Result) == 0x000008, "Member 'GI_SinglePlayer_C_HasCompletedAllAchievements::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_HasCompletedAllAchievements, CurrentAchievementName) == 0x00000C, "Member 'GI_SinglePlayer_C_HasCompletedAllAchievements::CurrentAchievementName' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_HasCompletedAllAchievements, PlayerController) == 0x000018, "Member 'GI_SinglePlayer_C_HasCompletedAllAchievements::PlayerController' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_HasCompletedAllAchievements, Temp_int_Array_Index_Variable) == 0x000020, "Member 'GI_SinglePlayer_C_HasCompletedAllAchievements::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_HasCompletedAllAchievements, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'GI_SinglePlayer_C_HasCompletedAllAchievements::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_HasCompletedAllAchievements, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'GI_SinglePlayer_C_HasCompletedAllAchievements::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_HasCompletedAllAchievements, CallFunc_GetPlayerController_ReturnValue) == 0x000030, "Member 'GI_SinglePlayer_C_HasCompletedAllAchievements::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_HasCompletedAllAchievements, CallFunc_GetCachedAchievementProgress_bFoundID) == 0x000038, "Member 'GI_SinglePlayer_C_HasCompletedAllAchievements::CallFunc_GetCachedAchievementProgress_bFoundID' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_HasCompletedAllAchievements, CallFunc_GetCachedAchievementProgress_Progress) == 0x00003C, "Member 'GI_SinglePlayer_C_HasCompletedAllAchievements::CallFunc_GetCachedAchievementProgress_Progress' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_HasCompletedAllAchievements, CallFunc_Less_FloatFloat_ReturnValue) == 0x000040, "Member 'GI_SinglePlayer_C_HasCompletedAllAchievements::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_HasCompletedAllAchievements, CallFunc_NotEqual_NameName_ReturnValue) == 0x000041, "Member 'GI_SinglePlayer_C_HasCompletedAllAchievements::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_HasCompletedAllAchievements, CallFunc_NotEqual_NameName_ReturnValue_1) == 0x000042, "Member 'GI_SinglePlayer_C_HasCompletedAllAchievements::CallFunc_NotEqual_NameName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_HasCompletedAllAchievements, CallFunc_GetDataTableRowNames_OutRowNames) == 0x000048, "Member 'GI_SinglePlayer_C_HasCompletedAllAchievements::CallFunc_GetDataTableRowNames_OutRowNames' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_HasCompletedAllAchievements, CallFunc_BooleanAND_ReturnValue) == 0x000058, "Member 'GI_SinglePlayer_C_HasCompletedAllAchievements::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_HasCompletedAllAchievements, CallFunc_Array_Get_Item) == 0x00005C, "Member 'GI_SinglePlayer_C_HasCompletedAllAchievements::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_HasCompletedAllAchievements, CallFunc_Array_Length_ReturnValue) == 0x000064, "Member 'GI_SinglePlayer_C_HasCompletedAllAchievements::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_HasCompletedAllAchievements, CallFunc_Less_IntInt_ReturnValue) == 0x000068, "Member 'GI_SinglePlayer_C_HasCompletedAllAchievements::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.GetMaxCountForAchievement
// 0x0020 (0x0020 - 0x0000)
struct GI_SinglePlayer_C_GetMaxCountForAchievement final
{
public:
	struct FDataTableRowHandle                    AchievementHandle;                                 // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	int32                                         Result;                                            // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_AchievementData                CallFunc_GetDataTableRowFromName_OutRow;           // 0x0014(0x0004)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_GetMaxCountForAchievement) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_GetMaxCountForAchievement");
static_assert(sizeof(GI_SinglePlayer_C_GetMaxCountForAchievement) == 0x000020, "Wrong size on GI_SinglePlayer_C_GetMaxCountForAchievement");
static_assert(offsetof(GI_SinglePlayer_C_GetMaxCountForAchievement, AchievementHandle) == 0x000000, "Member 'GI_SinglePlayer_C_GetMaxCountForAchievement::AchievementHandle' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetMaxCountForAchievement, Result) == 0x000010, "Member 'GI_SinglePlayer_C_GetMaxCountForAchievement::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetMaxCountForAchievement, CallFunc_GetDataTableRowFromName_OutRow) == 0x000014, "Member 'GI_SinglePlayer_C_GetMaxCountForAchievement::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetMaxCountForAchievement, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000018, "Member 'GI_SinglePlayer_C_GetMaxCountForAchievement::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.GetLinearAchievementProgress
// 0x0058 (0x0058 - 0x0000)
struct GI_SinglePlayer_C_GetLinearAchievementProgress final
{
public:
	struct FDataTableRowHandle                    AchievementHandle;                                 // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	int32                                         MaxCount;                                          // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentCount;                                      // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   AchivementHandleName;                              // 0x0018(0x0018)(Parm, OutParm)
	struct FSTRUCT_AchievementData                CallFunc_GetDataTableRowFromName_OutRow;           // 0x0030(0x0004)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_NameToText_ReturnValue;              // 0x0038(0x0018)()
	int32                                         CallFunc_Map_Find_Value;                           // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_GetLinearAchievementProgress) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_GetLinearAchievementProgress");
static_assert(sizeof(GI_SinglePlayer_C_GetLinearAchievementProgress) == 0x000058, "Wrong size on GI_SinglePlayer_C_GetLinearAchievementProgress");
static_assert(offsetof(GI_SinglePlayer_C_GetLinearAchievementProgress, AchievementHandle) == 0x000000, "Member 'GI_SinglePlayer_C_GetLinearAchievementProgress::AchievementHandle' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetLinearAchievementProgress, MaxCount) == 0x000010, "Member 'GI_SinglePlayer_C_GetLinearAchievementProgress::MaxCount' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetLinearAchievementProgress, CurrentCount) == 0x000014, "Member 'GI_SinglePlayer_C_GetLinearAchievementProgress::CurrentCount' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetLinearAchievementProgress, AchivementHandleName) == 0x000018, "Member 'GI_SinglePlayer_C_GetLinearAchievementProgress::AchivementHandleName' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetLinearAchievementProgress, CallFunc_GetDataTableRowFromName_OutRow) == 0x000030, "Member 'GI_SinglePlayer_C_GetLinearAchievementProgress::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetLinearAchievementProgress, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000034, "Member 'GI_SinglePlayer_C_GetLinearAchievementProgress::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetLinearAchievementProgress, CallFunc_Conv_NameToText_ReturnValue) == 0x000038, "Member 'GI_SinglePlayer_C_GetLinearAchievementProgress::CallFunc_Conv_NameToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetLinearAchievementProgress, CallFunc_Map_Find_Value) == 0x000050, "Member 'GI_SinglePlayer_C_GetLinearAchievementProgress::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetLinearAchievementProgress, CallFunc_Map_Find_ReturnValue) == 0x000054, "Member 'GI_SinglePlayer_C_GetLinearAchievementProgress::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.SetCanModifyAchievements
// 0x0001 (0x0001 - 0x0000)
struct GI_SinglePlayer_C_SetCanModifyAchievements final
{
public:
	bool                                          State;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_SetCanModifyAchievements) == 0x000001, "Wrong alignment on GI_SinglePlayer_C_SetCanModifyAchievements");
static_assert(sizeof(GI_SinglePlayer_C_SetCanModifyAchievements) == 0x000001, "Wrong size on GI_SinglePlayer_C_SetCanModifyAchievements");
static_assert(offsetof(GI_SinglePlayer_C_SetCanModifyAchievements, State) == 0x000000, "Member 'GI_SinglePlayer_C_SetCanModifyAchievements::State' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.TrySynchronizeAchievements
// 0x0088 (0x0088 - 0x0000)
struct GI_SinglePlayer_C_TrySynchronizeAchievements final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AchievementID;                                     // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_AchievementClassData           CallFunc_Map_Find_Value;                           // 0x0028(0x0010)(HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    K2Node_MakeStruct_DataTableRowHandle;              // 0x0040(0x0010)(NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CallFunc_GetDataTableRowNames_OutRowNames;         // 0x0058(0x0010)(ReferenceParm)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_AchievementData                CallFunc_GetDataTableRowFromName_OutRow;           // 0x0070(0x0004)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0075(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_76[0x2];                                       // 0x0076(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Map_Find_Value_1;                         // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_1;                   // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_1;        // 0x0085(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_TrySynchronizeAchievements) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_TrySynchronizeAchievements");
static_assert(sizeof(GI_SinglePlayer_C_TrySynchronizeAchievements) == 0x000088, "Wrong size on GI_SinglePlayer_C_TrySynchronizeAchievements");
static_assert(offsetof(GI_SinglePlayer_C_TrySynchronizeAchievements, Result) == 0x000000, "Member 'GI_SinglePlayer_C_TrySynchronizeAchievements::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TrySynchronizeAchievements, AchievementID) == 0x000004, "Member 'GI_SinglePlayer_C_TrySynchronizeAchievements::AchievementID' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TrySynchronizeAchievements, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'GI_SinglePlayer_C_TrySynchronizeAchievements::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TrySynchronizeAchievements, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'GI_SinglePlayer_C_TrySynchronizeAchievements::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TrySynchronizeAchievements, CallFunc_GetPlayerController_ReturnValue) == 0x000018, "Member 'GI_SinglePlayer_C_TrySynchronizeAchievements::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TrySynchronizeAchievements, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'GI_SinglePlayer_C_TrySynchronizeAchievements::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TrySynchronizeAchievements, CallFunc_Map_Find_Value) == 0x000028, "Member 'GI_SinglePlayer_C_TrySynchronizeAchievements::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TrySynchronizeAchievements, CallFunc_Map_Find_ReturnValue) == 0x000038, "Member 'GI_SinglePlayer_C_TrySynchronizeAchievements::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TrySynchronizeAchievements, K2Node_MakeStruct_DataTableRowHandle) == 0x000040, "Member 'GI_SinglePlayer_C_TrySynchronizeAchievements::K2Node_MakeStruct_DataTableRowHandle' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TrySynchronizeAchievements, CallFunc_Array_Length_ReturnValue) == 0x000050, "Member 'GI_SinglePlayer_C_TrySynchronizeAchievements::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TrySynchronizeAchievements, CallFunc_GetDataTableRowNames_OutRowNames) == 0x000058, "Member 'GI_SinglePlayer_C_TrySynchronizeAchievements::CallFunc_GetDataTableRowNames_OutRowNames' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TrySynchronizeAchievements, CallFunc_Array_Get_Item) == 0x000068, "Member 'GI_SinglePlayer_C_TrySynchronizeAchievements::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TrySynchronizeAchievements, CallFunc_GetDataTableRowFromName_OutRow) == 0x000070, "Member 'GI_SinglePlayer_C_TrySynchronizeAchievements::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TrySynchronizeAchievements, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000074, "Member 'GI_SinglePlayer_C_TrySynchronizeAchievements::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TrySynchronizeAchievements, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000075, "Member 'GI_SinglePlayer_C_TrySynchronizeAchievements::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TrySynchronizeAchievements, CallFunc_Array_Length_ReturnValue_1) == 0x000078, "Member 'GI_SinglePlayer_C_TrySynchronizeAchievements::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TrySynchronizeAchievements, CallFunc_Less_IntInt_ReturnValue) == 0x00007C, "Member 'GI_SinglePlayer_C_TrySynchronizeAchievements::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TrySynchronizeAchievements, CallFunc_Map_Find_Value_1) == 0x000080, "Member 'GI_SinglePlayer_C_TrySynchronizeAchievements::CallFunc_Map_Find_Value_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TrySynchronizeAchievements, CallFunc_Map_Find_ReturnValue_1) == 0x000084, "Member 'GI_SinglePlayer_C_TrySynchronizeAchievements::CallFunc_Map_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TrySynchronizeAchievements, CallFunc_GreaterEqual_IntInt_ReturnValue_1) == 0x000085, "Member 'GI_SinglePlayer_C_TrySynchronizeAchievements::CallFunc_GreaterEqual_IntInt_ReturnValue_1' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.TryCompleteBinaryAchievement
// 0x0030 (0x0030 - 0x0000)
struct GI_SinglePlayer_C_TryCompleteBinaryAchievement final
{
public:
	struct FDataTableRowHandle                    AchievementHandle;                                 // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	bool                                          Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0014(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_AchievementData                CallFunc_GetDataTableRowFromName_OutRow;           // 0x0020(0x0004)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Map_Find_Value;                           // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_TryCompleteBinaryAchievement) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_TryCompleteBinaryAchievement");
static_assert(sizeof(GI_SinglePlayer_C_TryCompleteBinaryAchievement) == 0x000030, "Wrong size on GI_SinglePlayer_C_TryCompleteBinaryAchievement");
static_assert(offsetof(GI_SinglePlayer_C_TryCompleteBinaryAchievement, AchievementHandle) == 0x000000, "Member 'GI_SinglePlayer_C_TryCompleteBinaryAchievement::AchievementHandle' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryCompleteBinaryAchievement, Result) == 0x000010, "Member 'GI_SinglePlayer_C_TryCompleteBinaryAchievement::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryCompleteBinaryAchievement, Temp_int_Variable) == 0x000014, "Member 'GI_SinglePlayer_C_TryCompleteBinaryAchievement::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryCompleteBinaryAchievement, CallFunc_GetPlayerController_ReturnValue) == 0x000018, "Member 'GI_SinglePlayer_C_TryCompleteBinaryAchievement::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryCompleteBinaryAchievement, CallFunc_GetDataTableRowFromName_OutRow) == 0x000020, "Member 'GI_SinglePlayer_C_TryCompleteBinaryAchievement::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryCompleteBinaryAchievement, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000024, "Member 'GI_SinglePlayer_C_TryCompleteBinaryAchievement::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryCompleteBinaryAchievement, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000025, "Member 'GI_SinglePlayer_C_TryCompleteBinaryAchievement::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryCompleteBinaryAchievement, CallFunc_Map_Find_Value) == 0x000028, "Member 'GI_SinglePlayer_C_TryCompleteBinaryAchievement::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryCompleteBinaryAchievement, CallFunc_Map_Find_ReturnValue) == 0x00002C, "Member 'GI_SinglePlayer_C_TryCompleteBinaryAchievement::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryCompleteBinaryAchievement, CallFunc_Less_IntInt_ReturnValue) == 0x00002D, "Member 'GI_SinglePlayer_C_TryCompleteBinaryAchievement::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.TryIncrementOrderedAchievement
// 0x0040 (0x0040 - 0x0000)
struct GI_SinglePlayer_C_TryIncrementOrderedAchievement final
{
public:
	struct FDataTableRowHandle                    AchievementHandle;                                 // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	bool                                          Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxCount;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NewCount;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentCount;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_AchievementData                CallFunc_GetDataTableRowFromName_OutRow;           // 0x0028(0x0004)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F[0x1];                                       // 0x002F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Map_Find_Value;                           // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_TryIncrementOrderedAchievement) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_TryIncrementOrderedAchievement");
static_assert(sizeof(GI_SinglePlayer_C_TryIncrementOrderedAchievement) == 0x000040, "Wrong size on GI_SinglePlayer_C_TryIncrementOrderedAchievement");
static_assert(offsetof(GI_SinglePlayer_C_TryIncrementOrderedAchievement, AchievementHandle) == 0x000000, "Member 'GI_SinglePlayer_C_TryIncrementOrderedAchievement::AchievementHandle' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryIncrementOrderedAchievement, Result) == 0x000010, "Member 'GI_SinglePlayer_C_TryIncrementOrderedAchievement::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryIncrementOrderedAchievement, MaxCount) == 0x000014, "Member 'GI_SinglePlayer_C_TryIncrementOrderedAchievement::MaxCount' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryIncrementOrderedAchievement, NewCount) == 0x000018, "Member 'GI_SinglePlayer_C_TryIncrementOrderedAchievement::NewCount' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryIncrementOrderedAchievement, CurrentCount) == 0x00001C, "Member 'GI_SinglePlayer_C_TryIncrementOrderedAchievement::CurrentCount' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryIncrementOrderedAchievement, CallFunc_GetPlayerController_ReturnValue) == 0x000020, "Member 'GI_SinglePlayer_C_TryIncrementOrderedAchievement::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryIncrementOrderedAchievement, CallFunc_GetDataTableRowFromName_OutRow) == 0x000028, "Member 'GI_SinglePlayer_C_TryIncrementOrderedAchievement::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryIncrementOrderedAchievement, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x00002C, "Member 'GI_SinglePlayer_C_TryIncrementOrderedAchievement::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryIncrementOrderedAchievement, CallFunc_Less_IntInt_ReturnValue) == 0x00002D, "Member 'GI_SinglePlayer_C_TryIncrementOrderedAchievement::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryIncrementOrderedAchievement, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00002E, "Member 'GI_SinglePlayer_C_TryIncrementOrderedAchievement::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryIncrementOrderedAchievement, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'GI_SinglePlayer_C_TryIncrementOrderedAchievement::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryIncrementOrderedAchievement, CallFunc_Greater_IntInt_ReturnValue) == 0x000034, "Member 'GI_SinglePlayer_C_TryIncrementOrderedAchievement::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryIncrementOrderedAchievement, CallFunc_Map_Find_Value) == 0x000038, "Member 'GI_SinglePlayer_C_TryIncrementOrderedAchievement::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryIncrementOrderedAchievement, CallFunc_Map_Find_ReturnValue) == 0x00003C, "Member 'GI_SinglePlayer_C_TryIncrementOrderedAchievement::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.HasCompletedGameEvent
// 0x0018 (0x0018 - 0x0000)
struct GI_SinglePlayer_C_HasCompletedGameEvent final
{
public:
	struct FDataTableRowHandle                    GameEventHandle;                                   // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	bool                                          Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasCompletedTutorial_Result;              // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_1;    // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasCompletedAchievement_Result;           // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasCompletedStoryQuest_Completed;         // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_2;    // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_HasCompletedGameEvent) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_HasCompletedGameEvent");
static_assert(sizeof(GI_SinglePlayer_C_HasCompletedGameEvent) == 0x000018, "Wrong size on GI_SinglePlayer_C_HasCompletedGameEvent");
static_assert(offsetof(GI_SinglePlayer_C_HasCompletedGameEvent, GameEventHandle) == 0x000000, "Member 'GI_SinglePlayer_C_HasCompletedGameEvent::GameEventHandle' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_HasCompletedGameEvent, Result) == 0x000010, "Member 'GI_SinglePlayer_C_HasCompletedGameEvent::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_HasCompletedGameEvent, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000011, "Member 'GI_SinglePlayer_C_HasCompletedGameEvent::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_HasCompletedGameEvent, CallFunc_HasCompletedTutorial_Result) == 0x000012, "Member 'GI_SinglePlayer_C_HasCompletedGameEvent::CallFunc_HasCompletedTutorial_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_HasCompletedGameEvent, CallFunc_EqualEqual_ObjectObject_ReturnValue_1) == 0x000013, "Member 'GI_SinglePlayer_C_HasCompletedGameEvent::CallFunc_EqualEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_HasCompletedGameEvent, CallFunc_HasCompletedAchievement_Result) == 0x000014, "Member 'GI_SinglePlayer_C_HasCompletedGameEvent::CallFunc_HasCompletedAchievement_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_HasCompletedGameEvent, CallFunc_HasCompletedStoryQuest_Completed) == 0x000015, "Member 'GI_SinglePlayer_C_HasCompletedGameEvent::CallFunc_HasCompletedStoryQuest_Completed' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_HasCompletedGameEvent, CallFunc_EqualEqual_ObjectObject_ReturnValue_2) == 0x000016, "Member 'GI_SinglePlayer_C_HasCompletedGameEvent::CallFunc_EqualEqual_ObjectObject_ReturnValue_2' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.TryCompleteGameEvents
// 0x0038 (0x0038 - 0x0000)
struct GI_SinglePlayer_C_TryCompleteGameEvents final
{
public:
	TArray<struct FDataTableRowHandle>            GameEvents;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    CallFunc_Array_Get_Item;                           // 0x0020(0x0010)(NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_TryCompleteGameEvents) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_TryCompleteGameEvents");
static_assert(sizeof(GI_SinglePlayer_C_TryCompleteGameEvents) == 0x000038, "Wrong size on GI_SinglePlayer_C_TryCompleteGameEvents");
static_assert(offsetof(GI_SinglePlayer_C_TryCompleteGameEvents, GameEvents) == 0x000000, "Member 'GI_SinglePlayer_C_TryCompleteGameEvents::GameEvents' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryCompleteGameEvents, CallFunc_Array_Length_ReturnValue) == 0x000010, "Member 'GI_SinglePlayer_C_TryCompleteGameEvents::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryCompleteGameEvents, Temp_int_Array_Index_Variable) == 0x000014, "Member 'GI_SinglePlayer_C_TryCompleteGameEvents::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryCompleteGameEvents, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'GI_SinglePlayer_C_TryCompleteGameEvents::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryCompleteGameEvents, CallFunc_Array_Get_Item) == 0x000020, "Member 'GI_SinglePlayer_C_TryCompleteGameEvents::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryCompleteGameEvents, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'GI_SinglePlayer_C_TryCompleteGameEvents::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryCompleteGameEvents, CallFunc_Add_IntInt_ReturnValue) == 0x000034, "Member 'GI_SinglePlayer_C_TryCompleteGameEvents::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.SetGameEventState
// 0x0030 (0x0030 - 0x0000)
struct GI_SinglePlayer_C_SetGameEventState final
{
public:
	struct FDataTableRowHandle                    GameEventHandle;                                   // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	bool                                          State;                                             // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryCompleteTutorial_Result;               // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_1;    // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryIncrementOrderedAchievement_Result;    // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryCompleteBinaryAchievement_Result;      // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_AchievementData                CallFunc_GetDataTableRowFromName_OutRow;           // 0x0018(0x0004)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_2;    // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_SetCompletedStoryQuest_LogString;         // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_SetGameEventState) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_SetGameEventState");
static_assert(sizeof(GI_SinglePlayer_C_SetGameEventState) == 0x000030, "Wrong size on GI_SinglePlayer_C_SetGameEventState");
static_assert(offsetof(GI_SinglePlayer_C_SetGameEventState, GameEventHandle) == 0x000000, "Member 'GI_SinglePlayer_C_SetGameEventState::GameEventHandle' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetGameEventState, State) == 0x000010, "Member 'GI_SinglePlayer_C_SetGameEventState::State' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetGameEventState, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000011, "Member 'GI_SinglePlayer_C_SetGameEventState::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetGameEventState, CallFunc_TryCompleteTutorial_Result) == 0x000012, "Member 'GI_SinglePlayer_C_SetGameEventState::CallFunc_TryCompleteTutorial_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetGameEventState, CallFunc_EqualEqual_ObjectObject_ReturnValue_1) == 0x000013, "Member 'GI_SinglePlayer_C_SetGameEventState::CallFunc_EqualEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetGameEventState, CallFunc_TryIncrementOrderedAchievement_Result) == 0x000014, "Member 'GI_SinglePlayer_C_SetGameEventState::CallFunc_TryIncrementOrderedAchievement_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetGameEventState, CallFunc_TryCompleteBinaryAchievement_Result) == 0x000015, "Member 'GI_SinglePlayer_C_SetGameEventState::CallFunc_TryCompleteBinaryAchievement_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetGameEventState, CallFunc_GetDataTableRowFromName_OutRow) == 0x000018, "Member 'GI_SinglePlayer_C_SetGameEventState::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetGameEventState, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x00001C, "Member 'GI_SinglePlayer_C_SetGameEventState::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetGameEventState, CallFunc_EqualEqual_ObjectObject_ReturnValue_2) == 0x00001D, "Member 'GI_SinglePlayer_C_SetGameEventState::CallFunc_EqualEqual_ObjectObject_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetGameEventState, CallFunc_Greater_IntInt_ReturnValue) == 0x00001E, "Member 'GI_SinglePlayer_C_SetGameEventState::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetGameEventState, CallFunc_SetCompletedStoryQuest_LogString) == 0x000020, "Member 'GI_SinglePlayer_C_SetGameEventState::CallFunc_SetCompletedStoryQuest_LogString' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.ToggleGameEventState
// 0x0030 (0x0030 - 0x0000)
struct GI_SinglePlayer_C_ToggleGameEventState final
{
public:
	struct FDataTableRowHandle                    GameEventHandle;                                   // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryCompleteTutorial_Result;               // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryCompleteBinaryAchievement_Result;      // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_1;    // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasCompletedStoryQuest_Completed;         // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_SetCompletedStoryQuest_LogString;         // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_2;    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_ToggleGameEventState) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_ToggleGameEventState");
static_assert(sizeof(GI_SinglePlayer_C_ToggleGameEventState) == 0x000030, "Wrong size on GI_SinglePlayer_C_ToggleGameEventState");
static_assert(offsetof(GI_SinglePlayer_C_ToggleGameEventState, GameEventHandle) == 0x000000, "Member 'GI_SinglePlayer_C_ToggleGameEventState::GameEventHandle' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ToggleGameEventState, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000010, "Member 'GI_SinglePlayer_C_ToggleGameEventState::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ToggleGameEventState, CallFunc_TryCompleteTutorial_Result) == 0x000011, "Member 'GI_SinglePlayer_C_ToggleGameEventState::CallFunc_TryCompleteTutorial_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ToggleGameEventState, CallFunc_TryCompleteBinaryAchievement_Result) == 0x000012, "Member 'GI_SinglePlayer_C_ToggleGameEventState::CallFunc_TryCompleteBinaryAchievement_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ToggleGameEventState, CallFunc_EqualEqual_ObjectObject_ReturnValue_1) == 0x000013, "Member 'GI_SinglePlayer_C_ToggleGameEventState::CallFunc_EqualEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ToggleGameEventState, CallFunc_HasCompletedStoryQuest_Completed) == 0x000014, "Member 'GI_SinglePlayer_C_ToggleGameEventState::CallFunc_HasCompletedStoryQuest_Completed' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ToggleGameEventState, CallFunc_Not_PreBool_ReturnValue) == 0x000015, "Member 'GI_SinglePlayer_C_ToggleGameEventState::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ToggleGameEventState, CallFunc_SetCompletedStoryQuest_LogString) == 0x000018, "Member 'GI_SinglePlayer_C_ToggleGameEventState::CallFunc_SetCompletedStoryQuest_LogString' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ToggleGameEventState, CallFunc_EqualEqual_ObjectObject_ReturnValue_2) == 0x000028, "Member 'GI_SinglePlayer_C_ToggleGameEventState::CallFunc_EqualEqual_ObjectObject_ReturnValue_2' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.TryIncrementUnorderedAchievement
// 0x0080 (0x0080 - 0x0000)
struct GI_SinglePlayer_C_TryIncrementUnorderedAchievement final
{
public:
	struct FDataTableRowHandle                    AchievementHandle;                                 // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	class UClass*                                 SourceClass;                                       // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_AchievementClassData           CurrentClassData;                                  // 0x0020(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	int32                                         MaxCount;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NewCount;                                          // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentCount;                                      // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_AchievementData                CallFunc_GetDataTableRowFromName_OutRow;           // 0x0040(0x0004)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5B[0x5];                                       // 0x005B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_AchievementClassData           CallFunc_Map_Find_Value;                           // 0x0060(0x0010)(HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_TryIncrementUnorderedAchievement) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_TryIncrementUnorderedAchievement");
static_assert(sizeof(GI_SinglePlayer_C_TryIncrementUnorderedAchievement) == 0x000080, "Wrong size on GI_SinglePlayer_C_TryIncrementUnorderedAchievement");
static_assert(offsetof(GI_SinglePlayer_C_TryIncrementUnorderedAchievement, AchievementHandle) == 0x000000, "Member 'GI_SinglePlayer_C_TryIncrementUnorderedAchievement::AchievementHandle' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryIncrementUnorderedAchievement, SourceClass) == 0x000010, "Member 'GI_SinglePlayer_C_TryIncrementUnorderedAchievement::SourceClass' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryIncrementUnorderedAchievement, Result) == 0x000018, "Member 'GI_SinglePlayer_C_TryIncrementUnorderedAchievement::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryIncrementUnorderedAchievement, CurrentClassData) == 0x000020, "Member 'GI_SinglePlayer_C_TryIncrementUnorderedAchievement::CurrentClassData' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryIncrementUnorderedAchievement, MaxCount) == 0x000030, "Member 'GI_SinglePlayer_C_TryIncrementUnorderedAchievement::MaxCount' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryIncrementUnorderedAchievement, NewCount) == 0x000034, "Member 'GI_SinglePlayer_C_TryIncrementUnorderedAchievement::NewCount' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryIncrementUnorderedAchievement, CurrentCount) == 0x000038, "Member 'GI_SinglePlayer_C_TryIncrementUnorderedAchievement::CurrentCount' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryIncrementUnorderedAchievement, CallFunc_Greater_IntInt_ReturnValue) == 0x00003C, "Member 'GI_SinglePlayer_C_TryIncrementUnorderedAchievement::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryIncrementUnorderedAchievement, CallFunc_GetDataTableRowFromName_OutRow) == 0x000040, "Member 'GI_SinglePlayer_C_TryIncrementUnorderedAchievement::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryIncrementUnorderedAchievement, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000044, "Member 'GI_SinglePlayer_C_TryIncrementUnorderedAchievement::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryIncrementUnorderedAchievement, CallFunc_Array_Length_ReturnValue) == 0x000048, "Member 'GI_SinglePlayer_C_TryIncrementUnorderedAchievement::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryIncrementUnorderedAchievement, CallFunc_Array_Add_ReturnValue) == 0x00004C, "Member 'GI_SinglePlayer_C_TryIncrementUnorderedAchievement::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryIncrementUnorderedAchievement, CallFunc_GetPlayerController_ReturnValue) == 0x000050, "Member 'GI_SinglePlayer_C_TryIncrementUnorderedAchievement::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryIncrementUnorderedAchievement, CallFunc_Array_Contains_ReturnValue) == 0x000058, "Member 'GI_SinglePlayer_C_TryIncrementUnorderedAchievement::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryIncrementUnorderedAchievement, CallFunc_Not_PreBool_ReturnValue) == 0x000059, "Member 'GI_SinglePlayer_C_TryIncrementUnorderedAchievement::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryIncrementUnorderedAchievement, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00005A, "Member 'GI_SinglePlayer_C_TryIncrementUnorderedAchievement::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryIncrementUnorderedAchievement, CallFunc_Map_Find_Value) == 0x000060, "Member 'GI_SinglePlayer_C_TryIncrementUnorderedAchievement::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryIncrementUnorderedAchievement, CallFunc_Map_Find_ReturnValue) == 0x000070, "Member 'GI_SinglePlayer_C_TryIncrementUnorderedAchievement::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryIncrementUnorderedAchievement, CallFunc_Array_Length_ReturnValue_1) == 0x000074, "Member 'GI_SinglePlayer_C_TryIncrementUnorderedAchievement::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryIncrementUnorderedAchievement, CallFunc_Less_IntInt_ReturnValue) == 0x000078, "Member 'GI_SinglePlayer_C_TryIncrementUnorderedAchievement::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.IsGameCountdownCritical
// 0x000C (0x000C - 0x0000)
struct GI_SinglePlayer_C_IsGameCountdownCritical final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetGameCountdownSecondsRemaining_Result;  // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_IsGameCountdownCritical) == 0x000004, "Wrong alignment on GI_SinglePlayer_C_IsGameCountdownCritical");
static_assert(sizeof(GI_SinglePlayer_C_IsGameCountdownCritical) == 0x00000C, "Wrong size on GI_SinglePlayer_C_IsGameCountdownCritical");
static_assert(offsetof(GI_SinglePlayer_C_IsGameCountdownCritical, Result) == 0x000000, "Member 'GI_SinglePlayer_C_IsGameCountdownCritical::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_IsGameCountdownCritical, CallFunc_GetGameCountdownSecondsRemaining_Result) == 0x000004, "Member 'GI_SinglePlayer_C_IsGameCountdownCritical::CallFunc_GetGameCountdownSecondsRemaining_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_IsGameCountdownCritical, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000008, "Member 'GI_SinglePlayer_C_IsGameCountdownCritical::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.InitializeGameCountdownTimer
// 0x0014 (0x0014 - 0x0000)
struct GI_SinglePlayer_C_InitializeGameCountdownTimer final
{
public:
	struct FSTRUCT_MissionDifficultySettings      CallFunc_GetMissionDifficultySettings_Settings;    // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TryResumeGameCountdownTimer_Result;       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_InitializeGameCountdownTimer) == 0x000004, "Wrong alignment on GI_SinglePlayer_C_InitializeGameCountdownTimer");
static_assert(sizeof(GI_SinglePlayer_C_InitializeGameCountdownTimer) == 0x000014, "Wrong size on GI_SinglePlayer_C_InitializeGameCountdownTimer");
static_assert(offsetof(GI_SinglePlayer_C_InitializeGameCountdownTimer, CallFunc_GetMissionDifficultySettings_Settings) == 0x000000, "Member 'GI_SinglePlayer_C_InitializeGameCountdownTimer::CallFunc_GetMissionDifficultySettings_Settings' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_InitializeGameCountdownTimer, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000008, "Member 'GI_SinglePlayer_C_InitializeGameCountdownTimer::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_InitializeGameCountdownTimer, CallFunc_Multiply_IntFloat_ReturnValue) == 0x00000C, "Member 'GI_SinglePlayer_C_InitializeGameCountdownTimer::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_InitializeGameCountdownTimer, CallFunc_TryResumeGameCountdownTimer_Result) == 0x000010, "Member 'GI_SinglePlayer_C_InitializeGameCountdownTimer::CallFunc_TryResumeGameCountdownTimer_Result' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.TryResumeGameCountdownTimer
// 0x000C (0x000C - 0x0000)
struct GI_SinglePlayer_C_TryResumeGameCountdownTimer final
{
public:
	bool                                          NotifyPeriodicUpdate;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Result;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NextPeriodicUpdateSecondsRemaining;                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_TryResumeGameCountdownTimer) == 0x000004, "Wrong alignment on GI_SinglePlayer_C_TryResumeGameCountdownTimer");
static_assert(sizeof(GI_SinglePlayer_C_TryResumeGameCountdownTimer) == 0x00000C, "Wrong size on GI_SinglePlayer_C_TryResumeGameCountdownTimer");
static_assert(offsetof(GI_SinglePlayer_C_TryResumeGameCountdownTimer, NotifyPeriodicUpdate) == 0x000000, "Member 'GI_SinglePlayer_C_TryResumeGameCountdownTimer::NotifyPeriodicUpdate' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryResumeGameCountdownTimer, Result) == 0x000001, "Member 'GI_SinglePlayer_C_TryResumeGameCountdownTimer::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryResumeGameCountdownTimer, NextPeriodicUpdateSecondsRemaining) == 0x000004, "Member 'GI_SinglePlayer_C_TryResumeGameCountdownTimer::NextPeriodicUpdateSecondsRemaining' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryResumeGameCountdownTimer, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000008, "Member 'GI_SinglePlayer_C_TryResumeGameCountdownTimer::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.TryStopGameCountdownTimer
// 0x000C (0x000C - 0x0000)
struct GI_SinglePlayer_C_TryStopGameCountdownTimer final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetGameCountdownSecondsRemaining_Result;  // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_TryStopGameCountdownTimer) == 0x000004, "Wrong alignment on GI_SinglePlayer_C_TryStopGameCountdownTimer");
static_assert(sizeof(GI_SinglePlayer_C_TryStopGameCountdownTimer) == 0x00000C, "Wrong size on GI_SinglePlayer_C_TryStopGameCountdownTimer");
static_assert(offsetof(GI_SinglePlayer_C_TryStopGameCountdownTimer, Result) == 0x000000, "Member 'GI_SinglePlayer_C_TryStopGameCountdownTimer::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStopGameCountdownTimer, CallFunc_GetGameCountdownSecondsRemaining_Result) == 0x000004, "Member 'GI_SinglePlayer_C_TryStopGameCountdownTimer::CallFunc_GetGameCountdownSecondsRemaining_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStopGameCountdownTimer, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000008, "Member 'GI_SinglePlayer_C_TryStopGameCountdownTimer::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.ForceResumeGameCountdownTimer
// 0x0050 (0x0050 - 0x0000)
struct GI_SinglePlayer_C_ForceResumeGameCountdownTimer final
{
public:
	bool                                          NotifyPeriodicUpdate;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NextPeriodicUpdateSecondsRemaining;                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x000C(0x0010)(ZeroConstructor, NoDestructor)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0028(0x0008)(NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetPlayTimeInSeconds_ReturnValue;         // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue_1;                       // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGameCountdownSecondsRemaining_Result;  // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_ForceResumeGameCountdownTimer) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_ForceResumeGameCountdownTimer");
static_assert(sizeof(GI_SinglePlayer_C_ForceResumeGameCountdownTimer) == 0x000050, "Wrong size on GI_SinglePlayer_C_ForceResumeGameCountdownTimer");
static_assert(offsetof(GI_SinglePlayer_C_ForceResumeGameCountdownTimer, NotifyPeriodicUpdate) == 0x000000, "Member 'GI_SinglePlayer_C_ForceResumeGameCountdownTimer::NotifyPeriodicUpdate' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ForceResumeGameCountdownTimer, NextPeriodicUpdateSecondsRemaining) == 0x000004, "Member 'GI_SinglePlayer_C_ForceResumeGameCountdownTimer::NextPeriodicUpdateSecondsRemaining' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ForceResumeGameCountdownTimer, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000008, "Member 'GI_SinglePlayer_C_ForceResumeGameCountdownTimer::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ForceResumeGameCountdownTimer, K2Node_CreateDelegate_OutputDelegate) == 0x00000C, "Member 'GI_SinglePlayer_C_ForceResumeGameCountdownTimer::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ForceResumeGameCountdownTimer, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00001C, "Member 'GI_SinglePlayer_C_ForceResumeGameCountdownTimer::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ForceResumeGameCountdownTimer, CallFunc_FMax_ReturnValue) == 0x000020, "Member 'GI_SinglePlayer_C_ForceResumeGameCountdownTimer::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ForceResumeGameCountdownTimer, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000028, "Member 'GI_SinglePlayer_C_ForceResumeGameCountdownTimer::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ForceResumeGameCountdownTimer, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000030, "Member 'GI_SinglePlayer_C_ForceResumeGameCountdownTimer::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ForceResumeGameCountdownTimer, CallFunc_GetPlayTimeInSeconds_ReturnValue) == 0x000034, "Member 'GI_SinglePlayer_C_ForceResumeGameCountdownTimer::CallFunc_GetPlayTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ForceResumeGameCountdownTimer, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000038, "Member 'GI_SinglePlayer_C_ForceResumeGameCountdownTimer::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ForceResumeGameCountdownTimer, CallFunc_FMax_ReturnValue_1) == 0x00003C, "Member 'GI_SinglePlayer_C_ForceResumeGameCountdownTimer::CallFunc_FMax_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ForceResumeGameCountdownTimer, CallFunc_FTrunc_ReturnValue) == 0x000040, "Member 'GI_SinglePlayer_C_ForceResumeGameCountdownTimer::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ForceResumeGameCountdownTimer, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000044, "Member 'GI_SinglePlayer_C_ForceResumeGameCountdownTimer::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ForceResumeGameCountdownTimer, CallFunc_GetGameCountdownSecondsRemaining_Result) == 0x000048, "Member 'GI_SinglePlayer_C_ForceResumeGameCountdownTimer::CallFunc_GetGameCountdownSecondsRemaining_Result' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.GetGameCountdownSecondsRemaining
// 0x001C (0x001C - 0x0000)
struct GI_SinglePlayer_C_GetGameCountdownSecondsRemaining final
{
public:
	float                                         Result;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ElapsedTimeSinceStart;                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetPlayTimeInSeconds_ReturnValue;         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_GetGameCountdownSecondsRemaining) == 0x000004, "Wrong alignment on GI_SinglePlayer_C_GetGameCountdownSecondsRemaining");
static_assert(sizeof(GI_SinglePlayer_C_GetGameCountdownSecondsRemaining) == 0x00001C, "Wrong size on GI_SinglePlayer_C_GetGameCountdownSecondsRemaining");
static_assert(offsetof(GI_SinglePlayer_C_GetGameCountdownSecondsRemaining, Result) == 0x000000, "Member 'GI_SinglePlayer_C_GetGameCountdownSecondsRemaining::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetGameCountdownSecondsRemaining, ElapsedTimeSinceStart) == 0x000004, "Member 'GI_SinglePlayer_C_GetGameCountdownSecondsRemaining::ElapsedTimeSinceStart' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetGameCountdownSecondsRemaining, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000008, "Member 'GI_SinglePlayer_C_GetGameCountdownSecondsRemaining::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetGameCountdownSecondsRemaining, CallFunc_FMax_ReturnValue) == 0x00000C, "Member 'GI_SinglePlayer_C_GetGameCountdownSecondsRemaining::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetGameCountdownSecondsRemaining, CallFunc_GetPlayTimeInSeconds_ReturnValue) == 0x000010, "Member 'GI_SinglePlayer_C_GetGameCountdownSecondsRemaining::CallFunc_GetPlayTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetGameCountdownSecondsRemaining, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000014, "Member 'GI_SinglePlayer_C_GetGameCountdownSecondsRemaining::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetGameCountdownSecondsRemaining, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000018, "Member 'GI_SinglePlayer_C_GetGameCountdownSecondsRemaining::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetGameCountdownSecondsRemaining, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000019, "Member 'GI_SinglePlayer_C_GetGameCountdownSecondsRemaining::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.GetKeycode
// 0x0028 (0x0028 - 0x0000)
struct GI_SinglePlayer_C_GetKeycode final
{
public:
	class FName                                   Tag;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Result;                                            // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RandomKeycode;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_KeycodeSettings                CallFunc_GetDataTableRowFromName_OutRow;           // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Map_Find_Value;                           // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_GetKeycode) == 0x000004, "Wrong alignment on GI_SinglePlayer_C_GetKeycode");
static_assert(sizeof(GI_SinglePlayer_C_GetKeycode) == 0x000028, "Wrong size on GI_SinglePlayer_C_GetKeycode");
static_assert(offsetof(GI_SinglePlayer_C_GetKeycode, Tag) == 0x000000, "Member 'GI_SinglePlayer_C_GetKeycode::Tag' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetKeycode, Result) == 0x000008, "Member 'GI_SinglePlayer_C_GetKeycode::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetKeycode, RandomKeycode) == 0x00000C, "Member 'GI_SinglePlayer_C_GetKeycode::RandomKeycode' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetKeycode, CallFunc_Greater_IntInt_ReturnValue) == 0x000010, "Member 'GI_SinglePlayer_C_GetKeycode::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetKeycode, CallFunc_GetDataTableRowFromName_OutRow) == 0x000014, "Member 'GI_SinglePlayer_C_GetKeycode::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetKeycode, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x00001C, "Member 'GI_SinglePlayer_C_GetKeycode::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetKeycode, CallFunc_Map_Find_Value) == 0x000020, "Member 'GI_SinglePlayer_C_GetKeycode::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetKeycode, CallFunc_Map_Find_ReturnValue) == 0x000024, "Member 'GI_SinglePlayer_C_GetKeycode::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.GetUniqueRandomPuzzleName
// 0x0130 (0x0130 - 0x0000)
struct GI_SinglePlayer_C_GetUniqueRandomPuzzleName final
{
public:
	class UDataTable*                             DataTable;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ContextActor;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Result;                                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ChosenPuzzleName;                                  // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ChosenIndex;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRandomStream                          RandomStream;                                      // 0x0024(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           AvailablePuzzleNames;                              // 0x0030(0x0010)(Edit, BlueprintVisible)
	TSet<class FName>                             PuzzleNames;                                       // 0x0040(0x0050)(Edit, BlueprintVisible)
	TArray<class FName>                           CallFunc_GetDataTableRowNames_OutRowNames;         // 0x0090(0x0010)(ReferenceParm)
	TArray<class FName>                           CallFunc_Set_ToArray_Result;                       // 0x00A0(0x0010)(ReferenceParm)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomIntegerInRangeFromStream_ReturnValue; // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetPathName_ReturnValue;                  // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_CreateRandomSeedForContext_Seed;          // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRandomStream                          CallFunc_MakeRandomStream_ReturnValue;             // 0x00D4(0x0008)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class FName>                             CallFunc_Set_Difference_Result;                    // 0x00E0(0x0050)()
};
static_assert(alignof(GI_SinglePlayer_C_GetUniqueRandomPuzzleName) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_GetUniqueRandomPuzzleName");
static_assert(sizeof(GI_SinglePlayer_C_GetUniqueRandomPuzzleName) == 0x000130, "Wrong size on GI_SinglePlayer_C_GetUniqueRandomPuzzleName");
static_assert(offsetof(GI_SinglePlayer_C_GetUniqueRandomPuzzleName, DataTable) == 0x000000, "Member 'GI_SinglePlayer_C_GetUniqueRandomPuzzleName::DataTable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetUniqueRandomPuzzleName, ContextActor) == 0x000008, "Member 'GI_SinglePlayer_C_GetUniqueRandomPuzzleName::ContextActor' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetUniqueRandomPuzzleName, Result) == 0x000010, "Member 'GI_SinglePlayer_C_GetUniqueRandomPuzzleName::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetUniqueRandomPuzzleName, ChosenPuzzleName) == 0x000018, "Member 'GI_SinglePlayer_C_GetUniqueRandomPuzzleName::ChosenPuzzleName' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetUniqueRandomPuzzleName, ChosenIndex) == 0x000020, "Member 'GI_SinglePlayer_C_GetUniqueRandomPuzzleName::ChosenIndex' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetUniqueRandomPuzzleName, RandomStream) == 0x000024, "Member 'GI_SinglePlayer_C_GetUniqueRandomPuzzleName::RandomStream' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetUniqueRandomPuzzleName, AvailablePuzzleNames) == 0x000030, "Member 'GI_SinglePlayer_C_GetUniqueRandomPuzzleName::AvailablePuzzleNames' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetUniqueRandomPuzzleName, PuzzleNames) == 0x000040, "Member 'GI_SinglePlayer_C_GetUniqueRandomPuzzleName::PuzzleNames' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetUniqueRandomPuzzleName, CallFunc_GetDataTableRowNames_OutRowNames) == 0x000090, "Member 'GI_SinglePlayer_C_GetUniqueRandomPuzzleName::CallFunc_GetDataTableRowNames_OutRowNames' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetUniqueRandomPuzzleName, CallFunc_Set_ToArray_Result) == 0x0000A0, "Member 'GI_SinglePlayer_C_GetUniqueRandomPuzzleName::CallFunc_Set_ToArray_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetUniqueRandomPuzzleName, CallFunc_Array_Get_Item) == 0x0000B0, "Member 'GI_SinglePlayer_C_GetUniqueRandomPuzzleName::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetUniqueRandomPuzzleName, CallFunc_Array_LastIndex_ReturnValue) == 0x0000B8, "Member 'GI_SinglePlayer_C_GetUniqueRandomPuzzleName::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetUniqueRandomPuzzleName, CallFunc_RandomIntegerInRangeFromStream_ReturnValue) == 0x0000BC, "Member 'GI_SinglePlayer_C_GetUniqueRandomPuzzleName::CallFunc_RandomIntegerInRangeFromStream_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetUniqueRandomPuzzleName, CallFunc_GetPathName_ReturnValue) == 0x0000C0, "Member 'GI_SinglePlayer_C_GetUniqueRandomPuzzleName::CallFunc_GetPathName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetUniqueRandomPuzzleName, CallFunc_CreateRandomSeedForContext_Seed) == 0x0000D0, "Member 'GI_SinglePlayer_C_GetUniqueRandomPuzzleName::CallFunc_CreateRandomSeedForContext_Seed' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetUniqueRandomPuzzleName, CallFunc_MakeRandomStream_ReturnValue) == 0x0000D4, "Member 'GI_SinglePlayer_C_GetUniqueRandomPuzzleName::CallFunc_MakeRandomStream_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetUniqueRandomPuzzleName, CallFunc_Set_Difference_Result) == 0x0000E0, "Member 'GI_SinglePlayer_C_GetUniqueRandomPuzzleName::CallFunc_Set_Difference_Result' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.HasCompletedTutorial
// 0x000C (0x000C - 0x0000)
struct GI_SinglePlayer_C_HasCompletedTutorial final
{
public:
	class FName                                   TutorialName;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Set_Contains_ReturnValue;                 // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_HasCompletedTutorial) == 0x000004, "Wrong alignment on GI_SinglePlayer_C_HasCompletedTutorial");
static_assert(sizeof(GI_SinglePlayer_C_HasCompletedTutorial) == 0x00000C, "Wrong size on GI_SinglePlayer_C_HasCompletedTutorial");
static_assert(offsetof(GI_SinglePlayer_C_HasCompletedTutorial, TutorialName) == 0x000000, "Member 'GI_SinglePlayer_C_HasCompletedTutorial::TutorialName' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_HasCompletedTutorial, Result) == 0x000008, "Member 'GI_SinglePlayer_C_HasCompletedTutorial::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_HasCompletedTutorial, CallFunc_Set_Contains_ReturnValue) == 0x000009, "Member 'GI_SinglePlayer_C_HasCompletedTutorial::CallFunc_Set_Contains_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.TryCompleteTutorial
// 0x0030 (0x0030 - 0x0000)
struct GI_SinglePlayer_C_TryCompleteTutorial final
{
public:
	class FName                                   TutorialName;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_TutorialData                   CallFunc_GetDataTableRowFromName_OutRow;           // 0x0010(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasCompletedTutorial_Result;              // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_TryCompleteTutorial) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_TryCompleteTutorial");
static_assert(sizeof(GI_SinglePlayer_C_TryCompleteTutorial) == 0x000030, "Wrong size on GI_SinglePlayer_C_TryCompleteTutorial");
static_assert(offsetof(GI_SinglePlayer_C_TryCompleteTutorial, TutorialName) == 0x000000, "Member 'GI_SinglePlayer_C_TryCompleteTutorial::TutorialName' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryCompleteTutorial, Result) == 0x000008, "Member 'GI_SinglePlayer_C_TryCompleteTutorial::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryCompleteTutorial, CallFunc_NotEqual_NameName_ReturnValue) == 0x000009, "Member 'GI_SinglePlayer_C_TryCompleteTutorial::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryCompleteTutorial, CallFunc_GetDataTableRowFromName_OutRow) == 0x000010, "Member 'GI_SinglePlayer_C_TryCompleteTutorial::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryCompleteTutorial, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000028, "Member 'GI_SinglePlayer_C_TryCompleteTutorial::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryCompleteTutorial, CallFunc_HasCompletedTutorial_Result) == 0x000029, "Member 'GI_SinglePlayer_C_TryCompleteTutorial::CallFunc_HasCompletedTutorial_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryCompleteTutorial, CallFunc_Not_PreBool_ReturnValue) == 0x00002A, "Member 'GI_SinglePlayer_C_TryCompleteTutorial::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.IsPublicAddressMessagePlaying
// 0x0004 (0x0004 - 0x0000)
struct GI_SinglePlayer_C_IsPublicAddressMessagePlaying final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_IsPublicAddressMessagePlaying) == 0x000001, "Wrong alignment on GI_SinglePlayer_C_IsPublicAddressMessagePlaying");
static_assert(sizeof(GI_SinglePlayer_C_IsPublicAddressMessagePlaying) == 0x000004, "Wrong size on GI_SinglePlayer_C_IsPublicAddressMessagePlaying");
static_assert(offsetof(GI_SinglePlayer_C_IsPublicAddressMessagePlaying, Result) == 0x000000, "Member 'GI_SinglePlayer_C_IsPublicAddressMessagePlaying::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_IsPublicAddressMessagePlaying, CallFunc_NotEqual_NameName_ReturnValue) == 0x000001, "Member 'GI_SinglePlayer_C_IsPublicAddressMessagePlaying::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_IsPublicAddressMessagePlaying, CallFunc_IsValid_ReturnValue) == 0x000002, "Member 'GI_SinglePlayer_C_IsPublicAddressMessagePlaying::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_IsPublicAddressMessagePlaying, CallFunc_BooleanAND_ReturnValue) == 0x000003, "Member 'GI_SinglePlayer_C_IsPublicAddressMessagePlaying::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.GetPublicAddressElapsedTime
// 0x0010 (0x0010 - 0x0000)
struct GI_SinglePlayer_C_GetPublicAddressElapsedTime final
{
public:
	float                                         Result;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetPlayTimeInSeconds_ReturnValue;         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_GetPublicAddressElapsedTime) == 0x000004, "Wrong alignment on GI_SinglePlayer_C_GetPublicAddressElapsedTime");
static_assert(sizeof(GI_SinglePlayer_C_GetPublicAddressElapsedTime) == 0x000010, "Wrong size on GI_SinglePlayer_C_GetPublicAddressElapsedTime");
static_assert(offsetof(GI_SinglePlayer_C_GetPublicAddressElapsedTime, Result) == 0x000000, "Member 'GI_SinglePlayer_C_GetPublicAddressElapsedTime::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetPublicAddressElapsedTime, CallFunc_GetPlayTimeInSeconds_ReturnValue) == 0x000004, "Member 'GI_SinglePlayer_C_GetPublicAddressElapsedTime::CallFunc_GetPlayTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetPublicAddressElapsedTime, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000008, "Member 'GI_SinglePlayer_C_GetPublicAddressElapsedTime::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetPublicAddressElapsedTime, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00000C, "Member 'GI_SinglePlayer_C_GetPublicAddressElapsedTime::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.CanPublicAddressReachLocation
// 0x0024 (0x0024 - 0x0000)
struct GI_SinglePlayer_C_CanPublicAddressReachLocation final
{
public:
	struct FVector                                QueryLocation;                                     // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         QueryRadius;                                       // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Square_ReturnValue;                       // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Vector_DistanceSquared_ReturnValue;       // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPublicAddressMessagePlaying_Result;     // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_CanPublicAddressReachLocation) == 0x000004, "Wrong alignment on GI_SinglePlayer_C_CanPublicAddressReachLocation");
static_assert(sizeof(GI_SinglePlayer_C_CanPublicAddressReachLocation) == 0x000024, "Wrong size on GI_SinglePlayer_C_CanPublicAddressReachLocation");
static_assert(offsetof(GI_SinglePlayer_C_CanPublicAddressReachLocation, QueryLocation) == 0x000000, "Member 'GI_SinglePlayer_C_CanPublicAddressReachLocation::QueryLocation' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_CanPublicAddressReachLocation, QueryRadius) == 0x00000C, "Member 'GI_SinglePlayer_C_CanPublicAddressReachLocation::QueryRadius' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_CanPublicAddressReachLocation, Result) == 0x000010, "Member 'GI_SinglePlayer_C_CanPublicAddressReachLocation::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_CanPublicAddressReachLocation, CallFunc_Add_FloatFloat_ReturnValue) == 0x000014, "Member 'GI_SinglePlayer_C_CanPublicAddressReachLocation::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_CanPublicAddressReachLocation, CallFunc_Square_ReturnValue) == 0x000018, "Member 'GI_SinglePlayer_C_CanPublicAddressReachLocation::CallFunc_Square_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_CanPublicAddressReachLocation, CallFunc_Vector_DistanceSquared_ReturnValue) == 0x00001C, "Member 'GI_SinglePlayer_C_CanPublicAddressReachLocation::CallFunc_Vector_DistanceSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_CanPublicAddressReachLocation, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000020, "Member 'GI_SinglePlayer_C_CanPublicAddressReachLocation::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_CanPublicAddressReachLocation, CallFunc_IsPublicAddressMessagePlaying_Result) == 0x000021, "Member 'GI_SinglePlayer_C_CanPublicAddressReachLocation::CallFunc_IsPublicAddressMessagePlaying_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_CanPublicAddressReachLocation, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000022, "Member 'GI_SinglePlayer_C_CanPublicAddressReachLocation::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.CanPlayPublicAddressMessage
// 0x0018 (0x0018 - 0x0000)
struct GI_SinglePlayer_C_CanPlayPublicAddressMessage final
{
public:
	struct FDataTableRowHandle                    MediaHandle;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	bool                                          Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPublicAddressMessagePlaying_Result;     // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_CanPlayPublicAddressMessage) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_CanPlayPublicAddressMessage");
static_assert(sizeof(GI_SinglePlayer_C_CanPlayPublicAddressMessage) == 0x000018, "Wrong size on GI_SinglePlayer_C_CanPlayPublicAddressMessage");
static_assert(offsetof(GI_SinglePlayer_C_CanPlayPublicAddressMessage, MediaHandle) == 0x000000, "Member 'GI_SinglePlayer_C_CanPlayPublicAddressMessage::MediaHandle' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_CanPlayPublicAddressMessage, Result) == 0x000010, "Member 'GI_SinglePlayer_C_CanPlayPublicAddressMessage::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_CanPlayPublicAddressMessage, CallFunc_IsPublicAddressMessagePlaying_Result) == 0x000011, "Member 'GI_SinglePlayer_C_CanPlayPublicAddressMessage::CallFunc_IsPublicAddressMessagePlaying_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_CanPlayPublicAddressMessage, CallFunc_NotEqual_NameName_ReturnValue) == 0x000012, "Member 'GI_SinglePlayer_C_CanPlayPublicAddressMessage::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_CanPlayPublicAddressMessage, CallFunc_IsValid_ReturnValue) == 0x000013, "Member 'GI_SinglePlayer_C_CanPlayPublicAddressMessage::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_CanPlayPublicAddressMessage, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000014, "Member 'GI_SinglePlayer_C_CanPlayPublicAddressMessage::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_CanPlayPublicAddressMessage, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000015, "Member 'GI_SinglePlayer_C_CanPlayPublicAddressMessage::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_CanPlayPublicAddressMessage, CallFunc_BooleanOR_ReturnValue) == 0x000016, "Member 'GI_SinglePlayer_C_CanPlayPublicAddressMessage::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.GetPublicAddressMediaData
// 0x01E0 (0x01E0 - 0x0000)
struct GI_SinglePlayer_C_GetPublicAddressMediaData final
{
public:
	TSoftObjectPtr<class USoundCue>               SoundCue;                                          // 0x0000(0x0028)(Parm, OutParm, HasGetValueTypeHash)
	struct FDataTableRowHandle                    SpeakerHandle;                                     // 0x0028(0x0010)(Parm, OutParm, NoDestructor)
	struct FDataTableRowHandle                    SpeakerRowHandle;                                  // 0x0038(0x0010)(Edit, BlueprintVisible, NoDestructor)
	TSoftObjectPtr<class USoundCue>               AudioCue;                                          // 0x0048(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	ENUM_HackerGender                             CallFunc_GetHackerGender_Result;                   // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_DialogueCaptionObject          CallFunc_GetDataTableRowFromName_OutRow;           // 0x0078(0x0050)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CA[0x6];                                       // 0x00CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x00E0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_DialogueCaptionObject          CallFunc_GetDataTableRowFromName_OutRow_1;         // 0x0100(0x0050)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue_1;    // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_151[0x7];                                      // 0x0151(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_MediaObject                    CallFunc_GetFemaleVersionOfSubtitle_MediaDataStruct; // 0x0158(0x0080)(HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_1;    // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_GetPublicAddressMediaData) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_GetPublicAddressMediaData");
static_assert(sizeof(GI_SinglePlayer_C_GetPublicAddressMediaData) == 0x0001E0, "Wrong size on GI_SinglePlayer_C_GetPublicAddressMediaData");
static_assert(offsetof(GI_SinglePlayer_C_GetPublicAddressMediaData, SoundCue) == 0x000000, "Member 'GI_SinglePlayer_C_GetPublicAddressMediaData::SoundCue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetPublicAddressMediaData, SpeakerHandle) == 0x000028, "Member 'GI_SinglePlayer_C_GetPublicAddressMediaData::SpeakerHandle' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetPublicAddressMediaData, SpeakerRowHandle) == 0x000038, "Member 'GI_SinglePlayer_C_GetPublicAddressMediaData::SpeakerRowHandle' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetPublicAddressMediaData, AudioCue) == 0x000048, "Member 'GI_SinglePlayer_C_GetPublicAddressMediaData::AudioCue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetPublicAddressMediaData, CallFunc_GetHackerGender_Result) == 0x000070, "Member 'GI_SinglePlayer_C_GetPublicAddressMediaData::CallFunc_GetHackerGender_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetPublicAddressMediaData, CallFunc_GetDataTableRowFromName_OutRow) == 0x000078, "Member 'GI_SinglePlayer_C_GetPublicAddressMediaData::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetPublicAddressMediaData, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x0000C8, "Member 'GI_SinglePlayer_C_GetPublicAddressMediaData::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetPublicAddressMediaData, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000C9, "Member 'GI_SinglePlayer_C_GetPublicAddressMediaData::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetPublicAddressMediaData, CallFunc_Conv_NameToString_ReturnValue) == 0x0000D0, "Member 'GI_SinglePlayer_C_GetPublicAddressMediaData::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetPublicAddressMediaData, CallFunc_Concat_StrStr_ReturnValue) == 0x0000E0, "Member 'GI_SinglePlayer_C_GetPublicAddressMediaData::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetPublicAddressMediaData, CallFunc_Conv_StringToName_ReturnValue) == 0x0000F0, "Member 'GI_SinglePlayer_C_GetPublicAddressMediaData::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetPublicAddressMediaData, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x0000F8, "Member 'GI_SinglePlayer_C_GetPublicAddressMediaData::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetPublicAddressMediaData, CallFunc_GetDataTableRowFromName_OutRow_1) == 0x000100, "Member 'GI_SinglePlayer_C_GetPublicAddressMediaData::CallFunc_GetDataTableRowFromName_OutRow_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetPublicAddressMediaData, CallFunc_GetDataTableRowFromName_ReturnValue_1) == 0x000150, "Member 'GI_SinglePlayer_C_GetPublicAddressMediaData::CallFunc_GetDataTableRowFromName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetPublicAddressMediaData, CallFunc_GetFemaleVersionOfSubtitle_MediaDataStruct) == 0x000158, "Member 'GI_SinglePlayer_C_GetPublicAddressMediaData::CallFunc_GetFemaleVersionOfSubtitle_MediaDataStruct' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetPublicAddressMediaData, CallFunc_EqualEqual_ObjectObject_ReturnValue_1) == 0x0001D8, "Member 'GI_SinglePlayer_C_GetPublicAddressMediaData::CallFunc_EqualEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetPublicAddressMediaData, CallFunc_IsValid_ReturnValue) == 0x0001D9, "Member 'GI_SinglePlayer_C_GetPublicAddressMediaData::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.TryPlaySubtitlesForPublicAddressMessage
// 0x00E0 (0x00E0 - 0x0000)
struct GI_SinglePlayer_C_TryPlaySubtitlesForPublicAddressMessage final
{
public:
	float                                         StartTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UWIDGET_Subtitles_C*                    SubtitleWidget;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_MediaObject                    CallFunc_GetFemaleVersionOfSubtitle_MediaDataStruct; // 0x0010(0x0080)(HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_1;    // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_92[0x6];                                       // 0x0092(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USAVE_Settings_C*                       CallFunc_GetShockSettingsForCurrentUser_Settings;  // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetSubtitlesEnabled_Result;               // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_Hacker_Simple_C*                  K2Node_DynamicCast_AsPAWN_Hacker_Simple;           // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IINTERF_HUD_C>         K2Node_DynamicCast_AsINTERF_HUD;                   // 0x00C0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWIDGET_Subtitles_C*                    CallFunc_GetSubtitleWidget_Result;                 // 0x00D8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_TryPlaySubtitlesForPublicAddressMessage) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_TryPlaySubtitlesForPublicAddressMessage");
static_assert(sizeof(GI_SinglePlayer_C_TryPlaySubtitlesForPublicAddressMessage) == 0x0000E0, "Wrong size on GI_SinglePlayer_C_TryPlaySubtitlesForPublicAddressMessage");
static_assert(offsetof(GI_SinglePlayer_C_TryPlaySubtitlesForPublicAddressMessage, StartTime) == 0x000000, "Member 'GI_SinglePlayer_C_TryPlaySubtitlesForPublicAddressMessage::StartTime' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryPlaySubtitlesForPublicAddressMessage, Result) == 0x000004, "Member 'GI_SinglePlayer_C_TryPlaySubtitlesForPublicAddressMessage::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryPlaySubtitlesForPublicAddressMessage, SubtitleWidget) == 0x000008, "Member 'GI_SinglePlayer_C_TryPlaySubtitlesForPublicAddressMessage::SubtitleWidget' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryPlaySubtitlesForPublicAddressMessage, CallFunc_GetFemaleVersionOfSubtitle_MediaDataStruct) == 0x000010, "Member 'GI_SinglePlayer_C_TryPlaySubtitlesForPublicAddressMessage::CallFunc_GetFemaleVersionOfSubtitle_MediaDataStruct' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryPlaySubtitlesForPublicAddressMessage, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000090, "Member 'GI_SinglePlayer_C_TryPlaySubtitlesForPublicAddressMessage::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryPlaySubtitlesForPublicAddressMessage, CallFunc_EqualEqual_ObjectObject_ReturnValue_1) == 0x000091, "Member 'GI_SinglePlayer_C_TryPlaySubtitlesForPublicAddressMessage::CallFunc_EqualEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryPlaySubtitlesForPublicAddressMessage, CallFunc_GetShockSettingsForCurrentUser_Settings) == 0x000098, "Member 'GI_SinglePlayer_C_TryPlaySubtitlesForPublicAddressMessage::CallFunc_GetShockSettingsForCurrentUser_Settings' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryPlaySubtitlesForPublicAddressMessage, CallFunc_GetSubtitlesEnabled_Result) == 0x0000A0, "Member 'GI_SinglePlayer_C_TryPlaySubtitlesForPublicAddressMessage::CallFunc_GetSubtitlesEnabled_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryPlaySubtitlesForPublicAddressMessage, CallFunc_GetPlayerPawn_ReturnValue) == 0x0000A8, "Member 'GI_SinglePlayer_C_TryPlaySubtitlesForPublicAddressMessage::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryPlaySubtitlesForPublicAddressMessage, K2Node_DynamicCast_AsPAWN_Hacker_Simple) == 0x0000B0, "Member 'GI_SinglePlayer_C_TryPlaySubtitlesForPublicAddressMessage::K2Node_DynamicCast_AsPAWN_Hacker_Simple' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryPlaySubtitlesForPublicAddressMessage, K2Node_DynamicCast_bSuccess) == 0x0000B8, "Member 'GI_SinglePlayer_C_TryPlaySubtitlesForPublicAddressMessage::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryPlaySubtitlesForPublicAddressMessage, K2Node_DynamicCast_AsINTERF_HUD) == 0x0000C0, "Member 'GI_SinglePlayer_C_TryPlaySubtitlesForPublicAddressMessage::K2Node_DynamicCast_AsINTERF_HUD' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryPlaySubtitlesForPublicAddressMessage, K2Node_DynamicCast_bSuccess_1) == 0x0000D0, "Member 'GI_SinglePlayer_C_TryPlaySubtitlesForPublicAddressMessage::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryPlaySubtitlesForPublicAddressMessage, CallFunc_GetSubtitleWidget_Result) == 0x0000D8, "Member 'GI_SinglePlayer_C_TryPlaySubtitlesForPublicAddressMessage::CallFunc_GetSubtitleWidget_Result' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.TryHideSubtitlesForPublicAddressMessage
// 0x0060 (0x0060 - 0x0000)
struct GI_SinglePlayer_C_TryHideSubtitlesForPublicAddressMessage final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    K2Node_MakeStruct_DataTableRowHandle;              // 0x0008(0x0010)(NoDestructor)
	bool                                          CallFunc_IsPublicAddressMessagePlaying_Result;     // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_Hacker_Simple_C*                  K2Node_DynamicCast_AsPAWN_Hacker_Simple;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IINTERF_HUD_C>         K2Node_DynamicCast_AsINTERF_HUD;                   // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWIDGET_Subtitles_C*                    CallFunc_GetSubtitleWidget_Result;                 // 0x0050(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TryHideSubtitlesForMediaHandle_Result;    // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_TryHideSubtitlesForPublicAddressMessage) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_TryHideSubtitlesForPublicAddressMessage");
static_assert(sizeof(GI_SinglePlayer_C_TryHideSubtitlesForPublicAddressMessage) == 0x000060, "Wrong size on GI_SinglePlayer_C_TryHideSubtitlesForPublicAddressMessage");
static_assert(offsetof(GI_SinglePlayer_C_TryHideSubtitlesForPublicAddressMessage, Result) == 0x000000, "Member 'GI_SinglePlayer_C_TryHideSubtitlesForPublicAddressMessage::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryHideSubtitlesForPublicAddressMessage, K2Node_MakeStruct_DataTableRowHandle) == 0x000008, "Member 'GI_SinglePlayer_C_TryHideSubtitlesForPublicAddressMessage::K2Node_MakeStruct_DataTableRowHandle' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryHideSubtitlesForPublicAddressMessage, CallFunc_IsPublicAddressMessagePlaying_Result) == 0x000018, "Member 'GI_SinglePlayer_C_TryHideSubtitlesForPublicAddressMessage::CallFunc_IsPublicAddressMessagePlaying_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryHideSubtitlesForPublicAddressMessage, CallFunc_GetPlayerPawn_ReturnValue) == 0x000020, "Member 'GI_SinglePlayer_C_TryHideSubtitlesForPublicAddressMessage::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryHideSubtitlesForPublicAddressMessage, K2Node_DynamicCast_AsPAWN_Hacker_Simple) == 0x000028, "Member 'GI_SinglePlayer_C_TryHideSubtitlesForPublicAddressMessage::K2Node_DynamicCast_AsPAWN_Hacker_Simple' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryHideSubtitlesForPublicAddressMessage, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'GI_SinglePlayer_C_TryHideSubtitlesForPublicAddressMessage::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryHideSubtitlesForPublicAddressMessage, K2Node_DynamicCast_AsINTERF_HUD) == 0x000038, "Member 'GI_SinglePlayer_C_TryHideSubtitlesForPublicAddressMessage::K2Node_DynamicCast_AsINTERF_HUD' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryHideSubtitlesForPublicAddressMessage, K2Node_DynamicCast_bSuccess_1) == 0x000048, "Member 'GI_SinglePlayer_C_TryHideSubtitlesForPublicAddressMessage::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryHideSubtitlesForPublicAddressMessage, CallFunc_GetSubtitleWidget_Result) == 0x000050, "Member 'GI_SinglePlayer_C_TryHideSubtitlesForPublicAddressMessage::CallFunc_GetSubtitleWidget_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryHideSubtitlesForPublicAddressMessage, CallFunc_TryHideSubtitlesForMediaHandle_Result) == 0x000058, "Member 'GI_SinglePlayer_C_TryHideSubtitlesForPublicAddressMessage::CallFunc_TryHideSubtitlesForMediaHandle_Result' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.OnPublicAddressSoundCueLoaded
// 0x0188 (0x0188 - 0x0000)
struct GI_SinglePlayer_C_OnPublicAddressSoundCueLoaded final
{
public:
	class USoundCue*                              SoundCue;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ElapsedTime;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SoundDurationRemaining;                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SoundDuration;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PortraitFrameRate;                                 // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PortraitColCount;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PortraitRowCount;                                  // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              PortraitTexture;                                   // 0x0020(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FDataTableRowHandle                    SpeakerHandle;                                     // 0x0048(0x0010)(Edit, BlueprintVisible, NoDestructor)
	TSoftObjectPtr<class USoundCue>               CurrentSoundCue;                                   // 0x0058(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryPlaySubtitlesForPublicAddressMessage_Result; // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_82[0x6];                                       // 0x0082(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_NarrativeSpeakers              CallFunc_GetDataTableRowFromName_OutRow;           // 0x0088(0x0068)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryStopPublicAddressMessage_Result;       // 0x00F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F2[0x2];                                       // 0x00F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetPlayTimeInSeconds_ReturnValue;         // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x00FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_FD[0x3];                                       // 0x00FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USoundCue>               CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue; // 0x0100(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_IsPublicAddressMessagePlaying_Result;     // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_SoftObjectReference_ReturnValue; // 0x0129(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12A[0x6];                                      // 0x012A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USoundCue>               CallFunc_GetPublicAddressMediaData_SoundCue;       // 0x0130(0x0028)(HasGetValueTypeHash)
	struct FDataTableRowHandle                    CallFunc_GetPublicAddressMediaData_SpeakerHandle;  // 0x0158(0x0010)(NoDestructor)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x016C(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_17C[0x4];                                      // 0x017C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0180(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_OnPublicAddressSoundCueLoaded) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_OnPublicAddressSoundCueLoaded");
static_assert(sizeof(GI_SinglePlayer_C_OnPublicAddressSoundCueLoaded) == 0x000188, "Wrong size on GI_SinglePlayer_C_OnPublicAddressSoundCueLoaded");
static_assert(offsetof(GI_SinglePlayer_C_OnPublicAddressSoundCueLoaded, SoundCue) == 0x000000, "Member 'GI_SinglePlayer_C_OnPublicAddressSoundCueLoaded::SoundCue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnPublicAddressSoundCueLoaded, ElapsedTime) == 0x000008, "Member 'GI_SinglePlayer_C_OnPublicAddressSoundCueLoaded::ElapsedTime' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnPublicAddressSoundCueLoaded, SoundDurationRemaining) == 0x00000C, "Member 'GI_SinglePlayer_C_OnPublicAddressSoundCueLoaded::SoundDurationRemaining' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnPublicAddressSoundCueLoaded, SoundDuration) == 0x000010, "Member 'GI_SinglePlayer_C_OnPublicAddressSoundCueLoaded::SoundDuration' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnPublicAddressSoundCueLoaded, PortraitFrameRate) == 0x000014, "Member 'GI_SinglePlayer_C_OnPublicAddressSoundCueLoaded::PortraitFrameRate' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnPublicAddressSoundCueLoaded, PortraitColCount) == 0x000018, "Member 'GI_SinglePlayer_C_OnPublicAddressSoundCueLoaded::PortraitColCount' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnPublicAddressSoundCueLoaded, PortraitRowCount) == 0x00001C, "Member 'GI_SinglePlayer_C_OnPublicAddressSoundCueLoaded::PortraitRowCount' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnPublicAddressSoundCueLoaded, PortraitTexture) == 0x000020, "Member 'GI_SinglePlayer_C_OnPublicAddressSoundCueLoaded::PortraitTexture' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnPublicAddressSoundCueLoaded, SpeakerHandle) == 0x000048, "Member 'GI_SinglePlayer_C_OnPublicAddressSoundCueLoaded::SpeakerHandle' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnPublicAddressSoundCueLoaded, CurrentSoundCue) == 0x000058, "Member 'GI_SinglePlayer_C_OnPublicAddressSoundCueLoaded::CurrentSoundCue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnPublicAddressSoundCueLoaded, CallFunc_IsValid_ReturnValue) == 0x000080, "Member 'GI_SinglePlayer_C_OnPublicAddressSoundCueLoaded::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnPublicAddressSoundCueLoaded, CallFunc_TryPlaySubtitlesForPublicAddressMessage_Result) == 0x000081, "Member 'GI_SinglePlayer_C_OnPublicAddressSoundCueLoaded::CallFunc_TryPlaySubtitlesForPublicAddressMessage_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnPublicAddressSoundCueLoaded, CallFunc_GetDataTableRowFromName_OutRow) == 0x000088, "Member 'GI_SinglePlayer_C_OnPublicAddressSoundCueLoaded::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnPublicAddressSoundCueLoaded, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x0000F0, "Member 'GI_SinglePlayer_C_OnPublicAddressSoundCueLoaded::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnPublicAddressSoundCueLoaded, CallFunc_TryStopPublicAddressMessage_Result) == 0x0000F1, "Member 'GI_SinglePlayer_C_OnPublicAddressSoundCueLoaded::CallFunc_TryStopPublicAddressMessage_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnPublicAddressSoundCueLoaded, CallFunc_GetPlayTimeInSeconds_ReturnValue) == 0x0000F4, "Member 'GI_SinglePlayer_C_OnPublicAddressSoundCueLoaded::CallFunc_GetPlayTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnPublicAddressSoundCueLoaded, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0000F8, "Member 'GI_SinglePlayer_C_OnPublicAddressSoundCueLoaded::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnPublicAddressSoundCueLoaded, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0000FC, "Member 'GI_SinglePlayer_C_OnPublicAddressSoundCueLoaded::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnPublicAddressSoundCueLoaded, CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue) == 0x000100, "Member 'GI_SinglePlayer_C_OnPublicAddressSoundCueLoaded::CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnPublicAddressSoundCueLoaded, CallFunc_IsPublicAddressMessagePlaying_Result) == 0x000128, "Member 'GI_SinglePlayer_C_OnPublicAddressSoundCueLoaded::CallFunc_IsPublicAddressMessagePlaying_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnPublicAddressSoundCueLoaded, CallFunc_EqualEqual_SoftObjectReference_ReturnValue) == 0x000129, "Member 'GI_SinglePlayer_C_OnPublicAddressSoundCueLoaded::CallFunc_EqualEqual_SoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnPublicAddressSoundCueLoaded, CallFunc_GetPublicAddressMediaData_SoundCue) == 0x000130, "Member 'GI_SinglePlayer_C_OnPublicAddressSoundCueLoaded::CallFunc_GetPublicAddressMediaData_SoundCue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnPublicAddressSoundCueLoaded, CallFunc_GetPublicAddressMediaData_SpeakerHandle) == 0x000158, "Member 'GI_SinglePlayer_C_OnPublicAddressSoundCueLoaded::CallFunc_GetPublicAddressMediaData_SpeakerHandle' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnPublicAddressSoundCueLoaded, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000168, "Member 'GI_SinglePlayer_C_OnPublicAddressSoundCueLoaded::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnPublicAddressSoundCueLoaded, K2Node_CreateDelegate_OutputDelegate) == 0x00016C, "Member 'GI_SinglePlayer_C_OnPublicAddressSoundCueLoaded::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnPublicAddressSoundCueLoaded, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000180, "Member 'GI_SinglePlayer_C_OnPublicAddressSoundCueLoaded::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.ForceResumePublicAddressMessage
// 0x0040 (0x0040 - 0x0000)
struct GI_SinglePlayer_C_ForceResumePublicAddressMessage final
{
public:
	float                                         ElapsedTime;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USoundCue>               CallFunc_GetPublicAddressMediaData_SoundCue;       // 0x0008(0x0028)(HasGetValueTypeHash)
	struct FDataTableRowHandle                    CallFunc_GetPublicAddressMediaData_SpeakerHandle;  // 0x0030(0x0010)(NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_ForceResumePublicAddressMessage) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_ForceResumePublicAddressMessage");
static_assert(sizeof(GI_SinglePlayer_C_ForceResumePublicAddressMessage) == 0x000040, "Wrong size on GI_SinglePlayer_C_ForceResumePublicAddressMessage");
static_assert(offsetof(GI_SinglePlayer_C_ForceResumePublicAddressMessage, ElapsedTime) == 0x000000, "Member 'GI_SinglePlayer_C_ForceResumePublicAddressMessage::ElapsedTime' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ForceResumePublicAddressMessage, CallFunc_GetPublicAddressMediaData_SoundCue) == 0x000008, "Member 'GI_SinglePlayer_C_ForceResumePublicAddressMessage::CallFunc_GetPublicAddressMediaData_SoundCue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_ForceResumePublicAddressMessage, CallFunc_GetPublicAddressMediaData_SpeakerHandle) == 0x000030, "Member 'GI_SinglePlayer_C_ForceResumePublicAddressMessage::CallFunc_GetPublicAddressMediaData_SpeakerHandle' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.TryResumePublicAddressMessage
// 0x000C (0x000C - 0x0000)
struct GI_SinglePlayer_C_TryResumePublicAddressMessage final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetPublicAddressElapsedTime_Result;       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TryStopPublicAddressMessage_Result;       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPublicAddressMessagePlaying_Result;     // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_TryResumePublicAddressMessage) == 0x000004, "Wrong alignment on GI_SinglePlayer_C_TryResumePublicAddressMessage");
static_assert(sizeof(GI_SinglePlayer_C_TryResumePublicAddressMessage) == 0x00000C, "Wrong size on GI_SinglePlayer_C_TryResumePublicAddressMessage");
static_assert(offsetof(GI_SinglePlayer_C_TryResumePublicAddressMessage, Result) == 0x000000, "Member 'GI_SinglePlayer_C_TryResumePublicAddressMessage::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryResumePublicAddressMessage, CallFunc_GetPublicAddressElapsedTime_Result) == 0x000004, "Member 'GI_SinglePlayer_C_TryResumePublicAddressMessage::CallFunc_GetPublicAddressElapsedTime_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryResumePublicAddressMessage, CallFunc_TryStopPublicAddressMessage_Result) == 0x000008, "Member 'GI_SinglePlayer_C_TryResumePublicAddressMessage::CallFunc_TryStopPublicAddressMessage_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryResumePublicAddressMessage, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000009, "Member 'GI_SinglePlayer_C_TryResumePublicAddressMessage::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryResumePublicAddressMessage, CallFunc_IsPublicAddressMessagePlaying_Result) == 0x00000A, "Member 'GI_SinglePlayer_C_TryResumePublicAddressMessage::CallFunc_IsPublicAddressMessagePlaying_Result' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.TryPlayPublicAddressMessage
// 0x0028 (0x0028 - 0x0000)
struct GI_SinglePlayer_C_TryPlayPublicAddressMessage final
{
public:
	struct FDataTableRowHandle                    MediaHandle;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FVector                                Location;                                          // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Radius;                                            // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryPlayPublicAddressMessageAtTime_Result; // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_TryPlayPublicAddressMessage) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_TryPlayPublicAddressMessage");
static_assert(sizeof(GI_SinglePlayer_C_TryPlayPublicAddressMessage) == 0x000028, "Wrong size on GI_SinglePlayer_C_TryPlayPublicAddressMessage");
static_assert(offsetof(GI_SinglePlayer_C_TryPlayPublicAddressMessage, MediaHandle) == 0x000000, "Member 'GI_SinglePlayer_C_TryPlayPublicAddressMessage::MediaHandle' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryPlayPublicAddressMessage, Location) == 0x000010, "Member 'GI_SinglePlayer_C_TryPlayPublicAddressMessage::Location' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryPlayPublicAddressMessage, Radius) == 0x00001C, "Member 'GI_SinglePlayer_C_TryPlayPublicAddressMessage::Radius' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryPlayPublicAddressMessage, Result) == 0x000020, "Member 'GI_SinglePlayer_C_TryPlayPublicAddressMessage::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryPlayPublicAddressMessage, CallFunc_TryPlayPublicAddressMessageAtTime_Result) == 0x000021, "Member 'GI_SinglePlayer_C_TryPlayPublicAddressMessage::CallFunc_TryPlayPublicAddressMessageAtTime_Result' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.TryPlayPublicAddressMessageAtTime
// 0x0028 (0x0028 - 0x0000)
struct GI_SinglePlayer_C_TryPlayPublicAddressMessageAtTime final
{
public:
	struct FDataTableRowHandle                    MediaHandle;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FVector                                Location;                                          // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Radius;                                            // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartTime;                                         // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanPlayPublicAddressMessage_Result;       // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_TryPlayPublicAddressMessageAtTime) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_TryPlayPublicAddressMessageAtTime");
static_assert(sizeof(GI_SinglePlayer_C_TryPlayPublicAddressMessageAtTime) == 0x000028, "Wrong size on GI_SinglePlayer_C_TryPlayPublicAddressMessageAtTime");
static_assert(offsetof(GI_SinglePlayer_C_TryPlayPublicAddressMessageAtTime, MediaHandle) == 0x000000, "Member 'GI_SinglePlayer_C_TryPlayPublicAddressMessageAtTime::MediaHandle' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryPlayPublicAddressMessageAtTime, Location) == 0x000010, "Member 'GI_SinglePlayer_C_TryPlayPublicAddressMessageAtTime::Location' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryPlayPublicAddressMessageAtTime, Radius) == 0x00001C, "Member 'GI_SinglePlayer_C_TryPlayPublicAddressMessageAtTime::Radius' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryPlayPublicAddressMessageAtTime, StartTime) == 0x000020, "Member 'GI_SinglePlayer_C_TryPlayPublicAddressMessageAtTime::StartTime' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryPlayPublicAddressMessageAtTime, Result) == 0x000024, "Member 'GI_SinglePlayer_C_TryPlayPublicAddressMessageAtTime::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryPlayPublicAddressMessageAtTime, CallFunc_CanPlayPublicAddressMessage_Result) == 0x000025, "Member 'GI_SinglePlayer_C_TryPlayPublicAddressMessageAtTime::CallFunc_CanPlayPublicAddressMessage_Result' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.TryStopPublicAddressMessage
// 0x0005 (0x0005 - 0x0000)
struct GI_SinglePlayer_C_TryStopPublicAddressMessage final
{
public:
	bool                                          DoCallbacks;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Result;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryHideSubtitlesForPublicAddressMessage_Result; // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryStopPublicAddressTimer_Result;         // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPublicAddressMessagePlaying_Result;     // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_TryStopPublicAddressMessage) == 0x000001, "Wrong alignment on GI_SinglePlayer_C_TryStopPublicAddressMessage");
static_assert(sizeof(GI_SinglePlayer_C_TryStopPublicAddressMessage) == 0x000005, "Wrong size on GI_SinglePlayer_C_TryStopPublicAddressMessage");
static_assert(offsetof(GI_SinglePlayer_C_TryStopPublicAddressMessage, DoCallbacks) == 0x000000, "Member 'GI_SinglePlayer_C_TryStopPublicAddressMessage::DoCallbacks' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStopPublicAddressMessage, Result) == 0x000001, "Member 'GI_SinglePlayer_C_TryStopPublicAddressMessage::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStopPublicAddressMessage, CallFunc_TryHideSubtitlesForPublicAddressMessage_Result) == 0x000002, "Member 'GI_SinglePlayer_C_TryStopPublicAddressMessage::CallFunc_TryHideSubtitlesForPublicAddressMessage_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStopPublicAddressMessage, CallFunc_TryStopPublicAddressTimer_Result) == 0x000003, "Member 'GI_SinglePlayer_C_TryStopPublicAddressMessage::CallFunc_TryStopPublicAddressTimer_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStopPublicAddressMessage, CallFunc_IsPublicAddressMessagePlaying_Result) == 0x000004, "Member 'GI_SinglePlayer_C_TryStopPublicAddressMessage::CallFunc_IsPublicAddressMessagePlaying_Result' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.EVENT_OnPublicAddressMessageFinished
// 0x0001 (0x0001 - 0x0000)
struct GI_SinglePlayer_C_EVENT_OnPublicAddressMessageFinished final
{
public:
	bool                                          CallFunc_TryStopPublicAddressMessage_Result;       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_EVENT_OnPublicAddressMessageFinished) == 0x000001, "Wrong alignment on GI_SinglePlayer_C_EVENT_OnPublicAddressMessageFinished");
static_assert(sizeof(GI_SinglePlayer_C_EVENT_OnPublicAddressMessageFinished) == 0x000001, "Wrong size on GI_SinglePlayer_C_EVENT_OnPublicAddressMessageFinished");
static_assert(offsetof(GI_SinglePlayer_C_EVENT_OnPublicAddressMessageFinished, CallFunc_TryStopPublicAddressMessage_Result) == 0x000000, "Member 'GI_SinglePlayer_C_EVENT_OnPublicAddressMessageFinished::CallFunc_TryStopPublicAddressMessage_Result' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.TryStopPublicAddressTimer
// 0x0002 (0x0002 - 0x0000)
struct GI_SinglePlayer_C_TryStopPublicAddressTimer final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_IsValidTimerHandle_ReturnValue;        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_TryStopPublicAddressTimer) == 0x000001, "Wrong alignment on GI_SinglePlayer_C_TryStopPublicAddressTimer");
static_assert(sizeof(GI_SinglePlayer_C_TryStopPublicAddressTimer) == 0x000002, "Wrong size on GI_SinglePlayer_C_TryStopPublicAddressTimer");
static_assert(offsetof(GI_SinglePlayer_C_TryStopPublicAddressTimer, Result) == 0x000000, "Member 'GI_SinglePlayer_C_TryStopPublicAddressTimer::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStopPublicAddressTimer, CallFunc_K2_IsValidTimerHandle_ReturnValue) == 0x000001, "Member 'GI_SinglePlayer_C_TryStopPublicAddressTimer::CallFunc_K2_IsValidTimerHandle_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.EVENT_OnAutoSaveAfterDelay
// 0x0001 (0x0001 - 0x0000)
struct GI_SinglePlayer_C_EVENT_OnAutoSaveAfterDelay final
{
public:
	bool                                          CallFunc_ConditionalAutoSave_Result;               // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_EVENT_OnAutoSaveAfterDelay) == 0x000001, "Wrong alignment on GI_SinglePlayer_C_EVENT_OnAutoSaveAfterDelay");
static_assert(sizeof(GI_SinglePlayer_C_EVENT_OnAutoSaveAfterDelay) == 0x000001, "Wrong size on GI_SinglePlayer_C_EVENT_OnAutoSaveAfterDelay");
static_assert(offsetof(GI_SinglePlayer_C_EVENT_OnAutoSaveAfterDelay, CallFunc_ConditionalAutoSave_Result) == 0x000000, "Member 'GI_SinglePlayer_C_EVENT_OnAutoSaveAfterDelay::CallFunc_ConditionalAutoSave_Result' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.OnTickNextCaptureComponent
// 0x0020 (0x0020 - 0x0000)
struct GI_SinglePlayer_C_OnTickNextCaptureComponent final
{
public:
	class USceneCaptureComponent2D*               CaptureComponent;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_WrapIntUpperbound_ReturnValue;            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneCaptureComponent2D*               CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_OnTickNextCaptureComponent) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_OnTickNextCaptureComponent");
static_assert(sizeof(GI_SinglePlayer_C_OnTickNextCaptureComponent) == 0x000020, "Wrong size on GI_SinglePlayer_C_OnTickNextCaptureComponent");
static_assert(offsetof(GI_SinglePlayer_C_OnTickNextCaptureComponent, CaptureComponent) == 0x000000, "Member 'GI_SinglePlayer_C_OnTickNextCaptureComponent::CaptureComponent' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnTickNextCaptureComponent, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'GI_SinglePlayer_C_OnTickNextCaptureComponent::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnTickNextCaptureComponent, CallFunc_Array_Length_ReturnValue) == 0x00000C, "Member 'GI_SinglePlayer_C_OnTickNextCaptureComponent::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnTickNextCaptureComponent, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'GI_SinglePlayer_C_OnTickNextCaptureComponent::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnTickNextCaptureComponent, CallFunc_WrapIntUpperbound_ReturnValue) == 0x000014, "Member 'GI_SinglePlayer_C_OnTickNextCaptureComponent::CallFunc_WrapIntUpperbound_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnTickNextCaptureComponent, CallFunc_Array_Get_Item) == 0x000018, "Member 'GI_SinglePlayer_C_OnTickNextCaptureComponent::CallFunc_Array_Get_Item' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.TryStartTickingCaptureComponent
// 0x0040 (0x0040 - 0x0000)
struct GI_SinglePlayer_C_TryStartTickingCaptureComponent final
{
public:
	class USceneCaptureComponent2D*               CaptureComponent;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x000C(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0020(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_IsTimerActiveHandle_ReturnValue;       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_TryStartTickingCaptureComponent) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_TryStartTickingCaptureComponent");
static_assert(sizeof(GI_SinglePlayer_C_TryStartTickingCaptureComponent) == 0x000040, "Wrong size on GI_SinglePlayer_C_TryStartTickingCaptureComponent");
static_assert(offsetof(GI_SinglePlayer_C_TryStartTickingCaptureComponent, CaptureComponent) == 0x000000, "Member 'GI_SinglePlayer_C_TryStartTickingCaptureComponent::CaptureComponent' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartTickingCaptureComponent, Result) == 0x000008, "Member 'GI_SinglePlayer_C_TryStartTickingCaptureComponent::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartTickingCaptureComponent, K2Node_CreateDelegate_OutputDelegate) == 0x00000C, "Member 'GI_SinglePlayer_C_TryStartTickingCaptureComponent::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartTickingCaptureComponent, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000020, "Member 'GI_SinglePlayer_C_TryStartTickingCaptureComponent::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartTickingCaptureComponent, CallFunc_K2_IsTimerActiveHandle_ReturnValue) == 0x000028, "Member 'GI_SinglePlayer_C_TryStartTickingCaptureComponent::CallFunc_K2_IsTimerActiveHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartTickingCaptureComponent, CallFunc_Array_Length_ReturnValue) == 0x00002C, "Member 'GI_SinglePlayer_C_TryStartTickingCaptureComponent::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartTickingCaptureComponent, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'GI_SinglePlayer_C_TryStartTickingCaptureComponent::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartTickingCaptureComponent, CallFunc_Array_Add_ReturnValue) == 0x000034, "Member 'GI_SinglePlayer_C_TryStartTickingCaptureComponent::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartTickingCaptureComponent, CallFunc_Array_Contains_ReturnValue) == 0x000038, "Member 'GI_SinglePlayer_C_TryStartTickingCaptureComponent::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartTickingCaptureComponent, CallFunc_Not_PreBool_ReturnValue) == 0x000039, "Member 'GI_SinglePlayer_C_TryStartTickingCaptureComponent::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.TryStopTickingCaptureComponent
// 0x0030 (0x0030 - 0x0000)
struct GI_SinglePlayer_C_TryStopTickingCaptureComponent final
{
public:
	class USceneCaptureComponent2D*               CaptureComponent;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ComponentIndex;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_TryStopTickingCaptureComponent) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_TryStopTickingCaptureComponent");
static_assert(sizeof(GI_SinglePlayer_C_TryStopTickingCaptureComponent) == 0x000030, "Wrong size on GI_SinglePlayer_C_TryStopTickingCaptureComponent");
static_assert(offsetof(GI_SinglePlayer_C_TryStopTickingCaptureComponent, CaptureComponent) == 0x000000, "Member 'GI_SinglePlayer_C_TryStopTickingCaptureComponent::CaptureComponent' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStopTickingCaptureComponent, Result) == 0x000008, "Member 'GI_SinglePlayer_C_TryStopTickingCaptureComponent::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStopTickingCaptureComponent, ComponentIndex) == 0x00000C, "Member 'GI_SinglePlayer_C_TryStopTickingCaptureComponent::ComponentIndex' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStopTickingCaptureComponent, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000010, "Member 'GI_SinglePlayer_C_TryStopTickingCaptureComponent::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStopTickingCaptureComponent, CallFunc_Subtract_IntInt_ReturnValue) == 0x000014, "Member 'GI_SinglePlayer_C_TryStopTickingCaptureComponent::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStopTickingCaptureComponent, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000018, "Member 'GI_SinglePlayer_C_TryStopTickingCaptureComponent::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStopTickingCaptureComponent, CallFunc_Array_Length_ReturnValue) == 0x00001C, "Member 'GI_SinglePlayer_C_TryStopTickingCaptureComponent::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStopTickingCaptureComponent, CallFunc_Greater_IntInt_ReturnValue) == 0x000020, "Member 'GI_SinglePlayer_C_TryStopTickingCaptureComponent::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStopTickingCaptureComponent, Temp_int_Variable) == 0x000024, "Member 'GI_SinglePlayer_C_TryStopTickingCaptureComponent::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStopTickingCaptureComponent, CallFunc_Array_Find_ReturnValue) == 0x000028, "Member 'GI_SinglePlayer_C_TryStopTickingCaptureComponent::CallFunc_Array_Find_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.GetCurrentMusicCue
// 0x0008 (0x0008 - 0x0000)
struct GI_SinglePlayer_C_GetCurrentMusicCue final
{
public:
	class UBP_MusicCue_C*                         Result;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_GetCurrentMusicCue) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_GetCurrentMusicCue");
static_assert(sizeof(GI_SinglePlayer_C_GetCurrentMusicCue) == 0x000008, "Wrong size on GI_SinglePlayer_C_GetCurrentMusicCue");
static_assert(offsetof(GI_SinglePlayer_C_GetCurrentMusicCue, Result) == 0x000000, "Member 'GI_SinglePlayer_C_GetCurrentMusicCue::Result' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.GetDeckNumberByLevelName
// 0x0030 (0x0030 - 0x0000)
struct GI_SinglePlayer_C_GetDeckNumberByLevelName final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Result;                                            // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CurrentLevel;                                      // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CallFunc_GetDataTableRowNames_OutRowNames;         // 0x0018(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_GetDeckNumberByLevelName) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_GetDeckNumberByLevelName");
static_assert(sizeof(GI_SinglePlayer_C_GetDeckNumberByLevelName) == 0x000030, "Wrong size on GI_SinglePlayer_C_GetDeckNumberByLevelName");
static_assert(offsetof(GI_SinglePlayer_C_GetDeckNumberByLevelName, LevelName) == 0x000000, "Member 'GI_SinglePlayer_C_GetDeckNumberByLevelName::LevelName' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetDeckNumberByLevelName, Result) == 0x000008, "Member 'GI_SinglePlayer_C_GetDeckNumberByLevelName::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetDeckNumberByLevelName, CurrentLevel) == 0x00000C, "Member 'GI_SinglePlayer_C_GetDeckNumberByLevelName::CurrentLevel' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetDeckNumberByLevelName, CallFunc_GetDataTableRowNames_OutRowNames) == 0x000018, "Member 'GI_SinglePlayer_C_GetDeckNumberByLevelName::CallFunc_GetDataTableRowNames_OutRowNames' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetDeckNumberByLevelName, CallFunc_Array_Find_ReturnValue) == 0x000028, "Member 'GI_SinglePlayer_C_GetDeckNumberByLevelName::CallFunc_Array_Find_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.GetLevelNameByDeckSymbol
// 0x0120 (0x0120 - 0x0000)
struct GI_SinglePlayer_C_GetLevelNameByDeckSymbol final
{
public:
	class FString                                 DeckSymbol;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FName                                   LevelName;                                         // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CurrentLevelName_0;                                // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_LevelInfo                      CallFunc_GetDataTableRowFromName_OutRow;           // 0x0030(0x00C8)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CallFunc_GetDataTableRowNames_OutRowNames;         // 0x0100(0x0010)(ReferenceParm)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x011C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue;            // 0x011D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_GetLevelNameByDeckSymbol) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_GetLevelNameByDeckSymbol");
static_assert(sizeof(GI_SinglePlayer_C_GetLevelNameByDeckSymbol) == 0x000120, "Wrong size on GI_SinglePlayer_C_GetLevelNameByDeckSymbol");
static_assert(offsetof(GI_SinglePlayer_C_GetLevelNameByDeckSymbol, DeckSymbol) == 0x000000, "Member 'GI_SinglePlayer_C_GetLevelNameByDeckSymbol::DeckSymbol' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetLevelNameByDeckSymbol, LevelName) == 0x000010, "Member 'GI_SinglePlayer_C_GetLevelNameByDeckSymbol::LevelName' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetLevelNameByDeckSymbol, CurrentLevelName_0) == 0x000018, "Member 'GI_SinglePlayer_C_GetLevelNameByDeckSymbol::CurrentLevelName_0' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetLevelNameByDeckSymbol, Temp_int_Array_Index_Variable) == 0x000020, "Member 'GI_SinglePlayer_C_GetLevelNameByDeckSymbol::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetLevelNameByDeckSymbol, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'GI_SinglePlayer_C_GetLevelNameByDeckSymbol::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetLevelNameByDeckSymbol, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'GI_SinglePlayer_C_GetLevelNameByDeckSymbol::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetLevelNameByDeckSymbol, CallFunc_GetDataTableRowFromName_OutRow) == 0x000030, "Member 'GI_SinglePlayer_C_GetLevelNameByDeckSymbol::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetLevelNameByDeckSymbol, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x0000F8, "Member 'GI_SinglePlayer_C_GetLevelNameByDeckSymbol::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetLevelNameByDeckSymbol, CallFunc_GetDataTableRowNames_OutRowNames) == 0x000100, "Member 'GI_SinglePlayer_C_GetLevelNameByDeckSymbol::CallFunc_GetDataTableRowNames_OutRowNames' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetLevelNameByDeckSymbol, CallFunc_Array_Get_Item) == 0x000110, "Member 'GI_SinglePlayer_C_GetLevelNameByDeckSymbol::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetLevelNameByDeckSymbol, CallFunc_Array_Length_ReturnValue) == 0x000118, "Member 'GI_SinglePlayer_C_GetLevelNameByDeckSymbol::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetLevelNameByDeckSymbol, CallFunc_Less_IntInt_ReturnValue) == 0x00011C, "Member 'GI_SinglePlayer_C_GetLevelNameByDeckSymbol::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetLevelNameByDeckSymbol, CallFunc_EqualEqual_StrStr_ReturnValue) == 0x00011D, "Member 'GI_SinglePlayer_C_GetLevelNameByDeckSymbol::CallFunc_EqualEqual_StrStr_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.GetTemporarilyDisabledTileIndex
// 0x0038 (0x0038 - 0x0000)
struct GI_SinglePlayer_C_GetTemporarilyDisabledTileIndex final
{
public:
	class UStaticMeshComponent*                   TileComponent;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Result;                                            // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_DisabledTileData               CallFunc_Array_Get_Item;                           // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_GetTemporarilyDisabledTileIndex) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_GetTemporarilyDisabledTileIndex");
static_assert(sizeof(GI_SinglePlayer_C_GetTemporarilyDisabledTileIndex) == 0x000038, "Wrong size on GI_SinglePlayer_C_GetTemporarilyDisabledTileIndex");
static_assert(offsetof(GI_SinglePlayer_C_GetTemporarilyDisabledTileIndex, TileComponent) == 0x000000, "Member 'GI_SinglePlayer_C_GetTemporarilyDisabledTileIndex::TileComponent' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetTemporarilyDisabledTileIndex, Result) == 0x000008, "Member 'GI_SinglePlayer_C_GetTemporarilyDisabledTileIndex::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetTemporarilyDisabledTileIndex, CallFunc_IsValid_ReturnValue) == 0x00000C, "Member 'GI_SinglePlayer_C_GetTemporarilyDisabledTileIndex::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetTemporarilyDisabledTileIndex, Temp_int_Array_Index_Variable) == 0x000010, "Member 'GI_SinglePlayer_C_GetTemporarilyDisabledTileIndex::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetTemporarilyDisabledTileIndex, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'GI_SinglePlayer_C_GetTemporarilyDisabledTileIndex::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetTemporarilyDisabledTileIndex, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'GI_SinglePlayer_C_GetTemporarilyDisabledTileIndex::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetTemporarilyDisabledTileIndex, CallFunc_Array_Get_Item) == 0x000020, "Member 'GI_SinglePlayer_C_GetTemporarilyDisabledTileIndex::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetTemporarilyDisabledTileIndex, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'GI_SinglePlayer_C_GetTemporarilyDisabledTileIndex::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetTemporarilyDisabledTileIndex, CallFunc_Less_IntInt_ReturnValue) == 0x000034, "Member 'GI_SinglePlayer_C_GetTemporarilyDisabledTileIndex::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetTemporarilyDisabledTileIndex, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000035, "Member 'GI_SinglePlayer_C_GetTemporarilyDisabledTileIndex::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.GetCurrentlyDisabledTileComponents
// 0x00C8 (0x00C8 - 0x0000)
struct GI_SinglePlayer_C_GetCurrentlyDisabledTileComponents final
{
public:
	TSet<class UStaticMeshComponent*>             Result;                                            // 0x0000(0x0050)(Parm, OutParm, ContainsInstancedReference)
	TSet<class UStaticMeshComponent*>             DisabledTileComponents;                            // 0x0050(0x0050)(Edit, BlueprintVisible, ContainsInstancedReference)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_DisabledTileData               CallFunc_Array_Get_Item;                           // 0x00B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_GetCurrentlyDisabledTileComponents) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_GetCurrentlyDisabledTileComponents");
static_assert(sizeof(GI_SinglePlayer_C_GetCurrentlyDisabledTileComponents) == 0x0000C8, "Wrong size on GI_SinglePlayer_C_GetCurrentlyDisabledTileComponents");
static_assert(offsetof(GI_SinglePlayer_C_GetCurrentlyDisabledTileComponents, Result) == 0x000000, "Member 'GI_SinglePlayer_C_GetCurrentlyDisabledTileComponents::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetCurrentlyDisabledTileComponents, DisabledTileComponents) == 0x000050, "Member 'GI_SinglePlayer_C_GetCurrentlyDisabledTileComponents::DisabledTileComponents' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetCurrentlyDisabledTileComponents, Temp_int_Array_Index_Variable) == 0x0000A0, "Member 'GI_SinglePlayer_C_GetCurrentlyDisabledTileComponents::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetCurrentlyDisabledTileComponents, Temp_int_Loop_Counter_Variable) == 0x0000A4, "Member 'GI_SinglePlayer_C_GetCurrentlyDisabledTileComponents::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetCurrentlyDisabledTileComponents, CallFunc_Add_IntInt_ReturnValue) == 0x0000A8, "Member 'GI_SinglePlayer_C_GetCurrentlyDisabledTileComponents::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetCurrentlyDisabledTileComponents, CallFunc_Array_Get_Item) == 0x0000B0, "Member 'GI_SinglePlayer_C_GetCurrentlyDisabledTileComponents::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetCurrentlyDisabledTileComponents, CallFunc_Array_Length_ReturnValue) == 0x0000C0, "Member 'GI_SinglePlayer_C_GetCurrentlyDisabledTileComponents::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetCurrentlyDisabledTileComponents, CallFunc_Less_IntInt_ReturnValue) == 0x0000C4, "Member 'GI_SinglePlayer_C_GetCurrentlyDisabledTileComponents::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.AddTemporarilyDisabledTileComponents
// 0x01E0 (0x01E0 - 0x0000)
struct GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents final
{
public:
	TArray<class UStaticMeshComponent*>           TileComponents;                                    // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	float                                         DisableDuration;                                   // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class UStaticMeshComponent*>             NewTileComponents;                                 // 0x0018(0x0050)(Edit, BlueprintVisible, ContainsInstancedReference)
	TSet<class UStaticMeshComponent*>             PrevDisabledTileComponents;                        // 0x0068(0x0050)(Edit, BlueprintVisible, ContainsInstancedReference)
	int32                                         TileIndex;                                         // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   CurrentTileComponent;                              // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ExpireTimestamp;                                   // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentTimestamp;                                  // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D1[0x3];                                       // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetTemporarilyDisabledTileIndex_Result;   // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class UStaticMeshComponent*>             CallFunc_GetCurrentlyDisabledTileComponents_Result; // 0x00E8(0x0050)(ContainsInstancedReference)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsStreamingLevels_Result;                 // 0x013C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x013D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13E[0x2];                                      // 0x013E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class UStaticMeshComponent*>             CallFunc_Set_Difference_Result;                    // 0x0140(0x0050)(ContainsInstancedReference)
	TArray<class UStaticMeshComponent*>           CallFunc_Set_ToArray_Result;                       // 0x0190(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A9[0x7];                                      // 0x01A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_DisabledTileData               K2Node_MakeStruct_STRUCT_DisabledTileData;         // 0x01B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C4[0x4];                                      // 0x01C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   CallFunc_Array_Get_Item;                           // 0x01C8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D1[0x3];                                      // 0x01D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D9[0x3];                                      // 0x01D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetPlayTimeInSeconds_ReturnValue;         // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents");
static_assert(sizeof(GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents) == 0x0001E0, "Wrong size on GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents");
static_assert(offsetof(GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents, TileComponents) == 0x000000, "Member 'GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents::TileComponents' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents, DisableDuration) == 0x000010, "Member 'GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents::DisableDuration' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents, NewTileComponents) == 0x000018, "Member 'GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents::NewTileComponents' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents, PrevDisabledTileComponents) == 0x000068, "Member 'GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents::PrevDisabledTileComponents' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents, TileIndex) == 0x0000B8, "Member 'GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents::TileIndex' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents, CurrentTileComponent) == 0x0000C0, "Member 'GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents::CurrentTileComponent' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents, ExpireTimestamp) == 0x0000C8, "Member 'GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents::ExpireTimestamp' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents, CurrentTimestamp) == 0x0000CC, "Member 'GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents::CurrentTimestamp' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x0000D0, "Member 'GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents, Temp_int_Array_Index_Variable) == 0x0000D4, "Member 'GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents, Temp_int_Loop_Counter_Variable) == 0x0000D8, "Member 'GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents, CallFunc_Add_IntInt_ReturnValue) == 0x0000DC, "Member 'GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents, CallFunc_GetTemporarilyDisabledTileIndex_Result) == 0x0000E0, "Member 'GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents::CallFunc_GetTemporarilyDisabledTileIndex_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents, CallFunc_GetCurrentlyDisabledTileComponents_Result) == 0x0000E8, "Member 'GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents::CallFunc_GetCurrentlyDisabledTileComponents_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents, CallFunc_Add_FloatFloat_ReturnValue) == 0x000138, "Member 'GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents, CallFunc_IsStreamingLevels_Result) == 0x00013C, "Member 'GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents::CallFunc_IsStreamingLevels_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents, CallFunc_Not_PreBool_ReturnValue) == 0x00013D, "Member 'GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents, CallFunc_Set_Difference_Result) == 0x000140, "Member 'GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents::CallFunc_Set_Difference_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents, CallFunc_Set_ToArray_Result) == 0x000190, "Member 'GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents::CallFunc_Set_ToArray_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents, CallFunc_Array_LastIndex_ReturnValue) == 0x0001A0, "Member 'GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents, CallFunc_Array_Length_ReturnValue) == 0x0001A4, "Member 'GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents, CallFunc_Greater_IntInt_ReturnValue) == 0x0001A8, "Member 'GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents, K2Node_MakeStruct_STRUCT_DisabledTileData) == 0x0001B0, "Member 'GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents::K2Node_MakeStruct_STRUCT_DisabledTileData' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents, CallFunc_Array_Add_ReturnValue) == 0x0001C0, "Member 'GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents, CallFunc_Array_Get_Item) == 0x0001C8, "Member 'GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents, CallFunc_Less_FloatFloat_ReturnValue) == 0x0001D0, "Member 'GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents, CallFunc_Array_Length_ReturnValue_1) == 0x0001D4, "Member 'GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents, CallFunc_Less_IntInt_ReturnValue) == 0x0001D8, "Member 'GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents, CallFunc_GetPlayTimeInSeconds_ReturnValue) == 0x0001DC, "Member 'GI_SinglePlayer_C_AddTemporarilyDisabledTileComponents::CallFunc_GetPlayTimeInSeconds_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.SetPermanentTileComponentEnableState
// 0x01E8 (0x01E8 - 0x0000)
struct GI_SinglePlayer_C_SetPermanentTileComponentEnableState final
{
public:
	TArray<class UStaticMeshComponent*>           TileComponents;                                    // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	bool                                          EnableState;                                       // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UStaticMeshComponent*>           ModifyTileComponents;                              // 0x0018(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	TSet<class UStaticMeshComponent*>             NewTileComponents;                                 // 0x0028(0x0050)(Edit, BlueprintVisible, ContainsInstancedReference)
	TSet<class UStaticMeshComponent*>             PrevDisabledTileComponents;                        // 0x0078(0x0050)(Edit, BlueprintVisible, ContainsInstancedReference)
	TSet<class UStaticMeshComponent*>             CallFunc_GetCurrentlyDisabledTileComponents_Result; // 0x00C8(0x0050)(ContainsInstancedReference)
	TSet<class UStaticMeshComponent*>             CallFunc_Set_Intersection_Result;                  // 0x0118(0x0050)(ContainsInstancedReference)
	TArray<class UStaticMeshComponent*>           CallFunc_Set_ToArray_Result;                       // 0x0168(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_179[0x3];                                      // 0x0179(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Set_Length_ReturnValue;                   // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0184(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0185(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0186(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_187[0x1];                                      // 0x0187(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class UStaticMeshComponent*>             CallFunc_Set_Difference_Result;                    // 0x0188(0x0050)(ContainsInstancedReference)
	TArray<class UStaticMeshComponent*>           CallFunc_Set_ToArray_Result_1;                     // 0x01D8(0x0010)(ReferenceParm, ContainsInstancedReference)
};
static_assert(alignof(GI_SinglePlayer_C_SetPermanentTileComponentEnableState) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_SetPermanentTileComponentEnableState");
static_assert(sizeof(GI_SinglePlayer_C_SetPermanentTileComponentEnableState) == 0x0001E8, "Wrong size on GI_SinglePlayer_C_SetPermanentTileComponentEnableState");
static_assert(offsetof(GI_SinglePlayer_C_SetPermanentTileComponentEnableState, TileComponents) == 0x000000, "Member 'GI_SinglePlayer_C_SetPermanentTileComponentEnableState::TileComponents' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetPermanentTileComponentEnableState, EnableState) == 0x000010, "Member 'GI_SinglePlayer_C_SetPermanentTileComponentEnableState::EnableState' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetPermanentTileComponentEnableState, ModifyTileComponents) == 0x000018, "Member 'GI_SinglePlayer_C_SetPermanentTileComponentEnableState::ModifyTileComponents' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetPermanentTileComponentEnableState, NewTileComponents) == 0x000028, "Member 'GI_SinglePlayer_C_SetPermanentTileComponentEnableState::NewTileComponents' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetPermanentTileComponentEnableState, PrevDisabledTileComponents) == 0x000078, "Member 'GI_SinglePlayer_C_SetPermanentTileComponentEnableState::PrevDisabledTileComponents' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetPermanentTileComponentEnableState, CallFunc_GetCurrentlyDisabledTileComponents_Result) == 0x0000C8, "Member 'GI_SinglePlayer_C_SetPermanentTileComponentEnableState::CallFunc_GetCurrentlyDisabledTileComponents_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetPermanentTileComponentEnableState, CallFunc_Set_Intersection_Result) == 0x000118, "Member 'GI_SinglePlayer_C_SetPermanentTileComponentEnableState::CallFunc_Set_Intersection_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetPermanentTileComponentEnableState, CallFunc_Set_ToArray_Result) == 0x000168, "Member 'GI_SinglePlayer_C_SetPermanentTileComponentEnableState::CallFunc_Set_ToArray_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetPermanentTileComponentEnableState, CallFunc_Not_PreBool_ReturnValue) == 0x000178, "Member 'GI_SinglePlayer_C_SetPermanentTileComponentEnableState::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetPermanentTileComponentEnableState, CallFunc_Array_Length_ReturnValue) == 0x00017C, "Member 'GI_SinglePlayer_C_SetPermanentTileComponentEnableState::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetPermanentTileComponentEnableState, CallFunc_Set_Length_ReturnValue) == 0x000180, "Member 'GI_SinglePlayer_C_SetPermanentTileComponentEnableState::CallFunc_Set_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetPermanentTileComponentEnableState, CallFunc_Greater_IntInt_ReturnValue) == 0x000184, "Member 'GI_SinglePlayer_C_SetPermanentTileComponentEnableState::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetPermanentTileComponentEnableState, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000185, "Member 'GI_SinglePlayer_C_SetPermanentTileComponentEnableState::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetPermanentTileComponentEnableState, CallFunc_BooleanOR_ReturnValue) == 0x000186, "Member 'GI_SinglePlayer_C_SetPermanentTileComponentEnableState::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetPermanentTileComponentEnableState, CallFunc_Set_Difference_Result) == 0x000188, "Member 'GI_SinglePlayer_C_SetPermanentTileComponentEnableState::CallFunc_Set_Difference_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetPermanentTileComponentEnableState, CallFunc_Set_ToArray_Result_1) == 0x0001D8, "Member 'GI_SinglePlayer_C_SetPermanentTileComponentEnableState::CallFunc_Set_ToArray_Result_1' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.UpdateTileComponentEnableStateInternal
// 0x0070 (0x0070 - 0x0000)
struct GI_SinglePlayer_C_UpdateTileComponentEnableStateInternal final
{
public:
	TArray<class UStaticMeshComponent*>           TileComponents;                                    // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	bool                                          EnableState;                                       // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFXSystemComponent*>             EffectsComponents;                                 // 0x0018(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	TArray<class ULocalLightComponent*>           LightComponents;                                   // 0x0028(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue;             // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 K2Node_MakeArray_Array;                            // 0x0040(0x0010)(ConstParm, ReferenceParm)
	TArray<class UFXSystemComponent*>             CallFunc_GetChildComponentsByClassFromArray_ReturnValue; // 0x0050(0x0010)(ReferenceParm, ContainsInstancedReference)
	TArray<class ULocalLightComponent*>           CallFunc_GetChildComponentsByClassFromArray_ReturnValue_1; // 0x0060(0x0010)(ReferenceParm, ContainsInstancedReference)
};
static_assert(alignof(GI_SinglePlayer_C_UpdateTileComponentEnableStateInternal) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_UpdateTileComponentEnableStateInternal");
static_assert(sizeof(GI_SinglePlayer_C_UpdateTileComponentEnableStateInternal) == 0x000070, "Wrong size on GI_SinglePlayer_C_UpdateTileComponentEnableStateInternal");
static_assert(offsetof(GI_SinglePlayer_C_UpdateTileComponentEnableStateInternal, TileComponents) == 0x000000, "Member 'GI_SinglePlayer_C_UpdateTileComponentEnableStateInternal::TileComponents' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UpdateTileComponentEnableStateInternal, EnableState) == 0x000010, "Member 'GI_SinglePlayer_C_UpdateTileComponentEnableStateInternal::EnableState' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UpdateTileComponentEnableStateInternal, EffectsComponents) == 0x000018, "Member 'GI_SinglePlayer_C_UpdateTileComponentEnableStateInternal::EffectsComponents' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UpdateTileComponentEnableStateInternal, LightComponents) == 0x000028, "Member 'GI_SinglePlayer_C_UpdateTileComponentEnableStateInternal::LightComponents' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UpdateTileComponentEnableStateInternal, CallFunc_Conv_BoolToFloat_ReturnValue) == 0x000038, "Member 'GI_SinglePlayer_C_UpdateTileComponentEnableStateInternal::CallFunc_Conv_BoolToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UpdateTileComponentEnableStateInternal, K2Node_MakeArray_Array) == 0x000040, "Member 'GI_SinglePlayer_C_UpdateTileComponentEnableStateInternal::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UpdateTileComponentEnableStateInternal, CallFunc_GetChildComponentsByClassFromArray_ReturnValue) == 0x000050, "Member 'GI_SinglePlayer_C_UpdateTileComponentEnableStateInternal::CallFunc_GetChildComponentsByClassFromArray_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UpdateTileComponentEnableStateInternal, CallFunc_GetChildComponentsByClassFromArray_ReturnValue_1) == 0x000060, "Member 'GI_SinglePlayer_C_UpdateTileComponentEnableStateInternal::CallFunc_GetChildComponentsByClassFromArray_ReturnValue_1' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.OnPerformTileEnableTick
// 0x0030 (0x0030 - 0x0000)
struct GI_SinglePlayer_C_OnPerformTileEnableTick final
{
public:
	class UStaticMeshComponent*                   CurrentTileComponent;                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UStaticMeshComponent*>           K2Node_MakeArray_Array;                            // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Set_Contains_ReturnValue;                 // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetPlayTimeInSeconds_ReturnValue;         // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_OnPerformTileEnableTick) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_OnPerformTileEnableTick");
static_assert(sizeof(GI_SinglePlayer_C_OnPerformTileEnableTick) == 0x000030, "Wrong size on GI_SinglePlayer_C_OnPerformTileEnableTick");
static_assert(offsetof(GI_SinglePlayer_C_OnPerformTileEnableTick, CurrentTileComponent) == 0x000000, "Member 'GI_SinglePlayer_C_OnPerformTileEnableTick::CurrentTileComponent' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnPerformTileEnableTick, CallFunc_Array_Length_ReturnValue) == 0x000008, "Member 'GI_SinglePlayer_C_OnPerformTileEnableTick::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnPerformTileEnableTick, K2Node_MakeArray_Array) == 0x000010, "Member 'GI_SinglePlayer_C_OnPerformTileEnableTick::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnPerformTileEnableTick, CallFunc_Greater_IntInt_ReturnValue) == 0x000020, "Member 'GI_SinglePlayer_C_OnPerformTileEnableTick::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnPerformTileEnableTick, CallFunc_Set_Contains_ReturnValue) == 0x000021, "Member 'GI_SinglePlayer_C_OnPerformTileEnableTick::CallFunc_Set_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnPerformTileEnableTick, CallFunc_GetPlayTimeInSeconds_ReturnValue) == 0x000024, "Member 'GI_SinglePlayer_C_OnPerformTileEnableTick::CallFunc_GetPlayTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnPerformTileEnableTick, CallFunc_Array_Length_ReturnValue_1) == 0x000028, "Member 'GI_SinglePlayer_C_OnPerformTileEnableTick::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnPerformTileEnableTick, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00002C, "Member 'GI_SinglePlayer_C_OnPerformTileEnableTick::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnPerformTileEnableTick, CallFunc_Greater_IntInt_ReturnValue_1) == 0x00002D, "Member 'GI_SinglePlayer_C_OnPerformTileEnableTick::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.TryStartTileEnableTick
// 0x0028 (0x0028 - 0x0000)
struct GI_SinglePlayer_C_TryStartTileEnableTick final
{
public:
	float                                         CallFunc_GetPlayTimeInSeconds_ReturnValue;         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_K2_IsTimerActiveHandle_ReturnValue;       // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0020(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_TryStartTileEnableTick) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_TryStartTileEnableTick");
static_assert(sizeof(GI_SinglePlayer_C_TryStartTileEnableTick) == 0x000028, "Wrong size on GI_SinglePlayer_C_TryStartTileEnableTick");
static_assert(offsetof(GI_SinglePlayer_C_TryStartTileEnableTick, CallFunc_GetPlayTimeInSeconds_ReturnValue) == 0x000000, "Member 'GI_SinglePlayer_C_TryStartTileEnableTick::CallFunc_GetPlayTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartTileEnableTick, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'GI_SinglePlayer_C_TryStartTileEnableTick::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartTileEnableTick, CallFunc_K2_IsTimerActiveHandle_ReturnValue) == 0x000014, "Member 'GI_SinglePlayer_C_TryStartTileEnableTick::CallFunc_K2_IsTimerActiveHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartTileEnableTick, CallFunc_Not_PreBool_ReturnValue) == 0x000015, "Member 'GI_SinglePlayer_C_TryStartTileEnableTick::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartTileEnableTick, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000018, "Member 'GI_SinglePlayer_C_TryStartTileEnableTick::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartTileEnableTick, CallFunc_FMax_ReturnValue) == 0x00001C, "Member 'GI_SinglePlayer_C_TryStartTileEnableTick::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_TryStartTileEnableTick, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000020, "Member 'GI_SinglePlayer_C_TryStartTileEnableTick::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.RegisterActiveAlarmSpeaker
// 0x0030 (0x0030 - 0x0000)
struct GI_SinglePlayer_C_RegisterActiveAlarmSpeaker final
{
public:
	class ABP_AlarmSpeaker_Base_C*                AlarmSpeaker;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_K2_IsTimerActiveHandle_ReturnValue;       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0020(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_RegisterActiveAlarmSpeaker) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_RegisterActiveAlarmSpeaker");
static_assert(sizeof(GI_SinglePlayer_C_RegisterActiveAlarmSpeaker) == 0x000030, "Wrong size on GI_SinglePlayer_C_RegisterActiveAlarmSpeaker");
static_assert(offsetof(GI_SinglePlayer_C_RegisterActiveAlarmSpeaker, AlarmSpeaker) == 0x000000, "Member 'GI_SinglePlayer_C_RegisterActiveAlarmSpeaker::AlarmSpeaker' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterActiveAlarmSpeaker, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'GI_SinglePlayer_C_RegisterActiveAlarmSpeaker::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterActiveAlarmSpeaker, CallFunc_K2_IsTimerActiveHandle_ReturnValue) == 0x000018, "Member 'GI_SinglePlayer_C_RegisterActiveAlarmSpeaker::CallFunc_K2_IsTimerActiveHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterActiveAlarmSpeaker, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000020, "Member 'GI_SinglePlayer_C_RegisterActiveAlarmSpeaker::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterActiveAlarmSpeaker, CallFunc_Not_PreBool_ReturnValue) == 0x000028, "Member 'GI_SinglePlayer_C_RegisterActiveAlarmSpeaker::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_RegisterActiveAlarmSpeaker, CallFunc_Array_AddUnique_ReturnValue) == 0x00002C, "Member 'GI_SinglePlayer_C_RegisterActiveAlarmSpeaker::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.UnregisterActiveAlarmSpeaker
// 0x0010 (0x0010 - 0x0000)
struct GI_SinglePlayer_C_UnregisterActiveAlarmSpeaker final
{
public:
	class ABP_AlarmSpeaker_Base_C*                AlarmSpeaker;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_UnregisterActiveAlarmSpeaker) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_UnregisterActiveAlarmSpeaker");
static_assert(sizeof(GI_SinglePlayer_C_UnregisterActiveAlarmSpeaker) == 0x000010, "Wrong size on GI_SinglePlayer_C_UnregisterActiveAlarmSpeaker");
static_assert(offsetof(GI_SinglePlayer_C_UnregisterActiveAlarmSpeaker, AlarmSpeaker) == 0x000000, "Member 'GI_SinglePlayer_C_UnregisterActiveAlarmSpeaker::AlarmSpeaker' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UnregisterActiveAlarmSpeaker, CallFunc_Array_Length_ReturnValue) == 0x000008, "Member 'GI_SinglePlayer_C_UnregisterActiveAlarmSpeaker::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UnregisterActiveAlarmSpeaker, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00000C, "Member 'GI_SinglePlayer_C_UnregisterActiveAlarmSpeaker::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_UnregisterActiveAlarmSpeaker, CallFunc_Array_RemoveItem_ReturnValue) == 0x00000D, "Member 'GI_SinglePlayer_C_UnregisterActiveAlarmSpeaker::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.OnPlayEmergencySound
// 0x0028 (0x0028 - 0x0000)
struct GI_SinglePlayer_C_OnPlayEmergencySound final
{
public:
	class ABP_AlarmSpeaker_Base_C*                CurrentAlarmSpeaker;                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AlarmSpeaker_Base_C*                CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_OnPlayEmergencySound) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_OnPlayEmergencySound");
static_assert(sizeof(GI_SinglePlayer_C_OnPlayEmergencySound) == 0x000028, "Wrong size on GI_SinglePlayer_C_OnPlayEmergencySound");
static_assert(offsetof(GI_SinglePlayer_C_OnPlayEmergencySound, CurrentAlarmSpeaker) == 0x000000, "Member 'GI_SinglePlayer_C_OnPlayEmergencySound::CurrentAlarmSpeaker' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnPlayEmergencySound, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'GI_SinglePlayer_C_OnPlayEmergencySound::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnPlayEmergencySound, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'GI_SinglePlayer_C_OnPlayEmergencySound::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnPlayEmergencySound, Temp_int_Array_Index_Variable) == 0x000010, "Member 'GI_SinglePlayer_C_OnPlayEmergencySound::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnPlayEmergencySound, CallFunc_IsValid_ReturnValue) == 0x000014, "Member 'GI_SinglePlayer_C_OnPlayEmergencySound::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnPlayEmergencySound, CallFunc_Array_Get_Item) == 0x000018, "Member 'GI_SinglePlayer_C_OnPlayEmergencySound::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnPlayEmergencySound, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'GI_SinglePlayer_C_OnPlayEmergencySound::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_OnPlayEmergencySound, CallFunc_Less_IntInt_ReturnValue) == 0x000024, "Member 'GI_SinglePlayer_C_OnPlayEmergencySound::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.GetBossEncounterTrap
// 0x0068 (0x0068 - 0x0000)
struct GI_SinglePlayer_C_GetBossEncounterTrap final
{
public:
	class APAWN_Enemy_C*                          EnemyPawn;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATRAP_BossEncounter_C*                  Result;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATRAP_BossEncounter_C*                  BossEncounterTrap;                                 // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasSpawnedEnemy_Result;                   // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelStreaming*                        CallFunc_GetPrimaryStreamingLevel_Level;           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULevel*                                 CallFunc_GetLoadedLevel_ReturnValue;               // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ATRAP_BossEncounter_C*>          CallFunc_GetAllActorsOfClassInSubLevel_ReturnValue; // 0x0040(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATRAP_BossEncounter_C*                  CallFunc_Array_Get_Item;                           // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_GetBossEncounterTrap) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_GetBossEncounterTrap");
static_assert(sizeof(GI_SinglePlayer_C_GetBossEncounterTrap) == 0x000068, "Wrong size on GI_SinglePlayer_C_GetBossEncounterTrap");
static_assert(offsetof(GI_SinglePlayer_C_GetBossEncounterTrap, EnemyPawn) == 0x000000, "Member 'GI_SinglePlayer_C_GetBossEncounterTrap::EnemyPawn' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetBossEncounterTrap, Result) == 0x000008, "Member 'GI_SinglePlayer_C_GetBossEncounterTrap::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetBossEncounterTrap, BossEncounterTrap) == 0x000010, "Member 'GI_SinglePlayer_C_GetBossEncounterTrap::BossEncounterTrap' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetBossEncounterTrap, Temp_bool_True_if_break_was_hit_Variable) == 0x000018, "Member 'GI_SinglePlayer_C_GetBossEncounterTrap::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetBossEncounterTrap, Temp_int_Array_Index_Variable) == 0x00001C, "Member 'GI_SinglePlayer_C_GetBossEncounterTrap::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetBossEncounterTrap, CallFunc_Not_PreBool_ReturnValue) == 0x000020, "Member 'GI_SinglePlayer_C_GetBossEncounterTrap::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetBossEncounterTrap, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'GI_SinglePlayer_C_GetBossEncounterTrap::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetBossEncounterTrap, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'GI_SinglePlayer_C_GetBossEncounterTrap::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetBossEncounterTrap, CallFunc_HasSpawnedEnemy_Result) == 0x00002C, "Member 'GI_SinglePlayer_C_GetBossEncounterTrap::CallFunc_HasSpawnedEnemy_Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetBossEncounterTrap, CallFunc_GetPrimaryStreamingLevel_Level) == 0x000030, "Member 'GI_SinglePlayer_C_GetBossEncounterTrap::CallFunc_GetPrimaryStreamingLevel_Level' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetBossEncounterTrap, CallFunc_GetLoadedLevel_ReturnValue) == 0x000038, "Member 'GI_SinglePlayer_C_GetBossEncounterTrap::CallFunc_GetLoadedLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetBossEncounterTrap, CallFunc_GetAllActorsOfClassInSubLevel_ReturnValue) == 0x000040, "Member 'GI_SinglePlayer_C_GetBossEncounterTrap::CallFunc_GetAllActorsOfClassInSubLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetBossEncounterTrap, CallFunc_Array_Length_ReturnValue) == 0x000050, "Member 'GI_SinglePlayer_C_GetBossEncounterTrap::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetBossEncounterTrap, CallFunc_Array_Get_Item) == 0x000058, "Member 'GI_SinglePlayer_C_GetBossEncounterTrap::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetBossEncounterTrap, CallFunc_Less_IntInt_ReturnValue) == 0x000060, "Member 'GI_SinglePlayer_C_GetBossEncounterTrap::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetBossEncounterTrap, CallFunc_BooleanAND_ReturnValue) == 0x000061, "Member 'GI_SinglePlayer_C_GetBossEncounterTrap::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.SetCurrentCombatIntensity
// 0x000C (0x000C - 0x0000)
struct GI_SinglePlayer_C_SetCurrentCombatIntensity final
{
public:
	float                                         Intensity;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_SetCurrentCombatIntensity) == 0x000004, "Wrong alignment on GI_SinglePlayer_C_SetCurrentCombatIntensity");
static_assert(sizeof(GI_SinglePlayer_C_SetCurrentCombatIntensity) == 0x00000C, "Wrong size on GI_SinglePlayer_C_SetCurrentCombatIntensity");
static_assert(offsetof(GI_SinglePlayer_C_SetCurrentCombatIntensity, Intensity) == 0x000000, "Member 'GI_SinglePlayer_C_SetCurrentCombatIntensity::Intensity' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetCurrentCombatIntensity, CallFunc_FClamp_ReturnValue) == 0x000004, "Member 'GI_SinglePlayer_C_SetCurrentCombatIntensity::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_SetCurrentCombatIntensity, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'GI_SinglePlayer_C_SetCurrentCombatIntensity::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.GetCurrentCombatIntensity
// 0x0004 (0x0004 - 0x0000)
struct GI_SinglePlayer_C_GetCurrentCombatIntensity final
{
public:
	float                                         Intensity;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_GetCurrentCombatIntensity) == 0x000004, "Wrong alignment on GI_SinglePlayer_C_GetCurrentCombatIntensity");
static_assert(sizeof(GI_SinglePlayer_C_GetCurrentCombatIntensity) == 0x000004, "Wrong size on GI_SinglePlayer_C_GetCurrentCombatIntensity");
static_assert(offsetof(GI_SinglePlayer_C_GetCurrentCombatIntensity, Intensity) == 0x000000, "Member 'GI_SinglePlayer_C_GetCurrentCombatIntensity::Intensity' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.GetProgressRatioThroughGame
// 0x0018 (0x0018 - 0x0000)
struct GI_SinglePlayer_C_GetProgressRatioThroughGame final
{
public:
	float                                         Result;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetDataTableRowCount_ReturnValue;         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Map_Length_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_GetProgressRatioThroughGame) == 0x000004, "Wrong alignment on GI_SinglePlayer_C_GetProgressRatioThroughGame");
static_assert(sizeof(GI_SinglePlayer_C_GetProgressRatioThroughGame) == 0x000018, "Wrong size on GI_SinglePlayer_C_GetProgressRatioThroughGame");
static_assert(offsetof(GI_SinglePlayer_C_GetProgressRatioThroughGame, Result) == 0x000000, "Member 'GI_SinglePlayer_C_GetProgressRatioThroughGame::Result' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetProgressRatioThroughGame, CallFunc_GetDataTableRowCount_ReturnValue) == 0x000004, "Member 'GI_SinglePlayer_C_GetProgressRatioThroughGame::CallFunc_GetDataTableRowCount_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetProgressRatioThroughGame, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000008, "Member 'GI_SinglePlayer_C_GetProgressRatioThroughGame::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetProgressRatioThroughGame, CallFunc_Map_Length_ReturnValue) == 0x00000C, "Member 'GI_SinglePlayer_C_GetProgressRatioThroughGame::CallFunc_Map_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetProgressRatioThroughGame, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x000010, "Member 'GI_SinglePlayer_C_GetProgressRatioThroughGame::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_GetProgressRatioThroughGame, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000014, "Member 'GI_SinglePlayer_C_GetProgressRatioThroughGame::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.PrintAchievementProgress
// 0x0108 (0x0108 - 0x0000)
struct GI_SinglePlayer_C_PrintAchievementProgress final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CallFunc_Map_Keys_Keys;                            // 0x0018(0x0010)(ReferenceParm)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FSTRUCT_AchievementClassData           CallFunc_Map_Find_Value;                           // 0x0060(0x0010)(HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TArray<class FName>                           CallFunc_Map_Keys_Keys_1;                          // 0x00A0(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item_1;                         // 0x00B4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Map_Find_Value_1;                         // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_1;                   // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C5[0x3];                                       // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_1;           // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_NameToString_ReturnValue_1;          // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_PrintAchievementProgress) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_PrintAchievementProgress");
static_assert(sizeof(GI_SinglePlayer_C_PrintAchievementProgress) == 0x000108, "Wrong size on GI_SinglePlayer_C_PrintAchievementProgress");
static_assert(offsetof(GI_SinglePlayer_C_PrintAchievementProgress, Temp_int_Array_Index_Variable) == 0x000000, "Member 'GI_SinglePlayer_C_PrintAchievementProgress::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PrintAchievementProgress, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'GI_SinglePlayer_C_PrintAchievementProgress::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PrintAchievementProgress, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'GI_SinglePlayer_C_PrintAchievementProgress::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PrintAchievementProgress, Temp_int_Array_Index_Variable_1) == 0x00000C, "Member 'GI_SinglePlayer_C_PrintAchievementProgress::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PrintAchievementProgress, Temp_int_Loop_Counter_Variable_1) == 0x000010, "Member 'GI_SinglePlayer_C_PrintAchievementProgress::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PrintAchievementProgress, CallFunc_Map_Keys_Keys) == 0x000018, "Member 'GI_SinglePlayer_C_PrintAchievementProgress::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PrintAchievementProgress, CallFunc_Array_Get_Item) == 0x000028, "Member 'GI_SinglePlayer_C_PrintAchievementProgress::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PrintAchievementProgress, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'GI_SinglePlayer_C_PrintAchievementProgress::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PrintAchievementProgress, CallFunc_Conv_NameToString_ReturnValue) == 0x000038, "Member 'GI_SinglePlayer_C_PrintAchievementProgress::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PrintAchievementProgress, CallFunc_Less_IntInt_ReturnValue) == 0x000048, "Member 'GI_SinglePlayer_C_PrintAchievementProgress::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PrintAchievementProgress, CallFunc_Concat_StrStr_ReturnValue) == 0x000050, "Member 'GI_SinglePlayer_C_PrintAchievementProgress::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PrintAchievementProgress, CallFunc_Map_Find_Value) == 0x000060, "Member 'GI_SinglePlayer_C_PrintAchievementProgress::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PrintAchievementProgress, CallFunc_Map_Find_ReturnValue) == 0x000070, "Member 'GI_SinglePlayer_C_PrintAchievementProgress::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PrintAchievementProgress, CallFunc_Add_IntInt_ReturnValue_1) == 0x000074, "Member 'GI_SinglePlayer_C_PrintAchievementProgress::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PrintAchievementProgress, CallFunc_Array_Length_ReturnValue_1) == 0x000078, "Member 'GI_SinglePlayer_C_PrintAchievementProgress::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PrintAchievementProgress, CallFunc_Conv_IntToString_ReturnValue) == 0x000080, "Member 'GI_SinglePlayer_C_PrintAchievementProgress::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PrintAchievementProgress, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000090, "Member 'GI_SinglePlayer_C_PrintAchievementProgress::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PrintAchievementProgress, CallFunc_Map_Keys_Keys_1) == 0x0000A0, "Member 'GI_SinglePlayer_C_PrintAchievementProgress::CallFunc_Map_Keys_Keys_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PrintAchievementProgress, CallFunc_Array_Length_ReturnValue_2) == 0x0000B0, "Member 'GI_SinglePlayer_C_PrintAchievementProgress::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PrintAchievementProgress, CallFunc_Array_Get_Item_1) == 0x0000B4, "Member 'GI_SinglePlayer_C_PrintAchievementProgress::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PrintAchievementProgress, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000BC, "Member 'GI_SinglePlayer_C_PrintAchievementProgress::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PrintAchievementProgress, CallFunc_Map_Find_Value_1) == 0x0000C0, "Member 'GI_SinglePlayer_C_PrintAchievementProgress::CallFunc_Map_Find_Value_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PrintAchievementProgress, CallFunc_Map_Find_ReturnValue_1) == 0x0000C4, "Member 'GI_SinglePlayer_C_PrintAchievementProgress::CallFunc_Map_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PrintAchievementProgress, CallFunc_Conv_IntToString_ReturnValue_1) == 0x0000C8, "Member 'GI_SinglePlayer_C_PrintAchievementProgress::CallFunc_Conv_IntToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PrintAchievementProgress, CallFunc_Conv_NameToString_ReturnValue_1) == 0x0000D8, "Member 'GI_SinglePlayer_C_PrintAchievementProgress::CallFunc_Conv_NameToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PrintAchievementProgress, CallFunc_Concat_StrStr_ReturnValue_2) == 0x0000E8, "Member 'GI_SinglePlayer_C_PrintAchievementProgress::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_PrintAchievementProgress, CallFunc_Concat_StrStr_ReturnValue_3) == 0x0000F8, "Member 'GI_SinglePlayer_C_PrintAchievementProgress::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.SetHackerGenderValue
// 0x0001 (0x0001 - 0x0000)
struct GI_SinglePlayer_C_SetHackerGenderValue final
{
public:
	ENUM_HackerGender                             NewGender;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GI_SinglePlayer_C_SetHackerGenderValue) == 0x000001, "Wrong alignment on GI_SinglePlayer_C_SetHackerGenderValue");
static_assert(sizeof(GI_SinglePlayer_C_SetHackerGenderValue) == 0x000001, "Wrong size on GI_SinglePlayer_C_SetHackerGenderValue");
static_assert(offsetof(GI_SinglePlayer_C_SetHackerGenderValue, NewGender) == 0x000000, "Member 'GI_SinglePlayer_C_SetHackerGenderValue::NewGender' has a wrong offset!");

// Function GI_SinglePlayer.GI_SinglePlayer_C.IsInGame
// 0x0020 (0x0020 - 0x0000)
struct GI_SinglePlayer_C_IsInGame final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetCurrentLevelName_ReturnValue;          // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue;            // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GI_SinglePlayer_C_IsInGame) == 0x000008, "Wrong alignment on GI_SinglePlayer_C_IsInGame");
static_assert(sizeof(GI_SinglePlayer_C_IsInGame) == 0x000020, "Wrong size on GI_SinglePlayer_C_IsInGame");
static_assert(offsetof(GI_SinglePlayer_C_IsInGame, ReturnValue) == 0x000000, "Member 'GI_SinglePlayer_C_IsInGame::ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_IsInGame, CallFunc_GetCurrentLevelName_ReturnValue) == 0x000008, "Member 'GI_SinglePlayer_C_IsInGame::CallFunc_GetCurrentLevelName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GI_SinglePlayer_C_IsInGame, CallFunc_EqualEqual_StrStr_ReturnValue) == 0x000018, "Member 'GI_SinglePlayer_C_IsInGame::CallFunc_EqualEqual_StrStr_ReturnValue' has a wrong offset!");

}

