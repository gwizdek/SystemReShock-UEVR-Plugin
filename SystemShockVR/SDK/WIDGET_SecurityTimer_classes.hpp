#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WIDGET_SecurityTimer

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WIDGET_SecurityTimer.WIDGET_SecurityTimer_C
// 0x0058 (0x02B8 - 0x0260)
class UWIDGET_SecurityTimer_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UGridMeshWidget*                        MESH_SecurityTimerAlert;                           // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UGridMeshWidget*                        MESH_SecurityTimerPlate;                           // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TEXT_Time;                                         // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TEXT_TimeMilliseconds;                             // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TEXT_XtendAdd;                                     // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	int32                                         Seconds;                                           // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Minutes;                                           // 0x0294(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Milliseconds;                                      // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LastCriticalState;                                 // 0x029C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29D[0x3];                                      // 0x029D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DisplayedXtendTimePool;                            // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastSetDisplayedTimerPool;                         // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         XtendTimePoolTarget;                               // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         XtendPoolRollUpTime;                               // 0x02AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         XtendPoolRollUpCurrent;                            // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_WIDGET_SecurityTimer(int32 EntryPoint);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void SetTimeRemaining(float TimeRemaining);
	void SetTimerColor(bool SecurityTimeCritical);
	void ShowTimerAlert(bool SecurityTimeCritical);
	void RollTimerPool();
	void SetNewXtendTimerTarget(float NewTime);
	void UpdateXtendTimerPool(float NewXtendPoolValue);
	void ToggleXtendPoolVisibility(bool Visibile);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WIDGET_SecurityTimer_C">();
	}
	static class UWIDGET_SecurityTimer_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWIDGET_SecurityTimer_C>();
	}
};
static_assert(alignof(UWIDGET_SecurityTimer_C) == 0x000008, "Wrong alignment on UWIDGET_SecurityTimer_C");
static_assert(sizeof(UWIDGET_SecurityTimer_C) == 0x0002B8, "Wrong size on UWIDGET_SecurityTimer_C");
static_assert(offsetof(UWIDGET_SecurityTimer_C, UberGraphFrame) == 0x000260, "Member 'UWIDGET_SecurityTimer_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWIDGET_SecurityTimer_C, MESH_SecurityTimerAlert) == 0x000268, "Member 'UWIDGET_SecurityTimer_C::MESH_SecurityTimerAlert' has a wrong offset!");
static_assert(offsetof(UWIDGET_SecurityTimer_C, MESH_SecurityTimerPlate) == 0x000270, "Member 'UWIDGET_SecurityTimer_C::MESH_SecurityTimerPlate' has a wrong offset!");
static_assert(offsetof(UWIDGET_SecurityTimer_C, TEXT_Time) == 0x000278, "Member 'UWIDGET_SecurityTimer_C::TEXT_Time' has a wrong offset!");
static_assert(offsetof(UWIDGET_SecurityTimer_C, TEXT_TimeMilliseconds) == 0x000280, "Member 'UWIDGET_SecurityTimer_C::TEXT_TimeMilliseconds' has a wrong offset!");
static_assert(offsetof(UWIDGET_SecurityTimer_C, TEXT_XtendAdd) == 0x000288, "Member 'UWIDGET_SecurityTimer_C::TEXT_XtendAdd' has a wrong offset!");
static_assert(offsetof(UWIDGET_SecurityTimer_C, Seconds) == 0x000290, "Member 'UWIDGET_SecurityTimer_C::Seconds' has a wrong offset!");
static_assert(offsetof(UWIDGET_SecurityTimer_C, Minutes) == 0x000294, "Member 'UWIDGET_SecurityTimer_C::Minutes' has a wrong offset!");
static_assert(offsetof(UWIDGET_SecurityTimer_C, Milliseconds) == 0x000298, "Member 'UWIDGET_SecurityTimer_C::Milliseconds' has a wrong offset!");
static_assert(offsetof(UWIDGET_SecurityTimer_C, LastCriticalState) == 0x00029C, "Member 'UWIDGET_SecurityTimer_C::LastCriticalState' has a wrong offset!");
static_assert(offsetof(UWIDGET_SecurityTimer_C, DisplayedXtendTimePool) == 0x0002A0, "Member 'UWIDGET_SecurityTimer_C::DisplayedXtendTimePool' has a wrong offset!");
static_assert(offsetof(UWIDGET_SecurityTimer_C, LastSetDisplayedTimerPool) == 0x0002A4, "Member 'UWIDGET_SecurityTimer_C::LastSetDisplayedTimerPool' has a wrong offset!");
static_assert(offsetof(UWIDGET_SecurityTimer_C, XtendTimePoolTarget) == 0x0002A8, "Member 'UWIDGET_SecurityTimer_C::XtendTimePoolTarget' has a wrong offset!");
static_assert(offsetof(UWIDGET_SecurityTimer_C, XtendPoolRollUpTime) == 0x0002AC, "Member 'UWIDGET_SecurityTimer_C::XtendPoolRollUpTime' has a wrong offset!");
static_assert(offsetof(UWIDGET_SecurityTimer_C, XtendPoolRollUpCurrent) == 0x0002B0, "Member 'UWIDGET_SecurityTimer_C::XtendPoolRollUpCurrent' has a wrong offset!");

}

