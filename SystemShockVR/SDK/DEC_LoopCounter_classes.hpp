#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DEC_LoopCounter

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass DEC_LoopCounter.DEC_LoopCounter_C
// 0x0018 (0x00B8 - 0x00A0)
class UDEC_LoopCounter_C final : public UBTDecorator_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	int32                                         Counter;                                           // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Counter_Max;                                       // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxIterations;                                     // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RandomExtraIterations;                             // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_DEC_LoopCounter(int32 EntryPoint);
	void ReceiveObserverDeactivated(class AActor* OwnerActor);
	void ReceiveObserverActivatedAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void ReceiveExecutionFinishAI(class AAIController* OwnerController, class APawn* ControlledPawn, EBTNodeResult NodeResult);
	bool PerformConditionCheckAI(class AAIController* OwnerController, class APawn* ControlledPawn);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"DEC_LoopCounter_C">();
	}
	static class UDEC_LoopCounter_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDEC_LoopCounter_C>();
	}
};
static_assert(alignof(UDEC_LoopCounter_C) == 0x000008, "Wrong alignment on UDEC_LoopCounter_C");
static_assert(sizeof(UDEC_LoopCounter_C) == 0x0000B8, "Wrong size on UDEC_LoopCounter_C");
static_assert(offsetof(UDEC_LoopCounter_C, UberGraphFrame) == 0x0000A0, "Member 'UDEC_LoopCounter_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UDEC_LoopCounter_C, Counter) == 0x0000A8, "Member 'UDEC_LoopCounter_C::Counter' has a wrong offset!");
static_assert(offsetof(UDEC_LoopCounter_C, Counter_Max) == 0x0000AC, "Member 'UDEC_LoopCounter_C::Counter_Max' has a wrong offset!");
static_assert(offsetof(UDEC_LoopCounter_C, MaxIterations) == 0x0000B0, "Member 'UDEC_LoopCounter_C::MaxIterations' has a wrong offset!");
static_assert(offsetof(UDEC_LoopCounter_C, RandomExtraIterations) == 0x0000B4, "Member 'UDEC_LoopCounter_C::RandomExtraIterations' has a wrong offset!");

}

