#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ITEM_WeaponBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ITEM_Base_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass ITEM_WeaponBase.ITEM_WeaponBase_C
// 0x0250 (0x0350 - 0x0100)
class UITEM_WeaponBase_C : public UITEM_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0100(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TSoftObjectPtr<class USkeletalMesh>           DisplayMesh;                                       // 0x0108(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      DisplayMaterial;                                   // 0x0130(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   AnimBP;                                            // 0x0158(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimMontage>            DrawMontage;                                       // 0x0180(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimMontage>            HolsterMontage;                                    // 0x01A8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UAnimSequence*                          IdleSequence;                                      // 0x01D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          WalkSequence;                                      // 0x01D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          SprintSequence;                                    // 0x01E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCOMP_Inventory_C*                      PreviousInventory;                                 // 0x01E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDataTableRowHandle                    WeaponRecoilType;                                  // 0x01F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	class UDataTable*                             WeaponDataTable;                                   // 0x0200(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UITEM_WeaponModKit_Base_C*>      InstalledModItems;                                 // 0x0208(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UClass*>                         InstalledModClasses;                               // 0x0218(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, SaveGame)
	int32                                         CurrentModeIndex;                                  // 0x0228(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WaitingToHolster;                                  // 0x022C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22D[0x3];                                      // 0x022D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnModeChanged;                                     // 0x0230(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnHolsterFinished;                                 // 0x0240(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          WaitingToDrop;                                     // 0x0250(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsObstructed;                                      // 0x0251(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_252[0x6];                                      // 0x0252(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    AcquiredAchievementHandle;                         // 0x0258(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FDataTableRowHandle                    InstallModAchievementHandle;                       // 0x0268(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FVector2D                              LastDropRelativeOffset;                            // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           ShowDisplayMeshTimerHandle;                        // 0x0280(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMeshComponent*                         WeaponMeshComponent;                               // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   DeathBlowFXParamName;                              // 0x0290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   BarrelSocketName;                                  // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           CachedDrawMontage;                                 // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           CachedObstructedDrawMontage;                       // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           CachedHolsterMontage;                              // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnModkitInstalled;                                 // 0x02B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UAnimMontage*                           CachedObstructedHolsterMontage;                    // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         CachedDischargeFX;                                 // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              CachedDischargeCue;                                // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              CachedDischargeFailCue;                            // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UForceFeedbackEffect*                   CachedDischargeForceFeedback;                      // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          ObstructedSequence;                                // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ObstructionDistance;                               // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FC[0x4];                                      // 0x02FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UAnimMontage>            ObstructedDrawMontage;                             // 0x0300(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimMontage>            ObstructedHolsterMontage;                          // 0x0328(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void OnModeChanged__DelegateSignature(class UITEM_WeaponBase_C* Weapon, int32 OldMode, int32 NewMode);
	void OnHolsterFinished__DelegateSignature();
	void OnModkitInstalled__DelegateSignature(class UITEM_WeaponBase_C* Weapon, class UITEM_WeaponModKit_Base_C* ModKit);
	void ExecuteUbergraph_ITEM_WeaponBase(int32 EntryPoint);
	void BlockingLoadHolsterMontage();
	void BlockingLoadDrawMontage();
	void StreamWeaponMontages();
	void StreamCurrentWeaponModeAssets();
	void StreamWeaponAssets();
	void OnLoaded_FC9CDFFA4B8E6327F9A536B33F5E5C08(class UObject* Loaded);
	void OnLoaded_F95A27484EEBCA2C60555B9F4C909E23(class UObject* Loaded);
	void OnLoaded_982DF01C4672B4DF3610A791CBB18814(class UObject* Loaded);
	void OnLoaded_E731026D4682628E706B3E9E5E5543CE(class UObject* Loaded);
	void OnLoaded_FFC92A4B49A40804BC72D8BA13D15C00(class UObject* Loaded);
	void OnLoaded_78FD906845BE6D6089755093C72A442C(class UObject* Loaded);
	void SetEquipSlotActive(bool Active);
	void EnableDamage(bool* Result);
	void DisableDamage(bool* Result);
	void ReceiveAnimationMessage(const class FString& Message, bool* Result);
	void EVENT_OnHolsterFinished();
	void GetModeCount(int32* Count_0);
	void GetCurrentMode(struct FSTRUCT_WeaponMode* Mode);
	void GetWeaponModeDefaults(int32 Index_0, struct FSTRUCT_WeaponMode* Mode);
	void GetWeaponMode(int32 Index_0, struct FSTRUCT_WeaponMode* Mode);
	void GetWeaponModeDisplayName(int32 ModeIndex, bool ShortName, class FText* Result);
	void IsWeaponModeMaintain(int32 ModeIndex, bool* Result);
	void CanCycleToMode(int32 ModeIndex, bool* Result);
	void SetCurrentMode(int32 Mode, bool* Result);
	void CycleCurrentMode(bool Previous, bool* Result);
	void SetupMaterial();
	void EVENT_OnShowDisplayMesh();
	void OnWeaponBecameActivatable(class APAWN_SystemShockCharacter_C* Character, bool ShowImmediately);
	void TryBecomeActivatableImmediately(bool ShowImmediately, bool* Result);
	void GetRecoilTemplate(struct FSTRUCT_WeaponRecoilTemplate* Result);
	void BeginWaitingToHolster(class UCharacterAction_C* HolsterAction);
	void ResumeWaitingToHolster(class UCOMP_Inventory_C* FromInventory);
	void CancelWaitingToHolster();
	void HandleHolsterFinishedEvents(class APAWN_SystemShockCharacter_C* Character);
	void SetWaitingToHolsterInternal();
	void SetWeaponMeshComponent(class UMeshComponent* MeshComponent);
	void ApplyAccuracyChange(float Scale);
	void ApplyRecoil(float Scale, bool HasKickback);
	void PlayDischargeParticleFX(bool AutoDestroy, class UNiagaraComponent** SpawnedComponent);
	void PlayDischargeSoundCue(class USoundCue* SoundCue, float VolumeScale, float PitchScale, class UAudioComponent** AudioComponent);
	void PlayDischargeSoundFX(float VolumeScale, float PitchScale);
	void ApplyAccuracyChangeAndRecoil(bool HasKickback);
	void PlayDischargeFailSoundFX();
	void IsHolsterActionPlaying(bool* Result);
	void GetWeaponMeshComponent(class UMeshComponent** Result);
	void IsWaitingToHolster(bool* Result);
	void IsWaitingToDrop(bool* Result);
	void HasInstalledAnyModKits(bool* Result);
	void HasInstalledModKitClass(class UClass* ModKitClass, bool* Result);
	void GetInstalledAppearanceModifiers(TArray<class UITEM_WeaponModKit_Base_C*>* Result);
	void GetDrawMontage(class UAnimMontage** Montage);
	void EquipTick(float DeltaTime);
	void GetHolsterMontage(class UAnimMontage** Montage);
	void CanAimWithWeapon(bool* Result);
	void GetIdleSequence(class UAnimSequenceBase** Result);
	void GetWalkSequence(class UAnimSequenceBase** Result);
	void GetSprintSequence(class UAnimSequenceBase** Result);
	void TryBeginReloading(bool* Result);
	void TryInstallWeaponModKit(class UITEM_WeaponModKit_Base_C* ModKit, bool* Result);
	void TryCreateModKitInstances(bool* Result);
	void IsWeaponObstructed(bool* Result);
	void GetWeaponObstructionDistance(float* Distance);
	void TryUpdateFirstPersonAttachments(class APAWN_SystemShockCharacter_C* Character);
	void SetWeaponObstructed(bool State);
	void PlayForceFeedbackEffect(class UForceFeedbackEffect* ForceFeedback);
	void PlayDischargeForceFeedback();
	void UpdateDisplayMesh(class APAWN_SystemShockCharacter_C* Character);
	void SetWeaponObstructionDistance(float NewDistance);
	void SetBarrelSocketName(class FName SocketName);
	void GetHotbarCount(int32* ResultCount);
	void GetHotbarIcon(class UTexture** ResultIcon);
	void ActivateHotbarSlot(bool* Result);
	void DeactivateHotbarSlot(bool* Result);
	void GetHotbarDisplayName(class FText* Result);
	void GetEquipState(bool* Result);
	void GetOwner(class AActor** Owner);
	void TryUseConsumable(bool* Result);
	void OnAddedToInventory();
	void InitializeItem(class UInventoryBag_C* Bag_0);
	void OnInventoryChanged(class UCOMP_Inventory_C* PrevInventory, bool* Result);
	void CanUnslot(bool* Result);
	void OnBecomeActivatable(bool* Result);
	void OnBecomeUnactivatable(bool* Result);
	void SetEquipped(bool State, bool* Result);
	void IsEquipped(bool* Result);
	void GetInventoryItemDetailsClass(class UClass** InventoryItemDetailsWidget);
	void CanBecomeActivatable(bool* Result);
	void GetHotbarSlottableObject(bool* Valid, TScriptInterface<class IINTERF_HotbarSlottable_C>* SlottableObject);
	void IsEquippable(bool* Result);
	void TryHandleDropEvent(class USceneComponent* SceneComponent, const struct FVector2D& RelativeOffset, bool* Result);
	void GetIconRenderClassCollection(struct FObjectClassCollection* Result);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ITEM_WeaponBase_C">();
	}
	static class UITEM_WeaponBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UITEM_WeaponBase_C>();
	}
};
static_assert(alignof(UITEM_WeaponBase_C) == 0x000008, "Wrong alignment on UITEM_WeaponBase_C");
static_assert(sizeof(UITEM_WeaponBase_C) == 0x000350, "Wrong size on UITEM_WeaponBase_C");
static_assert(offsetof(UITEM_WeaponBase_C, UberGraphFrame) == 0x000100, "Member 'UITEM_WeaponBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UITEM_WeaponBase_C, DisplayMesh) == 0x000108, "Member 'UITEM_WeaponBase_C::DisplayMesh' has a wrong offset!");
static_assert(offsetof(UITEM_WeaponBase_C, DisplayMaterial) == 0x000130, "Member 'UITEM_WeaponBase_C::DisplayMaterial' has a wrong offset!");
static_assert(offsetof(UITEM_WeaponBase_C, AnimBP) == 0x000158, "Member 'UITEM_WeaponBase_C::AnimBP' has a wrong offset!");
static_assert(offsetof(UITEM_WeaponBase_C, DrawMontage) == 0x000180, "Member 'UITEM_WeaponBase_C::DrawMontage' has a wrong offset!");
static_assert(offsetof(UITEM_WeaponBase_C, HolsterMontage) == 0x0001A8, "Member 'UITEM_WeaponBase_C::HolsterMontage' has a wrong offset!");
static_assert(offsetof(UITEM_WeaponBase_C, IdleSequence) == 0x0001D0, "Member 'UITEM_WeaponBase_C::IdleSequence' has a wrong offset!");
static_assert(offsetof(UITEM_WeaponBase_C, WalkSequence) == 0x0001D8, "Member 'UITEM_WeaponBase_C::WalkSequence' has a wrong offset!");
static_assert(offsetof(UITEM_WeaponBase_C, SprintSequence) == 0x0001E0, "Member 'UITEM_WeaponBase_C::SprintSequence' has a wrong offset!");
static_assert(offsetof(UITEM_WeaponBase_C, PreviousInventory) == 0x0001E8, "Member 'UITEM_WeaponBase_C::PreviousInventory' has a wrong offset!");
static_assert(offsetof(UITEM_WeaponBase_C, WeaponRecoilType) == 0x0001F0, "Member 'UITEM_WeaponBase_C::WeaponRecoilType' has a wrong offset!");
static_assert(offsetof(UITEM_WeaponBase_C, WeaponDataTable) == 0x000200, "Member 'UITEM_WeaponBase_C::WeaponDataTable' has a wrong offset!");
static_assert(offsetof(UITEM_WeaponBase_C, InstalledModItems) == 0x000208, "Member 'UITEM_WeaponBase_C::InstalledModItems' has a wrong offset!");
static_assert(offsetof(UITEM_WeaponBase_C, InstalledModClasses) == 0x000218, "Member 'UITEM_WeaponBase_C::InstalledModClasses' has a wrong offset!");
static_assert(offsetof(UITEM_WeaponBase_C, CurrentModeIndex) == 0x000228, "Member 'UITEM_WeaponBase_C::CurrentModeIndex' has a wrong offset!");
static_assert(offsetof(UITEM_WeaponBase_C, WaitingToHolster) == 0x00022C, "Member 'UITEM_WeaponBase_C::WaitingToHolster' has a wrong offset!");
static_assert(offsetof(UITEM_WeaponBase_C, OnModeChanged) == 0x000230, "Member 'UITEM_WeaponBase_C::OnModeChanged' has a wrong offset!");
static_assert(offsetof(UITEM_WeaponBase_C, OnHolsterFinished) == 0x000240, "Member 'UITEM_WeaponBase_C::OnHolsterFinished' has a wrong offset!");
static_assert(offsetof(UITEM_WeaponBase_C, WaitingToDrop) == 0x000250, "Member 'UITEM_WeaponBase_C::WaitingToDrop' has a wrong offset!");
static_assert(offsetof(UITEM_WeaponBase_C, IsObstructed) == 0x000251, "Member 'UITEM_WeaponBase_C::IsObstructed' has a wrong offset!");
static_assert(offsetof(UITEM_WeaponBase_C, AcquiredAchievementHandle) == 0x000258, "Member 'UITEM_WeaponBase_C::AcquiredAchievementHandle' has a wrong offset!");
static_assert(offsetof(UITEM_WeaponBase_C, InstallModAchievementHandle) == 0x000268, "Member 'UITEM_WeaponBase_C::InstallModAchievementHandle' has a wrong offset!");
static_assert(offsetof(UITEM_WeaponBase_C, LastDropRelativeOffset) == 0x000278, "Member 'UITEM_WeaponBase_C::LastDropRelativeOffset' has a wrong offset!");
static_assert(offsetof(UITEM_WeaponBase_C, ShowDisplayMeshTimerHandle) == 0x000280, "Member 'UITEM_WeaponBase_C::ShowDisplayMeshTimerHandle' has a wrong offset!");
static_assert(offsetof(UITEM_WeaponBase_C, WeaponMeshComponent) == 0x000288, "Member 'UITEM_WeaponBase_C::WeaponMeshComponent' has a wrong offset!");
static_assert(offsetof(UITEM_WeaponBase_C, DeathBlowFXParamName) == 0x000290, "Member 'UITEM_WeaponBase_C::DeathBlowFXParamName' has a wrong offset!");
static_assert(offsetof(UITEM_WeaponBase_C, BarrelSocketName) == 0x000298, "Member 'UITEM_WeaponBase_C::BarrelSocketName' has a wrong offset!");
static_assert(offsetof(UITEM_WeaponBase_C, CachedDrawMontage) == 0x0002A0, "Member 'UITEM_WeaponBase_C::CachedDrawMontage' has a wrong offset!");
static_assert(offsetof(UITEM_WeaponBase_C, CachedObstructedDrawMontage) == 0x0002A8, "Member 'UITEM_WeaponBase_C::CachedObstructedDrawMontage' has a wrong offset!");
static_assert(offsetof(UITEM_WeaponBase_C, CachedHolsterMontage) == 0x0002B0, "Member 'UITEM_WeaponBase_C::CachedHolsterMontage' has a wrong offset!");
static_assert(offsetof(UITEM_WeaponBase_C, OnModkitInstalled) == 0x0002B8, "Member 'UITEM_WeaponBase_C::OnModkitInstalled' has a wrong offset!");
static_assert(offsetof(UITEM_WeaponBase_C, CachedObstructedHolsterMontage) == 0x0002C8, "Member 'UITEM_WeaponBase_C::CachedObstructedHolsterMontage' has a wrong offset!");
static_assert(offsetof(UITEM_WeaponBase_C, CachedDischargeFX) == 0x0002D0, "Member 'UITEM_WeaponBase_C::CachedDischargeFX' has a wrong offset!");
static_assert(offsetof(UITEM_WeaponBase_C, CachedDischargeCue) == 0x0002D8, "Member 'UITEM_WeaponBase_C::CachedDischargeCue' has a wrong offset!");
static_assert(offsetof(UITEM_WeaponBase_C, CachedDischargeFailCue) == 0x0002E0, "Member 'UITEM_WeaponBase_C::CachedDischargeFailCue' has a wrong offset!");
static_assert(offsetof(UITEM_WeaponBase_C, CachedDischargeForceFeedback) == 0x0002E8, "Member 'UITEM_WeaponBase_C::CachedDischargeForceFeedback' has a wrong offset!");
static_assert(offsetof(UITEM_WeaponBase_C, ObstructedSequence) == 0x0002F0, "Member 'UITEM_WeaponBase_C::ObstructedSequence' has a wrong offset!");
static_assert(offsetof(UITEM_WeaponBase_C, ObstructionDistance) == 0x0002F8, "Member 'UITEM_WeaponBase_C::ObstructionDistance' has a wrong offset!");
static_assert(offsetof(UITEM_WeaponBase_C, ObstructedDrawMontage) == 0x000300, "Member 'UITEM_WeaponBase_C::ObstructedDrawMontage' has a wrong offset!");
static_assert(offsetof(UITEM_WeaponBase_C, ObstructedHolsterMontage) == 0x000328, "Member 'UITEM_WeaponBase_C::ObstructedHolsterMontage' has a wrong offset!");

}

