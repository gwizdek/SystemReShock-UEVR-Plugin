#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: INTERF_ANIM_Hacker

#include "Basic.hpp"

#include "INTERF_ANIM_Hacker_classes.hpp"
#include "INTERF_ANIM_Hacker_parameters.hpp"


namespace SDK
{

// Function INTERF_ANIM_Hacker.INTERF_ANIM_Hacker_C.SetWalkPhase
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   FootstepProgress                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   FootstepSign                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IINTERF_ANIM_Hacker_C::SetWalkPhase(float FootstepProgress, int32 FootstepSign, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERF_ANIM_Hacker_C", "SetWalkPhase");

	Params::INTERF_ANIM_Hacker_C_SetWalkPhase Parms{};

	Parms.FootstepProgress = FootstepProgress;
	Parms.FootstepSign = FootstepSign;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERF_ANIM_Hacker.INTERF_ANIM_Hacker_C.SetEquippedItem
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UITEM_WeaponBase_C*               Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IINTERF_ANIM_Hacker_C::SetEquippedItem(class UITEM_WeaponBase_C* Item, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERF_ANIM_Hacker_C", "SetEquippedItem");

	Params::INTERF_ANIM_Hacker_C_SetEquippedItem Parms{};

	Parms.Item = Item;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERF_ANIM_Hacker.INTERF_ANIM_Hacker_C.SetMovementParameters
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Speed                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        Direction                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CrouchProgress                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IINTERF_ANIM_Hacker_C::SetMovementParameters(float Speed, const struct FVector2D& Direction, float CrouchProgress, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERF_ANIM_Hacker_C", "SetMovementParameters");

	Params::INTERF_ANIM_Hacker_C_SetMovementParameters Parms{};

	Parms.Speed = Speed;
	Parms.Direction = std::move(Direction);
	Parms.CrouchProgress = CrouchProgress;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERF_ANIM_Hacker.INTERF_ANIM_Hacker_C.SetIsSprinting
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    State                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IINTERF_ANIM_Hacker_C::SetIsSprinting(bool State, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERF_ANIM_Hacker_C", "SetIsSprinting");

	Params::INTERF_ANIM_Hacker_C_SetIsSprinting Parms{};

	Parms.State = State;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERF_ANIM_Hacker.INTERF_ANIM_Hacker_C.SetLeanProgress
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   SignedProgress                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IINTERF_ANIM_Hacker_C::SetLeanProgress(float SignedProgress, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERF_ANIM_Hacker_C", "SetLeanProgress");

	Params::INTERF_ANIM_Hacker_C_SetLeanProgress Parms{};

	Parms.SignedProgress = SignedProgress;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERF_ANIM_Hacker.INTERF_ANIM_Hacker_C.SetCameraTarget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         LookRotation                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          HeadLocation                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IINTERF_ANIM_Hacker_C::SetCameraTarget(const struct FRotator& LookRotation, const struct FVector& HeadLocation, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERF_ANIM_Hacker_C", "SetCameraTarget");

	Params::INTERF_ANIM_Hacker_C_SetCameraTarget Parms{};

	Parms.LookRotation = std::move(LookRotation);
	Parms.HeadLocation = std::move(HeadLocation);

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERF_ANIM_Hacker.INTERF_ANIM_Hacker_C.SetOverrideIdleSequence
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimSequenceBase*                OverrideIdleSequence                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsCinematic                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IINTERF_ANIM_Hacker_C::SetOverrideIdleSequence(class UAnimSequenceBase* OverrideIdleSequence, bool IsCinematic, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERF_ANIM_Hacker_C", "SetOverrideIdleSequence");

	Params::INTERF_ANIM_Hacker_C_SetOverrideIdleSequence Parms{};

	Parms.OverrideIdleSequence = OverrideIdleSequence;
	Parms.IsCinematic = IsCinematic;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERF_ANIM_Hacker.INTERF_ANIM_Hacker_C.SetWeaponOffset
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Offset                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IINTERF_ANIM_Hacker_C::SetWeaponOffset(const struct FVector& Offset, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERF_ANIM_Hacker_C", "SetWeaponOffset");

	Params::INTERF_ANIM_Hacker_C_SetWeaponOffset Parms{};

	Parms.Offset = std::move(Offset);

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERF_ANIM_Hacker.INTERF_ANIM_Hacker_C.SetUseIK
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    UseIK                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IINTERF_ANIM_Hacker_C::SetUseIK(bool UseIK, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERF_ANIM_Hacker_C", "SetUseIK");

	Params::INTERF_ANIM_Hacker_C_SetUseIK Parms{};

	Parms.UseIK = UseIK;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERF_ANIM_Hacker.INTERF_ANIM_Hacker_C.GetCameraRootPos
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IINTERF_ANIM_Hacker_C::GetCameraRootPos(struct FVector* Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERF_ANIM_Hacker_C", "GetCameraRootPos");

	Params::INTERF_ANIM_Hacker_C_GetCameraRootPos Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);
}


// Function INTERF_ANIM_Hacker.INTERF_ANIM_Hacker_C.SetLadderParams
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsMounted                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// ENUM_LeftRight                          RestingFootDown                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IINTERF_ANIM_Hacker_C::SetLadderParams(bool IsMounted, ENUM_LeftRight RestingFootDown, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERF_ANIM_Hacker_C", "SetLadderParams");

	Params::INTERF_ANIM_Hacker_C_SetLadderParams Parms{};

	Parms.IsMounted = IsMounted;
	Parms.RestingFootDown = RestingFootDown;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERF_ANIM_Hacker.INTERF_ANIM_Hacker_C.GetOverrideIdleSequence
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimSequenceBase*                Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IINTERF_ANIM_Hacker_C::GetOverrideIdleSequence(class UAnimSequenceBase** Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERF_ANIM_Hacker_C", "GetOverrideIdleSequence");

	Params::INTERF_ANIM_Hacker_C_GetOverrideIdleSequence Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERF_ANIM_Hacker.INTERF_ANIM_Hacker_C.SetIsGrounded
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsGrounded                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IINTERF_ANIM_Hacker_C::SetIsGrounded(bool IsGrounded, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERF_ANIM_Hacker_C", "SetIsGrounded");

	Params::INTERF_ANIM_Hacker_C_SetIsGrounded Parms{};

	Parms.IsGrounded = IsGrounded;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERF_ANIM_Hacker.INTERF_ANIM_Hacker_C.SetAirLandingScale
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Scale                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IINTERF_ANIM_Hacker_C::SetAirLandingScale(float Scale, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERF_ANIM_Hacker_C", "SetAirLandingScale");

	Params::INTERF_ANIM_Hacker_C_SetAirLandingScale Parms{};

	Parms.Scale = Scale;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERF_ANIM_Hacker.INTERF_ANIM_Hacker_C.SetAimProgress
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Progress                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IINTERF_ANIM_Hacker_C::SetAimProgress(float Progress, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERF_ANIM_Hacker_C", "SetAimProgress");

	Params::INTERF_ANIM_Hacker_C_SetAimProgress Parms{};

	Parms.Progress = Progress;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERF_ANIM_Hacker.INTERF_ANIM_Hacker_C.UpdateEquippedItemSequences
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IINTERF_ANIM_Hacker_C::UpdateEquippedItemSequences(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERF_ANIM_Hacker_C", "UpdateEquippedItemSequences");

	Params::INTERF_ANIM_Hacker_C_UpdateEquippedItemSequences Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERF_ANIM_Hacker.INTERF_ANIM_Hacker_C.SetWeaponObstructed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Obstructed                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IINTERF_ANIM_Hacker_C::SetWeaponObstructed(bool Obstructed, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERF_ANIM_Hacker_C", "SetWeaponObstructed");

	Params::INTERF_ANIM_Hacker_C_SetWeaponObstructed Parms{};

	Parms.Obstructed = Obstructed;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}

}

