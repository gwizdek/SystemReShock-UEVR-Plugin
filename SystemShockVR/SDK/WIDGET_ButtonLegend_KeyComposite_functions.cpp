#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WIDGET_ButtonLegend_KeyComposite

#include "Basic.hpp"

#include "WIDGET_ButtonLegend_KeyComposite_classes.hpp"
#include "WIDGET_ButtonLegend_KeyComposite_parameters.hpp"


namespace SDK
{

// Function WIDGET_ButtonLegend_KeyComposite.WIDGET_ButtonLegend_KeyComposite_C.ExecuteUbergraph_WIDGET_ButtonLegend_KeyComposite
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWIDGET_ButtonLegend_KeyComposite_C::ExecuteUbergraph_WIDGET_ButtonLegend_KeyComposite(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_ButtonLegend_KeyComposite_C", "ExecuteUbergraph_WIDGET_ButtonLegend_KeyComposite");

	Params::WIDGET_ButtonLegend_KeyComposite_C_ExecuteUbergraph_WIDGET_ButtonLegend_KeyComposite Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WIDGET_ButtonLegend_KeyComposite.WIDGET_ButtonLegend_KeyComposite_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWIDGET_ButtonLegend_KeyComposite_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_ButtonLegend_KeyComposite_C", "PreConstruct");

	Params::WIDGET_ButtonLegend_KeyComposite_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WIDGET_ButtonLegend_KeyComposite.WIDGET_ButtonLegend_KeyComposite_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UWIDGET_ButtonLegend_KeyComposite_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_ButtonLegend_KeyComposite_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WIDGET_ButtonLegend_KeyComposite.WIDGET_ButtonLegend_KeyComposite_C.SetDecoratorColor
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FColor                           Color                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWIDGET_ButtonLegend_KeyComposite_C::SetDecoratorColor(const struct FColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_ButtonLegend_KeyComposite_C", "SetDecoratorColor");

	Params::WIDGET_ButtonLegend_KeyComposite_C_SetDecoratorColor Parms{};

	Parms.Color = std::move(Color);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WIDGET_ButtonLegend_KeyComposite.WIDGET_ButtonLegend_KeyComposite_C.GetInputActionFromGenericToken
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString                           InputString                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    IsUsingGamepad                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FName                             Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWIDGET_ButtonLegend_KeyComposite_C::GetInputActionFromGenericToken(const class FString& InputString, bool IsUsingGamepad, class FName* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_ButtonLegend_KeyComposite_C", "GetInputActionFromGenericToken");

	Params::WIDGET_ButtonLegend_KeyComposite_C_GetInputActionFromGenericToken Parms{};

	Parms.InputString = std::move(InputString);
	Parms.IsUsingGamepad = IsUsingGamepad;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function WIDGET_ButtonLegend_KeyComposite.WIDGET_ButtonLegend_KeyComposite_C.GetInputActionFromTokenPair
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString                           InputStringA                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           InputStringB                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    IsUsingGamepad                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FName                             Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWIDGET_ButtonLegend_KeyComposite_C::GetInputActionFromTokenPair(const class FString& InputStringA, const class FString& InputStringB, bool IsUsingGamepad, class FName* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_ButtonLegend_KeyComposite_C", "GetInputActionFromTokenPair");

	Params::WIDGET_ButtonLegend_KeyComposite_C_GetInputActionFromTokenPair Parms{};

	Parms.InputStringA = std::move(InputStringA);
	Parms.InputStringB = std::move(InputStringB);
	Parms.IsUsingGamepad = IsUsingGamepad;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function WIDGET_ButtonLegend_KeyComposite.WIDGET_ButtonLegend_KeyComposite_C.ParseInputActionsFromString
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           InputString                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    IsUsingGamepad                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FName                             InputNameA                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             InputNameB                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWIDGET_ButtonLegend_KeyComposite_C::ParseInputActionsFromString(const class FString& InputString, bool IsUsingGamepad, class FName* InputNameA, class FName* InputNameB)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_ButtonLegend_KeyComposite_C", "ParseInputActionsFromString");

	Params::WIDGET_ButtonLegend_KeyComposite_C_ParseInputActionsFromString Parms{};

	Parms.InputString = std::move(InputString);
	Parms.IsUsingGamepad = IsUsingGamepad;

	UObject::ProcessEvent(Func, &Parms);

	if (InputNameA != nullptr)
		*InputNameA = Parms.InputNameA;

	if (InputNameB != nullptr)
		*InputNameB = Parms.InputNameB;
}


// Function WIDGET_ButtonLegend_KeyComposite.WIDGET_ButtonLegend_KeyComposite_C.InitializeLegendKeys
// (Protected, BlueprintCallable, BlueprintEvent)

void UWIDGET_ButtonLegend_KeyComposite_C::InitializeLegendKeys()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_ButtonLegend_KeyComposite_C", "InitializeLegendKeys");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WIDGET_ButtonLegend_KeyComposite.WIDGET_ButtonLegend_KeyComposite_C.InitializeLegendKeyComposite
// (Protected, BlueprintCallable, BlueprintEvent)

void UWIDGET_ButtonLegend_KeyComposite_C::InitializeLegendKeyComposite()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_ButtonLegend_KeyComposite_C", "InitializeLegendKeyComposite");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WIDGET_ButtonLegend_KeyComposite.WIDGET_ButtonLegend_KeyComposite_C.EVENT_OnUsingGamepadChanged
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsUsingGamepad                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWIDGET_ButtonLegend_KeyComposite_C::EVENT_OnUsingGamepadChanged(bool IsUsingGamepad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_ButtonLegend_KeyComposite_C", "EVENT_OnUsingGamepadChanged");

	Params::WIDGET_ButtonLegend_KeyComposite_C_EVENT_OnUsingGamepadChanged Parms{};

	Parms.IsUsingGamepad = IsUsingGamepad;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WIDGET_ButtonLegend_KeyComposite.WIDGET_ButtonLegend_KeyComposite_C.UpdateInputActions
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsUsingGamepad                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWIDGET_ButtonLegend_KeyComposite_C::UpdateInputActions(bool IsUsingGamepad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_ButtonLegend_KeyComposite_C", "UpdateInputActions");

	Params::WIDGET_ButtonLegend_KeyComposite_C_UpdateInputActions Parms{};

	Parms.IsUsingGamepad = IsUsingGamepad;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WIDGET_ButtonLegend_KeyComposite.WIDGET_ButtonLegend_KeyComposite_C.InitializeDecorator
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTextMeshWidget*                  TextMeshWidget                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FColor                           Color                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UWIDGET_ButtonLegend_KeyComposite_C::InitializeDecorator(class UTextMeshWidget* TextMeshWidget, const struct FColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_ButtonLegend_KeyComposite_C", "InitializeDecorator");

	Params::WIDGET_ButtonLegend_KeyComposite_C_InitializeDecorator Parms{};

	Parms.TextMeshWidget = TextMeshWidget;
	Parms.Color = std::move(Color);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function WIDGET_ButtonLegend_KeyComposite.WIDGET_ButtonLegend_KeyComposite_C.GetDecoratorSizeFromPayload
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Payload                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector2D UWIDGET_ButtonLegend_KeyComposite_C::GetDecoratorSizeFromPayload(const class FString& Payload)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_ButtonLegend_KeyComposite_C", "GetDecoratorSizeFromPayload");

	Params::WIDGET_ButtonLegend_KeyComposite_C_GetDecoratorSizeFromPayload Parms{};

	Parms.Payload = std::move(Payload);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

