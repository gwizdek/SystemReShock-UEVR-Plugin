#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: INTERACT_Snacktron

#include "Basic.hpp"

#include "INTERACT_Snacktron_classes.hpp"
#include "INTERACT_Snacktron_parameters.hpp"


namespace SDK
{

// Function INTERACT_Snacktron.INTERACT_Snacktron_C.ExecuteUbergraph_INTERACT_Snacktron
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AINTERACT_Snacktron_C::ExecuteUbergraph_INTERACT_Snacktron(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Snacktron_C", "ExecuteUbergraph_INTERACT_Snacktron");

	Params::INTERACT_Snacktron_C_ExecuteUbergraph_INTERACT_Snacktron Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function INTERACT_Snacktron.INTERACT_Snacktron_C.BndEvt__ProximityDetector_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void AINTERACT_Snacktron_C::BndEvt__ProximityDetector_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Snacktron_C", "BndEvt__ProximityDetector_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature");

	Params::INTERACT_Snacktron_C_BndEvt__ProximityDetector_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function INTERACT_Snacktron.INTERACT_Snacktron_C.BndEvt__COMP_AttribManager_K2Node_ComponentBoundEvent_1_OnDamageSignature__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FAttribDamageInstance            DamageInstance                                         (BlueprintVisible, BlueprintReadOnly, Parm)
// class UObject*                          UserParams                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AINTERACT_Snacktron_C::BndEvt__COMP_AttribManager_K2Node_ComponentBoundEvent_1_OnDamageSignature__DelegateSignature(class AActor* OtherActor, const struct FAttribDamageInstance& DamageInstance, class UObject* UserParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Snacktron_C", "BndEvt__COMP_AttribManager_K2Node_ComponentBoundEvent_1_OnDamageSignature__DelegateSignature");

	Params::INTERACT_Snacktron_C_BndEvt__COMP_AttribManager_K2Node_ComponentBoundEvent_1_OnDamageSignature__DelegateSignature Parms{};

	Parms.OtherActor = OtherActor;
	Parms.DamageInstance = std::move(DamageInstance);
	Parms.UserParams = UserParams;

	UObject::ProcessEvent(Func, &Parms);
}


// Function INTERACT_Snacktron.INTERACT_Snacktron_C.BndEvt__COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature
// (BlueprintEvent)
// Parameters:
// bool                                    bVisibleState                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_Snacktron_C::BndEvt__COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature(bool bVisibleState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Snacktron_C", "BndEvt__COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature");

	Params::INTERACT_Snacktron_C_BndEvt__COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature Parms{};

	Parms.bVisibleState = bVisibleState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function INTERACT_Snacktron.INTERACT_Snacktron_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AINTERACT_Snacktron_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Snacktron_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function INTERACT_Snacktron.INTERACT_Snacktron_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AINTERACT_Snacktron_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Snacktron_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function INTERACT_Snacktron.INTERACT_Snacktron_C.InitializeVendingMachine
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void AINTERACT_Snacktron_C::InitializeVendingMachine()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Snacktron_C", "InitializeVendingMachine");

	UObject::ProcessEvent(Func, nullptr);
}


// Function INTERACT_Snacktron.INTERACT_Snacktron_C.InitializeKeypadComponents
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void AINTERACT_Snacktron_C::InitializeKeypadComponents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Snacktron_C", "InitializeKeypadComponents");

	UObject::ProcessEvent(Func, nullptr);
}


// Function INTERACT_Snacktron.INTERACT_Snacktron_C.InitializeAttributes
// (Protected, BlueprintCallable, BlueprintEvent)

void AINTERACT_Snacktron_C::InitializeAttributes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Snacktron_C", "InitializeAttributes");

	UObject::ProcessEvent(Func, nullptr);
}


// Function INTERACT_Snacktron.INTERACT_Snacktron_C.UpdateSmallScreen
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    State                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_Snacktron_C::UpdateSmallScreen(bool State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Snacktron_C", "UpdateSmallScreen");

	Params::INTERACT_Snacktron_C_UpdateSmallScreen Parms{};

	Parms.State = State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function INTERACT_Snacktron.INTERACT_Snacktron_C.UpdateStockScreen
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    State                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_Snacktron_C::UpdateStockScreen(bool State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Snacktron_C", "UpdateStockScreen");

	Params::INTERACT_Snacktron_C_UpdateStockScreen Parms{};

	Parms.State = State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function INTERACT_Snacktron.INTERACT_Snacktron_C.UpdateSnacktronScreen
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    State                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_Snacktron_C::UpdateSnacktronScreen(bool State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Snacktron_C", "UpdateSnacktronScreen");

	Params::INTERACT_Snacktron_C_UpdateSnacktronScreen Parms{};

	Parms.State = State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function INTERACT_Snacktron.INTERACT_Snacktron_C.IsSnacktronFunctional
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_Snacktron_C::IsSnacktronFunctional(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Snacktron_C", "IsSnacktronFunctional");

	Params::INTERACT_Snacktron_C_IsSnacktronFunctional Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERACT_Snacktron.INTERACT_Snacktron_C.IsSnacktronDisabled
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_Snacktron_C::IsSnacktronDisabled(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Snacktron_C", "IsSnacktronDisabled");

	Params::INTERACT_Snacktron_C_IsSnacktronDisabled Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERACT_Snacktron.INTERACT_Snacktron_C.IsSnackInStockByIndex
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   SnackIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_Snacktron_C::IsSnackInStockByIndex(int32 SnackIndex, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Snacktron_C", "IsSnackInStockByIndex");

	Params::INTERACT_Snacktron_C_IsSnackInStockByIndex Parms{};

	Parms.SnackIndex = SnackIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERACT_Snacktron.INTERACT_Snacktron_C.HasAnyAvailableSnacks
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_Snacktron_C::HasAnyAvailableSnacks(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Snacktron_C", "HasAnyAvailableSnacks");

	Params::INTERACT_Snacktron_C_HasAnyAvailableSnacks Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERACT_Snacktron.INTERACT_Snacktron_C.GetStockItemClassByIndex
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   StockIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           StockClass                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AINTERACT_Snacktron_C::GetStockItemClassByIndex(int32 StockIndex, class UClass** StockClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Snacktron_C", "GetStockItemClassByIndex");

	Params::INTERACT_Snacktron_C_GetStockItemClassByIndex Parms{};

	Parms.StockIndex = StockIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (StockClass != nullptr)
		*StockClass = Parms.StockClass;
}


// Function INTERACT_Snacktron.INTERACT_Snacktron_C.UpdateKeypad
// (Protected, BlueprintCallable, BlueprintEvent)

void AINTERACT_Snacktron_C::UpdateKeypad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Snacktron_C", "UpdateKeypad");

	UObject::ProcessEvent(Func, nullptr);
}


// Function INTERACT_Snacktron.INTERACT_Snacktron_C.UpdateLightVisibility
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    State                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_Snacktron_C::UpdateLightVisibility(bool State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Snacktron_C", "UpdateLightVisibility");

	Params::INTERACT_Snacktron_C_UpdateLightVisibility Parms{};

	Parms.State = State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function INTERACT_Snacktron.INTERACT_Snacktron_C.UpdateVendingMachineVisibility
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    VisibleState                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_Snacktron_C::UpdateVendingMachineVisibility(bool VisibleState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Snacktron_C", "UpdateVendingMachineVisibility");

	Params::INTERACT_Snacktron_C_UpdateVendingMachineVisibility Parms{};

	Parms.VisibleState = VisibleState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function INTERACT_Snacktron.INTERACT_Snacktron_C.GetTargetShape
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              CursorPrimitive                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UShapeComponent*                  ShapeComponent                                         (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AINTERACT_Snacktron_C::GetTargetShape(class UPrimitiveComponent* CursorPrimitive, class UShapeComponent** ShapeComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Snacktron_C", "GetTargetShape");

	Params::INTERACT_Snacktron_C_GetTargetShape Parms{};

	Parms.CursorPrimitive = CursorPrimitive;

	UObject::ProcessEvent(Func, &Parms);

	if (ShapeComponent != nullptr)
		*ShapeComponent = Parms.ShapeComponent;
}


// Function INTERACT_Snacktron.INTERACT_Snacktron_C.TryInteract
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           SourceActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              CursorPrimitive                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENUM_InteractionType                    InteractionType                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSTRUCT_InteractResults          InteractResults                                        (Parm, OutParm, HasGetValueTypeHash)

void AINTERACT_Snacktron_C::TryInteract(class AActor* SourceActor, class UPrimitiveComponent* CursorPrimitive, ENUM_InteractionType InteractionType, struct FSTRUCT_InteractResults* InteractResults)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Snacktron_C", "TryInteract");

	Params::INTERACT_Snacktron_C_TryInteract Parms{};

	Parms.SourceActor = SourceActor;
	Parms.CursorPrimitive = CursorPrimitive;
	Parms.InteractionType = InteractionType;

	UObject::ProcessEvent(Func, &Parms);

	if (InteractResults != nullptr)
		*InteractResults = std::move(Parms.InteractResults);
}


// Function INTERACT_Snacktron.INTERACT_Snacktron_C.UpdateMeshEmissiveStrength
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Scale                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AINTERACT_Snacktron_C::UpdateMeshEmissiveStrength(float Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Snacktron_C", "UpdateMeshEmissiveStrength");

	Params::INTERACT_Snacktron_C_UpdateMeshEmissiveStrength Parms{};

	Parms.Scale = Scale;

	UObject::ProcessEvent(Func, &Parms);
}


// Function INTERACT_Snacktron.INTERACT_Snacktron_C.ClearKeycode
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ClearHighlight                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_Snacktron_C::ClearKeycode(bool ClearHighlight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Snacktron_C", "ClearKeycode");

	Params::INTERACT_Snacktron_C_ClearKeycode Parms{};

	Parms.ClearHighlight = ClearHighlight;

	UObject::ProcessEvent(Func, &Parms);
}


// Function INTERACT_Snacktron.INTERACT_Snacktron_C.GetKeyFromPrimitive
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UPrimitiveComponent*              CursorPrimitive                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Key                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AINTERACT_Snacktron_C::GetKeyFromPrimitive(class UPrimitiveComponent* CursorPrimitive, int32* Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Snacktron_C", "GetKeyFromPrimitive");

	Params::INTERACT_Snacktron_C_GetKeyFromPrimitive Parms{};

	Parms.CursorPrimitive = CursorPrimitive;

	UObject::ProcessEvent(Func, &Parms);

	if (Key != nullptr)
		*Key = Parms.Key;
}


// Function INTERACT_Snacktron.INTERACT_Snacktron_C.HandleKeypadClearEntry
// (Protected, BlueprintCallable, BlueprintEvent)

void AINTERACT_Snacktron_C::HandleKeypadClearEntry()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Snacktron_C", "HandleKeypadClearEntry");

	UObject::ProcessEvent(Func, nullptr);
}


// Function INTERACT_Snacktron.INTERACT_Snacktron_C.HandleKeypadNumEntry
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              KeyPrimitive                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ENUM_FailSucceedIgnore                  DispensedSnack                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AINTERACT_Snacktron_C::HandleKeypadNumEntry(class UPrimitiveComponent* KeyPrimitive, ENUM_FailSucceedIgnore* DispensedSnack)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Snacktron_C", "HandleKeypadNumEntry");

	Params::INTERACT_Snacktron_C_HandleKeypadNumEntry Parms{};

	Parms.KeyPrimitive = KeyPrimitive;

	UObject::ProcessEvent(Func, &Parms);

	if (DispensedSnack != nullptr)
		*DispensedSnack = Parms.DispensedSnack;
}


// Function INTERACT_Snacktron.INTERACT_Snacktron_C.TryFindAndAcceptCoin
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APAWN_SystemShockCharacter_C*     Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_Snacktron_C::TryFindAndAcceptCoin(class APAWN_SystemShockCharacter_C* Character, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Snacktron_C", "TryFindAndAcceptCoin");

	Params::INTERACT_Snacktron_C_TryFindAndAcceptCoin Parms{};

	Parms.Character = Character;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function INTERACT_Snacktron.INTERACT_Snacktron_C.TryAcceptCoin
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UITEM_Coin_C*                     CoinItem                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_Snacktron_C::TryAcceptCoin(class UITEM_Coin_C* CoinItem, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Snacktron_C", "TryAcceptCoin");

	Params::INTERACT_Snacktron_C_TryAcceptCoin Parms{};

	Parms.CoinItem = CoinItem;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function INTERACT_Snacktron.INTERACT_Snacktron_C.TryDamageScreen
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FAttribDamageInstance            DamageInstance                                         (BlueprintVisible, BlueprintReadOnly, Parm)
// class UOBJ_ImpactData_C*                ImpactData                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AINTERACT_Snacktron_C::TryDamageScreen(const struct FAttribDamageInstance& DamageInstance, class UOBJ_ImpactData_C* ImpactData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Snacktron_C", "TryDamageScreen");

	Params::INTERACT_Snacktron_C_TryDamageScreen Parms{};

	Parms.DamageInstance = std::move(DamageInstance);
	Parms.ImpactData = ImpactData;

	UObject::ProcessEvent(Func, &Parms);
}


// Function INTERACT_Snacktron.INTERACT_Snacktron_C.EVENT_OnHighlightFinished
// (Private, BlueprintCallable, BlueprintEvent)

void AINTERACT_Snacktron_C::EVENT_OnHighlightFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Snacktron_C", "EVENT_OnHighlightFinished");

	UObject::ProcessEvent(Func, nullptr);
}


// Function INTERACT_Snacktron.INTERACT_Snacktron_C.TryReceiveItem
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UITEM_Base_C*                     Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_Snacktron_C::TryReceiveItem(class UITEM_Base_C* Item, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Snacktron_C", "TryReceiveItem");

	Params::INTERACT_Snacktron_C_TryReceiveItem Parms{};

	Parms.Item = Item;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERACT_Snacktron.INTERACT_Snacktron_C.EVENT_OnDispenseSnack
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void AINTERACT_Snacktron_C::EVENT_OnDispenseSnack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Snacktron_C", "EVENT_OnDispenseSnack");

	UObject::ProcessEvent(Func, nullptr);
}


// Function INTERACT_Snacktron.INTERACT_Snacktron_C.EVENT_OnPlayGreetingVoiceOver
// (Private, BlueprintCallable, BlueprintEvent)

void AINTERACT_Snacktron_C::EVENT_OnPlayGreetingVoiceOver()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Snacktron_C", "EVENT_OnPlayGreetingVoiceOver");

	UObject::ProcessEvent(Func, nullptr);
}


// Function INTERACT_Snacktron.INTERACT_Snacktron_C.EVENT_OnPlayGoodbyeVoiceOver
// (Private, BlueprintCallable, BlueprintEvent)

void AINTERACT_Snacktron_C::EVENT_OnPlayGoodbyeVoiceOver()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Snacktron_C", "EVENT_OnPlayGoodbyeVoiceOver");

	UObject::ProcessEvent(Func, nullptr);
}


// Function INTERACT_Snacktron.INTERACT_Snacktron_C.EVENT_OnPlaySelectionVoiceOver
// (Private, BlueprintCallable, BlueprintEvent)

void AINTERACT_Snacktron_C::EVENT_OnPlaySelectionVoiceOver()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Snacktron_C", "EVENT_OnPlaySelectionVoiceOver");

	UObject::ProcessEvent(Func, nullptr);
}


// Function INTERACT_Snacktron.INTERACT_Snacktron_C.EVENT_OnPlayNoFundsVoiceOver
// (Private, BlueprintCallable, BlueprintEvent)

void AINTERACT_Snacktron_C::EVENT_OnPlayNoFundsVoiceOver()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Snacktron_C", "EVENT_OnPlayNoFundsVoiceOver");

	UObject::ProcessEvent(Func, nullptr);
}


// Function INTERACT_Snacktron.INTERACT_Snacktron_C.GetDispenseSoundCueForPickup
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class APICKUP_Base_C*                   PickupActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TSoftObjectPtr<class USoundCue>         SoundCue                                               (Parm, OutParm, HasGetValueTypeHash)

void AINTERACT_Snacktron_C::GetDispenseSoundCueForPickup(class APICKUP_Base_C* PickupActor, TSoftObjectPtr<class USoundCue>* SoundCue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Snacktron_C", "GetDispenseSoundCueForPickup");

	Params::INTERACT_Snacktron_C_GetDispenseSoundCueForPickup Parms{};

	Parms.PickupActor = PickupActor;

	UObject::ProcessEvent(Func, &Parms);

	if (SoundCue != nullptr)
		*SoundCue = Parms.SoundCue;
}


// Function INTERACT_Snacktron.INTERACT_Snacktron_C.GetFocusWorldTransform
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FTransform                       Transform                                              (Parm, OutParm, IsPlainOldData, NoDestructor)

void AINTERACT_Snacktron_C::GetFocusWorldTransform(struct FTransform* Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Snacktron_C", "GetFocusWorldTransform");

	Params::INTERACT_Snacktron_C_GetFocusWorldTransform Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Transform != nullptr)
		*Transform = std::move(Parms.Transform);
}


// Function INTERACT_Snacktron.INTERACT_Snacktron_C.CycleFocusedPrimitiveComponent
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              CursorPrimitive                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Vertical                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Previous                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_Snacktron_C::CycleFocusedPrimitiveComponent(class UPrimitiveComponent* CursorPrimitive, bool Vertical, bool Previous)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Snacktron_C", "CycleFocusedPrimitiveComponent");

	Params::INTERACT_Snacktron_C_CycleFocusedPrimitiveComponent Parms{};

	Parms.CursorPrimitive = CursorPrimitive;
	Parms.Vertical = Vertical;
	Parms.Previous = Previous;

	UObject::ProcessEvent(Func, &Parms);
}


// Function INTERACT_Snacktron.INTERACT_Snacktron_C.OnFinishedFocusing
// (Protected, BlueprintCallable, BlueprintEvent)

void AINTERACT_Snacktron_C::OnFinishedFocusing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Snacktron_C", "OnFinishedFocusing");

	UObject::ProcessEvent(Func, nullptr);
}


// Function INTERACT_Snacktron.INTERACT_Snacktron_C.TryDispenseSpecialSnack
// (Protected, BlueprintCallable, BlueprintEvent)

void AINTERACT_Snacktron_C::TryDispenseSpecialSnack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Snacktron_C", "TryDispenseSpecialSnack");

	UObject::ProcessEvent(Func, nullptr);
}


// Function INTERACT_Snacktron.INTERACT_Snacktron_C.CanReceiveItem
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UITEM_Base_C*                     Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_Snacktron_C::CanReceiveItem(class UITEM_Base_C* Item, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Snacktron_C", "CanReceiveItem");

	Params::INTERACT_Snacktron_C_CanReceiveItem Parms{};

	Parms.Item = Item;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERACT_Snacktron.INTERACT_Snacktron_C.EVENT_OnDisableAttribChanged
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   CurrValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   LastValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AINTERACT_Snacktron_C::EVENT_OnDisableAttribChanged(float CurrValue, float LastValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Snacktron_C", "EVENT_OnDisableAttribChanged");

	Params::INTERACT_Snacktron_C_EVENT_OnDisableAttribChanged Parms{};

	Parms.CurrValue = CurrValue;
	Parms.LastValue = LastValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function INTERACT_Snacktron.INTERACT_Snacktron_C.TryToggleSpecialTrigger
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           PurchasedItemClass                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AINTERACT_Snacktron_C::TryToggleSpecialTrigger(class UClass* PurchasedItemClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Snacktron_C", "TryToggleSpecialTrigger");

	Params::INTERACT_Snacktron_C_TryToggleSpecialTrigger Parms{};

	Parms.PurchasedItemClass = PurchasedItemClass;

	UObject::ProcessEvent(Func, &Parms);
}


// Function INTERACT_Snacktron.INTERACT_Snacktron_C.TryPlayVoiceOverAudio
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class USoundCue>         SoundCue                                               (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_Snacktron_C::TryPlayVoiceOverAudio(TSoftObjectPtr<class USoundCue> SoundCue, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Snacktron_C", "TryPlayVoiceOverAudio");

	Params::INTERACT_Snacktron_C_TryPlayVoiceOverAudio Parms{};

	Parms.SoundCue = SoundCue;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERACT_Snacktron.INTERACT_Snacktron_C.SetInteractPowered
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    State                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_Snacktron_C::SetInteractPowered(bool State, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Snacktron_C", "SetInteractPowered");

	Params::INTERACT_Snacktron_C_SetInteractPowered Parms{};

	Parms.State = State;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function INTERACT_Snacktron.INTERACT_Snacktron_C.CanModifyInteractPower
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AINTERACT_Snacktron_C::CanModifyInteractPower(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("INTERACT_Snacktron_C", "CanModifyInteractPower");

	Params::INTERACT_Snacktron_C_CanModifyInteractPower Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}

}

