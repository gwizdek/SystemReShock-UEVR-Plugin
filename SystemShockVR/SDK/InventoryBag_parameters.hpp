#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: InventoryBag

#include "Basic.hpp"

#include "STRUCT_SoftItemParams_structs.hpp"
#include "ENUM_CardinalDirection_structs.hpp"
#include "STRUCT_InventoryBagParams_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "STRUCT_HardItemParams_structs.hpp"
#include "ENUM_UpgradeResult_structs.hpp"
#include "STRUCT_ItemInsertionRules_structs.hpp"
#include "ENUM_InventorySlotType_structs.hpp"
#include "ENUM_ItemType_structs.hpp"


namespace SDK::Params
{

// Function InventoryBag.InventoryBag_C.OnBagChanged__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct InventoryBag_C_OnBagChanged__DelegateSignature final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(InventoryBag_C_OnBagChanged__DelegateSignature) == 0x000004, "Wrong alignment on InventoryBag_C_OnBagChanged__DelegateSignature");
static_assert(sizeof(InventoryBag_C_OnBagChanged__DelegateSignature) == 0x000004, "Wrong size on InventoryBag_C_OnBagChanged__DelegateSignature");
static_assert(offsetof(InventoryBag_C_OnBagChanged__DelegateSignature, SlotIndex) == 0x000000, "Member 'InventoryBag_C_OnBagChanged__DelegateSignature::SlotIndex' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.InitializeBag
// 0x00C8 (0x00C8 - 0x0000)
struct InventoryBag_C_InitializeBag final
{
public:
	class UITEM_Base_C*                           CurrentItem;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SlotCount;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UITEM_Base_C*>                   ItemsInSet;                                        // 0x0010(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_3;                  // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_3;                   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CallFunc_Array_Get_Item;                           // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_GetSlotIndicesForItemInstance_Slot_Indices; // 0x0068(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Get_Item_1;                         // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSlotIndex_Result;                      // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSlotCountRequiredForItem_Result;       // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_92[0x6];                                       // 0x0092(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UITEM_Base_C*>                   CallFunc_Set_ToArray_Result;                       // 0x0098(0x0010)(ReferenceParm)
	class UITEM_Base_C*                           CallFunc_Array_Get_Item_2;                         // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           CallFunc_Array_Get_Item_3;                         // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x00C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C3[0x1];                                       // 0x00C3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Max_ReturnValue;                          // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(InventoryBag_C_InitializeBag) == 0x000008, "Wrong alignment on InventoryBag_C_InitializeBag");
static_assert(sizeof(InventoryBag_C_InitializeBag) == 0x0000C8, "Wrong size on InventoryBag_C_InitializeBag");
static_assert(offsetof(InventoryBag_C_InitializeBag, CurrentItem) == 0x000000, "Member 'InventoryBag_C_InitializeBag::CurrentItem' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_InitializeBag, SlotCount) == 0x000008, "Member 'InventoryBag_C_InitializeBag::SlotCount' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_InitializeBag, ItemsInSet) == 0x000010, "Member 'InventoryBag_C_InitializeBag::ItemsInSet' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_InitializeBag, Temp_int_Loop_Counter_Variable) == 0x000020, "Member 'InventoryBag_C_InitializeBag::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_InitializeBag, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'InventoryBag_C_InitializeBag::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_InitializeBag, Temp_int_Array_Index_Variable) == 0x000028, "Member 'InventoryBag_C_InitializeBag::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_InitializeBag, Temp_int_Array_Index_Variable_1) == 0x00002C, "Member 'InventoryBag_C_InitializeBag::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_InitializeBag, Temp_int_Loop_Counter_Variable_1) == 0x000030, "Member 'InventoryBag_C_InitializeBag::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_InitializeBag, Temp_int_Loop_Counter_Variable_2) == 0x000034, "Member 'InventoryBag_C_InitializeBag::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_InitializeBag, CallFunc_Add_IntInt_ReturnValue_1) == 0x000038, "Member 'InventoryBag_C_InitializeBag::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_InitializeBag, CallFunc_Add_IntInt_ReturnValue_2) == 0x00003C, "Member 'InventoryBag_C_InitializeBag::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_InitializeBag, Temp_int_Loop_Counter_Variable_3) == 0x000040, "Member 'InventoryBag_C_InitializeBag::Temp_int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_InitializeBag, CallFunc_Add_IntInt_ReturnValue_3) == 0x000044, "Member 'InventoryBag_C_InitializeBag::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_InitializeBag, Temp_int_Array_Index_Variable_2) == 0x000048, "Member 'InventoryBag_C_InitializeBag::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_InitializeBag, Temp_int_Array_Index_Variable_3) == 0x00004C, "Member 'InventoryBag_C_InitializeBag::Temp_int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_InitializeBag, CallFunc_Array_Length_ReturnValue) == 0x000050, "Member 'InventoryBag_C_InitializeBag::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_InitializeBag, CallFunc_Array_Get_Item) == 0x000058, "Member 'InventoryBag_C_InitializeBag::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_InitializeBag, CallFunc_Less_IntInt_ReturnValue) == 0x000060, "Member 'InventoryBag_C_InitializeBag::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_InitializeBag, CallFunc_GetSlotIndicesForItemInstance_Slot_Indices) == 0x000068, "Member 'InventoryBag_C_InitializeBag::CallFunc_GetSlotIndicesForItemInstance_Slot_Indices' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_InitializeBag, CallFunc_Array_Get_Item_1) == 0x000078, "Member 'InventoryBag_C_InitializeBag::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_InitializeBag, CallFunc_GetSlotIndex_Result) == 0x00007C, "Member 'InventoryBag_C_InitializeBag::CallFunc_GetSlotIndex_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_InitializeBag, CallFunc_GetObjectClass_ReturnValue) == 0x000080, "Member 'InventoryBag_C_InitializeBag::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_InitializeBag, CallFunc_Array_Length_ReturnValue_1) == 0x000088, "Member 'InventoryBag_C_InitializeBag::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_InitializeBag, CallFunc_GetSlotCountRequiredForItem_Result) == 0x00008C, "Member 'InventoryBag_C_InitializeBag::CallFunc_GetSlotCountRequiredForItem_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_InitializeBag, CallFunc_Less_IntInt_ReturnValue_1) == 0x000090, "Member 'InventoryBag_C_InitializeBag::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_InitializeBag, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000091, "Member 'InventoryBag_C_InitializeBag::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_InitializeBag, CallFunc_Set_ToArray_Result) == 0x000098, "Member 'InventoryBag_C_InitializeBag::CallFunc_Set_ToArray_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_InitializeBag, CallFunc_Array_Get_Item_2) == 0x0000A8, "Member 'InventoryBag_C_InitializeBag::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_InitializeBag, CallFunc_Array_Get_Item_3) == 0x0000B0, "Member 'InventoryBag_C_InitializeBag::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_InitializeBag, CallFunc_Array_Length_ReturnValue_2) == 0x0000B8, "Member 'InventoryBag_C_InitializeBag::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_InitializeBag, CallFunc_Array_Length_ReturnValue_3) == 0x0000BC, "Member 'InventoryBag_C_InitializeBag::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_InitializeBag, CallFunc_Less_IntInt_ReturnValue_2) == 0x0000C0, "Member 'InventoryBag_C_InitializeBag::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_InitializeBag, CallFunc_Less_IntInt_ReturnValue_3) == 0x0000C1, "Member 'InventoryBag_C_InitializeBag::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_InitializeBag, CallFunc_Greater_IntInt_ReturnValue) == 0x0000C2, "Member 'InventoryBag_C_InitializeBag::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_InitializeBag, CallFunc_Max_ReturnValue) == 0x0000C4, "Member 'InventoryBag_C_InitializeBag::CallFunc_Max_ReturnValue' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.TryFixupBag
// 0x00C0 (0x00C0 - 0x0000)
struct InventoryBag_C_TryFixupBag final
{
public:
	struct FSTRUCT_InventoryBagParams             DefaultParams;                                     // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              ItemGridCoords;                                    // 0x0034(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CurrentItem;                                       // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DefaultMaxSlotCount;                               // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DefaultGridWidth;                                  // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UITEM_Base_C*>                   CallFunc_GetItemArray_Items;                       // 0x0060(0x0010)(ReferenceParm)
	int32                                         CallFunc_GetSlotIndex_Result;                      // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CallFunc_Array_Get_Item;                           // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              CallFunc_GetGridCoordinatesFromSlotIndex_GridCoords; // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetMaxSlots_Count;                        // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCOMP_Inventory_C*                      CallFunc_GetInventory_Inventory;                   // 0x00A8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetGridWidth_Result;                      // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_1;            // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(InventoryBag_C_TryFixupBag) == 0x000008, "Wrong alignment on InventoryBag_C_TryFixupBag");
static_assert(sizeof(InventoryBag_C_TryFixupBag) == 0x0000C0, "Wrong size on InventoryBag_C_TryFixupBag");
static_assert(offsetof(InventoryBag_C_TryFixupBag, DefaultParams) == 0x000000, "Member 'InventoryBag_C_TryFixupBag::DefaultParams' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_TryFixupBag, Result) == 0x000030, "Member 'InventoryBag_C_TryFixupBag::Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_TryFixupBag, ItemGridCoords) == 0x000034, "Member 'InventoryBag_C_TryFixupBag::ItemGridCoords' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_TryFixupBag, CurrentItem) == 0x000040, "Member 'InventoryBag_C_TryFixupBag::CurrentItem' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_TryFixupBag, DefaultMaxSlotCount) == 0x000048, "Member 'InventoryBag_C_TryFixupBag::DefaultMaxSlotCount' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_TryFixupBag, DefaultGridWidth) == 0x00004C, "Member 'InventoryBag_C_TryFixupBag::DefaultGridWidth' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_TryFixupBag, Temp_int_Array_Index_Variable) == 0x000050, "Member 'InventoryBag_C_TryFixupBag::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_TryFixupBag, Temp_int_Loop_Counter_Variable) == 0x000054, "Member 'InventoryBag_C_TryFixupBag::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_TryFixupBag, CallFunc_IsValid_ReturnValue) == 0x000058, "Member 'InventoryBag_C_TryFixupBag::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_TryFixupBag, CallFunc_Add_IntInt_ReturnValue) == 0x00005C, "Member 'InventoryBag_C_TryFixupBag::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_TryFixupBag, CallFunc_GetItemArray_Items) == 0x000060, "Member 'InventoryBag_C_TryFixupBag::CallFunc_GetItemArray_Items' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_TryFixupBag, CallFunc_GetSlotIndex_Result) == 0x000070, "Member 'InventoryBag_C_TryFixupBag::CallFunc_GetSlotIndex_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_TryFixupBag, CallFunc_Array_Get_Item) == 0x000078, "Member 'InventoryBag_C_TryFixupBag::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_TryFixupBag, CallFunc_GetGridCoordinatesFromSlotIndex_GridCoords) == 0x000080, "Member 'InventoryBag_C_TryFixupBag::CallFunc_GetGridCoordinatesFromSlotIndex_GridCoords' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_TryFixupBag, CallFunc_Array_Length_ReturnValue) == 0x000088, "Member 'InventoryBag_C_TryFixupBag::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_TryFixupBag, CallFunc_Less_IntInt_ReturnValue) == 0x00008C, "Member 'InventoryBag_C_TryFixupBag::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_TryFixupBag, CallFunc_Multiply_IntInt_ReturnValue) == 0x000090, "Member 'InventoryBag_C_TryFixupBag::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_TryFixupBag, CallFunc_Add_IntInt_ReturnValue_1) == 0x000094, "Member 'InventoryBag_C_TryFixupBag::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_TryFixupBag, CallFunc_Array_Length_ReturnValue_1) == 0x000098, "Member 'InventoryBag_C_TryFixupBag::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_TryFixupBag, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00009C, "Member 'InventoryBag_C_TryFixupBag::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_TryFixupBag, CallFunc_GetMaxSlots_Count) == 0x0000A0, "Member 'InventoryBag_C_TryFixupBag::CallFunc_GetMaxSlots_Count' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_TryFixupBag, CallFunc_GetInventory_Inventory) == 0x0000A8, "Member 'InventoryBag_C_TryFixupBag::CallFunc_GetInventory_Inventory' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_TryFixupBag, CallFunc_NotEqual_IntInt_ReturnValue) == 0x0000B0, "Member 'InventoryBag_C_TryFixupBag::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_TryFixupBag, CallFunc_GetGridWidth_Result) == 0x0000B4, "Member 'InventoryBag_C_TryFixupBag::CallFunc_GetGridWidth_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_TryFixupBag, CallFunc_NotEqual_IntInt_ReturnValue_1) == 0x0000B8, "Member 'InventoryBag_C_TryFixupBag::CallFunc_NotEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_TryFixupBag, CallFunc_BooleanOR_ReturnValue) == 0x0000B9, "Member 'InventoryBag_C_TryFixupBag::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.GetInventory
// 0x0020 (0x0020 - 0x0000)
struct InventoryBag_C_GetInventory final
{
public:
	class UCOMP_Inventory_C*                      Inventory;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_GetOuterObject_ReturnValue;               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCOMP_Inventory_C*                      K2Node_DynamicCast_AsCOMP_Inventory;               // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(InventoryBag_C_GetInventory) == 0x000008, "Wrong alignment on InventoryBag_C_GetInventory");
static_assert(sizeof(InventoryBag_C_GetInventory) == 0x000020, "Wrong size on InventoryBag_C_GetInventory");
static_assert(offsetof(InventoryBag_C_GetInventory, Inventory) == 0x000000, "Member 'InventoryBag_C_GetInventory::Inventory' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetInventory, CallFunc_GetOuterObject_ReturnValue) == 0x000008, "Member 'InventoryBag_C_GetInventory::CallFunc_GetOuterObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetInventory, K2Node_DynamicCast_AsCOMP_Inventory) == 0x000010, "Member 'InventoryBag_C_GetInventory::K2Node_DynamicCast_AsCOMP_Inventory' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetInventory, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'InventoryBag_C_GetInventory::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.IsOverflowBag
// 0x0001 (0x0001 - 0x0000)
struct InventoryBag_C_IsOverflowBag final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(InventoryBag_C_IsOverflowBag) == 0x000001, "Wrong alignment on InventoryBag_C_IsOverflowBag");
static_assert(sizeof(InventoryBag_C_IsOverflowBag) == 0x000001, "Wrong size on InventoryBag_C_IsOverflowBag");
static_assert(offsetof(InventoryBag_C_IsOverflowBag, Result) == 0x000000, "Member 'InventoryBag_C_IsOverflowBag::Result' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.AddItemInternal
// 0x00E0 (0x00E0 - 0x0000)
struct InventoryBag_C_AddItemInternal final
{
public:
	class UITEM_Base_C*                           Item;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 ItemClass;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_ItemInsertionRules             InsertionRules;                                    // 0x0010(0x0002)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Modify;                                            // 0x0012(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InOutCount;                                        // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CandidateSlotIndex;                                // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxSlotCountForLoop;                               // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsItemRotated;                                     // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CandidateItem;                                     // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsItemRotated_Result;                     // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetSlotIndex_Result;                      // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              CallFunc_GetItemGridSize_Result;                   // 0x0044(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsItemRotated_Result_1;                   // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4E[0x2];                                       // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CallFunc_GetSlotItem_Item;                         // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetMaxSlots_Count;                        // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AddItemToSlotInternal_Result;             // 0x0085(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0086(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_87[0x1];                                       // 0x0087(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              CallFunc_GetItemRotatedGridSize_Result;            // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasSlotSpaceForItemWithSize_Result;       // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_92[0x2];                                       // 0x0092(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AddItemToSlotInternal_Result_1;           // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              CallFunc_GetItemRotatedGridSize_Result_1;          // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasSlotSpaceForItemWithSize_Result_1;     // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AddItemToSlotInternal_Result_2;           // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ClassClass_ReturnValue;        // 0x00B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B3[0x5];                                       // 0x00B3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UITEM_Base_C*>                   CallFunc_Set_ToArray_Result;                       // 0x00B8(0x0010)(ReferenceParm)
	class UITEM_Base_C*                           CallFunc_Array_Get_Item;                           // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_1;            // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D1[0x3];                                       // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(InventoryBag_C_AddItemInternal) == 0x000008, "Wrong alignment on InventoryBag_C_AddItemInternal");
static_assert(sizeof(InventoryBag_C_AddItemInternal) == 0x0000E0, "Wrong size on InventoryBag_C_AddItemInternal");
static_assert(offsetof(InventoryBag_C_AddItemInternal, Item) == 0x000000, "Member 'InventoryBag_C_AddItemInternal::Item' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemInternal, ItemClass) == 0x000008, "Member 'InventoryBag_C_AddItemInternal::ItemClass' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemInternal, InsertionRules) == 0x000010, "Member 'InventoryBag_C_AddItemInternal::InsertionRules' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemInternal, Modify) == 0x000012, "Member 'InventoryBag_C_AddItemInternal::Modify' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemInternal, InOutCount) == 0x000014, "Member 'InventoryBag_C_AddItemInternal::InOutCount' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemInternal, Result) == 0x000018, "Member 'InventoryBag_C_AddItemInternal::Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemInternal, CandidateSlotIndex) == 0x00001C, "Member 'InventoryBag_C_AddItemInternal::CandidateSlotIndex' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemInternal, MaxSlotCountForLoop) == 0x000020, "Member 'InventoryBag_C_AddItemInternal::MaxSlotCountForLoop' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemInternal, IsItemRotated) == 0x000024, "Member 'InventoryBag_C_AddItemInternal::IsItemRotated' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemInternal, CandidateItem) == 0x000028, "Member 'InventoryBag_C_AddItemInternal::CandidateItem' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemInternal, Temp_int_Loop_Counter_Variable) == 0x000030, "Member 'InventoryBag_C_AddItemInternal::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemInternal, CallFunc_Add_IntInt_ReturnValue) == 0x000034, "Member 'InventoryBag_C_AddItemInternal::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemInternal, Temp_int_Array_Index_Variable) == 0x000038, "Member 'InventoryBag_C_AddItemInternal::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemInternal, CallFunc_IsItemRotated_Result) == 0x00003C, "Member 'InventoryBag_C_AddItemInternal::CallFunc_IsItemRotated_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemInternal, CallFunc_GetSlotIndex_Result) == 0x000040, "Member 'InventoryBag_C_AddItemInternal::CallFunc_GetSlotIndex_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemInternal, CallFunc_GetItemGridSize_Result) == 0x000044, "Member 'InventoryBag_C_AddItemInternal::CallFunc_GetItemGridSize_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemInternal, CallFunc_NotEqual_IntInt_ReturnValue) == 0x00004C, "Member 'InventoryBag_C_AddItemInternal::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemInternal, CallFunc_IsItemRotated_Result_1) == 0x00004D, "Member 'InventoryBag_C_AddItemInternal::CallFunc_IsItemRotated_Result_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemInternal, CallFunc_GetObjectClass_ReturnValue) == 0x000050, "Member 'InventoryBag_C_AddItemInternal::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemInternal, CallFunc_IsValid_ReturnValue) == 0x000058, "Member 'InventoryBag_C_AddItemInternal::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemInternal, CallFunc_GetSlotItem_Item) == 0x000060, "Member 'InventoryBag_C_AddItemInternal::CallFunc_GetSlotItem_Item' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemInternal, CallFunc_IsValid_ReturnValue_1) == 0x000068, "Member 'InventoryBag_C_AddItemInternal::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemInternal, CallFunc_Subtract_IntInt_ReturnValue) == 0x00006C, "Member 'InventoryBag_C_AddItemInternal::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemInternal, CallFunc_Not_PreBool_ReturnValue) == 0x000070, "Member 'InventoryBag_C_AddItemInternal::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemInternal, CallFunc_Array_Length_ReturnValue) == 0x000074, "Member 'InventoryBag_C_AddItemInternal::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemInternal, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000078, "Member 'InventoryBag_C_AddItemInternal::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemInternal, CallFunc_Add_IntInt_ReturnValue_1) == 0x00007C, "Member 'InventoryBag_C_AddItemInternal::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemInternal, CallFunc_GetMaxSlots_Count) == 0x000080, "Member 'InventoryBag_C_AddItemInternal::CallFunc_GetMaxSlots_Count' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemInternal, CallFunc_Not_PreBool_ReturnValue_1) == 0x000084, "Member 'InventoryBag_C_AddItemInternal::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemInternal, CallFunc_AddItemToSlotInternal_Result) == 0x000085, "Member 'InventoryBag_C_AddItemInternal::CallFunc_AddItemToSlotInternal_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemInternal, CallFunc_Not_PreBool_ReturnValue_2) == 0x000086, "Member 'InventoryBag_C_AddItemInternal::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemInternal, CallFunc_GetItemRotatedGridSize_Result) == 0x000088, "Member 'InventoryBag_C_AddItemInternal::CallFunc_GetItemRotatedGridSize_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemInternal, CallFunc_HasSlotSpaceForItemWithSize_Result) == 0x000090, "Member 'InventoryBag_C_AddItemInternal::CallFunc_HasSlotSpaceForItemWithSize_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemInternal, Temp_bool_Variable) == 0x000091, "Member 'InventoryBag_C_AddItemInternal::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemInternal, Temp_int_Variable) == 0x000094, "Member 'InventoryBag_C_AddItemInternal::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemInternal, K2Node_Select_Default) == 0x000098, "Member 'InventoryBag_C_AddItemInternal::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemInternal, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00009C, "Member 'InventoryBag_C_AddItemInternal::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemInternal, CallFunc_Add_IntInt_ReturnValue_2) == 0x0000A0, "Member 'InventoryBag_C_AddItemInternal::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemInternal, CallFunc_AddItemToSlotInternal_Result_1) == 0x0000A4, "Member 'InventoryBag_C_AddItemInternal::CallFunc_AddItemToSlotInternal_Result_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemInternal, CallFunc_GetItemRotatedGridSize_Result_1) == 0x0000A8, "Member 'InventoryBag_C_AddItemInternal::CallFunc_GetItemRotatedGridSize_Result_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemInternal, CallFunc_HasSlotSpaceForItemWithSize_Result_1) == 0x0000B0, "Member 'InventoryBag_C_AddItemInternal::CallFunc_HasSlotSpaceForItemWithSize_Result_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemInternal, CallFunc_AddItemToSlotInternal_Result_2) == 0x0000B1, "Member 'InventoryBag_C_AddItemInternal::CallFunc_AddItemToSlotInternal_Result_2' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemInternal, CallFunc_EqualEqual_ClassClass_ReturnValue) == 0x0000B2, "Member 'InventoryBag_C_AddItemInternal::CallFunc_EqualEqual_ClassClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemInternal, CallFunc_Set_ToArray_Result) == 0x0000B8, "Member 'InventoryBag_C_AddItemInternal::CallFunc_Set_ToArray_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemInternal, CallFunc_Array_Get_Item) == 0x0000C8, "Member 'InventoryBag_C_AddItemInternal::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemInternal, CallFunc_NotEqual_IntInt_ReturnValue_1) == 0x0000D0, "Member 'InventoryBag_C_AddItemInternal::CallFunc_NotEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemInternal, CallFunc_Array_Length_ReturnValue_1) == 0x0000D4, "Member 'InventoryBag_C_AddItemInternal::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemInternal, CallFunc_Less_IntInt_ReturnValue) == 0x0000D8, "Member 'InventoryBag_C_AddItemInternal::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.AddItemToSlotInternal
// 0x00F8 (0x00F8 - 0x0000)
struct InventoryBag_C_AddItemToSlotInternal final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           Item;                                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 ItemClass;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRotated;                                         // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Modify;                                            // 0x0019(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InOutCount;                                        // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UITEM_Base_C*>                   SlotItems;                                         // 0x0028(0x0010)(Edit, BlueprintVisible)
	TArray<int32>                                 SlotIndices;                                       // 0x0038(0x0010)(Edit, BlueprintVisible)
	int32                                         CountOnSlot;                                       // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CountToAddToSlot;                                  // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           SlotItem;                                          // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSlotTypeSingle_Result;                  // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UITEM_Base_C*>                   CallFunc_GetItemsInSlots_Items;                    // 0x0060(0x0010)(ReferenceParm)
	struct FIntPoint                              CallFunc_GetItemGridSize_Result;                   // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCount_Result;                          // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0085(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_86[0x2];                                       // 0x0086(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UCOMP_Inventory_C*                      CallFunc_GetInventory_Inventory;                   // 0x0088(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_2;          // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CallFunc_Array_Get_Item;                           // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              CallFunc_GetItemRotatedGridSize_Result;            // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 CallFunc_GetSlotIndicesForItemWithSize_SlotIndices; // 0x00B0(0x0010)(ReferenceParm)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ClassClass_ReturnValue;        // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_3;          // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CA[0x2];                                       // 0x00CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_AddCount_ResultCount;                     // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CallFunc_CreateItemInSlot_ItemCreated;             // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCount_Result_1;                        // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Min_ReturnValue;                          // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_4;          // 0x00F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x00F2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(InventoryBag_C_AddItemToSlotInternal) == 0x000008, "Wrong alignment on InventoryBag_C_AddItemToSlotInternal");
static_assert(sizeof(InventoryBag_C_AddItemToSlotInternal) == 0x0000F8, "Wrong size on InventoryBag_C_AddItemToSlotInternal");
static_assert(offsetof(InventoryBag_C_AddItemToSlotInternal, SlotIndex) == 0x000000, "Member 'InventoryBag_C_AddItemToSlotInternal::SlotIndex' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemToSlotInternal, Item) == 0x000008, "Member 'InventoryBag_C_AddItemToSlotInternal::Item' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemToSlotInternal, ItemClass) == 0x000010, "Member 'InventoryBag_C_AddItemToSlotInternal::ItemClass' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemToSlotInternal, IsRotated) == 0x000018, "Member 'InventoryBag_C_AddItemToSlotInternal::IsRotated' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemToSlotInternal, Modify) == 0x000019, "Member 'InventoryBag_C_AddItemToSlotInternal::Modify' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemToSlotInternal, InOutCount) == 0x00001C, "Member 'InventoryBag_C_AddItemToSlotInternal::InOutCount' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemToSlotInternal, Result) == 0x000020, "Member 'InventoryBag_C_AddItemToSlotInternal::Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemToSlotInternal, SlotItems) == 0x000028, "Member 'InventoryBag_C_AddItemToSlotInternal::SlotItems' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemToSlotInternal, SlotIndices) == 0x000038, "Member 'InventoryBag_C_AddItemToSlotInternal::SlotIndices' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemToSlotInternal, CountOnSlot) == 0x000048, "Member 'InventoryBag_C_AddItemToSlotInternal::CountOnSlot' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemToSlotInternal, CountToAddToSlot) == 0x00004C, "Member 'InventoryBag_C_AddItemToSlotInternal::CountToAddToSlot' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemToSlotInternal, SlotItem) == 0x000050, "Member 'InventoryBag_C_AddItemToSlotInternal::SlotItem' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemToSlotInternal, CallFunc_IsSlotTypeSingle_Result) == 0x000058, "Member 'InventoryBag_C_AddItemToSlotInternal::CallFunc_IsSlotTypeSingle_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemToSlotInternal, CallFunc_Array_Length_ReturnValue) == 0x00005C, "Member 'InventoryBag_C_AddItemToSlotInternal::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemToSlotInternal, CallFunc_GetItemsInSlots_Items) == 0x000060, "Member 'InventoryBag_C_AddItemToSlotInternal::CallFunc_GetItemsInSlots_Items' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemToSlotInternal, CallFunc_GetItemGridSize_Result) == 0x000070, "Member 'InventoryBag_C_AddItemToSlotInternal::CallFunc_GetItemGridSize_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemToSlotInternal, CallFunc_Multiply_IntInt_ReturnValue) == 0x000078, "Member 'InventoryBag_C_AddItemToSlotInternal::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemToSlotInternal, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00007C, "Member 'InventoryBag_C_AddItemToSlotInternal::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemToSlotInternal, CallFunc_GetCount_Result) == 0x000080, "Member 'InventoryBag_C_AddItemToSlotInternal::CallFunc_GetCount_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemToSlotInternal, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000084, "Member 'InventoryBag_C_AddItemToSlotInternal::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemToSlotInternal, CallFunc_IsValid_ReturnValue) == 0x000085, "Member 'InventoryBag_C_AddItemToSlotInternal::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemToSlotInternal, CallFunc_GetInventory_Inventory) == 0x000088, "Member 'InventoryBag_C_AddItemToSlotInternal::CallFunc_GetInventory_Inventory' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemToSlotInternal, CallFunc_Array_Length_ReturnValue_1) == 0x000090, "Member 'InventoryBag_C_AddItemToSlotInternal::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemToSlotInternal, CallFunc_EqualEqual_IntInt_ReturnValue_2) == 0x000094, "Member 'InventoryBag_C_AddItemToSlotInternal::CallFunc_EqualEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemToSlotInternal, CallFunc_Array_Get_Item) == 0x000098, "Member 'InventoryBag_C_AddItemToSlotInternal::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemToSlotInternal, CallFunc_Array_Length_ReturnValue_2) == 0x0000A0, "Member 'InventoryBag_C_AddItemToSlotInternal::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemToSlotInternal, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0000A4, "Member 'InventoryBag_C_AddItemToSlotInternal::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemToSlotInternal, CallFunc_GetItemRotatedGridSize_Result) == 0x0000A8, "Member 'InventoryBag_C_AddItemToSlotInternal::CallFunc_GetItemRotatedGridSize_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemToSlotInternal, CallFunc_GetSlotIndicesForItemWithSize_SlotIndices) == 0x0000B0, "Member 'InventoryBag_C_AddItemToSlotInternal::CallFunc_GetSlotIndicesForItemWithSize_SlotIndices' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemToSlotInternal, CallFunc_GetObjectClass_ReturnValue) == 0x0000C0, "Member 'InventoryBag_C_AddItemToSlotInternal::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemToSlotInternal, CallFunc_EqualEqual_ClassClass_ReturnValue) == 0x0000C8, "Member 'InventoryBag_C_AddItemToSlotInternal::CallFunc_EqualEqual_ClassClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemToSlotInternal, CallFunc_EqualEqual_IntInt_ReturnValue_3) == 0x0000C9, "Member 'InventoryBag_C_AddItemToSlotInternal::CallFunc_EqualEqual_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemToSlotInternal, CallFunc_AddCount_ResultCount) == 0x0000CC, "Member 'InventoryBag_C_AddItemToSlotInternal::CallFunc_AddCount_ResultCount' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemToSlotInternal, CallFunc_Subtract_IntInt_ReturnValue) == 0x0000D0, "Member 'InventoryBag_C_AddItemToSlotInternal::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemToSlotInternal, CallFunc_CreateItemInSlot_ItemCreated) == 0x0000D8, "Member 'InventoryBag_C_AddItemToSlotInternal::CallFunc_CreateItemInSlot_ItemCreated' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemToSlotInternal, CallFunc_IsValid_ReturnValue_1) == 0x0000E0, "Member 'InventoryBag_C_AddItemToSlotInternal::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemToSlotInternal, CallFunc_GetCount_Result_1) == 0x0000E4, "Member 'InventoryBag_C_AddItemToSlotInternal::CallFunc_GetCount_Result_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemToSlotInternal, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x0000E8, "Member 'InventoryBag_C_AddItemToSlotInternal::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemToSlotInternal, CallFunc_Min_ReturnValue) == 0x0000EC, "Member 'InventoryBag_C_AddItemToSlotInternal::CallFunc_Min_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemToSlotInternal, CallFunc_Greater_IntInt_ReturnValue) == 0x0000F0, "Member 'InventoryBag_C_AddItemToSlotInternal::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemToSlotInternal, CallFunc_EqualEqual_IntInt_ReturnValue_4) == 0x0000F1, "Member 'InventoryBag_C_AddItemToSlotInternal::CallFunc_EqualEqual_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemToSlotInternal, CallFunc_Greater_IntInt_ReturnValue_1) == 0x0000F2, "Member 'InventoryBag_C_AddItemToSlotInternal::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.GetSlotCountRequiredForItem
// 0x0058 (0x0058 - 0x0000)
struct InventoryBag_C_GetSlotCountRequiredForItem final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           Item;                                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 ItemClass;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Result;                                            // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HeightOffset;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         WidthOffset;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         GridHeight;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         GridWidth;                                         // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              CallFunc_GetItemGridSize_Result;                   // 0x003C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSlotTypeSingle_Result;                  // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(InventoryBag_C_GetSlotCountRequiredForItem) == 0x000008, "Wrong alignment on InventoryBag_C_GetSlotCountRequiredForItem");
static_assert(sizeof(InventoryBag_C_GetSlotCountRequiredForItem) == 0x000058, "Wrong size on InventoryBag_C_GetSlotCountRequiredForItem");
static_assert(offsetof(InventoryBag_C_GetSlotCountRequiredForItem, SlotIndex) == 0x000000, "Member 'InventoryBag_C_GetSlotCountRequiredForItem::SlotIndex' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetSlotCountRequiredForItem, Item) == 0x000008, "Member 'InventoryBag_C_GetSlotCountRequiredForItem::Item' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetSlotCountRequiredForItem, ItemClass) == 0x000010, "Member 'InventoryBag_C_GetSlotCountRequiredForItem::ItemClass' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetSlotCountRequiredForItem, Result) == 0x000018, "Member 'InventoryBag_C_GetSlotCountRequiredForItem::Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetSlotCountRequiredForItem, HeightOffset) == 0x00001C, "Member 'InventoryBag_C_GetSlotCountRequiredForItem::HeightOffset' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetSlotCountRequiredForItem, WidthOffset) == 0x000020, "Member 'InventoryBag_C_GetSlotCountRequiredForItem::WidthOffset' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetSlotCountRequiredForItem, GridHeight) == 0x000024, "Member 'InventoryBag_C_GetSlotCountRequiredForItem::GridHeight' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetSlotCountRequiredForItem, GridWidth) == 0x000028, "Member 'InventoryBag_C_GetSlotCountRequiredForItem::GridWidth' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetSlotCountRequiredForItem, CallFunc_Subtract_IntInt_ReturnValue) == 0x00002C, "Member 'InventoryBag_C_GetSlotCountRequiredForItem::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetSlotCountRequiredForItem, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000030, "Member 'InventoryBag_C_GetSlotCountRequiredForItem::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetSlotCountRequiredForItem, CallFunc_Multiply_IntInt_ReturnValue) == 0x000034, "Member 'InventoryBag_C_GetSlotCountRequiredForItem::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetSlotCountRequiredForItem, CallFunc_Add_IntInt_ReturnValue) == 0x000038, "Member 'InventoryBag_C_GetSlotCountRequiredForItem::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetSlotCountRequiredForItem, CallFunc_GetItemGridSize_Result) == 0x00003C, "Member 'InventoryBag_C_GetSlotCountRequiredForItem::CallFunc_GetItemGridSize_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetSlotCountRequiredForItem, CallFunc_Add_IntInt_ReturnValue_1) == 0x000044, "Member 'InventoryBag_C_GetSlotCountRequiredForItem::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetSlotCountRequiredForItem, CallFunc_Add_IntInt_ReturnValue_2) == 0x000048, "Member 'InventoryBag_C_GetSlotCountRequiredForItem::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetSlotCountRequiredForItem, CallFunc_IsSlotTypeSingle_Result) == 0x00004C, "Member 'InventoryBag_C_GetSlotCountRequiredForItem::CallFunc_IsSlotTypeSingle_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetSlotCountRequiredForItem, CallFunc_Add_IntInt_ReturnValue_3) == 0x000050, "Member 'InventoryBag_C_GetSlotCountRequiredForItem::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.GetSlotIndicesForItemWithSize
// 0x0058 (0x0058 - 0x0000)
struct InventoryBag_C_GetSlotIndicesForItemWithSize final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              ItemSize;                                          // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 SlotIndices;                                       // 0x0010(0x0010)(Parm, OutParm)
	TArray<int32>                                 CallFunc_GetGridSlotIndicesForItemWithSize_ResultIndices; // 0x0020(0x0010)(ReferenceParm)
	int32                                         CallFunc_GetMaxSlots_Count;                        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetMaxSlots_Count_1;                      // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 K2Node_MakeArray_Array;                            // 0x0040(0x0010)(ReferenceParm)
	bool                                          CallFunc_IsSlotTypeSingle_Result;                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(InventoryBag_C_GetSlotIndicesForItemWithSize) == 0x000008, "Wrong alignment on InventoryBag_C_GetSlotIndicesForItemWithSize");
static_assert(sizeof(InventoryBag_C_GetSlotIndicesForItemWithSize) == 0x000058, "Wrong size on InventoryBag_C_GetSlotIndicesForItemWithSize");
static_assert(offsetof(InventoryBag_C_GetSlotIndicesForItemWithSize, SlotIndex) == 0x000000, "Member 'InventoryBag_C_GetSlotIndicesForItemWithSize::SlotIndex' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetSlotIndicesForItemWithSize, ItemSize) == 0x000004, "Member 'InventoryBag_C_GetSlotIndicesForItemWithSize::ItemSize' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetSlotIndicesForItemWithSize, SlotIndices) == 0x000010, "Member 'InventoryBag_C_GetSlotIndicesForItemWithSize::SlotIndices' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetSlotIndicesForItemWithSize, CallFunc_GetGridSlotIndicesForItemWithSize_ResultIndices) == 0x000020, "Member 'InventoryBag_C_GetSlotIndicesForItemWithSize::CallFunc_GetGridSlotIndicesForItemWithSize_ResultIndices' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetSlotIndicesForItemWithSize, CallFunc_GetMaxSlots_Count) == 0x000030, "Member 'InventoryBag_C_GetSlotIndicesForItemWithSize::CallFunc_GetMaxSlots_Count' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetSlotIndicesForItemWithSize, CallFunc_Less_IntInt_ReturnValue) == 0x000034, "Member 'InventoryBag_C_GetSlotIndicesForItemWithSize::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetSlotIndicesForItemWithSize, CallFunc_GetMaxSlots_Count_1) == 0x000038, "Member 'InventoryBag_C_GetSlotIndicesForItemWithSize::CallFunc_GetMaxSlots_Count_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetSlotIndicesForItemWithSize, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00003C, "Member 'InventoryBag_C_GetSlotIndicesForItemWithSize::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetSlotIndicesForItemWithSize, CallFunc_BooleanOR_ReturnValue) == 0x00003D, "Member 'InventoryBag_C_GetSlotIndicesForItemWithSize::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetSlotIndicesForItemWithSize, K2Node_MakeArray_Array) == 0x000040, "Member 'InventoryBag_C_GetSlotIndicesForItemWithSize::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetSlotIndicesForItemWithSize, CallFunc_IsSlotTypeSingle_Result) == 0x000050, "Member 'InventoryBag_C_GetSlotIndicesForItemWithSize::CallFunc_IsSlotTypeSingle_Result' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.GetSlotIndicesForItemInstance
// 0x0038 (0x0038 - 0x0000)
struct InventoryBag_C_GetSlotIndicesForItemInstance final
{
public:
	class UITEM_Base_C*                           Item;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 Slot_Indices;                                      // 0x0008(0x0010)(Parm, OutParm)
	int32                                         CallFunc_GetSlotIndex_Result;                      // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              CallFunc_GetRotatedGridSize_Result;                // 0x001C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_GetSlotIndicesForItemWithSize_SlotIndices; // 0x0028(0x0010)(ReferenceParm)
};
static_assert(alignof(InventoryBag_C_GetSlotIndicesForItemInstance) == 0x000008, "Wrong alignment on InventoryBag_C_GetSlotIndicesForItemInstance");
static_assert(sizeof(InventoryBag_C_GetSlotIndicesForItemInstance) == 0x000038, "Wrong size on InventoryBag_C_GetSlotIndicesForItemInstance");
static_assert(offsetof(InventoryBag_C_GetSlotIndicesForItemInstance, Item) == 0x000000, "Member 'InventoryBag_C_GetSlotIndicesForItemInstance::Item' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetSlotIndicesForItemInstance, Slot_Indices) == 0x000008, "Member 'InventoryBag_C_GetSlotIndicesForItemInstance::Slot_Indices' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetSlotIndicesForItemInstance, CallFunc_GetSlotIndex_Result) == 0x000018, "Member 'InventoryBag_C_GetSlotIndicesForItemInstance::CallFunc_GetSlotIndex_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetSlotIndicesForItemInstance, CallFunc_GetRotatedGridSize_Result) == 0x00001C, "Member 'InventoryBag_C_GetSlotIndicesForItemInstance::CallFunc_GetRotatedGridSize_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetSlotIndicesForItemInstance, CallFunc_GetSlotIndicesForItemWithSize_SlotIndices) == 0x000028, "Member 'InventoryBag_C_GetSlotIndicesForItemInstance::CallFunc_GetSlotIndicesForItemWithSize_SlotIndices' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.IsValidSlotIndex
// 0x0014 (0x0014 - 0x0000)
struct InventoryBag_C_IsValidSlotIndex final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetMaxSlots_Count;                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetMaxSlots_Count_1;                      // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(InventoryBag_C_IsValidSlotIndex) == 0x000004, "Wrong alignment on InventoryBag_C_IsValidSlotIndex");
static_assert(sizeof(InventoryBag_C_IsValidSlotIndex) == 0x000014, "Wrong size on InventoryBag_C_IsValidSlotIndex");
static_assert(offsetof(InventoryBag_C_IsValidSlotIndex, SlotIndex) == 0x000000, "Member 'InventoryBag_C_IsValidSlotIndex::SlotIndex' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_IsValidSlotIndex, Result) == 0x000004, "Member 'InventoryBag_C_IsValidSlotIndex::Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_IsValidSlotIndex, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000005, "Member 'InventoryBag_C_IsValidSlotIndex::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_IsValidSlotIndex, CallFunc_GetMaxSlots_Count) == 0x000008, "Member 'InventoryBag_C_IsValidSlotIndex::CallFunc_GetMaxSlots_Count' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_IsValidSlotIndex, CallFunc_GetMaxSlots_Count_1) == 0x00000C, "Member 'InventoryBag_C_IsValidSlotIndex::CallFunc_GetMaxSlots_Count_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_IsValidSlotIndex, CallFunc_Less_IntInt_ReturnValue) == 0x000010, "Member 'InventoryBag_C_IsValidSlotIndex::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_IsValidSlotIndex, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000011, "Member 'InventoryBag_C_IsValidSlotIndex::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_IsValidSlotIndex, CallFunc_BooleanOR_ReturnValue) == 0x000012, "Member 'InventoryBag_C_IsValidSlotIndex::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.IsValidGridCoordinates
// 0x001C (0x001C - 0x0000)
struct InventoryBag_C_IsValidGridCoordinates final
{
public:
	struct FIntPoint                              GridCoords;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_1;        // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetGridHeight_Result;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetGridWidth_Result;                      // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(InventoryBag_C_IsValidGridCoordinates) == 0x000004, "Wrong alignment on InventoryBag_C_IsValidGridCoordinates");
static_assert(sizeof(InventoryBag_C_IsValidGridCoordinates) == 0x00001C, "Wrong size on InventoryBag_C_IsValidGridCoordinates");
static_assert(offsetof(InventoryBag_C_IsValidGridCoordinates, GridCoords) == 0x000000, "Member 'InventoryBag_C_IsValidGridCoordinates::GridCoords' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_IsValidGridCoordinates, Result) == 0x000008, "Member 'InventoryBag_C_IsValidGridCoordinates::Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_IsValidGridCoordinates, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000009, "Member 'InventoryBag_C_IsValidGridCoordinates::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_IsValidGridCoordinates, CallFunc_GreaterEqual_IntInt_ReturnValue_1) == 0x00000A, "Member 'InventoryBag_C_IsValidGridCoordinates::CallFunc_GreaterEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_IsValidGridCoordinates, CallFunc_GetGridHeight_Result) == 0x00000C, "Member 'InventoryBag_C_IsValidGridCoordinates::CallFunc_GetGridHeight_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_IsValidGridCoordinates, CallFunc_BooleanAND_ReturnValue) == 0x000010, "Member 'InventoryBag_C_IsValidGridCoordinates::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_IsValidGridCoordinates, CallFunc_GetGridWidth_Result) == 0x000014, "Member 'InventoryBag_C_IsValidGridCoordinates::CallFunc_GetGridWidth_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_IsValidGridCoordinates, CallFunc_Less_IntInt_ReturnValue) == 0x000018, "Member 'InventoryBag_C_IsValidGridCoordinates::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_IsValidGridCoordinates, CallFunc_Less_IntInt_ReturnValue_1) == 0x000019, "Member 'InventoryBag_C_IsValidGridCoordinates::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.IsSlotTypeGrid
// 0x0002 (0x0002 - 0x0000)
struct InventoryBag_C_IsSlotTypeGrid final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(InventoryBag_C_IsSlotTypeGrid) == 0x000001, "Wrong alignment on InventoryBag_C_IsSlotTypeGrid");
static_assert(sizeof(InventoryBag_C_IsSlotTypeGrid) == 0x000002, "Wrong size on InventoryBag_C_IsSlotTypeGrid");
static_assert(offsetof(InventoryBag_C_IsSlotTypeGrid, Result) == 0x000000, "Member 'InventoryBag_C_IsSlotTypeGrid::Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_IsSlotTypeGrid, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000001, "Member 'InventoryBag_C_IsSlotTypeGrid::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.IsSlotTypeSingle
// 0x0002 (0x0002 - 0x0000)
struct InventoryBag_C_IsSlotTypeSingle final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(InventoryBag_C_IsSlotTypeSingle) == 0x000001, "Wrong alignment on InventoryBag_C_IsSlotTypeSingle");
static_assert(sizeof(InventoryBag_C_IsSlotTypeSingle) == 0x000002, "Wrong size on InventoryBag_C_IsSlotTypeSingle");
static_assert(offsetof(InventoryBag_C_IsSlotTypeSingle, Result) == 0x000000, "Member 'InventoryBag_C_IsSlotTypeSingle::Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_IsSlotTypeSingle, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000001, "Member 'InventoryBag_C_IsSlotTypeSingle::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.HasSlotSpaceForItemWithSize
// 0x0020 (0x0020 - 0x0000)
struct InventoryBag_C_HasSlotSpaceForItemWithSize final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              ItemSize;                                          // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           IgnoreItem;                                        // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSlotTypeSingle_Result;                  // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasGridSpaceForItemWithSize_Result;       // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(InventoryBag_C_HasSlotSpaceForItemWithSize) == 0x000008, "Wrong alignment on InventoryBag_C_HasSlotSpaceForItemWithSize");
static_assert(sizeof(InventoryBag_C_HasSlotSpaceForItemWithSize) == 0x000020, "Wrong size on InventoryBag_C_HasSlotSpaceForItemWithSize");
static_assert(offsetof(InventoryBag_C_HasSlotSpaceForItemWithSize, SlotIndex) == 0x000000, "Member 'InventoryBag_C_HasSlotSpaceForItemWithSize::SlotIndex' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_HasSlotSpaceForItemWithSize, ItemSize) == 0x000004, "Member 'InventoryBag_C_HasSlotSpaceForItemWithSize::ItemSize' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_HasSlotSpaceForItemWithSize, IgnoreItem) == 0x000010, "Member 'InventoryBag_C_HasSlotSpaceForItemWithSize::IgnoreItem' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_HasSlotSpaceForItemWithSize, Result) == 0x000018, "Member 'InventoryBag_C_HasSlotSpaceForItemWithSize::Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_HasSlotSpaceForItemWithSize, CallFunc_IsSlotTypeSingle_Result) == 0x000019, "Member 'InventoryBag_C_HasSlotSpaceForItemWithSize::CallFunc_IsSlotTypeSingle_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_HasSlotSpaceForItemWithSize, CallFunc_HasGridSpaceForItemWithSize_Result) == 0x00001A, "Member 'InventoryBag_C_HasSlotSpaceForItemWithSize::CallFunc_HasGridSpaceForItemWithSize_Result' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.GetMaxSlots
// 0x0004 (0x0004 - 0x0000)
struct InventoryBag_C_GetMaxSlots final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(InventoryBag_C_GetMaxSlots) == 0x000004, "Wrong alignment on InventoryBag_C_GetMaxSlots");
static_assert(sizeof(InventoryBag_C_GetMaxSlots) == 0x000004, "Wrong size on InventoryBag_C_GetMaxSlots");
static_assert(offsetof(InventoryBag_C_GetMaxSlots, Count) == 0x000000, "Member 'InventoryBag_C_GetMaxSlots::Count' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.SetMaxSlotCount
// 0x0018 (0x0018 - 0x0000)
struct InventoryBag_C_SetMaxSlotCount final
{
public:
	int32                                         NewSlotCount;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCOMP_Inventory_C*                      CallFunc_GetInventory_Inventory;                   // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(InventoryBag_C_SetMaxSlotCount) == 0x000008, "Wrong alignment on InventoryBag_C_SetMaxSlotCount");
static_assert(sizeof(InventoryBag_C_SetMaxSlotCount) == 0x000018, "Wrong size on InventoryBag_C_SetMaxSlotCount");
static_assert(offsetof(InventoryBag_C_SetMaxSlotCount, NewSlotCount) == 0x000000, "Member 'InventoryBag_C_SetMaxSlotCount::NewSlotCount' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SetMaxSlotCount, Result) == 0x000004, "Member 'InventoryBag_C_SetMaxSlotCount::Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SetMaxSlotCount, CallFunc_GetInventory_Inventory) == 0x000008, "Member 'InventoryBag_C_SetMaxSlotCount::CallFunc_GetInventory_Inventory' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SetMaxSlotCount, CallFunc_Greater_IntInt_ReturnValue) == 0x000010, "Member 'InventoryBag_C_SetMaxSlotCount::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.CreateItemInSlot
// 0x00A8 (0x00A8 - 0x0000)
struct InventoryBag_C_CreateItemInSlot final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           Item;                                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 ItemClass;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRotated;                                         // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Count;                                             // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           ItemCreated;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           CreatedItem;                                       // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WasAddedToInventory;                               // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetSlotCountRequiredForItem_Result;       // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ResizeBag_Result;                         // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetIsRotated_Success;                     // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCOMP_Inventory_C*                      CallFunc_GetInventory_Inventory;                   // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetIsRotated_Success_1;                   // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCOMP_Inventory_C*                      CallFunc_GetInventory_Inventory_1;                 // 0x0058(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCOMP_Inventory_C*                      CallFunc_GetInventory_Inventory_2;                 // 0x0068(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCOMP_Inventory_C*                      CallFunc_GetInventory_Inventory_3;                 // 0x0070(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquippable_Result;                      // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetEquipSlotActive_Result;                // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ForceEquipItemInSlot_Result;              // 0x007A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ShouldAutoEquip_Result;                   // 0x007B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ShouldForceEquip_Result;                  // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_HardItemParams                 K2Node_MakeStruct_STRUCT_HardItemParams;           // 0x0080(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetInventory_Result;                      // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CallFunc_CreateItem_Item;                          // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(InventoryBag_C_CreateItemInSlot) == 0x000008, "Wrong alignment on InventoryBag_C_CreateItemInSlot");
static_assert(sizeof(InventoryBag_C_CreateItemInSlot) == 0x0000A8, "Wrong size on InventoryBag_C_CreateItemInSlot");
static_assert(offsetof(InventoryBag_C_CreateItemInSlot, SlotIndex) == 0x000000, "Member 'InventoryBag_C_CreateItemInSlot::SlotIndex' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CreateItemInSlot, Item) == 0x000008, "Member 'InventoryBag_C_CreateItemInSlot::Item' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CreateItemInSlot, ItemClass) == 0x000010, "Member 'InventoryBag_C_CreateItemInSlot::ItemClass' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CreateItemInSlot, IsRotated) == 0x000018, "Member 'InventoryBag_C_CreateItemInSlot::IsRotated' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CreateItemInSlot, Count) == 0x00001C, "Member 'InventoryBag_C_CreateItemInSlot::Count' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CreateItemInSlot, ItemCreated) == 0x000020, "Member 'InventoryBag_C_CreateItemInSlot::ItemCreated' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CreateItemInSlot, CreatedItem) == 0x000028, "Member 'InventoryBag_C_CreateItemInSlot::CreatedItem' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CreateItemInSlot, WasAddedToInventory) == 0x000030, "Member 'InventoryBag_C_CreateItemInSlot::WasAddedToInventory' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CreateItemInSlot, CallFunc_GetSlotCountRequiredForItem_Result) == 0x000034, "Member 'InventoryBag_C_CreateItemInSlot::CallFunc_GetSlotCountRequiredForItem_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CreateItemInSlot, CallFunc_ResizeBag_Result) == 0x000038, "Member 'InventoryBag_C_CreateItemInSlot::CallFunc_ResizeBag_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CreateItemInSlot, CallFunc_SetIsRotated_Success) == 0x000039, "Member 'InventoryBag_C_CreateItemInSlot::CallFunc_SetIsRotated_Success' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CreateItemInSlot, CallFunc_GetInventory_Inventory) == 0x000040, "Member 'InventoryBag_C_CreateItemInSlot::CallFunc_GetInventory_Inventory' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CreateItemInSlot, CallFunc_SetIsRotated_Success_1) == 0x000048, "Member 'InventoryBag_C_CreateItemInSlot::CallFunc_SetIsRotated_Success_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CreateItemInSlot, CallFunc_GetOwner_ReturnValue) == 0x000050, "Member 'InventoryBag_C_CreateItemInSlot::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CreateItemInSlot, CallFunc_GetInventory_Inventory_1) == 0x000058, "Member 'InventoryBag_C_CreateItemInSlot::CallFunc_GetInventory_Inventory_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CreateItemInSlot, CallFunc_IsValid_ReturnValue) == 0x000060, "Member 'InventoryBag_C_CreateItemInSlot::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CreateItemInSlot, CallFunc_GetInventory_Inventory_2) == 0x000068, "Member 'InventoryBag_C_CreateItemInSlot::CallFunc_GetInventory_Inventory_2' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CreateItemInSlot, CallFunc_GetInventory_Inventory_3) == 0x000070, "Member 'InventoryBag_C_CreateItemInSlot::CallFunc_GetInventory_Inventory_3' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CreateItemInSlot, CallFunc_IsEquippable_Result) == 0x000078, "Member 'InventoryBag_C_CreateItemInSlot::CallFunc_IsEquippable_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CreateItemInSlot, CallFunc_SetEquipSlotActive_Result) == 0x000079, "Member 'InventoryBag_C_CreateItemInSlot::CallFunc_SetEquipSlotActive_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CreateItemInSlot, CallFunc_ForceEquipItemInSlot_Result) == 0x00007A, "Member 'InventoryBag_C_CreateItemInSlot::CallFunc_ForceEquipItemInSlot_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CreateItemInSlot, CallFunc_ShouldAutoEquip_Result) == 0x00007B, "Member 'InventoryBag_C_CreateItemInSlot::CallFunc_ShouldAutoEquip_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CreateItemInSlot, CallFunc_ShouldForceEquip_Result) == 0x00007C, "Member 'InventoryBag_C_CreateItemInSlot::CallFunc_ShouldForceEquip_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CreateItemInSlot, K2Node_MakeStruct_STRUCT_HardItemParams) == 0x000080, "Member 'InventoryBag_C_CreateItemInSlot::K2Node_MakeStruct_STRUCT_HardItemParams' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CreateItemInSlot, CallFunc_SetInventory_Result) == 0x000090, "Member 'InventoryBag_C_CreateItemInSlot::CallFunc_SetInventory_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CreateItemInSlot, CallFunc_CreateItem_Item) == 0x000098, "Member 'InventoryBag_C_CreateItemInSlot::CallFunc_CreateItem_Item' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CreateItemInSlot, CallFunc_IsValid_ReturnValue_1) == 0x0000A0, "Member 'InventoryBag_C_CreateItemInSlot::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.ResizeBag
// 0x0010 (0x0010 - 0x0000)
struct InventoryBag_C_ResizeBag final
{
public:
	int32                                         Size;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(InventoryBag_C_ResizeBag) == 0x000004, "Wrong alignment on InventoryBag_C_ResizeBag");
static_assert(sizeof(InventoryBag_C_ResizeBag) == 0x000010, "Wrong size on InventoryBag_C_ResizeBag");
static_assert(offsetof(InventoryBag_C_ResizeBag, Size) == 0x000000, "Member 'InventoryBag_C_ResizeBag::Size' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_ResizeBag, Result) == 0x000004, "Member 'InventoryBag_C_ResizeBag::Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_ResizeBag, CallFunc_Array_Length_ReturnValue) == 0x000008, "Member 'InventoryBag_C_ResizeBag::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_ResizeBag, CallFunc_Greater_IntInt_ReturnValue) == 0x00000C, "Member 'InventoryBag_C_ResizeBag::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.ForceEquipItemInSlot
// 0x0068 (0x0068 - 0x0000)
struct InventoryBag_C_ForceEquipItemInSlot final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           PreviousEquippedItem;                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           SlotItem;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           CallFunc_GetSlotItem_Item;                         // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSlotIndex_Result;                      // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSlotIndex_Result_1;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetEquipped_Result;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCOMP_Inventory_C*                      CallFunc_GetInventory_Inventory;                   // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           CallFunc_GetFirstEquippedItem_Item;                // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCOMP_Inventory_C*                      CallFunc_GetInventory_Inventory_1;                 // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasReachedEquipCapacity_Result;           // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCOMP_Inventory_C*                      CallFunc_GetInventory_Inventory_2;                 // 0x0050(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInventoryBag_C*                        CallFunc_GetBag_Result;                            // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipped_Result;                        // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetEquipped_Result_1;                     // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetEquipSlotActive_Result;                // 0x0063(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(InventoryBag_C_ForceEquipItemInSlot) == 0x000008, "Wrong alignment on InventoryBag_C_ForceEquipItemInSlot");
static_assert(sizeof(InventoryBag_C_ForceEquipItemInSlot) == 0x000068, "Wrong size on InventoryBag_C_ForceEquipItemInSlot");
static_assert(offsetof(InventoryBag_C_ForceEquipItemInSlot, SlotIndex) == 0x000000, "Member 'InventoryBag_C_ForceEquipItemInSlot::SlotIndex' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_ForceEquipItemInSlot, Result) == 0x000004, "Member 'InventoryBag_C_ForceEquipItemInSlot::Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_ForceEquipItemInSlot, PreviousEquippedItem) == 0x000008, "Member 'InventoryBag_C_ForceEquipItemInSlot::PreviousEquippedItem' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_ForceEquipItemInSlot, SlotItem) == 0x000010, "Member 'InventoryBag_C_ForceEquipItemInSlot::SlotItem' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_ForceEquipItemInSlot, CallFunc_GetSlotItem_Item) == 0x000018, "Member 'InventoryBag_C_ForceEquipItemInSlot::CallFunc_GetSlotItem_Item' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_ForceEquipItemInSlot, CallFunc_GetSlotIndex_Result) == 0x000020, "Member 'InventoryBag_C_ForceEquipItemInSlot::CallFunc_GetSlotIndex_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_ForceEquipItemInSlot, CallFunc_GetSlotIndex_Result_1) == 0x000024, "Member 'InventoryBag_C_ForceEquipItemInSlot::CallFunc_GetSlotIndex_Result_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_ForceEquipItemInSlot, CallFunc_SetEquipped_Result) == 0x000028, "Member 'InventoryBag_C_ForceEquipItemInSlot::CallFunc_SetEquipped_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_ForceEquipItemInSlot, CallFunc_GetInventory_Inventory) == 0x000030, "Member 'InventoryBag_C_ForceEquipItemInSlot::CallFunc_GetInventory_Inventory' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_ForceEquipItemInSlot, CallFunc_GetFirstEquippedItem_Item) == 0x000038, "Member 'InventoryBag_C_ForceEquipItemInSlot::CallFunc_GetFirstEquippedItem_Item' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_ForceEquipItemInSlot, CallFunc_GetInventory_Inventory_1) == 0x000040, "Member 'InventoryBag_C_ForceEquipItemInSlot::CallFunc_GetInventory_Inventory_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_ForceEquipItemInSlot, CallFunc_HasReachedEquipCapacity_Result) == 0x000048, "Member 'InventoryBag_C_ForceEquipItemInSlot::CallFunc_HasReachedEquipCapacity_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_ForceEquipItemInSlot, CallFunc_IsValid_ReturnValue) == 0x000049, "Member 'InventoryBag_C_ForceEquipItemInSlot::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_ForceEquipItemInSlot, CallFunc_GetInventory_Inventory_2) == 0x000050, "Member 'InventoryBag_C_ForceEquipItemInSlot::CallFunc_GetInventory_Inventory_2' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_ForceEquipItemInSlot, CallFunc_GetBag_Result) == 0x000058, "Member 'InventoryBag_C_ForceEquipItemInSlot::CallFunc_GetBag_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_ForceEquipItemInSlot, CallFunc_IsEquipped_Result) == 0x000060, "Member 'InventoryBag_C_ForceEquipItemInSlot::CallFunc_IsEquipped_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_ForceEquipItemInSlot, CallFunc_Not_PreBool_ReturnValue) == 0x000061, "Member 'InventoryBag_C_ForceEquipItemInSlot::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_ForceEquipItemInSlot, CallFunc_SetEquipped_Result_1) == 0x000062, "Member 'InventoryBag_C_ForceEquipItemInSlot::CallFunc_SetEquipped_Result_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_ForceEquipItemInSlot, CallFunc_SetEquipSlotActive_Result) == 0x000063, "Member 'InventoryBag_C_ForceEquipItemInSlot::CallFunc_SetEquipSlotActive_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_ForceEquipItemInSlot, CallFunc_IsValid_ReturnValue_1) == 0x000064, "Member 'InventoryBag_C_ForceEquipItemInSlot::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.SetEquipSlotActive
// 0x0028 (0x0028 - 0x0000)
struct InventoryBag_C_SetEquipSlotActive final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Active;                                            // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Result;                                            // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           SlotItem;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           CallFunc_GetSlotItem_Item;                         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCOMP_Inventory_C*                      CallFunc_GetInventory_Inventory;                   // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasReachedEquipCapacity_Result;           // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetEquipped_Result;                       // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEquipped_Result;                        // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(InventoryBag_C_SetEquipSlotActive) == 0x000008, "Wrong alignment on InventoryBag_C_SetEquipSlotActive");
static_assert(sizeof(InventoryBag_C_SetEquipSlotActive) == 0x000028, "Wrong size on InventoryBag_C_SetEquipSlotActive");
static_assert(offsetof(InventoryBag_C_SetEquipSlotActive, SlotIndex) == 0x000000, "Member 'InventoryBag_C_SetEquipSlotActive::SlotIndex' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SetEquipSlotActive, Active) == 0x000004, "Member 'InventoryBag_C_SetEquipSlotActive::Active' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SetEquipSlotActive, Result) == 0x000005, "Member 'InventoryBag_C_SetEquipSlotActive::Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SetEquipSlotActive, SlotItem) == 0x000008, "Member 'InventoryBag_C_SetEquipSlotActive::SlotItem' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SetEquipSlotActive, CallFunc_GetSlotItem_Item) == 0x000010, "Member 'InventoryBag_C_SetEquipSlotActive::CallFunc_GetSlotItem_Item' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SetEquipSlotActive, CallFunc_GetInventory_Inventory) == 0x000018, "Member 'InventoryBag_C_SetEquipSlotActive::CallFunc_GetInventory_Inventory' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SetEquipSlotActive, CallFunc_HasReachedEquipCapacity_Result) == 0x000020, "Member 'InventoryBag_C_SetEquipSlotActive::CallFunc_HasReachedEquipCapacity_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SetEquipSlotActive, CallFunc_Not_PreBool_ReturnValue) == 0x000021, "Member 'InventoryBag_C_SetEquipSlotActive::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SetEquipSlotActive, CallFunc_SetEquipped_Result) == 0x000022, "Member 'InventoryBag_C_SetEquipSlotActive::CallFunc_SetEquipped_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SetEquipSlotActive, CallFunc_IsEquipped_Result) == 0x000023, "Member 'InventoryBag_C_SetEquipSlotActive::CallFunc_IsEquipped_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SetEquipSlotActive, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000024, "Member 'InventoryBag_C_SetEquipSlotActive::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SetEquipSlotActive, CallFunc_IsValid_ReturnValue) == 0x000025, "Member 'InventoryBag_C_SetEquipSlotActive::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SetEquipSlotActive, CallFunc_Not_PreBool_ReturnValue_1) == 0x000026, "Member 'InventoryBag_C_SetEquipSlotActive::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SetEquipSlotActive, CallFunc_BooleanOR_ReturnValue) == 0x000027, "Member 'InventoryBag_C_SetEquipSlotActive::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.AddItem
// 0x0040 (0x0040 - 0x0000)
struct InventoryBag_C_AddItem final
{
public:
	class UITEM_Base_C*                           Item;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UInventoryBag_C*                        CallFunc_GetBag_Result;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanSlotItemClass_Result;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCount_Result;                          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue_1;             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AddItemInternal_Result;                   // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(InventoryBag_C_AddItem) == 0x000008, "Wrong alignment on InventoryBag_C_AddItem");
static_assert(sizeof(InventoryBag_C_AddItem) == 0x000040, "Wrong size on InventoryBag_C_AddItem");
static_assert(offsetof(InventoryBag_C_AddItem, Item) == 0x000000, "Member 'InventoryBag_C_AddItem::Item' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItem, Result) == 0x000008, "Member 'InventoryBag_C_AddItem::Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItem, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'InventoryBag_C_AddItem::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItem, CallFunc_GetBag_Result) == 0x000010, "Member 'InventoryBag_C_AddItem::CallFunc_GetBag_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItem, CallFunc_IsValid_ReturnValue_1) == 0x000018, "Member 'InventoryBag_C_AddItem::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItem, CallFunc_Not_PreBool_ReturnValue) == 0x000019, "Member 'InventoryBag_C_AddItem::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItem, CallFunc_GetObjectClass_ReturnValue) == 0x000020, "Member 'InventoryBag_C_AddItem::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItem, CallFunc_CanSlotItemClass_Result) == 0x000028, "Member 'InventoryBag_C_AddItem::CallFunc_CanSlotItemClass_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItem, CallFunc_GetCount_Result) == 0x00002C, "Member 'InventoryBag_C_AddItem::CallFunc_GetCount_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItem, CallFunc_GetObjectClass_ReturnValue_1) == 0x000030, "Member 'InventoryBag_C_AddItem::CallFunc_GetObjectClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItem, CallFunc_AddItemInternal_Result) == 0x000038, "Member 'InventoryBag_C_AddItem::CallFunc_AddItemInternal_Result' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.AddItemToSlot
// 0x0040 (0x0040 - 0x0000)
struct InventoryBag_C_AddItemToSlot final
{
public:
	class UITEM_Base_C*                           Item;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SlotIndex;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsItemRotated_Result;                     // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UInventoryBag_C*                        CallFunc_GetBag_Result;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanSlotItemClass_Result;                  // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCount_Result;                          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue_1;             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AddItemToSlotInternal_Result;             // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(InventoryBag_C_AddItemToSlot) == 0x000008, "Wrong alignment on InventoryBag_C_AddItemToSlot");
static_assert(sizeof(InventoryBag_C_AddItemToSlot) == 0x000040, "Wrong size on InventoryBag_C_AddItemToSlot");
static_assert(offsetof(InventoryBag_C_AddItemToSlot, Item) == 0x000000, "Member 'InventoryBag_C_AddItemToSlot::Item' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemToSlot, SlotIndex) == 0x000008, "Member 'InventoryBag_C_AddItemToSlot::SlotIndex' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemToSlot, Result) == 0x00000C, "Member 'InventoryBag_C_AddItemToSlot::Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemToSlot, CallFunc_IsValid_ReturnValue) == 0x00000D, "Member 'InventoryBag_C_AddItemToSlot::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemToSlot, CallFunc_IsItemRotated_Result) == 0x00000E, "Member 'InventoryBag_C_AddItemToSlot::CallFunc_IsItemRotated_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemToSlot, CallFunc_GetBag_Result) == 0x000010, "Member 'InventoryBag_C_AddItemToSlot::CallFunc_GetBag_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemToSlot, CallFunc_IsValid_ReturnValue_1) == 0x000018, "Member 'InventoryBag_C_AddItemToSlot::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemToSlot, CallFunc_GetObjectClass_ReturnValue) == 0x000020, "Member 'InventoryBag_C_AddItemToSlot::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemToSlot, CallFunc_Not_PreBool_ReturnValue) == 0x000028, "Member 'InventoryBag_C_AddItemToSlot::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemToSlot, CallFunc_CanSlotItemClass_Result) == 0x000029, "Member 'InventoryBag_C_AddItemToSlot::CallFunc_CanSlotItemClass_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemToSlot, CallFunc_GetCount_Result) == 0x00002C, "Member 'InventoryBag_C_AddItemToSlot::CallFunc_GetCount_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemToSlot, CallFunc_GetObjectClass_ReturnValue_1) == 0x000030, "Member 'InventoryBag_C_AddItemToSlot::CallFunc_GetObjectClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_AddItemToSlot, CallFunc_AddItemToSlotInternal_Result) == 0x000038, "Member 'InventoryBag_C_AddItemToSlot::CallFunc_AddItemToSlotInternal_Result' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.SortBag
// 0x01E8 (0x01E8 - 0x0000)
struct InventoryBag_C_SortBag final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          SortFailed;                                        // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CurrentItem;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSet<class UITEM_Base_C*>                     RotatedItemSet;                                    // 0x0010(0x0050)(Edit, BlueprintVisible)
	TMap<class UITEM_Base_C*, int32>              ItemToSlotMap;                                     // 0x0060(0x0050)(Edit, BlueprintVisible)
	TArray<class UITEM_Base_C*>                   SortedItems;                                       // 0x00B0(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DD[0x3];                                       // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CallFunc_RemoveItem_RemovedItem;                   // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_3;                  // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_3;                   // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_4;                  // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_4;                   // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetIsRotated_Success;                     // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_111[0x3];                                      // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Map_Find_Value;                           // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_119[0x3];                                      // 0x0119(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_5;                  // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AddItemToSlot_Result;                     // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_121[0x3];                                      // 0x0121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSlotIndex_Result;                      // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_131[0x3];                                      // 0x0131(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_5;                   // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           CallFunc_Array_Get_Item;                           // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           CallFunc_Array_Get_Item_1;                         // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanUnslot_Result;                         // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0149(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_14A[0x2];                                      // 0x014A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Set_Contains_ReturnValue;                 // 0x0151(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetIsRotated_Success_1;                   // 0x0152(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_153[0x5];                                      // 0x0153(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CallFunc_Array_Get_Item_2;                         // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0164(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsItemRotated_Result;                     // 0x0165(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_166[0x2];                                      // 0x0166(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CallFunc_RemoveItem_RemovedItem_1;                 // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCount_Result;                          // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_174[0x4];                                      // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AddItemInternal_Result;                   // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_181[0x7];                                      // 0x0181(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CallFunc_Array_Get_Item_3;                         // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_191[0x3];                                      // 0x0191(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_4;               // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_199[0x7];                                      // 0x0199(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CallFunc_Array_Get_Item_4;                         // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_5;               // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_4;                // 0x01AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1AD[0x3];                                      // 0x01AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UObject* ObjectA, class UObject* ObjectB)> K2Node_CreateDelegate_OutputDelegate;              // 0x01B0(0x0010)(ZeroConstructor, NoDestructor)
	class UITEM_Base_C*                           CallFunc_Array_Get_Item_5;                         // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_6;               // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1CC[0x4];                                      // 0x01CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UITEM_Base_C*>                   CallFunc_GetItemArray_Items;                       // 0x01D0(0x0010)(ReferenceParm)
	bool                                          CallFunc_Less_IntInt_ReturnValue_5;                // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(InventoryBag_C_SortBag) == 0x000008, "Wrong alignment on InventoryBag_C_SortBag");
static_assert(sizeof(InventoryBag_C_SortBag) == 0x0001E8, "Wrong size on InventoryBag_C_SortBag");
static_assert(offsetof(InventoryBag_C_SortBag, Result) == 0x000000, "Member 'InventoryBag_C_SortBag::Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SortBag, SortFailed) == 0x000001, "Member 'InventoryBag_C_SortBag::SortFailed' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SortBag, CurrentItem) == 0x000008, "Member 'InventoryBag_C_SortBag::CurrentItem' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SortBag, RotatedItemSet) == 0x000010, "Member 'InventoryBag_C_SortBag::RotatedItemSet' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SortBag, ItemToSlotMap) == 0x000060, "Member 'InventoryBag_C_SortBag::ItemToSlotMap' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SortBag, SortedItems) == 0x0000B0, "Member 'InventoryBag_C_SortBag::SortedItems' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SortBag, Temp_int_Loop_Counter_Variable) == 0x0000C0, "Member 'InventoryBag_C_SortBag::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SortBag, CallFunc_Add_IntInt_ReturnValue) == 0x0000C4, "Member 'InventoryBag_C_SortBag::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SortBag, Temp_int_Array_Index_Variable) == 0x0000C8, "Member 'InventoryBag_C_SortBag::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SortBag, Temp_int_Array_Index_Variable_1) == 0x0000CC, "Member 'InventoryBag_C_SortBag::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SortBag, Temp_int_Loop_Counter_Variable_1) == 0x0000D0, "Member 'InventoryBag_C_SortBag::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SortBag, CallFunc_Array_Length_ReturnValue) == 0x0000D4, "Member 'InventoryBag_C_SortBag::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SortBag, CallFunc_Add_IntInt_ReturnValue_1) == 0x0000D8, "Member 'InventoryBag_C_SortBag::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SortBag, CallFunc_Greater_IntInt_ReturnValue) == 0x0000DC, "Member 'InventoryBag_C_SortBag::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SortBag, Temp_int_Loop_Counter_Variable_2) == 0x0000E0, "Member 'InventoryBag_C_SortBag::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SortBag, CallFunc_Add_IntInt_ReturnValue_2) == 0x0000E4, "Member 'InventoryBag_C_SortBag::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SortBag, Temp_int_Array_Index_Variable_2) == 0x0000E8, "Member 'InventoryBag_C_SortBag::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SortBag, CallFunc_RemoveItem_RemovedItem) == 0x0000F0, "Member 'InventoryBag_C_SortBag::CallFunc_RemoveItem_RemovedItem' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SortBag, Temp_int_Loop_Counter_Variable_3) == 0x0000F8, "Member 'InventoryBag_C_SortBag::Temp_int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SortBag, Temp_int_Array_Index_Variable_3) == 0x0000FC, "Member 'InventoryBag_C_SortBag::Temp_int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SortBag, CallFunc_Add_IntInt_ReturnValue_3) == 0x000100, "Member 'InventoryBag_C_SortBag::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SortBag, Temp_int_Loop_Counter_Variable_4) == 0x000104, "Member 'InventoryBag_C_SortBag::Temp_int_Loop_Counter_Variable_4' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SortBag, CallFunc_Add_IntInt_ReturnValue_4) == 0x000108, "Member 'InventoryBag_C_SortBag::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SortBag, Temp_int_Array_Index_Variable_4) == 0x00010C, "Member 'InventoryBag_C_SortBag::Temp_int_Array_Index_Variable_4' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SortBag, CallFunc_SetIsRotated_Success) == 0x000110, "Member 'InventoryBag_C_SortBag::CallFunc_SetIsRotated_Success' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SortBag, CallFunc_Map_Find_Value) == 0x000114, "Member 'InventoryBag_C_SortBag::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SortBag, CallFunc_Map_Find_ReturnValue) == 0x000118, "Member 'InventoryBag_C_SortBag::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SortBag, Temp_int_Loop_Counter_Variable_5) == 0x00011C, "Member 'InventoryBag_C_SortBag::Temp_int_Loop_Counter_Variable_5' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SortBag, CallFunc_AddItemToSlot_Result) == 0x000120, "Member 'InventoryBag_C_SortBag::CallFunc_AddItemToSlot_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SortBag, CallFunc_Add_IntInt_ReturnValue_5) == 0x000124, "Member 'InventoryBag_C_SortBag::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SortBag, CallFunc_Array_Length_ReturnValue_1) == 0x000128, "Member 'InventoryBag_C_SortBag::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SortBag, CallFunc_GetSlotIndex_Result) == 0x00012C, "Member 'InventoryBag_C_SortBag::CallFunc_GetSlotIndex_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SortBag, CallFunc_Less_IntInt_ReturnValue) == 0x000130, "Member 'InventoryBag_C_SortBag::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SortBag, Temp_int_Array_Index_Variable_5) == 0x000134, "Member 'InventoryBag_C_SortBag::Temp_int_Array_Index_Variable_5' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SortBag, CallFunc_Array_Get_Item) == 0x000138, "Member 'InventoryBag_C_SortBag::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SortBag, CallFunc_Array_Get_Item_1) == 0x000140, "Member 'InventoryBag_C_SortBag::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SortBag, CallFunc_CanUnslot_Result) == 0x000148, "Member 'InventoryBag_C_SortBag::CallFunc_CanUnslot_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SortBag, CallFunc_Not_PreBool_ReturnValue) == 0x000149, "Member 'InventoryBag_C_SortBag::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SortBag, CallFunc_Array_Length_ReturnValue_2) == 0x00014C, "Member 'InventoryBag_C_SortBag::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SortBag, CallFunc_Less_IntInt_ReturnValue_1) == 0x000150, "Member 'InventoryBag_C_SortBag::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SortBag, CallFunc_Set_Contains_ReturnValue) == 0x000151, "Member 'InventoryBag_C_SortBag::CallFunc_Set_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SortBag, CallFunc_SetIsRotated_Success_1) == 0x000152, "Member 'InventoryBag_C_SortBag::CallFunc_SetIsRotated_Success_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SortBag, CallFunc_Array_Get_Item_2) == 0x000158, "Member 'InventoryBag_C_SortBag::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SortBag, CallFunc_Array_Length_ReturnValue_3) == 0x000160, "Member 'InventoryBag_C_SortBag::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SortBag, CallFunc_Less_IntInt_ReturnValue_2) == 0x000164, "Member 'InventoryBag_C_SortBag::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SortBag, CallFunc_IsItemRotated_Result) == 0x000165, "Member 'InventoryBag_C_SortBag::CallFunc_IsItemRotated_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SortBag, CallFunc_RemoveItem_RemovedItem_1) == 0x000168, "Member 'InventoryBag_C_SortBag::CallFunc_RemoveItem_RemovedItem_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SortBag, CallFunc_GetCount_Result) == 0x000170, "Member 'InventoryBag_C_SortBag::CallFunc_GetCount_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SortBag, CallFunc_GetObjectClass_ReturnValue) == 0x000178, "Member 'InventoryBag_C_SortBag::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SortBag, CallFunc_AddItemInternal_Result) == 0x000180, "Member 'InventoryBag_C_SortBag::CallFunc_AddItemInternal_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SortBag, CallFunc_Array_Get_Item_3) == 0x000188, "Member 'InventoryBag_C_SortBag::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SortBag, CallFunc_Not_PreBool_ReturnValue_1) == 0x000190, "Member 'InventoryBag_C_SortBag::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SortBag, CallFunc_Array_Length_ReturnValue_4) == 0x000194, "Member 'InventoryBag_C_SortBag::CallFunc_Array_Length_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SortBag, CallFunc_Less_IntInt_ReturnValue_3) == 0x000198, "Member 'InventoryBag_C_SortBag::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SortBag, CallFunc_Array_Get_Item_4) == 0x0001A0, "Member 'InventoryBag_C_SortBag::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SortBag, CallFunc_Array_Length_ReturnValue_5) == 0x0001A8, "Member 'InventoryBag_C_SortBag::CallFunc_Array_Length_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SortBag, CallFunc_Less_IntInt_ReturnValue_4) == 0x0001AC, "Member 'InventoryBag_C_SortBag::CallFunc_Less_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SortBag, K2Node_CreateDelegate_OutputDelegate) == 0x0001B0, "Member 'InventoryBag_C_SortBag::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SortBag, CallFunc_Array_Get_Item_5) == 0x0001C0, "Member 'InventoryBag_C_SortBag::CallFunc_Array_Get_Item_5' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SortBag, CallFunc_Array_Length_ReturnValue_6) == 0x0001C8, "Member 'InventoryBag_C_SortBag::CallFunc_Array_Length_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SortBag, CallFunc_GetItemArray_Items) == 0x0001D0, "Member 'InventoryBag_C_SortBag::CallFunc_GetItemArray_Items' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SortBag, CallFunc_Less_IntInt_ReturnValue_5) == 0x0001E0, "Member 'InventoryBag_C_SortBag::CallFunc_Less_IntInt_ReturnValue_5' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.CompareItems
// 0x0078 (0x0078 - 0x0000)
struct InventoryBag_C_CompareItems final
{
public:
	class UObject*                                ObjectA;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                ObjectB;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinDimensionB;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MinDimensionA;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxDimensionB;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxDimensionA;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           ItemB;                                             // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           ItemA;                                             // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           K2Node_DynamicCast_AsITEM_Base;                    // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           K2Node_DynamicCast_AsITEM_Base_1;                  // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetItemTypePriority_Result;               // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetItemTypePriority_Result_1;             // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5E[0x2];                                       // 0x005E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Min_ReturnValue;                          // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Min_ReturnValue_1;                        // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_2;             // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6A[0x2];                                       // 0x006A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Max_ReturnValue;                          // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue_1;                        // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(InventoryBag_C_CompareItems) == 0x000008, "Wrong alignment on InventoryBag_C_CompareItems");
static_assert(sizeof(InventoryBag_C_CompareItems) == 0x000078, "Wrong size on InventoryBag_C_CompareItems");
static_assert(offsetof(InventoryBag_C_CompareItems, ObjectA) == 0x000000, "Member 'InventoryBag_C_CompareItems::ObjectA' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CompareItems, ObjectB) == 0x000008, "Member 'InventoryBag_C_CompareItems::ObjectB' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CompareItems, ReturnValue) == 0x000010, "Member 'InventoryBag_C_CompareItems::ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CompareItems, MinDimensionB) == 0x000014, "Member 'InventoryBag_C_CompareItems::MinDimensionB' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CompareItems, MinDimensionA) == 0x000018, "Member 'InventoryBag_C_CompareItems::MinDimensionA' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CompareItems, MaxDimensionB) == 0x00001C, "Member 'InventoryBag_C_CompareItems::MaxDimensionB' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CompareItems, MaxDimensionA) == 0x000020, "Member 'InventoryBag_C_CompareItems::MaxDimensionA' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CompareItems, ItemB) == 0x000028, "Member 'InventoryBag_C_CompareItems::ItemB' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CompareItems, ItemA) == 0x000030, "Member 'InventoryBag_C_CompareItems::ItemA' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CompareItems, K2Node_DynamicCast_AsITEM_Base) == 0x000038, "Member 'InventoryBag_C_CompareItems::K2Node_DynamicCast_AsITEM_Base' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CompareItems, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'InventoryBag_C_CompareItems::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CompareItems, K2Node_DynamicCast_AsITEM_Base_1) == 0x000048, "Member 'InventoryBag_C_CompareItems::K2Node_DynamicCast_AsITEM_Base_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CompareItems, K2Node_DynamicCast_bSuccess_1) == 0x000050, "Member 'InventoryBag_C_CompareItems::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CompareItems, CallFunc_GetItemTypePriority_Result) == 0x000054, "Member 'InventoryBag_C_CompareItems::CallFunc_GetItemTypePriority_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CompareItems, CallFunc_GetItemTypePriority_Result_1) == 0x000058, "Member 'InventoryBag_C_CompareItems::CallFunc_GetItemTypePriority_Result_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CompareItems, CallFunc_Greater_IntInt_ReturnValue) == 0x00005C, "Member 'InventoryBag_C_CompareItems::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CompareItems, CallFunc_Greater_IntInt_ReturnValue_1) == 0x00005D, "Member 'InventoryBag_C_CompareItems::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CompareItems, CallFunc_Min_ReturnValue) == 0x000060, "Member 'InventoryBag_C_CompareItems::CallFunc_Min_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CompareItems, CallFunc_Min_ReturnValue_1) == 0x000064, "Member 'InventoryBag_C_CompareItems::CallFunc_Min_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CompareItems, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000068, "Member 'InventoryBag_C_CompareItems::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CompareItems, CallFunc_Greater_IntInt_ReturnValue_2) == 0x000069, "Member 'InventoryBag_C_CompareItems::CallFunc_Greater_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CompareItems, CallFunc_Max_ReturnValue) == 0x00006C, "Member 'InventoryBag_C_CompareItems::CallFunc_Max_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CompareItems, CallFunc_Max_ReturnValue_1) == 0x000070, "Member 'InventoryBag_C_CompareItems::CallFunc_Max_ReturnValue_1' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.CanSlotItemType
// 0x000C (0x000C - 0x0000)
struct InventoryBag_C_CanSlotItemType final
{
public:
	ENUM_ItemType                                 ItemType;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(InventoryBag_C_CanSlotItemType) == 0x000004, "Wrong alignment on InventoryBag_C_CanSlotItemType");
static_assert(sizeof(InventoryBag_C_CanSlotItemType) == 0x00000C, "Wrong size on InventoryBag_C_CanSlotItemType");
static_assert(offsetof(InventoryBag_C_CanSlotItemType, ItemType) == 0x000000, "Member 'InventoryBag_C_CanSlotItemType::ItemType' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanSlotItemType, Result) == 0x000001, "Member 'InventoryBag_C_CanSlotItemType::Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanSlotItemType, CallFunc_Array_Length_ReturnValue) == 0x000004, "Member 'InventoryBag_C_CanSlotItemType::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanSlotItemType, CallFunc_Array_Contains_ReturnValue) == 0x000008, "Member 'InventoryBag_C_CanSlotItemType::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanSlotItemType, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000009, "Member 'InventoryBag_C_CanSlotItemType::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanSlotItemType, CallFunc_BooleanOR_ReturnValue) == 0x00000A, "Member 'InventoryBag_C_CanSlotItemType::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.RequiresItemType
// 0x0003 (0x0003 - 0x0000)
struct InventoryBag_C_RequiresItemType final
{
public:
	ENUM_ItemType                                 ItemType;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(InventoryBag_C_RequiresItemType) == 0x000001, "Wrong alignment on InventoryBag_C_RequiresItemType");
static_assert(sizeof(InventoryBag_C_RequiresItemType) == 0x000003, "Wrong size on InventoryBag_C_RequiresItemType");
static_assert(offsetof(InventoryBag_C_RequiresItemType, ItemType) == 0x000000, "Member 'InventoryBag_C_RequiresItemType::ItemType' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RequiresItemType, Result) == 0x000001, "Member 'InventoryBag_C_RequiresItemType::Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RequiresItemType, CallFunc_Array_Contains_ReturnValue) == 0x000002, "Member 'InventoryBag_C_RequiresItemType::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.GetItemCount
// 0x00E0 (0x00E0 - 0x0000)
struct InventoryBag_C_GetItemCount final
{
public:
	TSoftClassPtr<class UClass>                   ItemClass;                                         // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	int32                                         MaxCount;                                          // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           IgnoreItem;                                        // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Result;                                            // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ItemCountInPackage;                                // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ItemCountFound;                                    // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CurrentItem;                                       // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCount_Result;                          // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_PackageBase_C*                    K2Node_DynamicCast_AsITEM_Package_Base;            // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetItemCountInPackage_Result;             // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   CallFunc_Conv_ClassToSoftClassReference_ReturnValue; // 0x0088(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_SoftClassReference_ReturnValue; // 0x00B3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UITEM_Base_C*>                   CallFunc_Set_ToArray_Result;                       // 0x00B8(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CallFunc_Array_Get_Item;                           // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(InventoryBag_C_GetItemCount) == 0x000008, "Wrong alignment on InventoryBag_C_GetItemCount");
static_assert(sizeof(InventoryBag_C_GetItemCount) == 0x0000E0, "Wrong size on InventoryBag_C_GetItemCount");
static_assert(offsetof(InventoryBag_C_GetItemCount, ItemClass) == 0x000000, "Member 'InventoryBag_C_GetItemCount::ItemClass' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemCount, MaxCount) == 0x000028, "Member 'InventoryBag_C_GetItemCount::MaxCount' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemCount, IgnoreItem) == 0x000030, "Member 'InventoryBag_C_GetItemCount::IgnoreItem' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemCount, Result) == 0x000038, "Member 'InventoryBag_C_GetItemCount::Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemCount, ItemCountInPackage) == 0x00003C, "Member 'InventoryBag_C_GetItemCount::ItemCountInPackage' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemCount, ItemCountFound) == 0x000040, "Member 'InventoryBag_C_GetItemCount::ItemCountFound' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemCount, CurrentItem) == 0x000048, "Member 'InventoryBag_C_GetItemCount::CurrentItem' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemCount, Temp_int_Array_Index_Variable) == 0x000050, "Member 'InventoryBag_C_GetItemCount::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemCount, Temp_int_Loop_Counter_Variable) == 0x000054, "Member 'InventoryBag_C_GetItemCount::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemCount, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000058, "Member 'InventoryBag_C_GetItemCount::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemCount, CallFunc_Add_IntInt_ReturnValue) == 0x00005C, "Member 'InventoryBag_C_GetItemCount::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemCount, CallFunc_Add_IntInt_ReturnValue_1) == 0x000060, "Member 'InventoryBag_C_GetItemCount::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemCount, CallFunc_Greater_IntInt_ReturnValue) == 0x000064, "Member 'InventoryBag_C_GetItemCount::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemCount, CallFunc_GetCount_Result) == 0x000068, "Member 'InventoryBag_C_GetItemCount::CallFunc_GetCount_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemCount, CallFunc_Add_IntInt_ReturnValue_2) == 0x00006C, "Member 'InventoryBag_C_GetItemCount::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemCount, K2Node_DynamicCast_AsITEM_Package_Base) == 0x000070, "Member 'InventoryBag_C_GetItemCount::K2Node_DynamicCast_AsITEM_Package_Base' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemCount, K2Node_DynamicCast_bSuccess) == 0x000078, "Member 'InventoryBag_C_GetItemCount::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemCount, CallFunc_GetItemCountInPackage_Result) == 0x00007C, "Member 'InventoryBag_C_GetItemCount::CallFunc_GetItemCountInPackage_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemCount, CallFunc_GetObjectClass_ReturnValue) == 0x000080, "Member 'InventoryBag_C_GetItemCount::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemCount, CallFunc_Conv_ClassToSoftClassReference_ReturnValue) == 0x000088, "Member 'InventoryBag_C_GetItemCount::CallFunc_Conv_ClassToSoftClassReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemCount, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x0000B0, "Member 'InventoryBag_C_GetItemCount::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemCount, CallFunc_Greater_IntInt_ReturnValue_1) == 0x0000B1, "Member 'InventoryBag_C_GetItemCount::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemCount, CallFunc_BooleanAND_ReturnValue) == 0x0000B2, "Member 'InventoryBag_C_GetItemCount::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemCount, CallFunc_EqualEqual_SoftClassReference_ReturnValue) == 0x0000B3, "Member 'InventoryBag_C_GetItemCount::CallFunc_EqualEqual_SoftClassReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemCount, CallFunc_Set_ToArray_Result) == 0x0000B8, "Member 'InventoryBag_C_GetItemCount::CallFunc_Set_ToArray_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemCount, CallFunc_Array_Length_ReturnValue) == 0x0000C8, "Member 'InventoryBag_C_GetItemCount::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemCount, CallFunc_Array_Get_Item) == 0x0000D0, "Member 'InventoryBag_C_GetItemCount::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemCount, CallFunc_Less_IntInt_ReturnValue) == 0x0000D8, "Member 'InventoryBag_C_GetItemCount::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.GetTotalItemCount
// 0x0008 (0x0008 - 0x0000)
struct InventoryBag_C_GetTotalItemCount final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Set_Length_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(InventoryBag_C_GetTotalItemCount) == 0x000004, "Wrong alignment on InventoryBag_C_GetTotalItemCount");
static_assert(sizeof(InventoryBag_C_GetTotalItemCount) == 0x000008, "Wrong size on InventoryBag_C_GetTotalItemCount");
static_assert(offsetof(InventoryBag_C_GetTotalItemCount, Count) == 0x000000, "Member 'InventoryBag_C_GetTotalItemCount::Count' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetTotalItemCount, CallFunc_Set_Length_ReturnValue) == 0x000004, "Member 'InventoryBag_C_GetTotalItemCount::CallFunc_Set_Length_ReturnValue' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.RemoveItemCount
// 0x0070 (0x0070 - 0x0000)
struct InventoryBag_C_RemoveItemCount final
{
public:
	class UITEM_Base_C*                           Item;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Count;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           RemovedItem;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCOMP_Inventory_C*                      CallFunc_GetInventory_Inventory;                   // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSlotIndex_Result;                      // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanUnslot_Result;                         // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UInventoryBag_C*                        CallFunc_GetBag_Result;                            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSlotIndex_Result_1;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_HardItemParams                 K2Node_MakeStruct_STRUCT_HardItemParams;           // 0x0040(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CallFunc_CreateInventoryItem_Item;                 // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_AddCount_ResultCount;                     // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CleanupSlot_Result;                       // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCount_Result;                          // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(InventoryBag_C_RemoveItemCount) == 0x000008, "Wrong alignment on InventoryBag_C_RemoveItemCount");
static_assert(sizeof(InventoryBag_C_RemoveItemCount) == 0x000070, "Wrong size on InventoryBag_C_RemoveItemCount");
static_assert(offsetof(InventoryBag_C_RemoveItemCount, Item) == 0x000000, "Member 'InventoryBag_C_RemoveItemCount::Item' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCount, Count) == 0x000008, "Member 'InventoryBag_C_RemoveItemCount::Count' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCount, RemovedItem) == 0x000010, "Member 'InventoryBag_C_RemoveItemCount::RemovedItem' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCount, CallFunc_GetInventory_Inventory) == 0x000018, "Member 'InventoryBag_C_RemoveItemCount::CallFunc_GetInventory_Inventory' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCount, CallFunc_GetSlotIndex_Result) == 0x000020, "Member 'InventoryBag_C_RemoveItemCount::CallFunc_GetSlotIndex_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCount, CallFunc_CanUnslot_Result) == 0x000024, "Member 'InventoryBag_C_RemoveItemCount::CallFunc_CanUnslot_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCount, CallFunc_GetBag_Result) == 0x000028, "Member 'InventoryBag_C_RemoveItemCount::CallFunc_GetBag_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCount, CallFunc_GetSlotIndex_Result_1) == 0x000030, "Member 'InventoryBag_C_RemoveItemCount::CallFunc_GetSlotIndex_Result_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCount, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000034, "Member 'InventoryBag_C_RemoveItemCount::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCount, CallFunc_BooleanAND_ReturnValue) == 0x000035, "Member 'InventoryBag_C_RemoveItemCount::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCount, CallFunc_GetObjectClass_ReturnValue) == 0x000038, "Member 'InventoryBag_C_RemoveItemCount::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCount, K2Node_MakeStruct_STRUCT_HardItemParams) == 0x000040, "Member 'InventoryBag_C_RemoveItemCount::K2Node_MakeStruct_STRUCT_HardItemParams' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCount, CallFunc_Greater_IntInt_ReturnValue) == 0x000050, "Member 'InventoryBag_C_RemoveItemCount::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCount, CallFunc_CreateInventoryItem_Item) == 0x000058, "Member 'InventoryBag_C_RemoveItemCount::CallFunc_CreateInventoryItem_Item' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCount, CallFunc_AddCount_ResultCount) == 0x000060, "Member 'InventoryBag_C_RemoveItemCount::CallFunc_AddCount_ResultCount' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCount, CallFunc_CleanupSlot_Result) == 0x000064, "Member 'InventoryBag_C_RemoveItemCount::CallFunc_CleanupSlot_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCount, CallFunc_GetCount_Result) == 0x000068, "Member 'InventoryBag_C_RemoveItemCount::CallFunc_GetCount_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCount, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00006C, "Member 'InventoryBag_C_RemoveItemCount::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.CleanupSlot
// 0x0020 (0x0020 - 0x0000)
struct InventoryBag_C_CleanupSlot final
{
public:
	class UITEM_Base_C*                           Item;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanUnslot_Result;                         // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UInventoryBag_C*                        CallFunc_GetBag_Result;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(InventoryBag_C_CleanupSlot) == 0x000008, "Wrong alignment on InventoryBag_C_CleanupSlot");
static_assert(sizeof(InventoryBag_C_CleanupSlot) == 0x000020, "Wrong size on InventoryBag_C_CleanupSlot");
static_assert(offsetof(InventoryBag_C_CleanupSlot, Item) == 0x000000, "Member 'InventoryBag_C_CleanupSlot::Item' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CleanupSlot, Result) == 0x000008, "Member 'InventoryBag_C_CleanupSlot::Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CleanupSlot, CallFunc_CanUnslot_Result) == 0x000009, "Member 'InventoryBag_C_CleanupSlot::CallFunc_CanUnslot_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CleanupSlot, CallFunc_GetBag_Result) == 0x000010, "Member 'InventoryBag_C_CleanupSlot::CallFunc_GetBag_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CleanupSlot, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000018, "Member 'InventoryBag_C_CleanupSlot::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CleanupSlot, CallFunc_BooleanAND_ReturnValue) == 0x000019, "Member 'InventoryBag_C_CleanupSlot::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.GetItemArray
// 0x0020 (0x0020 - 0x0000)
struct InventoryBag_C_GetItemArray final
{
public:
	TArray<class UITEM_Base_C*>                   Items;                                             // 0x0000(0x0010)(Parm, OutParm)
	TArray<class UITEM_Base_C*>                   CallFunc_Set_ToArray_Result;                       // 0x0010(0x0010)(ReferenceParm)
};
static_assert(alignof(InventoryBag_C_GetItemArray) == 0x000008, "Wrong alignment on InventoryBag_C_GetItemArray");
static_assert(sizeof(InventoryBag_C_GetItemArray) == 0x000020, "Wrong size on InventoryBag_C_GetItemArray");
static_assert(offsetof(InventoryBag_C_GetItemArray, Items) == 0x000000, "Member 'InventoryBag_C_GetItemArray::Items' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemArray, CallFunc_Set_ToArray_Result) == 0x000010, "Member 'InventoryBag_C_GetItemArray::CallFunc_Set_ToArray_Result' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.BeginPlay
// 0x0038 (0x0038 - 0x0000)
struct InventoryBag_C_BeginPlay final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UITEM_Base_C*>                   CallFunc_GetItemArray_Items;                       // 0x0010(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(InventoryBag_C_BeginPlay) == 0x000008, "Wrong alignment on InventoryBag_C_BeginPlay");
static_assert(sizeof(InventoryBag_C_BeginPlay) == 0x000038, "Wrong size on InventoryBag_C_BeginPlay");
static_assert(offsetof(InventoryBag_C_BeginPlay, Temp_int_Array_Index_Variable) == 0x000000, "Member 'InventoryBag_C_BeginPlay::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_BeginPlay, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'InventoryBag_C_BeginPlay::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_BeginPlay, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'InventoryBag_C_BeginPlay::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_BeginPlay, CallFunc_GetItemArray_Items) == 0x000010, "Member 'InventoryBag_C_BeginPlay::CallFunc_GetItemArray_Items' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_BeginPlay, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'InventoryBag_C_BeginPlay::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_BeginPlay, CallFunc_Array_Get_Item) == 0x000028, "Member 'InventoryBag_C_BeginPlay::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_BeginPlay, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'InventoryBag_C_BeginPlay::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.GetBagName
// 0x0008 (0x0008 - 0x0000)
struct InventoryBag_C_GetBagName final
{
public:
	class FName                                   BagName;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(InventoryBag_C_GetBagName) == 0x000004, "Wrong alignment on InventoryBag_C_GetBagName");
static_assert(sizeof(InventoryBag_C_GetBagName) == 0x000008, "Wrong size on InventoryBag_C_GetBagName");
static_assert(offsetof(InventoryBag_C_GetBagName, BagName) == 0x000000, "Member 'InventoryBag_C_GetBagName::BagName' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.IsBagEmpty
// 0x000C (0x000C - 0x0000)
struct InventoryBag_C_IsBagEmpty final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Set_Length_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(InventoryBag_C_IsBagEmpty) == 0x000004, "Wrong alignment on InventoryBag_C_IsBagEmpty");
static_assert(sizeof(InventoryBag_C_IsBagEmpty) == 0x00000C, "Wrong size on InventoryBag_C_IsBagEmpty");
static_assert(offsetof(InventoryBag_C_IsBagEmpty, Result) == 0x000000, "Member 'InventoryBag_C_IsBagEmpty::Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_IsBagEmpty, CallFunc_Set_Length_ReturnValue) == 0x000004, "Member 'InventoryBag_C_IsBagEmpty::CallFunc_Set_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_IsBagEmpty, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000008, "Member 'InventoryBag_C_IsBagEmpty::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.RemoveItem
// 0x0020 (0x0020 - 0x0000)
struct InventoryBag_C_RemoveItem final
{
public:
	class UITEM_Base_C*                           Item;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           RemovedItem;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCount_Result;                          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CallFunc_RemoveItemCount_RemovedItem;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(InventoryBag_C_RemoveItem) == 0x000008, "Wrong alignment on InventoryBag_C_RemoveItem");
static_assert(sizeof(InventoryBag_C_RemoveItem) == 0x000020, "Wrong size on InventoryBag_C_RemoveItem");
static_assert(offsetof(InventoryBag_C_RemoveItem, Item) == 0x000000, "Member 'InventoryBag_C_RemoveItem::Item' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItem, RemovedItem) == 0x000008, "Member 'InventoryBag_C_RemoveItem::RemovedItem' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItem, CallFunc_GetCount_Result) == 0x000010, "Member 'InventoryBag_C_RemoveItem::CallFunc_GetCount_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItem, CallFunc_RemoveItemCount_RemovedItem) == 0x000018, "Member 'InventoryBag_C_RemoveItem::CallFunc_RemoveItemCount_RemovedItem' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.GetSlotType
// 0x0001 (0x0001 - 0x0000)
struct InventoryBag_C_GetSlotType final
{
public:
	ENUM_InventorySlotType                        SlotType;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(InventoryBag_C_GetSlotType) == 0x000001, "Wrong alignment on InventoryBag_C_GetSlotType");
static_assert(sizeof(InventoryBag_C_GetSlotType) == 0x000001, "Wrong size on InventoryBag_C_GetSlotType");
static_assert(offsetof(InventoryBag_C_GetSlotType, SlotType) == 0x000000, "Member 'InventoryBag_C_GetSlotType::SlotType' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.GetGridSlotIndices
// 0x0090 (0x0090 - 0x0000)
struct InventoryBag_C_GetGridSlotIndices final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         StartWidthOffset;                                  // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         StartHeightOffset;                                 // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         EndWidthOffset;                                    // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         EndHeightOffset;                                   // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 SlotIndices;                                       // 0x0018(0x0010)(Parm, OutParm)
	int32                                         OffsetSlotIndex;                                   // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         WidthOffset;                                       // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HeightOffset;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         WidthIndex;                                        // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxSlots;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         GridWidth;                                         // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 ResultSlotIndices;                                 // 0x0040(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Variable;                                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetMaxSlots_Count;                        // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetGridWidth_Result;                      // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E[0x2];                                       // 0x006E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_1;        // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_82[0x2];                                       // 0x0082(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_1;                               // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x008A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x008B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(InventoryBag_C_GetGridSlotIndices) == 0x000008, "Wrong alignment on InventoryBag_C_GetGridSlotIndices");
static_assert(sizeof(InventoryBag_C_GetGridSlotIndices) == 0x000090, "Wrong size on InventoryBag_C_GetGridSlotIndices");
static_assert(offsetof(InventoryBag_C_GetGridSlotIndices, SlotIndex) == 0x000000, "Member 'InventoryBag_C_GetGridSlotIndices::SlotIndex' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridSlotIndices, StartWidthOffset) == 0x000004, "Member 'InventoryBag_C_GetGridSlotIndices::StartWidthOffset' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridSlotIndices, StartHeightOffset) == 0x000008, "Member 'InventoryBag_C_GetGridSlotIndices::StartHeightOffset' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridSlotIndices, EndWidthOffset) == 0x00000C, "Member 'InventoryBag_C_GetGridSlotIndices::EndWidthOffset' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridSlotIndices, EndHeightOffset) == 0x000010, "Member 'InventoryBag_C_GetGridSlotIndices::EndHeightOffset' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridSlotIndices, SlotIndices) == 0x000018, "Member 'InventoryBag_C_GetGridSlotIndices::SlotIndices' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridSlotIndices, OffsetSlotIndex) == 0x000028, "Member 'InventoryBag_C_GetGridSlotIndices::OffsetSlotIndex' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridSlotIndices, WidthOffset) == 0x00002C, "Member 'InventoryBag_C_GetGridSlotIndices::WidthOffset' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridSlotIndices, HeightOffset) == 0x000030, "Member 'InventoryBag_C_GetGridSlotIndices::HeightOffset' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridSlotIndices, WidthIndex) == 0x000034, "Member 'InventoryBag_C_GetGridSlotIndices::WidthIndex' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridSlotIndices, MaxSlots) == 0x000038, "Member 'InventoryBag_C_GetGridSlotIndices::MaxSlots' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridSlotIndices, GridWidth) == 0x00003C, "Member 'InventoryBag_C_GetGridSlotIndices::GridWidth' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridSlotIndices, ResultSlotIndices) == 0x000040, "Member 'InventoryBag_C_GetGridSlotIndices::ResultSlotIndices' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridSlotIndices, Temp_int_Variable) == 0x000050, "Member 'InventoryBag_C_GetGridSlotIndices::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridSlotIndices, CallFunc_Add_IntInt_ReturnValue) == 0x000054, "Member 'InventoryBag_C_GetGridSlotIndices::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridSlotIndices, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000058, "Member 'InventoryBag_C_GetGridSlotIndices::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridSlotIndices, CallFunc_GetMaxSlots_Count) == 0x00005C, "Member 'InventoryBag_C_GetGridSlotIndices::CallFunc_GetMaxSlots_Count' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridSlotIndices, CallFunc_Percent_IntInt_ReturnValue) == 0x000060, "Member 'InventoryBag_C_GetGridSlotIndices::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridSlotIndices, CallFunc_GetGridWidth_Result) == 0x000064, "Member 'InventoryBag_C_GetGridSlotIndices::CallFunc_GetGridWidth_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridSlotIndices, CallFunc_Array_Add_ReturnValue) == 0x000068, "Member 'InventoryBag_C_GetGridSlotIndices::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridSlotIndices, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00006C, "Member 'InventoryBag_C_GetGridSlotIndices::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridSlotIndices, CallFunc_Less_IntInt_ReturnValue) == 0x00006D, "Member 'InventoryBag_C_GetGridSlotIndices::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridSlotIndices, CallFunc_Multiply_IntInt_ReturnValue) == 0x000070, "Member 'InventoryBag_C_GetGridSlotIndices::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridSlotIndices, CallFunc_Add_IntInt_ReturnValue_1) == 0x000074, "Member 'InventoryBag_C_GetGridSlotIndices::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridSlotIndices, CallFunc_Add_IntInt_ReturnValue_2) == 0x000078, "Member 'InventoryBag_C_GetGridSlotIndices::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridSlotIndices, CallFunc_Add_IntInt_ReturnValue_3) == 0x00007C, "Member 'InventoryBag_C_GetGridSlotIndices::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridSlotIndices, CallFunc_GreaterEqual_IntInt_ReturnValue_1) == 0x000080, "Member 'InventoryBag_C_GetGridSlotIndices::CallFunc_GreaterEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridSlotIndices, CallFunc_Less_IntInt_ReturnValue_1) == 0x000081, "Member 'InventoryBag_C_GetGridSlotIndices::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridSlotIndices, Temp_int_Variable_1) == 0x000084, "Member 'InventoryBag_C_GetGridSlotIndices::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridSlotIndices, CallFunc_BooleanAND_ReturnValue) == 0x000088, "Member 'InventoryBag_C_GetGridSlotIndices::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridSlotIndices, CallFunc_BooleanAND_ReturnValue_1) == 0x000089, "Member 'InventoryBag_C_GetGridSlotIndices::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridSlotIndices, CallFunc_BooleanAND_ReturnValue_2) == 0x00008A, "Member 'InventoryBag_C_GetGridSlotIndices::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridSlotIndices, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x00008B, "Member 'InventoryBag_C_GetGridSlotIndices::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridSlotIndices, CallFunc_Add_IntInt_ReturnValue_4) == 0x00008C, "Member 'InventoryBag_C_GetGridSlotIndices::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.GetGridSlotIndicesForItemWithSize
// 0x0038 (0x0038 - 0x0000)
struct InventoryBag_C_GetGridSlotIndicesForItemWithSize final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              ItemSize;                                          // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ResultIndices;                                     // 0x0010(0x0010)(Parm, OutParm)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 CallFunc_GetGridSlotIndices_SlotIndices;           // 0x0028(0x0010)(ReferenceParm)
};
static_assert(alignof(InventoryBag_C_GetGridSlotIndicesForItemWithSize) == 0x000008, "Wrong alignment on InventoryBag_C_GetGridSlotIndicesForItemWithSize");
static_assert(sizeof(InventoryBag_C_GetGridSlotIndicesForItemWithSize) == 0x000038, "Wrong size on InventoryBag_C_GetGridSlotIndicesForItemWithSize");
static_assert(offsetof(InventoryBag_C_GetGridSlotIndicesForItemWithSize, SlotIndex) == 0x000000, "Member 'InventoryBag_C_GetGridSlotIndicesForItemWithSize::SlotIndex' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridSlotIndicesForItemWithSize, ItemSize) == 0x000004, "Member 'InventoryBag_C_GetGridSlotIndicesForItemWithSize::ItemSize' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridSlotIndicesForItemWithSize, ResultIndices) == 0x000010, "Member 'InventoryBag_C_GetGridSlotIndicesForItemWithSize::ResultIndices' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridSlotIndicesForItemWithSize, CallFunc_Subtract_IntInt_ReturnValue) == 0x000020, "Member 'InventoryBag_C_GetGridSlotIndicesForItemWithSize::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridSlotIndicesForItemWithSize, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000024, "Member 'InventoryBag_C_GetGridSlotIndicesForItemWithSize::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridSlotIndicesForItemWithSize, CallFunc_GetGridSlotIndices_SlotIndices) == 0x000028, "Member 'InventoryBag_C_GetGridSlotIndicesForItemWithSize::CallFunc_GetGridSlotIndices_SlotIndices' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.HasGridSpaceForItemWithSize
// 0x00C8 (0x00C8 - 0x0000)
struct InventoryBag_C_HasGridSpaceForItemWithSize final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              ItemSize;                                          // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           IgnoreItem;                                        // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 SlotIndices;                                       // 0x0020(0x0010)(Edit, BlueprintVisible)
	int32                                         HeightOffset;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         WidthOffset;                                       // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         EndHeightOffset;                                   // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         EndWidthOffset;                                    // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CallFunc_GetSlotItem_Item;                         // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x007D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x007E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x007F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_GetGridSlotIndices_SlotIndices;           // 0x0088(0x0010)(ReferenceParm)
	int32                                         CallFunc_GetGridHeight_Result;                     // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetGridWidth_Result;                      // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetGridWidth_Result_1;                    // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Divide_IntInt_ReturnValue;                // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetGridWidth_Result_2;                    // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(InventoryBag_C_HasGridSpaceForItemWithSize) == 0x000008, "Wrong alignment on InventoryBag_C_HasGridSpaceForItemWithSize");
static_assert(sizeof(InventoryBag_C_HasGridSpaceForItemWithSize) == 0x0000C8, "Wrong size on InventoryBag_C_HasGridSpaceForItemWithSize");
static_assert(offsetof(InventoryBag_C_HasGridSpaceForItemWithSize, SlotIndex) == 0x000000, "Member 'InventoryBag_C_HasGridSpaceForItemWithSize::SlotIndex' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_HasGridSpaceForItemWithSize, ItemSize) == 0x000004, "Member 'InventoryBag_C_HasGridSpaceForItemWithSize::ItemSize' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_HasGridSpaceForItemWithSize, IgnoreItem) == 0x000010, "Member 'InventoryBag_C_HasGridSpaceForItemWithSize::IgnoreItem' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_HasGridSpaceForItemWithSize, Result) == 0x000018, "Member 'InventoryBag_C_HasGridSpaceForItemWithSize::Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_HasGridSpaceForItemWithSize, SlotIndices) == 0x000020, "Member 'InventoryBag_C_HasGridSpaceForItemWithSize::SlotIndices' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_HasGridSpaceForItemWithSize, HeightOffset) == 0x000030, "Member 'InventoryBag_C_HasGridSpaceForItemWithSize::HeightOffset' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_HasGridSpaceForItemWithSize, WidthOffset) == 0x000034, "Member 'InventoryBag_C_HasGridSpaceForItemWithSize::WidthOffset' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_HasGridSpaceForItemWithSize, EndHeightOffset) == 0x000038, "Member 'InventoryBag_C_HasGridSpaceForItemWithSize::EndHeightOffset' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_HasGridSpaceForItemWithSize, EndWidthOffset) == 0x00003C, "Member 'InventoryBag_C_HasGridSpaceForItemWithSize::EndWidthOffset' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_HasGridSpaceForItemWithSize, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'InventoryBag_C_HasGridSpaceForItemWithSize::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_HasGridSpaceForItemWithSize, Temp_int_Array_Index_Variable) == 0x000044, "Member 'InventoryBag_C_HasGridSpaceForItemWithSize::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_HasGridSpaceForItemWithSize, CallFunc_Multiply_IntInt_ReturnValue) == 0x000048, "Member 'InventoryBag_C_HasGridSpaceForItemWithSize::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_HasGridSpaceForItemWithSize, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00004C, "Member 'InventoryBag_C_HasGridSpaceForItemWithSize::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_HasGridSpaceForItemWithSize, CallFunc_Subtract_IntInt_ReturnValue) == 0x000050, "Member 'InventoryBag_C_HasGridSpaceForItemWithSize::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_HasGridSpaceForItemWithSize, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000054, "Member 'InventoryBag_C_HasGridSpaceForItemWithSize::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_HasGridSpaceForItemWithSize, CallFunc_Array_Get_Item) == 0x000058, "Member 'InventoryBag_C_HasGridSpaceForItemWithSize::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_HasGridSpaceForItemWithSize, CallFunc_GetSlotItem_Item) == 0x000060, "Member 'InventoryBag_C_HasGridSpaceForItemWithSize::CallFunc_GetSlotItem_Item' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_HasGridSpaceForItemWithSize, CallFunc_Array_Length_ReturnValue_1) == 0x000068, "Member 'InventoryBag_C_HasGridSpaceForItemWithSize::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_HasGridSpaceForItemWithSize, CallFunc_IsValid_ReturnValue) == 0x00006C, "Member 'InventoryBag_C_HasGridSpaceForItemWithSize::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_HasGridSpaceForItemWithSize, Temp_int_Loop_Counter_Variable) == 0x000070, "Member 'InventoryBag_C_HasGridSpaceForItemWithSize::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_HasGridSpaceForItemWithSize, CallFunc_Less_IntInt_ReturnValue) == 0x000074, "Member 'InventoryBag_C_HasGridSpaceForItemWithSize::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_HasGridSpaceForItemWithSize, CallFunc_Add_IntInt_ReturnValue) == 0x000078, "Member 'InventoryBag_C_HasGridSpaceForItemWithSize::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_HasGridSpaceForItemWithSize, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00007C, "Member 'InventoryBag_C_HasGridSpaceForItemWithSize::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_HasGridSpaceForItemWithSize, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x00007D, "Member 'InventoryBag_C_HasGridSpaceForItemWithSize::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_HasGridSpaceForItemWithSize, CallFunc_IsValid_ReturnValue_1) == 0x00007E, "Member 'InventoryBag_C_HasGridSpaceForItemWithSize::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_HasGridSpaceForItemWithSize, CallFunc_Not_PreBool_ReturnValue) == 0x00007F, "Member 'InventoryBag_C_HasGridSpaceForItemWithSize::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_HasGridSpaceForItemWithSize, CallFunc_BooleanOR_ReturnValue) == 0x000080, "Member 'InventoryBag_C_HasGridSpaceForItemWithSize::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_HasGridSpaceForItemWithSize, CallFunc_GetGridSlotIndices_SlotIndices) == 0x000088, "Member 'InventoryBag_C_HasGridSpaceForItemWithSize::CallFunc_GetGridSlotIndices_SlotIndices' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_HasGridSpaceForItemWithSize, CallFunc_GetGridHeight_Result) == 0x000098, "Member 'InventoryBag_C_HasGridSpaceForItemWithSize::CallFunc_GetGridHeight_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_HasGridSpaceForItemWithSize, CallFunc_GetGridWidth_Result) == 0x00009C, "Member 'InventoryBag_C_HasGridSpaceForItemWithSize::CallFunc_GetGridWidth_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_HasGridSpaceForItemWithSize, CallFunc_Add_IntInt_ReturnValue_1) == 0x0000A0, "Member 'InventoryBag_C_HasGridSpaceForItemWithSize::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_HasGridSpaceForItemWithSize, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000A4, "Member 'InventoryBag_C_HasGridSpaceForItemWithSize::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_HasGridSpaceForItemWithSize, CallFunc_GetGridWidth_Result_1) == 0x0000A8, "Member 'InventoryBag_C_HasGridSpaceForItemWithSize::CallFunc_GetGridWidth_Result_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_HasGridSpaceForItemWithSize, CallFunc_Add_IntInt_ReturnValue_2) == 0x0000AC, "Member 'InventoryBag_C_HasGridSpaceForItemWithSize::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_HasGridSpaceForItemWithSize, CallFunc_Less_IntInt_ReturnValue_2) == 0x0000B0, "Member 'InventoryBag_C_HasGridSpaceForItemWithSize::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_HasGridSpaceForItemWithSize, CallFunc_Divide_IntInt_ReturnValue) == 0x0000B4, "Member 'InventoryBag_C_HasGridSpaceForItemWithSize::CallFunc_Divide_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_HasGridSpaceForItemWithSize, CallFunc_BooleanAND_ReturnValue) == 0x0000B8, "Member 'InventoryBag_C_HasGridSpaceForItemWithSize::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_HasGridSpaceForItemWithSize, CallFunc_GetGridWidth_Result_2) == 0x0000BC, "Member 'InventoryBag_C_HasGridSpaceForItemWithSize::CallFunc_GetGridWidth_Result_2' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_HasGridSpaceForItemWithSize, CallFunc_Percent_IntInt_ReturnValue) == 0x0000C0, "Member 'InventoryBag_C_HasGridSpaceForItemWithSize::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.GetGridWidth
// 0x0004 (0x0004 - 0x0000)
struct InventoryBag_C_GetGridWidth final
{
public:
	int32                                         Result;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(InventoryBag_C_GetGridWidth) == 0x000004, "Wrong alignment on InventoryBag_C_GetGridWidth");
static_assert(sizeof(InventoryBag_C_GetGridWidth) == 0x000004, "Wrong size on InventoryBag_C_GetGridWidth");
static_assert(offsetof(InventoryBag_C_GetGridWidth, Result) == 0x000000, "Member 'InventoryBag_C_GetGridWidth::Result' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.GetGridHeight
// 0x0024 (0x0024 - 0x0000)
struct InventoryBag_C_GetGridHeight final
{
public:
	int32                                         Result;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetGridWidth_Result;                      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetMaxSlots_Count;                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetGridWidth_Result_1;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_FCeil_ReturnValue;                        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(InventoryBag_C_GetGridHeight) == 0x000004, "Wrong alignment on InventoryBag_C_GetGridHeight");
static_assert(sizeof(InventoryBag_C_GetGridHeight) == 0x000024, "Wrong size on InventoryBag_C_GetGridHeight");
static_assert(offsetof(InventoryBag_C_GetGridHeight, Result) == 0x000000, "Member 'InventoryBag_C_GetGridHeight::Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridHeight, CallFunc_GetGridWidth_Result) == 0x000004, "Member 'InventoryBag_C_GetGridHeight::CallFunc_GetGridWidth_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridHeight, CallFunc_GetMaxSlots_Count) == 0x000008, "Member 'InventoryBag_C_GetGridHeight::CallFunc_GetMaxSlots_Count' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridHeight, CallFunc_Conv_IntToFloat_ReturnValue) == 0x00000C, "Member 'InventoryBag_C_GetGridHeight::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridHeight, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x000010, "Member 'InventoryBag_C_GetGridHeight::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridHeight, CallFunc_GetGridWidth_Result_1) == 0x000014, "Member 'InventoryBag_C_GetGridHeight::CallFunc_GetGridWidth_Result_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridHeight, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000018, "Member 'InventoryBag_C_GetGridHeight::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridHeight, CallFunc_Greater_IntInt_ReturnValue) == 0x00001C, "Member 'InventoryBag_C_GetGridHeight::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridHeight, CallFunc_FCeil_ReturnValue) == 0x000020, "Member 'InventoryBag_C_GetGridHeight::CallFunc_FCeil_ReturnValue' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.GetSlotItem
// 0x0020 (0x0020 - 0x0000)
struct InventoryBag_C_GetSlotItem final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           Item;                                              // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(InventoryBag_C_GetSlotItem) == 0x000008, "Wrong alignment on InventoryBag_C_GetSlotItem");
static_assert(sizeof(InventoryBag_C_GetSlotItem) == 0x000020, "Wrong size on InventoryBag_C_GetSlotItem");
static_assert(offsetof(InventoryBag_C_GetSlotItem, SlotIndex) == 0x000000, "Member 'InventoryBag_C_GetSlotItem::SlotIndex' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetSlotItem, Item) == 0x000008, "Member 'InventoryBag_C_GetSlotItem::Item' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetSlotItem, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000010, "Member 'InventoryBag_C_GetSlotItem::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetSlotItem, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000011, "Member 'InventoryBag_C_GetSlotItem::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetSlotItem, CallFunc_Array_Get_Item) == 0x000018, "Member 'InventoryBag_C_GetSlotItem::CallFunc_Array_Get_Item' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.GetGridHeightAtHorizontalSlotIndex
// 0x004C (0x004C - 0x0000)
struct InventoryBag_C_GetGridHeightAtHorizontalSlotIndex final
{
public:
	int32                                         SlotLocation;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Result;                                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FractionalHeight;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FFloor_ReturnValue;                       // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Fraction_ReturnValue;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetGridWidth_Result;                      // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Fraction_ReturnValue_1;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FCeil_ReturnValue;                        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Round_ReturnValue;                        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetGridWidth_Result_1;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetGridWidth_Result_2;                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetMaxSlots_Count;                        // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(InventoryBag_C_GetGridHeightAtHorizontalSlotIndex) == 0x000004, "Wrong alignment on InventoryBag_C_GetGridHeightAtHorizontalSlotIndex");
static_assert(sizeof(InventoryBag_C_GetGridHeightAtHorizontalSlotIndex) == 0x00004C, "Wrong size on InventoryBag_C_GetGridHeightAtHorizontalSlotIndex");
static_assert(offsetof(InventoryBag_C_GetGridHeightAtHorizontalSlotIndex, SlotLocation) == 0x000000, "Member 'InventoryBag_C_GetGridHeightAtHorizontalSlotIndex::SlotLocation' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridHeightAtHorizontalSlotIndex, Result) == 0x000004, "Member 'InventoryBag_C_GetGridHeightAtHorizontalSlotIndex::Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridHeightAtHorizontalSlotIndex, FractionalHeight) == 0x000008, "Member 'InventoryBag_C_GetGridHeightAtHorizontalSlotIndex::FractionalHeight' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridHeightAtHorizontalSlotIndex, CallFunc_FFloor_ReturnValue) == 0x00000C, "Member 'InventoryBag_C_GetGridHeightAtHorizontalSlotIndex::CallFunc_FFloor_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridHeightAtHorizontalSlotIndex, CallFunc_Fraction_ReturnValue) == 0x000010, "Member 'InventoryBag_C_GetGridHeightAtHorizontalSlotIndex::CallFunc_Fraction_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridHeightAtHorizontalSlotIndex, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x000014, "Member 'InventoryBag_C_GetGridHeightAtHorizontalSlotIndex::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridHeightAtHorizontalSlotIndex, CallFunc_GetGridWidth_Result) == 0x000018, "Member 'InventoryBag_C_GetGridHeightAtHorizontalSlotIndex::CallFunc_GetGridWidth_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridHeightAtHorizontalSlotIndex, CallFunc_Fraction_ReturnValue_1) == 0x00001C, "Member 'InventoryBag_C_GetGridHeightAtHorizontalSlotIndex::CallFunc_Fraction_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridHeightAtHorizontalSlotIndex, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000020, "Member 'InventoryBag_C_GetGridHeightAtHorizontalSlotIndex::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridHeightAtHorizontalSlotIndex, CallFunc_FCeil_ReturnValue) == 0x000024, "Member 'InventoryBag_C_GetGridHeightAtHorizontalSlotIndex::CallFunc_FCeil_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridHeightAtHorizontalSlotIndex, CallFunc_Round_ReturnValue) == 0x000028, "Member 'InventoryBag_C_GetGridHeightAtHorizontalSlotIndex::CallFunc_Round_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridHeightAtHorizontalSlotIndex, CallFunc_Less_IntInt_ReturnValue) == 0x00002C, "Member 'InventoryBag_C_GetGridHeightAtHorizontalSlotIndex::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridHeightAtHorizontalSlotIndex, CallFunc_GetGridWidth_Result_1) == 0x000030, "Member 'InventoryBag_C_GetGridHeightAtHorizontalSlotIndex::CallFunc_GetGridWidth_Result_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridHeightAtHorizontalSlotIndex, CallFunc_GetGridWidth_Result_2) == 0x000034, "Member 'InventoryBag_C_GetGridHeightAtHorizontalSlotIndex::CallFunc_GetGridWidth_Result_2' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridHeightAtHorizontalSlotIndex, CallFunc_Greater_IntInt_ReturnValue) == 0x000038, "Member 'InventoryBag_C_GetGridHeightAtHorizontalSlotIndex::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridHeightAtHorizontalSlotIndex, CallFunc_Conv_IntToFloat_ReturnValue) == 0x00003C, "Member 'InventoryBag_C_GetGridHeightAtHorizontalSlotIndex::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridHeightAtHorizontalSlotIndex, CallFunc_GetMaxSlots_Count) == 0x000040, "Member 'InventoryBag_C_GetGridHeightAtHorizontalSlotIndex::CallFunc_GetMaxSlots_Count' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridHeightAtHorizontalSlotIndex, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x000044, "Member 'InventoryBag_C_GetGridHeightAtHorizontalSlotIndex::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridHeightAtHorizontalSlotIndex, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000048, "Member 'InventoryBag_C_GetGridHeightAtHorizontalSlotIndex::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.GetItemGridSize
// 0x0030 (0x0030 - 0x0000)
struct InventoryBag_C_GetItemGridSize final
{
public:
	class UITEM_Base_C*                           Item;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 ItemClass;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              Result;                                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              K2Node_MakeStruct_IntPoint;                        // 0x001C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              K2Node_MakeStruct_IntPoint_1;                      // 0x0024(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(InventoryBag_C_GetItemGridSize) == 0x000008, "Wrong alignment on InventoryBag_C_GetItemGridSize");
static_assert(sizeof(InventoryBag_C_GetItemGridSize) == 0x000030, "Wrong size on InventoryBag_C_GetItemGridSize");
static_assert(offsetof(InventoryBag_C_GetItemGridSize, Item) == 0x000000, "Member 'InventoryBag_C_GetItemGridSize::Item' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemGridSize, ItemClass) == 0x000008, "Member 'InventoryBag_C_GetItemGridSize::ItemClass' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemGridSize, Result) == 0x000010, "Member 'InventoryBag_C_GetItemGridSize::Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemGridSize, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'InventoryBag_C_GetItemGridSize::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemGridSize, K2Node_MakeStruct_IntPoint) == 0x00001C, "Member 'InventoryBag_C_GetItemGridSize::K2Node_MakeStruct_IntPoint' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemGridSize, K2Node_MakeStruct_IntPoint_1) == 0x000024, "Member 'InventoryBag_C_GetItemGridSize::K2Node_MakeStruct_IntPoint_1' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.GetGridCoordinatesFromSlotIndex
// 0x0024 (0x0024 - 0x0000)
struct InventoryBag_C_GetGridCoordinatesFromSlotIndex final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              GridCoords;                                        // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetGridWidth_Result;                      // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetGridWidth_Result_1;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue;                // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              K2Node_MakeStruct_IntPoint;                        // 0x001C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(InventoryBag_C_GetGridCoordinatesFromSlotIndex) == 0x000004, "Wrong alignment on InventoryBag_C_GetGridCoordinatesFromSlotIndex");
static_assert(sizeof(InventoryBag_C_GetGridCoordinatesFromSlotIndex) == 0x000024, "Wrong size on InventoryBag_C_GetGridCoordinatesFromSlotIndex");
static_assert(offsetof(InventoryBag_C_GetGridCoordinatesFromSlotIndex, SlotIndex) == 0x000000, "Member 'InventoryBag_C_GetGridCoordinatesFromSlotIndex::SlotIndex' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridCoordinatesFromSlotIndex, GridCoords) == 0x000004, "Member 'InventoryBag_C_GetGridCoordinatesFromSlotIndex::GridCoords' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridCoordinatesFromSlotIndex, CallFunc_GetGridWidth_Result) == 0x00000C, "Member 'InventoryBag_C_GetGridCoordinatesFromSlotIndex::CallFunc_GetGridWidth_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridCoordinatesFromSlotIndex, CallFunc_GetGridWidth_Result_1) == 0x000010, "Member 'InventoryBag_C_GetGridCoordinatesFromSlotIndex::CallFunc_GetGridWidth_Result_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridCoordinatesFromSlotIndex, CallFunc_Divide_IntInt_ReturnValue) == 0x000014, "Member 'InventoryBag_C_GetGridCoordinatesFromSlotIndex::CallFunc_Divide_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridCoordinatesFromSlotIndex, CallFunc_Percent_IntInt_ReturnValue) == 0x000018, "Member 'InventoryBag_C_GetGridCoordinatesFromSlotIndex::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetGridCoordinatesFromSlotIndex, K2Node_MakeStruct_IntPoint) == 0x00001C, "Member 'InventoryBag_C_GetGridCoordinatesFromSlotIndex::K2Node_MakeStruct_IntPoint' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.GetSlotIndexFromGridCoordinates
// 0x001C (0x001C - 0x0000)
struct InventoryBag_C_GetSlotIndexFromGridCoordinates final
{
public:
	struct FIntPoint                              GridCoords;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SlotIndex;                                         // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidGridCoordinates_Result;            // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetGridWidth_Result;                      // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(InventoryBag_C_GetSlotIndexFromGridCoordinates) == 0x000004, "Wrong alignment on InventoryBag_C_GetSlotIndexFromGridCoordinates");
static_assert(sizeof(InventoryBag_C_GetSlotIndexFromGridCoordinates) == 0x00001C, "Wrong size on InventoryBag_C_GetSlotIndexFromGridCoordinates");
static_assert(offsetof(InventoryBag_C_GetSlotIndexFromGridCoordinates, GridCoords) == 0x000000, "Member 'InventoryBag_C_GetSlotIndexFromGridCoordinates::GridCoords' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetSlotIndexFromGridCoordinates, SlotIndex) == 0x000008, "Member 'InventoryBag_C_GetSlotIndexFromGridCoordinates::SlotIndex' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetSlotIndexFromGridCoordinates, CallFunc_IsValidGridCoordinates_Result) == 0x00000C, "Member 'InventoryBag_C_GetSlotIndexFromGridCoordinates::CallFunc_IsValidGridCoordinates_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetSlotIndexFromGridCoordinates, CallFunc_GetGridWidth_Result) == 0x000010, "Member 'InventoryBag_C_GetSlotIndexFromGridCoordinates::CallFunc_GetGridWidth_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetSlotIndexFromGridCoordinates, CallFunc_Multiply_IntInt_ReturnValue) == 0x000014, "Member 'InventoryBag_C_GetSlotIndexFromGridCoordinates::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetSlotIndexFromGridCoordinates, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'InventoryBag_C_GetSlotIndexFromGridCoordinates::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.IsSlottedItemContainedByItem
// 0x0088 (0x0088 - 0x0000)
struct InventoryBag_C_IsSlottedItemContainedByItem final
{
public:
	class UITEM_Base_C*                           SlottedItem;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ContainmentSlotIndex;                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           ContainmentItem;                                   // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              ContainmentItemGridSize;                           // 0x001C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              ContainmentItemCoords;                             // 0x0024(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              SlottedItemGridSize;                               // 0x002C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              SlottedItemCoords;                                 // 0x0034(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              CallFunc_GetGridCoordinatesFromSlotIndex_GridCoords; // 0x003C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              CallFunc_Add_IntPointIntPoint_ReturnValue;         // 0x0044(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              CallFunc_GetRotatedGridSize_Result;                // 0x004C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              CallFunc_GetRotatedGridSize_Result_1;              // 0x0054(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              CallFunc_Add_IntPointIntPoint_ReturnValue_1;       // 0x005C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsIntPointContainedInBounds_Result;       // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetSlotIndex_Result;                      // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsIntPointContainedInBounds_Result_1;     // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              CallFunc_GetGridCoordinatesFromSlotIndex_GridCoords_1; // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSlotTypeSingle_Result;                  // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A[0x2];                                       // 0x007A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetSlotIndex_Result_1;                    // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(InventoryBag_C_IsSlottedItemContainedByItem) == 0x000008, "Wrong alignment on InventoryBag_C_IsSlottedItemContainedByItem");
static_assert(sizeof(InventoryBag_C_IsSlottedItemContainedByItem) == 0x000088, "Wrong size on InventoryBag_C_IsSlottedItemContainedByItem");
static_assert(offsetof(InventoryBag_C_IsSlottedItemContainedByItem, SlottedItem) == 0x000000, "Member 'InventoryBag_C_IsSlottedItemContainedByItem::SlottedItem' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_IsSlottedItemContainedByItem, ContainmentSlotIndex) == 0x000008, "Member 'InventoryBag_C_IsSlottedItemContainedByItem::ContainmentSlotIndex' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_IsSlottedItemContainedByItem, ContainmentItem) == 0x000010, "Member 'InventoryBag_C_IsSlottedItemContainedByItem::ContainmentItem' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_IsSlottedItemContainedByItem, Result) == 0x000018, "Member 'InventoryBag_C_IsSlottedItemContainedByItem::Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_IsSlottedItemContainedByItem, ContainmentItemGridSize) == 0x00001C, "Member 'InventoryBag_C_IsSlottedItemContainedByItem::ContainmentItemGridSize' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_IsSlottedItemContainedByItem, ContainmentItemCoords) == 0x000024, "Member 'InventoryBag_C_IsSlottedItemContainedByItem::ContainmentItemCoords' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_IsSlottedItemContainedByItem, SlottedItemGridSize) == 0x00002C, "Member 'InventoryBag_C_IsSlottedItemContainedByItem::SlottedItemGridSize' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_IsSlottedItemContainedByItem, SlottedItemCoords) == 0x000034, "Member 'InventoryBag_C_IsSlottedItemContainedByItem::SlottedItemCoords' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_IsSlottedItemContainedByItem, CallFunc_GetGridCoordinatesFromSlotIndex_GridCoords) == 0x00003C, "Member 'InventoryBag_C_IsSlottedItemContainedByItem::CallFunc_GetGridCoordinatesFromSlotIndex_GridCoords' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_IsSlottedItemContainedByItem, CallFunc_Add_IntPointIntPoint_ReturnValue) == 0x000044, "Member 'InventoryBag_C_IsSlottedItemContainedByItem::CallFunc_Add_IntPointIntPoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_IsSlottedItemContainedByItem, CallFunc_GetRotatedGridSize_Result) == 0x00004C, "Member 'InventoryBag_C_IsSlottedItemContainedByItem::CallFunc_GetRotatedGridSize_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_IsSlottedItemContainedByItem, CallFunc_GetRotatedGridSize_Result_1) == 0x000054, "Member 'InventoryBag_C_IsSlottedItemContainedByItem::CallFunc_GetRotatedGridSize_Result_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_IsSlottedItemContainedByItem, CallFunc_Add_IntPointIntPoint_ReturnValue_1) == 0x00005C, "Member 'InventoryBag_C_IsSlottedItemContainedByItem::CallFunc_Add_IntPointIntPoint_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_IsSlottedItemContainedByItem, CallFunc_IsIntPointContainedInBounds_Result) == 0x000064, "Member 'InventoryBag_C_IsSlottedItemContainedByItem::CallFunc_IsIntPointContainedInBounds_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_IsSlottedItemContainedByItem, CallFunc_GetSlotIndex_Result) == 0x000068, "Member 'InventoryBag_C_IsSlottedItemContainedByItem::CallFunc_GetSlotIndex_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_IsSlottedItemContainedByItem, CallFunc_IsIntPointContainedInBounds_Result_1) == 0x00006C, "Member 'InventoryBag_C_IsSlottedItemContainedByItem::CallFunc_IsIntPointContainedInBounds_Result_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_IsSlottedItemContainedByItem, CallFunc_GetGridCoordinatesFromSlotIndex_GridCoords_1) == 0x000070, "Member 'InventoryBag_C_IsSlottedItemContainedByItem::CallFunc_GetGridCoordinatesFromSlotIndex_GridCoords_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_IsSlottedItemContainedByItem, CallFunc_BooleanAND_ReturnValue) == 0x000078, "Member 'InventoryBag_C_IsSlottedItemContainedByItem::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_IsSlottedItemContainedByItem, CallFunc_IsSlotTypeSingle_Result) == 0x000079, "Member 'InventoryBag_C_IsSlottedItemContainedByItem::CallFunc_IsSlotTypeSingle_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_IsSlottedItemContainedByItem, CallFunc_GetSlotIndex_Result_1) == 0x00007C, "Member 'InventoryBag_C_IsSlottedItemContainedByItem::CallFunc_GetSlotIndex_Result_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_IsSlottedItemContainedByItem, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000080, "Member 'InventoryBag_C_IsSlottedItemContainedByItem::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.GetItemsInSlots
// 0x0058 (0x0058 - 0x0000)
struct InventoryBag_C_GetItemsInSlots final
{
public:
	TArray<int32>                                 SlotIndices;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<class UITEM_Base_C*>                   Items;                                             // 0x0010(0x0010)(Parm, OutParm)
	TArray<class UITEM_Base_C*>                   ItemsInSlots;                                      // 0x0020(0x0010)(Edit, BlueprintVisible)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           CallFunc_GetSlotItem_Item;                         // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(InventoryBag_C_GetItemsInSlots) == 0x000008, "Wrong alignment on InventoryBag_C_GetItemsInSlots");
static_assert(sizeof(InventoryBag_C_GetItemsInSlots) == 0x000058, "Wrong size on InventoryBag_C_GetItemsInSlots");
static_assert(offsetof(InventoryBag_C_GetItemsInSlots, SlotIndices) == 0x000000, "Member 'InventoryBag_C_GetItemsInSlots::SlotIndices' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemsInSlots, Items) == 0x000010, "Member 'InventoryBag_C_GetItemsInSlots::Items' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemsInSlots, ItemsInSlots) == 0x000020, "Member 'InventoryBag_C_GetItemsInSlots::ItemsInSlots' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemsInSlots, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'InventoryBag_C_GetItemsInSlots::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemsInSlots, Temp_int_Array_Index_Variable) == 0x000034, "Member 'InventoryBag_C_GetItemsInSlots::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemsInSlots, Temp_int_Loop_Counter_Variable) == 0x000038, "Member 'InventoryBag_C_GetItemsInSlots::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemsInSlots, CallFunc_Array_Get_Item) == 0x00003C, "Member 'InventoryBag_C_GetItemsInSlots::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemsInSlots, CallFunc_GetSlotItem_Item) == 0x000040, "Member 'InventoryBag_C_GetItemsInSlots::CallFunc_GetSlotItem_Item' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemsInSlots, CallFunc_Less_IntInt_ReturnValue) == 0x000048, "Member 'InventoryBag_C_GetItemsInSlots::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemsInSlots, CallFunc_IsValid_ReturnValue) == 0x000049, "Member 'InventoryBag_C_GetItemsInSlots::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemsInSlots, CallFunc_Add_IntInt_ReturnValue) == 0x00004C, "Member 'InventoryBag_C_GetItemsInSlots::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemsInSlots, CallFunc_Array_AddUnique_ReturnValue) == 0x000050, "Member 'InventoryBag_C_GetItemsInSlots::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.CanAddItem
// 0x0040 (0x0040 - 0x0000)
struct InventoryBag_C_CanAddItem final
{
public:
	class UITEM_Base_C*                           Item;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnoreCurrentInventory;                            // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Result;                                            // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCount_Result;                          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AddItemInternal_Result;                   // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UInventoryBag_C*                        CallFunc_GetBag_Result;                            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue_1;             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanSlotItemClass_Result;                  // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(InventoryBag_C_CanAddItem) == 0x000008, "Wrong alignment on InventoryBag_C_CanAddItem");
static_assert(sizeof(InventoryBag_C_CanAddItem) == 0x000040, "Wrong size on InventoryBag_C_CanAddItem");
static_assert(offsetof(InventoryBag_C_CanAddItem, Item) == 0x000000, "Member 'InventoryBag_C_CanAddItem::Item' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanAddItem, IgnoreCurrentInventory) == 0x000008, "Member 'InventoryBag_C_CanAddItem::IgnoreCurrentInventory' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanAddItem, Result) == 0x000009, "Member 'InventoryBag_C_CanAddItem::Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanAddItem, CallFunc_IsValid_ReturnValue) == 0x00000A, "Member 'InventoryBag_C_CanAddItem::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanAddItem, CallFunc_GetCount_Result) == 0x00000C, "Member 'InventoryBag_C_CanAddItem::CallFunc_GetCount_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanAddItem, CallFunc_GetObjectClass_ReturnValue) == 0x000010, "Member 'InventoryBag_C_CanAddItem::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanAddItem, CallFunc_AddItemInternal_Result) == 0x000018, "Member 'InventoryBag_C_CanAddItem::CallFunc_AddItemInternal_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanAddItem, CallFunc_GetBag_Result) == 0x000020, "Member 'InventoryBag_C_CanAddItem::CallFunc_GetBag_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanAddItem, CallFunc_IsValid_ReturnValue_1) == 0x000028, "Member 'InventoryBag_C_CanAddItem::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanAddItem, CallFunc_Not_PreBool_ReturnValue) == 0x000029, "Member 'InventoryBag_C_CanAddItem::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanAddItem, CallFunc_GetObjectClass_ReturnValue_1) == 0x000030, "Member 'InventoryBag_C_CanAddItem::CallFunc_GetObjectClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanAddItem, CallFunc_BooleanOR_ReturnValue) == 0x000038, "Member 'InventoryBag_C_CanAddItem::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanAddItem, CallFunc_CanSlotItemClass_Result) == 0x000039, "Member 'InventoryBag_C_CanAddItem::CallFunc_CanSlotItemClass_Result' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.CanAddItemToSlot
// 0x0048 (0x0048 - 0x0000)
struct InventoryBag_C_CanAddItemToSlot final
{
public:
	class UITEM_Base_C*                           Item;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SlotIndex;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnoreCurrentInventory;                            // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Result;                                            // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UInventoryBag_C*                        CallFunc_GetBag_Result;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanSlotItemClass_Result;                  // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCount_Result;                          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsItemRotated_Result;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue_1;             // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AddItemToSlotInternal_Result;             // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(InventoryBag_C_CanAddItemToSlot) == 0x000008, "Wrong alignment on InventoryBag_C_CanAddItemToSlot");
static_assert(sizeof(InventoryBag_C_CanAddItemToSlot) == 0x000048, "Wrong size on InventoryBag_C_CanAddItemToSlot");
static_assert(offsetof(InventoryBag_C_CanAddItemToSlot, Item) == 0x000000, "Member 'InventoryBag_C_CanAddItemToSlot::Item' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanAddItemToSlot, SlotIndex) == 0x000008, "Member 'InventoryBag_C_CanAddItemToSlot::SlotIndex' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanAddItemToSlot, IgnoreCurrentInventory) == 0x00000C, "Member 'InventoryBag_C_CanAddItemToSlot::IgnoreCurrentInventory' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanAddItemToSlot, Result) == 0x00000D, "Member 'InventoryBag_C_CanAddItemToSlot::Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanAddItemToSlot, CallFunc_IsValid_ReturnValue) == 0x00000E, "Member 'InventoryBag_C_CanAddItemToSlot::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanAddItemToSlot, CallFunc_GetBag_Result) == 0x000010, "Member 'InventoryBag_C_CanAddItemToSlot::CallFunc_GetBag_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanAddItemToSlot, CallFunc_IsValid_ReturnValue_1) == 0x000018, "Member 'InventoryBag_C_CanAddItemToSlot::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanAddItemToSlot, CallFunc_Not_PreBool_ReturnValue) == 0x000019, "Member 'InventoryBag_C_CanAddItemToSlot::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanAddItemToSlot, CallFunc_GetObjectClass_ReturnValue) == 0x000020, "Member 'InventoryBag_C_CanAddItemToSlot::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanAddItemToSlot, CallFunc_BooleanOR_ReturnValue) == 0x000028, "Member 'InventoryBag_C_CanAddItemToSlot::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanAddItemToSlot, CallFunc_CanSlotItemClass_Result) == 0x000029, "Member 'InventoryBag_C_CanAddItemToSlot::CallFunc_CanSlotItemClass_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanAddItemToSlot, CallFunc_GetCount_Result) == 0x00002C, "Member 'InventoryBag_C_CanAddItemToSlot::CallFunc_GetCount_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanAddItemToSlot, CallFunc_IsItemRotated_Result) == 0x000030, "Member 'InventoryBag_C_CanAddItemToSlot::CallFunc_IsItemRotated_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanAddItemToSlot, CallFunc_GetObjectClass_ReturnValue_1) == 0x000038, "Member 'InventoryBag_C_CanAddItemToSlot::CallFunc_GetObjectClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanAddItemToSlot, CallFunc_AddItemToSlotInternal_Result) == 0x000040, "Member 'InventoryBag_C_CanAddItemToSlot::CallFunc_AddItemToSlotInternal_Result' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.FindItem
// 0x0068 (0x0068 - 0x0000)
struct InventoryBag_C_FindItem final
{
public:
	class UClass*                                 ItemClass;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RequireUnslottable;                                // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          AnyDerivedClass;                                   // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           FoundItem;                                         // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           ItemInSlot;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ClassIsChildOf_ReturnValue;               // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanUnslot_Result;                         // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_43[0x5];                                       // 0x0043(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue_1;             // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           CallFunc_Array_Get_Item;                           // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ClassClass_ReturnValue;        // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(InventoryBag_C_FindItem) == 0x000008, "Wrong alignment on InventoryBag_C_FindItem");
static_assert(sizeof(InventoryBag_C_FindItem) == 0x000068, "Wrong size on InventoryBag_C_FindItem");
static_assert(offsetof(InventoryBag_C_FindItem, ItemClass) == 0x000000, "Member 'InventoryBag_C_FindItem::ItemClass' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindItem, RequireUnslottable) == 0x000008, "Member 'InventoryBag_C_FindItem::RequireUnslottable' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindItem, AnyDerivedClass) == 0x000009, "Member 'InventoryBag_C_FindItem::AnyDerivedClass' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindItem, FoundItem) == 0x000010, "Member 'InventoryBag_C_FindItem::FoundItem' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindItem, ItemInSlot) == 0x000018, "Member 'InventoryBag_C_FindItem::ItemInSlot' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindItem, Temp_int_Array_Index_Variable) == 0x000020, "Member 'InventoryBag_C_FindItem::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindItem, CallFunc_IsValid_ReturnValue) == 0x000024, "Member 'InventoryBag_C_FindItem::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindItem, Temp_int_Loop_Counter_Variable) == 0x000028, "Member 'InventoryBag_C_FindItem::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindItem, CallFunc_GetObjectClass_ReturnValue) == 0x000030, "Member 'InventoryBag_C_FindItem::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindItem, CallFunc_ClassIsChildOf_ReturnValue) == 0x000038, "Member 'InventoryBag_C_FindItem::CallFunc_ClassIsChildOf_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindItem, CallFunc_Add_IntInt_ReturnValue) == 0x00003C, "Member 'InventoryBag_C_FindItem::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindItem, CallFunc_CanUnslot_Result) == 0x000040, "Member 'InventoryBag_C_FindItem::CallFunc_CanUnslot_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindItem, CallFunc_Not_PreBool_ReturnValue) == 0x000041, "Member 'InventoryBag_C_FindItem::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindItem, CallFunc_BooleanOR_ReturnValue) == 0x000042, "Member 'InventoryBag_C_FindItem::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindItem, CallFunc_GetObjectClass_ReturnValue_1) == 0x000048, "Member 'InventoryBag_C_FindItem::CallFunc_GetObjectClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindItem, CallFunc_Array_Get_Item) == 0x000050, "Member 'InventoryBag_C_FindItem::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindItem, CallFunc_EqualEqual_ClassClass_ReturnValue) == 0x000058, "Member 'InventoryBag_C_FindItem::CallFunc_EqualEqual_ClassClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindItem, CallFunc_Array_Length_ReturnValue) == 0x00005C, "Member 'InventoryBag_C_FindItem::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindItem, CallFunc_Less_IntInt_ReturnValue) == 0x000060, "Member 'InventoryBag_C_FindItem::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.FindItemBySoftClass
// 0x0098 (0x0098 - 0x0000)
struct InventoryBag_C_FindItemBySoftClass final
{
public:
	TSoftClassPtr<class UClass>                   ItemClass;                                         // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          RequireUnslottable;                                // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           FoundItem;                                         // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           ItemInSlot;                                        // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanUnslot_Result;                         // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x004E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x004F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           CallFunc_Array_Get_Item;                           // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   CallFunc_Conv_ClassToSoftClassReference_ReturnValue; // 0x0060(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_SoftClassReference_ReturnValue; // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(InventoryBag_C_FindItemBySoftClass) == 0x000008, "Wrong alignment on InventoryBag_C_FindItemBySoftClass");
static_assert(sizeof(InventoryBag_C_FindItemBySoftClass) == 0x000098, "Wrong size on InventoryBag_C_FindItemBySoftClass");
static_assert(offsetof(InventoryBag_C_FindItemBySoftClass, ItemClass) == 0x000000, "Member 'InventoryBag_C_FindItemBySoftClass::ItemClass' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindItemBySoftClass, RequireUnslottable) == 0x000028, "Member 'InventoryBag_C_FindItemBySoftClass::RequireUnslottable' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindItemBySoftClass, FoundItem) == 0x000030, "Member 'InventoryBag_C_FindItemBySoftClass::FoundItem' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindItemBySoftClass, ItemInSlot) == 0x000038, "Member 'InventoryBag_C_FindItemBySoftClass::ItemInSlot' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindItemBySoftClass, Temp_int_Loop_Counter_Variable) == 0x000040, "Member 'InventoryBag_C_FindItemBySoftClass::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindItemBySoftClass, CallFunc_Add_IntInt_ReturnValue) == 0x000044, "Member 'InventoryBag_C_FindItemBySoftClass::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindItemBySoftClass, Temp_int_Array_Index_Variable) == 0x000048, "Member 'InventoryBag_C_FindItemBySoftClass::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindItemBySoftClass, CallFunc_IsValid_ReturnValue) == 0x00004C, "Member 'InventoryBag_C_FindItemBySoftClass::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindItemBySoftClass, CallFunc_CanUnslot_Result) == 0x00004D, "Member 'InventoryBag_C_FindItemBySoftClass::CallFunc_CanUnslot_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindItemBySoftClass, CallFunc_Not_PreBool_ReturnValue) == 0x00004E, "Member 'InventoryBag_C_FindItemBySoftClass::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindItemBySoftClass, CallFunc_BooleanOR_ReturnValue) == 0x00004F, "Member 'InventoryBag_C_FindItemBySoftClass::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindItemBySoftClass, CallFunc_GetObjectClass_ReturnValue) == 0x000050, "Member 'InventoryBag_C_FindItemBySoftClass::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindItemBySoftClass, CallFunc_Array_Get_Item) == 0x000058, "Member 'InventoryBag_C_FindItemBySoftClass::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindItemBySoftClass, CallFunc_Conv_ClassToSoftClassReference_ReturnValue) == 0x000060, "Member 'InventoryBag_C_FindItemBySoftClass::CallFunc_Conv_ClassToSoftClassReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindItemBySoftClass, CallFunc_EqualEqual_SoftClassReference_ReturnValue) == 0x000088, "Member 'InventoryBag_C_FindItemBySoftClass::CallFunc_EqualEqual_SoftClassReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindItemBySoftClass, CallFunc_Array_Length_ReturnValue) == 0x00008C, "Member 'InventoryBag_C_FindItemBySoftClass::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindItemBySoftClass, CallFunc_Less_IntInt_ReturnValue) == 0x000090, "Member 'InventoryBag_C_FindItemBySoftClass::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.FindAndApplyUpgrade
// 0x0050 (0x0050 - 0x0000)
struct InventoryBag_C_FindAndApplyUpgrade final
{
public:
	class UITEM_UpgradeBase_C*                    UpgradeItem;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 UpgradeClass;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_UpgradeResult                            Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_UpgradeResult                            UpgradeResult;                                     // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_UpgradeBase_C*                    ItemInSlot;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ENUM_UpgradeResult                            CallFunc_ApplyUpgrade_UpgradeResult;               // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_UpgradeBase_C*                    K2Node_DynamicCast_AsITEM_Upgrade_Base;            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(InventoryBag_C_FindAndApplyUpgrade) == 0x000008, "Wrong alignment on InventoryBag_C_FindAndApplyUpgrade");
static_assert(sizeof(InventoryBag_C_FindAndApplyUpgrade) == 0x000050, "Wrong size on InventoryBag_C_FindAndApplyUpgrade");
static_assert(offsetof(InventoryBag_C_FindAndApplyUpgrade, UpgradeItem) == 0x000000, "Member 'InventoryBag_C_FindAndApplyUpgrade::UpgradeItem' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindAndApplyUpgrade, UpgradeClass) == 0x000008, "Member 'InventoryBag_C_FindAndApplyUpgrade::UpgradeClass' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindAndApplyUpgrade, Result) == 0x000010, "Member 'InventoryBag_C_FindAndApplyUpgrade::Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindAndApplyUpgrade, UpgradeResult) == 0x000011, "Member 'InventoryBag_C_FindAndApplyUpgrade::UpgradeResult' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindAndApplyUpgrade, ItemInSlot) == 0x000018, "Member 'InventoryBag_C_FindAndApplyUpgrade::ItemInSlot' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindAndApplyUpgrade, Temp_int_Array_Index_Variable) == 0x000020, "Member 'InventoryBag_C_FindAndApplyUpgrade::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindAndApplyUpgrade, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'InventoryBag_C_FindAndApplyUpgrade::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindAndApplyUpgrade, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'InventoryBag_C_FindAndApplyUpgrade::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindAndApplyUpgrade, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x00002C, "Member 'InventoryBag_C_FindAndApplyUpgrade::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindAndApplyUpgrade, CallFunc_ApplyUpgrade_UpgradeResult) == 0x00002D, "Member 'InventoryBag_C_FindAndApplyUpgrade::CallFunc_ApplyUpgrade_UpgradeResult' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindAndApplyUpgrade, CallFunc_Array_Get_Item) == 0x000030, "Member 'InventoryBag_C_FindAndApplyUpgrade::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindAndApplyUpgrade, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'InventoryBag_C_FindAndApplyUpgrade::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindAndApplyUpgrade, K2Node_DynamicCast_AsITEM_Upgrade_Base) == 0x000040, "Member 'InventoryBag_C_FindAndApplyUpgrade::K2Node_DynamicCast_AsITEM_Upgrade_Base' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindAndApplyUpgrade, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'InventoryBag_C_FindAndApplyUpgrade::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindAndApplyUpgrade, CallFunc_Less_IntInt_ReturnValue) == 0x000049, "Member 'InventoryBag_C_FindAndApplyUpgrade::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.FindItemToUpgrade
// 0x0058 (0x0058 - 0x0000)
struct InventoryBag_C_FindItemToUpgrade final
{
public:
	class UClass*                                 UpgradeClass;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_UpgradeBase_C*                    Item;                                              // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_UpgradeResult                            Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_UpgradeResult                            CurrentUpgradeType;                                // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_UpgradeBase_C*                    ItemInSlot;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidClass_ReturnValue;                 // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ENUM_UpgradeResult                            CallFunc_GetUpgradeType_Result;                    // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_UpgradeBase_C*                    K2Node_DynamicCast_AsITEM_Upgrade_Base;            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(InventoryBag_C_FindItemToUpgrade) == 0x000008, "Wrong alignment on InventoryBag_C_FindItemToUpgrade");
static_assert(sizeof(InventoryBag_C_FindItemToUpgrade) == 0x000058, "Wrong size on InventoryBag_C_FindItemToUpgrade");
static_assert(offsetof(InventoryBag_C_FindItemToUpgrade, UpgradeClass) == 0x000000, "Member 'InventoryBag_C_FindItemToUpgrade::UpgradeClass' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindItemToUpgrade, Item) == 0x000008, "Member 'InventoryBag_C_FindItemToUpgrade::Item' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindItemToUpgrade, Result) == 0x000010, "Member 'InventoryBag_C_FindItemToUpgrade::Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindItemToUpgrade, CurrentUpgradeType) == 0x000011, "Member 'InventoryBag_C_FindItemToUpgrade::CurrentUpgradeType' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindItemToUpgrade, ItemInSlot) == 0x000018, "Member 'InventoryBag_C_FindItemToUpgrade::ItemInSlot' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindItemToUpgrade, CallFunc_IsValidClass_ReturnValue) == 0x000020, "Member 'InventoryBag_C_FindItemToUpgrade::CallFunc_IsValidClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindItemToUpgrade, Temp_int_Array_Index_Variable) == 0x000024, "Member 'InventoryBag_C_FindItemToUpgrade::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindItemToUpgrade, Temp_int_Loop_Counter_Variable) == 0x000028, "Member 'InventoryBag_C_FindItemToUpgrade::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindItemToUpgrade, CallFunc_Add_IntInt_ReturnValue) == 0x00002C, "Member 'InventoryBag_C_FindItemToUpgrade::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindItemToUpgrade, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000030, "Member 'InventoryBag_C_FindItemToUpgrade::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindItemToUpgrade, CallFunc_GetUpgradeType_Result) == 0x000031, "Member 'InventoryBag_C_FindItemToUpgrade::CallFunc_GetUpgradeType_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindItemToUpgrade, CallFunc_Array_Get_Item) == 0x000038, "Member 'InventoryBag_C_FindItemToUpgrade::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindItemToUpgrade, K2Node_DynamicCast_AsITEM_Upgrade_Base) == 0x000040, "Member 'InventoryBag_C_FindItemToUpgrade::K2Node_DynamicCast_AsITEM_Upgrade_Base' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindItemToUpgrade, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'InventoryBag_C_FindItemToUpgrade::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindItemToUpgrade, CallFunc_Array_Length_ReturnValue) == 0x00004C, "Member 'InventoryBag_C_FindItemToUpgrade::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_FindItemToUpgrade, CallFunc_Less_IntInt_ReturnValue) == 0x000050, "Member 'InventoryBag_C_FindItemToUpgrade::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.GetItemsByClass
// 0x0070 (0x0070 - 0x0000)
struct InventoryBag_C_GetItemsByClass final
{
public:
	class UClass*                                 ItemClass;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UITEM_Base_C*>                   Result;                                            // 0x0008(0x0010)(Parm, OutParm)
	TArray<class UITEM_Base_C*>                   MatchingItems;                                     // 0x0018(0x0010)(Edit, BlueprintVisible)
	class UITEM_Base_C*                           CurrentItem;                                       // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ClassClass_ReturnValue;        // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UITEM_Base_C*>                   CallFunc_Set_ToArray_Result;                       // 0x0050(0x0010)(ReferenceParm)
	class UITEM_Base_C*                           CallFunc_Array_Get_Item;                           // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(InventoryBag_C_GetItemsByClass) == 0x000008, "Wrong alignment on InventoryBag_C_GetItemsByClass");
static_assert(sizeof(InventoryBag_C_GetItemsByClass) == 0x000070, "Wrong size on InventoryBag_C_GetItemsByClass");
static_assert(offsetof(InventoryBag_C_GetItemsByClass, ItemClass) == 0x000000, "Member 'InventoryBag_C_GetItemsByClass::ItemClass' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemsByClass, Result) == 0x000008, "Member 'InventoryBag_C_GetItemsByClass::Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemsByClass, MatchingItems) == 0x000018, "Member 'InventoryBag_C_GetItemsByClass::MatchingItems' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemsByClass, CurrentItem) == 0x000028, "Member 'InventoryBag_C_GetItemsByClass::CurrentItem' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemsByClass, Temp_int_Array_Index_Variable) == 0x000030, "Member 'InventoryBag_C_GetItemsByClass::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemsByClass, Temp_int_Loop_Counter_Variable) == 0x000034, "Member 'InventoryBag_C_GetItemsByClass::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemsByClass, CallFunc_Add_IntInt_ReturnValue) == 0x000038, "Member 'InventoryBag_C_GetItemsByClass::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemsByClass, CallFunc_GetObjectClass_ReturnValue) == 0x000040, "Member 'InventoryBag_C_GetItemsByClass::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemsByClass, CallFunc_Array_Add_ReturnValue) == 0x000048, "Member 'InventoryBag_C_GetItemsByClass::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemsByClass, CallFunc_EqualEqual_ClassClass_ReturnValue) == 0x00004C, "Member 'InventoryBag_C_GetItemsByClass::CallFunc_EqualEqual_ClassClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemsByClass, CallFunc_Set_ToArray_Result) == 0x000050, "Member 'InventoryBag_C_GetItemsByClass::CallFunc_Set_ToArray_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemsByClass, CallFunc_Array_Get_Item) == 0x000060, "Member 'InventoryBag_C_GetItemsByClass::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemsByClass, CallFunc_Array_Length_ReturnValue) == 0x000068, "Member 'InventoryBag_C_GetItemsByClass::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemsByClass, CallFunc_Less_IntInt_ReturnValue) == 0x00006C, "Member 'InventoryBag_C_GetItemsByClass::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.CanSlotItemClass
// 0x0010 (0x0010 - 0x0000)
struct InventoryBag_C_CanSlotItemClass final
{
public:
	class UClass*                                 ItemClass;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValidClass_ReturnValue;                 // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanSlotItemType_Result;                   // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(InventoryBag_C_CanSlotItemClass) == 0x000008, "Wrong alignment on InventoryBag_C_CanSlotItemClass");
static_assert(sizeof(InventoryBag_C_CanSlotItemClass) == 0x000010, "Wrong size on InventoryBag_C_CanSlotItemClass");
static_assert(offsetof(InventoryBag_C_CanSlotItemClass, ItemClass) == 0x000000, "Member 'InventoryBag_C_CanSlotItemClass::ItemClass' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanSlotItemClass, Result) == 0x000008, "Member 'InventoryBag_C_CanSlotItemClass::Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanSlotItemClass, CallFunc_IsValidClass_ReturnValue) == 0x000009, "Member 'InventoryBag_C_CanSlotItemClass::CallFunc_IsValidClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanSlotItemClass, CallFunc_CanSlotItemType_Result) == 0x00000A, "Member 'InventoryBag_C_CanSlotItemClass::CallFunc_CanSlotItemType_Result' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.GrantItem
// 0x0028 (0x0028 - 0x0000)
struct InventoryBag_C_GrantItem final
{
public:
	struct FSTRUCT_HardItemParams                 ItemParams;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AddItemInternal_Result;                   // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_ClassDynamicCast_AsITEM_Upgrade_Base;       // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ENUM_UpgradeResult                            CallFunc_FindAndApplyUpgrade_Result;               // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanSlotItemClass_Result;                  // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValidClass_ReturnValue;                 // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(InventoryBag_C_GrantItem) == 0x000008, "Wrong alignment on InventoryBag_C_GrantItem");
static_assert(sizeof(InventoryBag_C_GrantItem) == 0x000028, "Wrong size on InventoryBag_C_GrantItem");
static_assert(offsetof(InventoryBag_C_GrantItem, ItemParams) == 0x000000, "Member 'InventoryBag_C_GrantItem::ItemParams' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GrantItem, Result) == 0x000010, "Member 'InventoryBag_C_GrantItem::Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GrantItem, CallFunc_AddItemInternal_Result) == 0x000011, "Member 'InventoryBag_C_GrantItem::CallFunc_AddItemInternal_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GrantItem, K2Node_ClassDynamicCast_AsITEM_Upgrade_Base) == 0x000018, "Member 'InventoryBag_C_GrantItem::K2Node_ClassDynamicCast_AsITEM_Upgrade_Base' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GrantItem, K2Node_ClassDynamicCast_bSuccess) == 0x000020, "Member 'InventoryBag_C_GrantItem::K2Node_ClassDynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GrantItem, CallFunc_FindAndApplyUpgrade_Result) == 0x000021, "Member 'InventoryBag_C_GrantItem::CallFunc_FindAndApplyUpgrade_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GrantItem, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000022, "Member 'InventoryBag_C_GrantItem::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GrantItem, CallFunc_CanSlotItemClass_Result) == 0x000023, "Member 'InventoryBag_C_GrantItem::CallFunc_CanSlotItemClass_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GrantItem, CallFunc_IsValidClass_ReturnValue) == 0x000024, "Member 'InventoryBag_C_GrantItem::CallFunc_IsValidClass_ReturnValue' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.GrantItemsFromPackage
// 0x0090 (0x0090 - 0x0000)
struct InventoryBag_C_GrantItemsFromPackage final
{
public:
	class UClass*                                 PackageClass;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_HardItemParams                 CurrentItemParams;                                 // 0x0010(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FSTRUCT_SoftItemParams>         Temp_struct_Variable;                              // 0x0020(0x0010)(ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GrantItem_Result;                         // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_SoftItemParams                 CallFunc_Array_Get_Item;                           // 0x0040(0x0030)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_HardItemParams                 CallFunc_CreateHardItemParams_Result;              // 0x0078(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(InventoryBag_C_GrantItemsFromPackage) == 0x000008, "Wrong alignment on InventoryBag_C_GrantItemsFromPackage");
static_assert(sizeof(InventoryBag_C_GrantItemsFromPackage) == 0x000090, "Wrong size on InventoryBag_C_GrantItemsFromPackage");
static_assert(offsetof(InventoryBag_C_GrantItemsFromPackage, PackageClass) == 0x000000, "Member 'InventoryBag_C_GrantItemsFromPackage::PackageClass' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GrantItemsFromPackage, Result) == 0x000008, "Member 'InventoryBag_C_GrantItemsFromPackage::Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GrantItemsFromPackage, CurrentItemParams) == 0x000010, "Member 'InventoryBag_C_GrantItemsFromPackage::CurrentItemParams' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GrantItemsFromPackage, Temp_struct_Variable) == 0x000020, "Member 'InventoryBag_C_GrantItemsFromPackage::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GrantItemsFromPackage, Temp_int_Array_Index_Variable) == 0x000030, "Member 'InventoryBag_C_GrantItemsFromPackage::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GrantItemsFromPackage, Temp_int_Loop_Counter_Variable) == 0x000034, "Member 'InventoryBag_C_GrantItemsFromPackage::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GrantItemsFromPackage, CallFunc_Add_IntInt_ReturnValue) == 0x000038, "Member 'InventoryBag_C_GrantItemsFromPackage::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GrantItemsFromPackage, CallFunc_GrantItem_Result) == 0x00003C, "Member 'InventoryBag_C_GrantItemsFromPackage::CallFunc_GrantItem_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GrantItemsFromPackage, CallFunc_Not_PreBool_ReturnValue) == 0x00003D, "Member 'InventoryBag_C_GrantItemsFromPackage::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GrantItemsFromPackage, CallFunc_Array_Get_Item) == 0x000040, "Member 'InventoryBag_C_GrantItemsFromPackage::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GrantItemsFromPackage, CallFunc_Array_Length_ReturnValue) == 0x000070, "Member 'InventoryBag_C_GrantItemsFromPackage::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GrantItemsFromPackage, CallFunc_CreateHardItemParams_Result) == 0x000078, "Member 'InventoryBag_C_GrantItemsFromPackage::CallFunc_CreateHardItemParams_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GrantItemsFromPackage, CallFunc_Less_IntInt_ReturnValue) == 0x000088, "Member 'InventoryBag_C_GrantItemsFromPackage::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.MoveItemCount
// 0x01A8 (0x01A8 - 0x0000)
struct InventoryBag_C_MoveItemCount final
{
public:
	class UITEM_Base_C*                           Item;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Count;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SlotIndex;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInventoryBag_C*                        MultiSwapBag;                                      // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MultiSwapSlotIndex;                                // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MultiSwapRotated;                                  // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Result;                                            // 0x001D(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NewSlotIndex;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           NewDestItem;                                       // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewDestRotated;                                    // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              DeltaItemCoords;                                   // 0x0034(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              DestItemCoords;                                    // 0x003C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              SourceItemCoords;                                  // 0x0044(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           SwapDestItem;                                      // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           DestItem;                                          // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UITEM_Base_C*>                   DestItems;                                         // 0x0060(0x0010)(Edit, BlueprintVisible)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              CallFunc_GetGridCoordinatesFromSlotIndex_GridCoords; // 0x0074(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCount_Result;                          // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              CallFunc_Add_IntPointIntPoint_ReturnValue;         // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSlotIndexFromGridCoordinates_SlotIndex; // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           CallFunc_CreateItemInSlot_ItemCreated;             // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsItemRotated_Result;                     // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsItemRotated_Result_1;                   // 0x00A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsItemRotated_Result_2;                   // 0x00A3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FIntPoint                              K2Node_MakeStruct_IntPoint;                        // 0x00A4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_BoolBool_ReturnValue;          // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              CallFunc_GetGridCoordinatesFromSlotIndex_GridCoords_1; // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSlotIndex_Result;                      // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              CallFunc_GetGridCoordinatesFromSlotIndex_GridCoords_2; // 0x00BC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UInventoryBag_C*                        CallFunc_GetBag_Result;                            // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           CallFunc_RemoveItem_RemovedItem;                   // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DA[0x2];                                       // 0x00DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              CallFunc_Subtract_IntPointIntPoint_ReturnValue;    // 0x00DC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x00EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsItemRotated_Result_3;                   // 0x00ED(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_EE[0x2];                                       // 0x00EE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x00F5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F6[0x2];                                       // 0x00F6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           CallFunc_Array_Get_Item;                           // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_109[0x3];                                      // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              CallFunc_GetRotatedGridSize_Result;                // 0x010C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_GetSlotIndicesForItemWithSize_SlotIndices; // 0x0118(0x0010)(ReferenceParm)
	TArray<class UITEM_Base_C*>                   CallFunc_GetItemsInSlots_Items;                    // 0x0128(0x0010)(ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CallFunc_Array_Get_Item_1;                         // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInventoryBag_C*                        CallFunc_GetBag_Result_1;                          // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           CallFunc_RemoveItemCount_RemovedItem;              // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue_1;             // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           CallFunc_CreateItemInSlot_ItemCreated_1;           // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSlottedItemContainedByItem_Result;      // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_169[0x3];                                      // 0x0169(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCount_Result_1;                        // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0171(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_172[0x6];                                      // 0x0172(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue_2;             // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue_3;             // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ClassClass_ReturnValue;        // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0189(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_18A[0x2];                                      // 0x018A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetSlotIndex_Result_1;                    // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_1;            // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_191[0x7];                                      // 0x0191(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UInventoryBag_C*                        CallFunc_GetBag_Result_2;                          // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x01A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanMoveItemCount_Result;                  // 0x01A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(InventoryBag_C_MoveItemCount) == 0x000008, "Wrong alignment on InventoryBag_C_MoveItemCount");
static_assert(sizeof(InventoryBag_C_MoveItemCount) == 0x0001A8, "Wrong size on InventoryBag_C_MoveItemCount");
static_assert(offsetof(InventoryBag_C_MoveItemCount, Item) == 0x000000, "Member 'InventoryBag_C_MoveItemCount::Item' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, Count) == 0x000008, "Member 'InventoryBag_C_MoveItemCount::Count' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, SlotIndex) == 0x00000C, "Member 'InventoryBag_C_MoveItemCount::SlotIndex' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, MultiSwapBag) == 0x000010, "Member 'InventoryBag_C_MoveItemCount::MultiSwapBag' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, MultiSwapSlotIndex) == 0x000018, "Member 'InventoryBag_C_MoveItemCount::MultiSwapSlotIndex' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, MultiSwapRotated) == 0x00001C, "Member 'InventoryBag_C_MoveItemCount::MultiSwapRotated' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, Result) == 0x00001D, "Member 'InventoryBag_C_MoveItemCount::Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, NewSlotIndex) == 0x000020, "Member 'InventoryBag_C_MoveItemCount::NewSlotIndex' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, NewDestItem) == 0x000028, "Member 'InventoryBag_C_MoveItemCount::NewDestItem' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, NewDestRotated) == 0x000030, "Member 'InventoryBag_C_MoveItemCount::NewDestRotated' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, DeltaItemCoords) == 0x000034, "Member 'InventoryBag_C_MoveItemCount::DeltaItemCoords' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, DestItemCoords) == 0x00003C, "Member 'InventoryBag_C_MoveItemCount::DestItemCoords' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, SourceItemCoords) == 0x000044, "Member 'InventoryBag_C_MoveItemCount::SourceItemCoords' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, SwapDestItem) == 0x000050, "Member 'InventoryBag_C_MoveItemCount::SwapDestItem' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, DestItem) == 0x000058, "Member 'InventoryBag_C_MoveItemCount::DestItem' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, DestItems) == 0x000060, "Member 'InventoryBag_C_MoveItemCount::DestItems' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, CallFunc_IsValid_ReturnValue) == 0x000070, "Member 'InventoryBag_C_MoveItemCount::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, CallFunc_GetGridCoordinatesFromSlotIndex_GridCoords) == 0x000074, "Member 'InventoryBag_C_MoveItemCount::CallFunc_GetGridCoordinatesFromSlotIndex_GridCoords' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, CallFunc_GetCount_Result) == 0x00007C, "Member 'InventoryBag_C_MoveItemCount::CallFunc_GetCount_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, CallFunc_Add_IntPointIntPoint_ReturnValue) == 0x000080, "Member 'InventoryBag_C_MoveItemCount::CallFunc_Add_IntPointIntPoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, CallFunc_GetSlotIndexFromGridCoordinates_SlotIndex) == 0x000088, "Member 'InventoryBag_C_MoveItemCount::CallFunc_GetSlotIndexFromGridCoordinates_SlotIndex' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, CallFunc_GetObjectClass_ReturnValue) == 0x000090, "Member 'InventoryBag_C_MoveItemCount::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, CallFunc_CreateItemInSlot_ItemCreated) == 0x000098, "Member 'InventoryBag_C_MoveItemCount::CallFunc_CreateItemInSlot_ItemCreated' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, CallFunc_IsItemRotated_Result) == 0x0000A0, "Member 'InventoryBag_C_MoveItemCount::CallFunc_IsItemRotated_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, CallFunc_Not_PreBool_ReturnValue) == 0x0000A1, "Member 'InventoryBag_C_MoveItemCount::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, CallFunc_IsItemRotated_Result_1) == 0x0000A2, "Member 'InventoryBag_C_MoveItemCount::CallFunc_IsItemRotated_Result_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, CallFunc_IsItemRotated_Result_2) == 0x0000A3, "Member 'InventoryBag_C_MoveItemCount::CallFunc_IsItemRotated_Result_2' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, K2Node_MakeStruct_IntPoint) == 0x0000A4, "Member 'InventoryBag_C_MoveItemCount::K2Node_MakeStruct_IntPoint' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, CallFunc_EqualEqual_BoolBool_ReturnValue) == 0x0000AC, "Member 'InventoryBag_C_MoveItemCount::CallFunc_EqualEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, CallFunc_GetGridCoordinatesFromSlotIndex_GridCoords_1) == 0x0000B0, "Member 'InventoryBag_C_MoveItemCount::CallFunc_GetGridCoordinatesFromSlotIndex_GridCoords_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, CallFunc_GetSlotIndex_Result) == 0x0000B8, "Member 'InventoryBag_C_MoveItemCount::CallFunc_GetSlotIndex_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, CallFunc_GetGridCoordinatesFromSlotIndex_GridCoords_2) == 0x0000BC, "Member 'InventoryBag_C_MoveItemCount::CallFunc_GetGridCoordinatesFromSlotIndex_GridCoords_2' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, CallFunc_GetBag_Result) == 0x0000C8, "Member 'InventoryBag_C_MoveItemCount::CallFunc_GetBag_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, CallFunc_RemoveItem_RemovedItem) == 0x0000D0, "Member 'InventoryBag_C_MoveItemCount::CallFunc_RemoveItem_RemovedItem' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, CallFunc_IsValid_ReturnValue_1) == 0x0000D8, "Member 'InventoryBag_C_MoveItemCount::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, CallFunc_Not_PreBool_ReturnValue_1) == 0x0000D9, "Member 'InventoryBag_C_MoveItemCount::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, CallFunc_Subtract_IntPointIntPoint_ReturnValue) == 0x0000DC, "Member 'InventoryBag_C_MoveItemCount::CallFunc_Subtract_IntPointIntPoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, CallFunc_Array_Length_ReturnValue) == 0x0000E4, "Member 'InventoryBag_C_MoveItemCount::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, CallFunc_Array_Length_ReturnValue_1) == 0x0000E8, "Member 'InventoryBag_C_MoveItemCount::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, CallFunc_Greater_IntInt_ReturnValue) == 0x0000EC, "Member 'InventoryBag_C_MoveItemCount::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, CallFunc_IsItemRotated_Result_3) == 0x0000ED, "Member 'InventoryBag_C_MoveItemCount::CallFunc_IsItemRotated_Result_3' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, Temp_int_Loop_Counter_Variable) == 0x0000F0, "Member 'InventoryBag_C_MoveItemCount::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, CallFunc_Less_IntInt_ReturnValue) == 0x0000F4, "Member 'InventoryBag_C_MoveItemCount::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, CallFunc_NotEqual_IntInt_ReturnValue) == 0x0000F5, "Member 'InventoryBag_C_MoveItemCount::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, CallFunc_Add_IntInt_ReturnValue) == 0x0000F8, "Member 'InventoryBag_C_MoveItemCount::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, CallFunc_Array_Length_ReturnValue_2) == 0x0000FC, "Member 'InventoryBag_C_MoveItemCount::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, CallFunc_Array_Get_Item) == 0x000100, "Member 'InventoryBag_C_MoveItemCount::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000108, "Member 'InventoryBag_C_MoveItemCount::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, CallFunc_GetRotatedGridSize_Result) == 0x00010C, "Member 'InventoryBag_C_MoveItemCount::CallFunc_GetRotatedGridSize_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, CallFunc_GetSlotIndicesForItemWithSize_SlotIndices) == 0x000118, "Member 'InventoryBag_C_MoveItemCount::CallFunc_GetSlotIndicesForItemWithSize_SlotIndices' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, CallFunc_GetItemsInSlots_Items) == 0x000128, "Member 'InventoryBag_C_MoveItemCount::CallFunc_GetItemsInSlots_Items' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, Temp_int_Array_Index_Variable) == 0x000138, "Member 'InventoryBag_C_MoveItemCount::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, CallFunc_Array_Get_Item_1) == 0x000140, "Member 'InventoryBag_C_MoveItemCount::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, CallFunc_GetBag_Result_1) == 0x000148, "Member 'InventoryBag_C_MoveItemCount::CallFunc_GetBag_Result_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, CallFunc_RemoveItemCount_RemovedItem) == 0x000150, "Member 'InventoryBag_C_MoveItemCount::CallFunc_RemoveItemCount_RemovedItem' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, CallFunc_GetObjectClass_ReturnValue_1) == 0x000158, "Member 'InventoryBag_C_MoveItemCount::CallFunc_GetObjectClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, CallFunc_CreateItemInSlot_ItemCreated_1) == 0x000160, "Member 'InventoryBag_C_MoveItemCount::CallFunc_CreateItemInSlot_ItemCreated_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, CallFunc_IsSlottedItemContainedByItem_Result) == 0x000168, "Member 'InventoryBag_C_MoveItemCount::CallFunc_IsSlottedItemContainedByItem_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, CallFunc_GetCount_Result_1) == 0x00016C, "Member 'InventoryBag_C_MoveItemCount::CallFunc_GetCount_Result_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, CallFunc_Less_IntInt_ReturnValue_1) == 0x000170, "Member 'InventoryBag_C_MoveItemCount::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, CallFunc_BooleanAND_ReturnValue) == 0x000171, "Member 'InventoryBag_C_MoveItemCount::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, CallFunc_GetObjectClass_ReturnValue_2) == 0x000178, "Member 'InventoryBag_C_MoveItemCount::CallFunc_GetObjectClass_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, CallFunc_GetObjectClass_ReturnValue_3) == 0x000180, "Member 'InventoryBag_C_MoveItemCount::CallFunc_GetObjectClass_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, CallFunc_EqualEqual_ClassClass_ReturnValue) == 0x000188, "Member 'InventoryBag_C_MoveItemCount::CallFunc_EqualEqual_ClassClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, CallFunc_BooleanAND_ReturnValue_1) == 0x000189, "Member 'InventoryBag_C_MoveItemCount::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, CallFunc_GetSlotIndex_Result_1) == 0x00018C, "Member 'InventoryBag_C_MoveItemCount::CallFunc_GetSlotIndex_Result_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, CallFunc_NotEqual_IntInt_ReturnValue_1) == 0x000190, "Member 'InventoryBag_C_MoveItemCount::CallFunc_NotEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, CallFunc_GetBag_Result_2) == 0x000198, "Member 'InventoryBag_C_MoveItemCount::CallFunc_GetBag_Result_2' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x0001A0, "Member 'InventoryBag_C_MoveItemCount::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, CallFunc_BooleanOR_ReturnValue) == 0x0001A1, "Member 'InventoryBag_C_MoveItemCount::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItemCount, CallFunc_CanMoveItemCount_Result) == 0x0001A2, "Member 'InventoryBag_C_MoveItemCount::CallFunc_CanMoveItemCount_Result' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.CanMoveItemCount
// 0x0280 (0x0280 - 0x0000)
struct InventoryBag_C_CanMoveItemCount final
{
public:
	class UITEM_Base_C*                           Item;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Count;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SlotIndex;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInventoryBag_C*                        MultiSwapBag;                                      // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MultiSwapSlotIndex;                                // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MultiSwapRotated;                                  // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Result;                                            // 0x001D(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              DestItemSize;                                      // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NewSlotIndex;                                      // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              NewItemCoords;                                     // 0x002C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              DeltaItemCoords;                                   // 0x0034(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              DestItemCoords;                                    // 0x003C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              SourceItemCoords;                                  // 0x0044(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<int32>                                   CombinedSlotIndexSet;                              // 0x0050(0x0050)(Edit, BlueprintVisible)
	bool                                          IsAnyItemUncontained;                              // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UITEM_Base_C*>                   DestItems;                                         // 0x00A8(0x0010)(Edit, BlueprintVisible)
	TArray<int32>                                 DestSlotIndices;                                   // 0x00B8(0x0010)(Edit, BlueprintVisible)
	TArray<int32>                                 SourceSlotIndices;                                 // 0x00C8(0x0010)(Edit, BlueprintVisible)
	class UITEM_Base_C*                           DestItem;                                          // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidSlotIndex_Result;                  // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UITEM_Base_C*>                   CallFunc_GetItemsInSlots_Items;                    // 0x00E8(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x00FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsItemRotated_Result;                     // 0x00FD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_BoolBool_ReturnValue;          // 0x00FE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_FF[0x1];                                       // 0x00FF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              K2Node_MakeStruct_IntPoint;                        // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 CallFunc_GetGridSlotIndicesForItemWithSize_ResultIndices; // 0x0110(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              CallFunc_GetRotatedGridSize_Result;                // 0x0124(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x012C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12D[0x3];                                      // 0x012D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              CallFunc_GetGridCoordinatesFromSlotIndex_GridCoords; // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              CallFunc_GetGridCoordinatesFromSlotIndex_GridCoords_1; // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              CallFunc_Add_IntPointIntPoint_ReturnValue;         // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSlotIndexFromGridCoordinates_SlotIndex; // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              CallFunc_Subtract_IntPointIntPoint_ReturnValue;    // 0x014C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSlotTypeGrid_Result;                    // 0x0154(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_155[0x3];                                      // 0x0155(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetSlotIndex_Result;                      // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              CallFunc_GetGridCoordinatesFromSlotIndex_GridCoords_2; // 0x015C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue_1;            // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16C[0x4];                                      // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UITEM_Base_C*>                   CallFunc_GetItemsInSlots_Items_1;                  // 0x0170(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_4;               // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Set_Length_ReturnValue;                   // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0194(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0195(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_196[0x2];                                      // 0x0196(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              CallFunc_GetItemRotatedGridSize_Result;            // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 CallFunc_GetSlotIndicesForItemWithSize_SlotIndices; // 0x01A8(0x0010)(ReferenceParm)
	bool                                          CallFunc_IsSlotTypeGrid_Result_1;                  // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B9[0x3];                                      // 0x01B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1C1[0x3];                                      // 0x01C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSlottedItemContainedByItem_Result;      // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1C9[0x7];                                      // 0x01C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CallFunc_Array_Get_Item;                           // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_5;               // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x01DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x01DD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1DE[0x2];                                      // 0x01DE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_2;          // 0x01E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E5[0x3];                                      // 0x01E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UInventoryBag_C*                        CallFunc_GetBag_Result;                            // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOverflowBag_Result;                     // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F1[0x7];                                      // 0x01F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CallFunc_Array_Get_Item_1;                         // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_6;               // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_3;          // 0x0204(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_205[0x3];                                      // 0x0205(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_7;               // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x020C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_20D[0x3];                                      // 0x020D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              CallFunc_GetRotatedGridSize_Result_1;              // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 CallFunc_GetSlotIndicesForItemWithSize_SlotIndices_1; // 0x0218(0x0010)(ReferenceParm)
	int32                                         CallFunc_GetCount_Result;                          // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_4;          // 0x022C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22D[0x3];                                      // 0x022D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue_1;             // 0x0230(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue_2;             // 0x0238(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ClassClass_ReturnValue;        // 0x0240(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_241[0x7];                                      // 0x0241(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue_3;             // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0250(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanSlotItemClass_Result;                  // 0x0251(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanUnslot_Result;                         // 0x0252(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0253(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_254[0x4];                                      // 0x0254(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue_4;             // 0x0258(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanSlotItemClass_Result_1;                // 0x0260(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanUnslot_Result_1;                       // 0x0261(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0262(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_263[0x1];                                      // 0x0263(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCount_Result_1;                        // 0x0264(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0268(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0269(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x026A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x026B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x026C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26D[0x3];                                      // 0x026D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UInventoryBag_C*                        CallFunc_GetBag_Result_1;                          // 0x0270(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0278(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(InventoryBag_C_CanMoveItemCount) == 0x000008, "Wrong alignment on InventoryBag_C_CanMoveItemCount");
static_assert(sizeof(InventoryBag_C_CanMoveItemCount) == 0x000280, "Wrong size on InventoryBag_C_CanMoveItemCount");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, Item) == 0x000000, "Member 'InventoryBag_C_CanMoveItemCount::Item' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, Count) == 0x000008, "Member 'InventoryBag_C_CanMoveItemCount::Count' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, SlotIndex) == 0x00000C, "Member 'InventoryBag_C_CanMoveItemCount::SlotIndex' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, MultiSwapBag) == 0x000010, "Member 'InventoryBag_C_CanMoveItemCount::MultiSwapBag' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, MultiSwapSlotIndex) == 0x000018, "Member 'InventoryBag_C_CanMoveItemCount::MultiSwapSlotIndex' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, MultiSwapRotated) == 0x00001C, "Member 'InventoryBag_C_CanMoveItemCount::MultiSwapRotated' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, Result) == 0x00001D, "Member 'InventoryBag_C_CanMoveItemCount::Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, DestItemSize) == 0x000020, "Member 'InventoryBag_C_CanMoveItemCount::DestItemSize' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, NewSlotIndex) == 0x000028, "Member 'InventoryBag_C_CanMoveItemCount::NewSlotIndex' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, NewItemCoords) == 0x00002C, "Member 'InventoryBag_C_CanMoveItemCount::NewItemCoords' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, DeltaItemCoords) == 0x000034, "Member 'InventoryBag_C_CanMoveItemCount::DeltaItemCoords' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, DestItemCoords) == 0x00003C, "Member 'InventoryBag_C_CanMoveItemCount::DestItemCoords' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, SourceItemCoords) == 0x000044, "Member 'InventoryBag_C_CanMoveItemCount::SourceItemCoords' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CombinedSlotIndexSet) == 0x000050, "Member 'InventoryBag_C_CanMoveItemCount::CombinedSlotIndexSet' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, IsAnyItemUncontained) == 0x0000A0, "Member 'InventoryBag_C_CanMoveItemCount::IsAnyItemUncontained' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, DestItems) == 0x0000A8, "Member 'InventoryBag_C_CanMoveItemCount::DestItems' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, DestSlotIndices) == 0x0000B8, "Member 'InventoryBag_C_CanMoveItemCount::DestSlotIndices' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, SourceSlotIndices) == 0x0000C8, "Member 'InventoryBag_C_CanMoveItemCount::SourceSlotIndices' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, DestItem) == 0x0000D8, "Member 'InventoryBag_C_CanMoveItemCount::DestItem' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_IsValidSlotIndex_Result) == 0x0000E0, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_IsValidSlotIndex_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_GetItemsInSlots_Items) == 0x0000E8, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_GetItemsInSlots_Items' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_Array_Length_ReturnValue) == 0x0000F8, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0000FC, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_IsItemRotated_Result) == 0x0000FD, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_IsItemRotated_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_EqualEqual_BoolBool_ReturnValue) == 0x0000FE, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_EqualEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, K2Node_MakeStruct_IntPoint) == 0x000100, "Member 'InventoryBag_C_CanMoveItemCount::K2Node_MakeStruct_IntPoint' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, Temp_int_Array_Index_Variable) == 0x000108, "Member 'InventoryBag_C_CanMoveItemCount::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_Multiply_IntInt_ReturnValue) == 0x00010C, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_GetGridSlotIndicesForItemWithSize_ResultIndices) == 0x000110, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_GetGridSlotIndicesForItemWithSize_ResultIndices' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_Array_Length_ReturnValue_1) == 0x000120, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_GetRotatedGridSize_Result) == 0x000124, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_GetRotatedGridSize_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_NotEqual_IntInt_ReturnValue) == 0x00012C, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_GetGridCoordinatesFromSlotIndex_GridCoords) == 0x000130, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_GetGridCoordinatesFromSlotIndex_GridCoords' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_GetGridCoordinatesFromSlotIndex_GridCoords_1) == 0x000138, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_GetGridCoordinatesFromSlotIndex_GridCoords_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_Add_IntPointIntPoint_ReturnValue) == 0x000140, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_Add_IntPointIntPoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_GetSlotIndexFromGridCoordinates_SlotIndex) == 0x000148, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_GetSlotIndexFromGridCoordinates_SlotIndex' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_Subtract_IntPointIntPoint_ReturnValue) == 0x00014C, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_Subtract_IntPointIntPoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_IsSlotTypeGrid_Result) == 0x000154, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_IsSlotTypeGrid_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_GetSlotIndex_Result) == 0x000158, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_GetSlotIndex_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_GetGridCoordinatesFromSlotIndex_GridCoords_2) == 0x00015C, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_GetGridCoordinatesFromSlotIndex_GridCoords_2' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_Multiply_IntInt_ReturnValue_1) == 0x000164, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_Multiply_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_Array_Length_ReturnValue_2) == 0x000168, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_GetItemsInSlots_Items_1) == 0x000170, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_GetItemsInSlots_Items_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_Array_Length_ReturnValue_3) == 0x000180, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_Array_Length_ReturnValue_4) == 0x000184, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_Array_Length_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_Add_IntInt_ReturnValue) == 0x000188, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_Set_Length_ReturnValue) == 0x00018C, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_Set_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, Temp_int_Variable) == 0x000190, "Member 'InventoryBag_C_CanMoveItemCount::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000194, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000195, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_GetObjectClass_ReturnValue) == 0x000198, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_GetItemRotatedGridSize_Result) == 0x0001A0, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_GetItemRotatedGridSize_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_GetSlotIndicesForItemWithSize_SlotIndices) == 0x0001A8, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_GetSlotIndicesForItemWithSize_SlotIndices' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_IsSlotTypeGrid_Result_1) == 0x0001B8, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_IsSlotTypeGrid_Result_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, Temp_int_Loop_Counter_Variable) == 0x0001BC, "Member 'InventoryBag_C_CanMoveItemCount::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_IsValid_ReturnValue) == 0x0001C0, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_Add_IntInt_ReturnValue_1) == 0x0001C4, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_IsSlottedItemContainedByItem_Result) == 0x0001C8, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_IsSlottedItemContainedByItem_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_Array_Get_Item) == 0x0001D0, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_Array_Length_ReturnValue_5) == 0x0001D8, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_Array_Length_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, Temp_bool_Variable) == 0x0001DC, "Member 'InventoryBag_C_CanMoveItemCount::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_Less_IntInt_ReturnValue) == 0x0001DD, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, K2Node_Select_Default) == 0x0001E0, "Member 'InventoryBag_C_CanMoveItemCount::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_EqualEqual_IntInt_ReturnValue_2) == 0x0001E4, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_EqualEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_GetBag_Result) == 0x0001E8, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_GetBag_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_IsOverflowBag_Result) == 0x0001F0, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_IsOverflowBag_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_Array_Get_Item_1) == 0x0001F8, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_Array_Length_ReturnValue_6) == 0x000200, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_Array_Length_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_EqualEqual_IntInt_ReturnValue_3) == 0x000204, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_EqualEqual_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_Array_Length_ReturnValue_7) == 0x000208, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_Array_Length_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_Greater_IntInt_ReturnValue) == 0x00020C, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_GetRotatedGridSize_Result_1) == 0x000210, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_GetRotatedGridSize_Result_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_GetSlotIndicesForItemWithSize_SlotIndices_1) == 0x000218, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_GetSlotIndicesForItemWithSize_SlotIndices_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_GetCount_Result) == 0x000228, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_GetCount_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_EqualEqual_IntInt_ReturnValue_4) == 0x00022C, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_EqualEqual_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_GetObjectClass_ReturnValue_1) == 0x000230, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_GetObjectClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_GetObjectClass_ReturnValue_2) == 0x000238, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_GetObjectClass_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_EqualEqual_ClassClass_ReturnValue) == 0x000240, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_EqualEqual_ClassClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_GetObjectClass_ReturnValue_3) == 0x000248, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_GetObjectClass_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_BooleanOR_ReturnValue) == 0x000250, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_CanSlotItemClass_Result) == 0x000251, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_CanSlotItemClass_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_CanUnslot_Result) == 0x000252, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_CanUnslot_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_BooleanAND_ReturnValue) == 0x000253, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_GetObjectClass_ReturnValue_4) == 0x000258, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_GetObjectClass_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_CanSlotItemClass_Result_1) == 0x000260, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_CanSlotItemClass_Result_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_CanUnslot_Result_1) == 0x000261, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_CanUnslot_Result_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_BooleanOR_ReturnValue_1) == 0x000262, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_GetCount_Result_1) == 0x000264, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_GetCount_Result_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_BooleanAND_ReturnValue_1) == 0x000268, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000269, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_IsValid_ReturnValue_1) == 0x00026A, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_Greater_IntInt_ReturnValue_1) == 0x00026B, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_BooleanAND_ReturnValue_2) == 0x00026C, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_GetBag_Result_1) == 0x000270, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_GetBag_Result_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItemCount, CallFunc_IsValid_ReturnValue_2) == 0x000278, "Member 'InventoryBag_C_CanMoveItemCount::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.MoveItem
// 0x0028 (0x0028 - 0x0000)
struct InventoryBag_C_MoveItem final
{
public:
	class UITEM_Base_C*                           Item;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SlotIndex;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UInventoryBag_C*                        MultiSwapBag;                                      // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MultiSwapSlotIndex;                                // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MultiSwapRotated;                                  // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Result;                                            // 0x001D(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCount_Result;                          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_MoveItemCount_Result;                     // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(InventoryBag_C_MoveItem) == 0x000008, "Wrong alignment on InventoryBag_C_MoveItem");
static_assert(sizeof(InventoryBag_C_MoveItem) == 0x000028, "Wrong size on InventoryBag_C_MoveItem");
static_assert(offsetof(InventoryBag_C_MoveItem, Item) == 0x000000, "Member 'InventoryBag_C_MoveItem::Item' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItem, SlotIndex) == 0x000008, "Member 'InventoryBag_C_MoveItem::SlotIndex' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItem, MultiSwapBag) == 0x000010, "Member 'InventoryBag_C_MoveItem::MultiSwapBag' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItem, MultiSwapSlotIndex) == 0x000018, "Member 'InventoryBag_C_MoveItem::MultiSwapSlotIndex' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItem, MultiSwapRotated) == 0x00001C, "Member 'InventoryBag_C_MoveItem::MultiSwapRotated' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItem, Result) == 0x00001D, "Member 'InventoryBag_C_MoveItem::Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItem, CallFunc_IsValid_ReturnValue) == 0x00001E, "Member 'InventoryBag_C_MoveItem::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItem, CallFunc_GetCount_Result) == 0x000020, "Member 'InventoryBag_C_MoveItem::CallFunc_GetCount_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_MoveItem, CallFunc_MoveItemCount_Result) == 0x000024, "Member 'InventoryBag_C_MoveItem::CallFunc_MoveItemCount_Result' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.CanMoveItem
// 0x0028 (0x0028 - 0x0000)
struct InventoryBag_C_CanMoveItem final
{
public:
	class UITEM_Base_C*                           Item;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SlotIndex;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UInventoryBag_C*                        MultiSwapBag;                                      // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MultiSwapSlotIndex;                                // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MultiSwapRotated;                                  // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Result;                                            // 0x001D(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCount_Result;                          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanMoveItemCount_Result;                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(InventoryBag_C_CanMoveItem) == 0x000008, "Wrong alignment on InventoryBag_C_CanMoveItem");
static_assert(sizeof(InventoryBag_C_CanMoveItem) == 0x000028, "Wrong size on InventoryBag_C_CanMoveItem");
static_assert(offsetof(InventoryBag_C_CanMoveItem, Item) == 0x000000, "Member 'InventoryBag_C_CanMoveItem::Item' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItem, SlotIndex) == 0x000008, "Member 'InventoryBag_C_CanMoveItem::SlotIndex' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItem, MultiSwapBag) == 0x000010, "Member 'InventoryBag_C_CanMoveItem::MultiSwapBag' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItem, MultiSwapSlotIndex) == 0x000018, "Member 'InventoryBag_C_CanMoveItem::MultiSwapSlotIndex' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItem, MultiSwapRotated) == 0x00001C, "Member 'InventoryBag_C_CanMoveItem::MultiSwapRotated' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItem, Result) == 0x00001D, "Member 'InventoryBag_C_CanMoveItem::Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItem, CallFunc_IsValid_ReturnValue) == 0x00001E, "Member 'InventoryBag_C_CanMoveItem::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItem, CallFunc_GetCount_Result) == 0x000020, "Member 'InventoryBag_C_CanMoveItem::CallFunc_GetCount_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CanMoveItem, CallFunc_CanMoveItemCount_Result) == 0x000024, "Member 'InventoryBag_C_CanMoveItem::CallFunc_CanMoveItemCount_Result' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.CombineItemsInternal
// 0x0098 (0x0098 - 0x0000)
struct InventoryBag_C_CombineItemsInternal final
{
public:
	class UITEM_Base_C*                           ItemSrc;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           ItemDst;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Count;                                             // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxStackCount;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SlotSrc;                                           // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UInventoryBag_C*                        BagSrc;                                            // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCount_Result;                          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Conv_IntToBool_ReturnValue;               // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           CallFunc_RemoveItem_RemovedItem;                   // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCount_Result_1;                        // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Min_ReturnValue;                          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_AddCount_ResultCount;                     // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSlotIndex_Result;                      // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UInventoryBag_C*                        CallFunc_GetBag_Result;                            // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCOMP_Inventory_C*                      CallFunc_GetInventory_Inventory;                   // 0x0068(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSlotIndex_Result_1;                    // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UInventoryBag_C*                        CallFunc_GetBag_Result_1;                          // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCOMP_Inventory_C*                      CallFunc_GetInventory_Inventory_1;                 // 0x0080(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSlotIndex_Result_2;                    // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UInventoryBag_C*                        CallFunc_GetBag_Result_2;                          // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(InventoryBag_C_CombineItemsInternal) == 0x000008, "Wrong alignment on InventoryBag_C_CombineItemsInternal");
static_assert(sizeof(InventoryBag_C_CombineItemsInternal) == 0x000098, "Wrong size on InventoryBag_C_CombineItemsInternal");
static_assert(offsetof(InventoryBag_C_CombineItemsInternal, ItemSrc) == 0x000000, "Member 'InventoryBag_C_CombineItemsInternal::ItemSrc' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CombineItemsInternal, ItemDst) == 0x000008, "Member 'InventoryBag_C_CombineItemsInternal::ItemDst' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CombineItemsInternal, Count) == 0x000010, "Member 'InventoryBag_C_CombineItemsInternal::Count' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CombineItemsInternal, MaxStackCount) == 0x000014, "Member 'InventoryBag_C_CombineItemsInternal::MaxStackCount' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CombineItemsInternal, SlotSrc) == 0x000018, "Member 'InventoryBag_C_CombineItemsInternal::SlotSrc' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CombineItemsInternal, BagSrc) == 0x000020, "Member 'InventoryBag_C_CombineItemsInternal::BagSrc' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CombineItemsInternal, Temp_bool_Variable) == 0x000028, "Member 'InventoryBag_C_CombineItemsInternal::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CombineItemsInternal, CallFunc_MakeLiteralInt_ReturnValue) == 0x00002C, "Member 'InventoryBag_C_CombineItemsInternal::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CombineItemsInternal, CallFunc_GetCount_Result) == 0x000030, "Member 'InventoryBag_C_CombineItemsInternal::CallFunc_GetCount_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CombineItemsInternal, CallFunc_Conv_IntToBool_ReturnValue) == 0x000034, "Member 'InventoryBag_C_CombineItemsInternal::CallFunc_Conv_IntToBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CombineItemsInternal, CallFunc_Subtract_IntInt_ReturnValue) == 0x000038, "Member 'InventoryBag_C_CombineItemsInternal::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CombineItemsInternal, K2Node_Select_Default) == 0x00003C, "Member 'InventoryBag_C_CombineItemsInternal::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CombineItemsInternal, CallFunc_RemoveItem_RemovedItem) == 0x000040, "Member 'InventoryBag_C_CombineItemsInternal::CallFunc_RemoveItem_RemovedItem' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CombineItemsInternal, CallFunc_GetCount_Result_1) == 0x000048, "Member 'InventoryBag_C_CombineItemsInternal::CallFunc_GetCount_Result_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CombineItemsInternal, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00004C, "Member 'InventoryBag_C_CombineItemsInternal::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CombineItemsInternal, CallFunc_Min_ReturnValue) == 0x000050, "Member 'InventoryBag_C_CombineItemsInternal::CallFunc_Min_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CombineItemsInternal, CallFunc_AddCount_ResultCount) == 0x000054, "Member 'InventoryBag_C_CombineItemsInternal::CallFunc_AddCount_ResultCount' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CombineItemsInternal, CallFunc_GetSlotIndex_Result) == 0x000058, "Member 'InventoryBag_C_CombineItemsInternal::CallFunc_GetSlotIndex_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CombineItemsInternal, CallFunc_GetBag_Result) == 0x000060, "Member 'InventoryBag_C_CombineItemsInternal::CallFunc_GetBag_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CombineItemsInternal, CallFunc_GetInventory_Inventory) == 0x000068, "Member 'InventoryBag_C_CombineItemsInternal::CallFunc_GetInventory_Inventory' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CombineItemsInternal, CallFunc_GetSlotIndex_Result_1) == 0x000070, "Member 'InventoryBag_C_CombineItemsInternal::CallFunc_GetSlotIndex_Result_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CombineItemsInternal, CallFunc_GetBag_Result_1) == 0x000078, "Member 'InventoryBag_C_CombineItemsInternal::CallFunc_GetBag_Result_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CombineItemsInternal, CallFunc_GetInventory_Inventory_1) == 0x000080, "Member 'InventoryBag_C_CombineItemsInternal::CallFunc_GetInventory_Inventory_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CombineItemsInternal, CallFunc_GetSlotIndex_Result_2) == 0x000088, "Member 'InventoryBag_C_CombineItemsInternal::CallFunc_GetSlotIndex_Result_2' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CombineItemsInternal, CallFunc_GetBag_Result_2) == 0x000090, "Member 'InventoryBag_C_CombineItemsInternal::CallFunc_GetBag_Result_2' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.SwapSlotsInternal
// 0x00A0 (0x00A0 - 0x0000)
struct InventoryBag_C_SwapSlotsInternal final
{
public:
	class UITEM_Base_C*                           SourceItem;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           TargetItem;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SlotIndex;                                         // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UInventoryBag_C*                        SwapBag;                                           // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SwapSlotIndex;                                     // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SourceSlotIndex;                                   // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInventoryBag_C*                        SourceBag;                                         // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCOMP_Inventory_C*                      CallFunc_GetInventory_Inventory;                   // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCOMP_Inventory_C*                      CallFunc_GetInventory_Inventory_1;                 // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasReachedEquipCapacity_Result;           // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCOMP_Inventory_C*                      CallFunc_GetInventory_Inventory_2;                 // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetSlotIndex_Result;                      // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInventoryBag_C*                        CallFunc_GetBag_Result;                            // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UInventoryBag_C*                        CallFunc_GetBag_Result_1;                          // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCOMP_Inventory_C*                      CallFunc_GetInventory_Inventory_3;                 // 0x0070(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetEquipped_Result;                       // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasReachedEquipCapacity_Result_1;         // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x007A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetEquipped_Result_1;                     // 0x007B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetEquipped_Result_2;                     // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ShouldAutoEquip_Result;                   // 0x007D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEquippable_Result;                      // 0x007E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x007F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetEquipped_Result_3;                     // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ShouldAutoEquip_Result_1;                 // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEquippable_Result_1;                    // 0x0083(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetInventory_Result;                      // 0x0085(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0086(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_87[0x1];                                       // 0x0087(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UCOMP_Inventory_C*                      CallFunc_GetInventory_Inventory_4;                 // 0x0088(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetInventory_Result_1;                    // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCOMP_Inventory_C*                      CallFunc_GetInventory_Inventory_5;                 // 0x0098(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(InventoryBag_C_SwapSlotsInternal) == 0x000008, "Wrong alignment on InventoryBag_C_SwapSlotsInternal");
static_assert(sizeof(InventoryBag_C_SwapSlotsInternal) == 0x0000A0, "Wrong size on InventoryBag_C_SwapSlotsInternal");
static_assert(offsetof(InventoryBag_C_SwapSlotsInternal, SourceItem) == 0x000000, "Member 'InventoryBag_C_SwapSlotsInternal::SourceItem' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SwapSlotsInternal, TargetItem) == 0x000008, "Member 'InventoryBag_C_SwapSlotsInternal::TargetItem' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SwapSlotsInternal, SlotIndex) == 0x000010, "Member 'InventoryBag_C_SwapSlotsInternal::SlotIndex' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SwapSlotsInternal, SwapBag) == 0x000018, "Member 'InventoryBag_C_SwapSlotsInternal::SwapBag' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SwapSlotsInternal, SwapSlotIndex) == 0x000020, "Member 'InventoryBag_C_SwapSlotsInternal::SwapSlotIndex' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SwapSlotsInternal, SourceSlotIndex) == 0x000024, "Member 'InventoryBag_C_SwapSlotsInternal::SourceSlotIndex' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SwapSlotsInternal, SourceBag) == 0x000028, "Member 'InventoryBag_C_SwapSlotsInternal::SourceBag' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SwapSlotsInternal, CallFunc_GetInventory_Inventory) == 0x000030, "Member 'InventoryBag_C_SwapSlotsInternal::CallFunc_GetInventory_Inventory' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SwapSlotsInternal, CallFunc_GetInventory_Inventory_1) == 0x000038, "Member 'InventoryBag_C_SwapSlotsInternal::CallFunc_GetInventory_Inventory_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SwapSlotsInternal, CallFunc_HasReachedEquipCapacity_Result) == 0x000040, "Member 'InventoryBag_C_SwapSlotsInternal::CallFunc_HasReachedEquipCapacity_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SwapSlotsInternal, CallFunc_GetInventory_Inventory_2) == 0x000048, "Member 'InventoryBag_C_SwapSlotsInternal::CallFunc_GetInventory_Inventory_2' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SwapSlotsInternal, CallFunc_Not_PreBool_ReturnValue) == 0x000050, "Member 'InventoryBag_C_SwapSlotsInternal::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SwapSlotsInternal, CallFunc_GetSlotIndex_Result) == 0x000054, "Member 'InventoryBag_C_SwapSlotsInternal::CallFunc_GetSlotIndex_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SwapSlotsInternal, CallFunc_GetBag_Result) == 0x000058, "Member 'InventoryBag_C_SwapSlotsInternal::CallFunc_GetBag_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SwapSlotsInternal, CallFunc_IsValid_ReturnValue) == 0x000060, "Member 'InventoryBag_C_SwapSlotsInternal::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SwapSlotsInternal, CallFunc_GetBag_Result_1) == 0x000068, "Member 'InventoryBag_C_SwapSlotsInternal::CallFunc_GetBag_Result_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SwapSlotsInternal, CallFunc_GetInventory_Inventory_3) == 0x000070, "Member 'InventoryBag_C_SwapSlotsInternal::CallFunc_GetInventory_Inventory_3' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SwapSlotsInternal, CallFunc_SetEquipped_Result) == 0x000078, "Member 'InventoryBag_C_SwapSlotsInternal::CallFunc_SetEquipped_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SwapSlotsInternal, CallFunc_HasReachedEquipCapacity_Result_1) == 0x000079, "Member 'InventoryBag_C_SwapSlotsInternal::CallFunc_HasReachedEquipCapacity_Result_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SwapSlotsInternal, CallFunc_Not_PreBool_ReturnValue_1) == 0x00007A, "Member 'InventoryBag_C_SwapSlotsInternal::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SwapSlotsInternal, CallFunc_SetEquipped_Result_1) == 0x00007B, "Member 'InventoryBag_C_SwapSlotsInternal::CallFunc_SetEquipped_Result_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SwapSlotsInternal, CallFunc_SetEquipped_Result_2) == 0x00007C, "Member 'InventoryBag_C_SwapSlotsInternal::CallFunc_SetEquipped_Result_2' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SwapSlotsInternal, CallFunc_ShouldAutoEquip_Result) == 0x00007D, "Member 'InventoryBag_C_SwapSlotsInternal::CallFunc_ShouldAutoEquip_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SwapSlotsInternal, CallFunc_IsEquippable_Result) == 0x00007E, "Member 'InventoryBag_C_SwapSlotsInternal::CallFunc_IsEquippable_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SwapSlotsInternal, CallFunc_BooleanAND_ReturnValue) == 0x00007F, "Member 'InventoryBag_C_SwapSlotsInternal::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SwapSlotsInternal, CallFunc_SetEquipped_Result_3) == 0x000080, "Member 'InventoryBag_C_SwapSlotsInternal::CallFunc_SetEquipped_Result_3' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SwapSlotsInternal, CallFunc_ShouldAutoEquip_Result_1) == 0x000081, "Member 'InventoryBag_C_SwapSlotsInternal::CallFunc_ShouldAutoEquip_Result_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SwapSlotsInternal, CallFunc_IsValid_ReturnValue_1) == 0x000082, "Member 'InventoryBag_C_SwapSlotsInternal::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SwapSlotsInternal, CallFunc_IsEquippable_Result_1) == 0x000083, "Member 'InventoryBag_C_SwapSlotsInternal::CallFunc_IsEquippable_Result_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SwapSlotsInternal, CallFunc_BooleanAND_ReturnValue_1) == 0x000084, "Member 'InventoryBag_C_SwapSlotsInternal::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SwapSlotsInternal, CallFunc_SetInventory_Result) == 0x000085, "Member 'InventoryBag_C_SwapSlotsInternal::CallFunc_SetInventory_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SwapSlotsInternal, CallFunc_IsValid_ReturnValue_2) == 0x000086, "Member 'InventoryBag_C_SwapSlotsInternal::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SwapSlotsInternal, CallFunc_GetInventory_Inventory_4) == 0x000088, "Member 'InventoryBag_C_SwapSlotsInternal::CallFunc_GetInventory_Inventory_4' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SwapSlotsInternal, CallFunc_SetInventory_Result_1) == 0x000090, "Member 'InventoryBag_C_SwapSlotsInternal::CallFunc_SetInventory_Result_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_SwapSlotsInternal, CallFunc_GetInventory_Inventory_5) == 0x000098, "Member 'InventoryBag_C_SwapSlotsInternal::CallFunc_GetInventory_Inventory_5' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.CleanupSlotInternal
// 0x0050 (0x0050 - 0x0000)
struct InventoryBag_C_CleanupSlotInternal final
{
public:
	class UITEM_Base_C*                           Item;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCOMP_Inventory_C*                      CallFunc_GetInventory_Inventory;                   // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSlotIndex_Result;                      // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSlotIndex_Result_1;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_GetSlotIndicesForItemInstance_Slot_Indices; // 0x0028(0x0010)(ReferenceParm)
	bool                                          CallFunc_Set_Remove_ReturnValue;                   // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Get_Item;                           // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	const class UITEM_Base_C*                     Temp_object_Variable;                              // 0x0048(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(InventoryBag_C_CleanupSlotInternal) == 0x000008, "Wrong alignment on InventoryBag_C_CleanupSlotInternal");
static_assert(sizeof(InventoryBag_C_CleanupSlotInternal) == 0x000050, "Wrong size on InventoryBag_C_CleanupSlotInternal");
static_assert(offsetof(InventoryBag_C_CleanupSlotInternal, Item) == 0x000000, "Member 'InventoryBag_C_CleanupSlotInternal::Item' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CleanupSlotInternal, Temp_int_Array_Index_Variable) == 0x000008, "Member 'InventoryBag_C_CleanupSlotInternal::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CleanupSlotInternal, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'InventoryBag_C_CleanupSlotInternal::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CleanupSlotInternal, CallFunc_GetInventory_Inventory) == 0x000010, "Member 'InventoryBag_C_CleanupSlotInternal::CallFunc_GetInventory_Inventory' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CleanupSlotInternal, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'InventoryBag_C_CleanupSlotInternal::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CleanupSlotInternal, CallFunc_GetSlotIndex_Result) == 0x00001C, "Member 'InventoryBag_C_CleanupSlotInternal::CallFunc_GetSlotIndex_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CleanupSlotInternal, CallFunc_GetSlotIndex_Result_1) == 0x000020, "Member 'InventoryBag_C_CleanupSlotInternal::CallFunc_GetSlotIndex_Result_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CleanupSlotInternal, CallFunc_GetSlotIndicesForItemInstance_Slot_Indices) == 0x000028, "Member 'InventoryBag_C_CleanupSlotInternal::CallFunc_GetSlotIndicesForItemInstance_Slot_Indices' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CleanupSlotInternal, CallFunc_Set_Remove_ReturnValue) == 0x000038, "Member 'InventoryBag_C_CleanupSlotInternal::CallFunc_Set_Remove_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CleanupSlotInternal, CallFunc_Array_Get_Item) == 0x00003C, "Member 'InventoryBag_C_CleanupSlotInternal::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CleanupSlotInternal, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'InventoryBag_C_CleanupSlotInternal::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CleanupSlotInternal, CallFunc_Less_IntInt_ReturnValue) == 0x000044, "Member 'InventoryBag_C_CleanupSlotInternal::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_CleanupSlotInternal, Temp_object_Variable) == 0x000048, "Member 'InventoryBag_C_CleanupSlotInternal::Temp_object_Variable' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.PlaceItemInSlotInternal
// 0x0040 (0x0040 - 0x0000)
struct InventoryBag_C_PlaceItemInSlotInternal final
{
public:
	class UITEM_Base_C*                           Item;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SlotIndex;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              CallFunc_GetRotatedGridSize_Result;                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 CallFunc_GetSlotIndicesForItemWithSize_SlotIndices; // 0x0020(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(InventoryBag_C_PlaceItemInSlotInternal) == 0x000008, "Wrong alignment on InventoryBag_C_PlaceItemInSlotInternal");
static_assert(sizeof(InventoryBag_C_PlaceItemInSlotInternal) == 0x000040, "Wrong size on InventoryBag_C_PlaceItemInSlotInternal");
static_assert(offsetof(InventoryBag_C_PlaceItemInSlotInternal, Item) == 0x000000, "Member 'InventoryBag_C_PlaceItemInSlotInternal::Item' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_PlaceItemInSlotInternal, SlotIndex) == 0x000008, "Member 'InventoryBag_C_PlaceItemInSlotInternal::SlotIndex' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_PlaceItemInSlotInternal, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'InventoryBag_C_PlaceItemInSlotInternal::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_PlaceItemInSlotInternal, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'InventoryBag_C_PlaceItemInSlotInternal::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_PlaceItemInSlotInternal, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'InventoryBag_C_PlaceItemInSlotInternal::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_PlaceItemInSlotInternal, CallFunc_GetRotatedGridSize_Result) == 0x000018, "Member 'InventoryBag_C_PlaceItemInSlotInternal::CallFunc_GetRotatedGridSize_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_PlaceItemInSlotInternal, CallFunc_GetSlotIndicesForItemWithSize_SlotIndices) == 0x000020, "Member 'InventoryBag_C_PlaceItemInSlotInternal::CallFunc_GetSlotIndicesForItemWithSize_SlotIndices' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_PlaceItemInSlotInternal, CallFunc_Array_Get_Item) == 0x000030, "Member 'InventoryBag_C_PlaceItemInSlotInternal::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_PlaceItemInSlotInternal, CallFunc_Array_Length_ReturnValue) == 0x000034, "Member 'InventoryBag_C_PlaceItemInSlotInternal::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_PlaceItemInSlotInternal, CallFunc_Less_IntInt_ReturnValue) == 0x000038, "Member 'InventoryBag_C_PlaceItemInSlotInternal::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.RemoveItemCountByClass
// 0x0170 (0x0170 - 0x0000)
struct InventoryBag_C_RemoveItemCountByClass final
{
public:
	TSoftClassPtr<class UClass>                   ItemClass;                                         // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	int32                                         DesiredCount;                                      // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PrioritizeSmallStacks;                             // 0x002C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RemovedCount;                                      // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentCountToRemove;                              // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DesiredCountRemaining;                             // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SmallestStackCount;                                // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           BestItemToRemove;                                  // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           CurrentItem;                                       // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   CallFunc_Conv_ClassToSoftClassReference_ReturnValue; // 0x0070(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9A[0x2];                                       // 0x009A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCount_Result;                          // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCount_Result_1;                        // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CallFunc_RemoveItemCount_RemovedItem;              // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCount_Result_2;                        // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Min_ReturnValue;                          // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C5[0x3];                                       // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue_1;             // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   CallFunc_Conv_ClassToSoftClassReference_ReturnValue_1; // 0x00D8(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_SoftClassReference_ReturnValue; // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x0101(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_102[0x6];                                      // 0x0102(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UITEM_Base_C*>                   CallFunc_Set_ToArray_Result;                       // 0x0108(0x0010)(ReferenceParm)
	class UITEM_Base_C*                           CallFunc_Array_Get_Item;                           // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0124(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_125[0x3];                                      // 0x0125(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_2;            // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CallFunc_RemoveItemCount_RemovedItem_1;            // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_3;            // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCount_Result_3;                        // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Min_ReturnValue_1;                        // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_SoftClassReference_ReturnValue_1; // 0x0144(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_145[0x3];                                      // 0x0145(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UITEM_Base_C*>                   CallFunc_Set_ToArray_Result_1;                     // 0x0148(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15C[0x4];                                      // 0x015C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CallFunc_Array_Get_Item_1;                         // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(InventoryBag_C_RemoveItemCountByClass) == 0x000008, "Wrong alignment on InventoryBag_C_RemoveItemCountByClass");
static_assert(sizeof(InventoryBag_C_RemoveItemCountByClass) == 0x000170, "Wrong size on InventoryBag_C_RemoveItemCountByClass");
static_assert(offsetof(InventoryBag_C_RemoveItemCountByClass, ItemClass) == 0x000000, "Member 'InventoryBag_C_RemoveItemCountByClass::ItemClass' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCountByClass, DesiredCount) == 0x000028, "Member 'InventoryBag_C_RemoveItemCountByClass::DesiredCount' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCountByClass, PrioritizeSmallStacks) == 0x00002C, "Member 'InventoryBag_C_RemoveItemCountByClass::PrioritizeSmallStacks' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCountByClass, RemovedCount) == 0x000030, "Member 'InventoryBag_C_RemoveItemCountByClass::RemovedCount' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCountByClass, CurrentCountToRemove) == 0x000034, "Member 'InventoryBag_C_RemoveItemCountByClass::CurrentCountToRemove' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCountByClass, DesiredCountRemaining) == 0x000038, "Member 'InventoryBag_C_RemoveItemCountByClass::DesiredCountRemaining' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCountByClass, SmallestStackCount) == 0x00003C, "Member 'InventoryBag_C_RemoveItemCountByClass::SmallestStackCount' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCountByClass, BestItemToRemove) == 0x000040, "Member 'InventoryBag_C_RemoveItemCountByClass::BestItemToRemove' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCountByClass, CurrentItem) == 0x000048, "Member 'InventoryBag_C_RemoveItemCountByClass::CurrentItem' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCountByClass, Temp_int_Array_Index_Variable) == 0x000050, "Member 'InventoryBag_C_RemoveItemCountByClass::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCountByClass, Temp_int_Loop_Counter_Variable) == 0x000054, "Member 'InventoryBag_C_RemoveItemCountByClass::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCountByClass, Temp_int_Loop_Counter_Variable_1) == 0x000058, "Member 'InventoryBag_C_RemoveItemCountByClass::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCountByClass, CallFunc_Add_IntInt_ReturnValue) == 0x00005C, "Member 'InventoryBag_C_RemoveItemCountByClass::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCountByClass, CallFunc_Add_IntInt_ReturnValue_1) == 0x000060, "Member 'InventoryBag_C_RemoveItemCountByClass::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCountByClass, Temp_int_Array_Index_Variable_1) == 0x000064, "Member 'InventoryBag_C_RemoveItemCountByClass::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCountByClass, CallFunc_GetObjectClass_ReturnValue) == 0x000068, "Member 'InventoryBag_C_RemoveItemCountByClass::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCountByClass, CallFunc_Conv_ClassToSoftClassReference_ReturnValue) == 0x000070, "Member 'InventoryBag_C_RemoveItemCountByClass::CallFunc_Conv_ClassToSoftClassReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCountByClass, CallFunc_Greater_IntInt_ReturnValue) == 0x000098, "Member 'InventoryBag_C_RemoveItemCountByClass::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCountByClass, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000099, "Member 'InventoryBag_C_RemoveItemCountByClass::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCountByClass, CallFunc_GetCount_Result) == 0x00009C, "Member 'InventoryBag_C_RemoveItemCountByClass::CallFunc_GetCount_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCountByClass, CallFunc_GetCount_Result_1) == 0x0000A0, "Member 'InventoryBag_C_RemoveItemCountByClass::CallFunc_GetCount_Result_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCountByClass, CallFunc_Less_IntInt_ReturnValue) == 0x0000A4, "Member 'InventoryBag_C_RemoveItemCountByClass::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCountByClass, CallFunc_Subtract_IntInt_ReturnValue) == 0x0000A8, "Member 'InventoryBag_C_RemoveItemCountByClass::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCountByClass, CallFunc_RemoveItemCount_RemovedItem) == 0x0000B0, "Member 'InventoryBag_C_RemoveItemCountByClass::CallFunc_RemoveItemCount_RemovedItem' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCountByClass, CallFunc_GetCount_Result_2) == 0x0000B8, "Member 'InventoryBag_C_RemoveItemCountByClass::CallFunc_GetCount_Result_2' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCountByClass, CallFunc_IsValid_ReturnValue) == 0x0000BC, "Member 'InventoryBag_C_RemoveItemCountByClass::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCountByClass, CallFunc_Min_ReturnValue) == 0x0000C0, "Member 'InventoryBag_C_RemoveItemCountByClass::CallFunc_Min_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCountByClass, CallFunc_Greater_IntInt_ReturnValue_1) == 0x0000C4, "Member 'InventoryBag_C_RemoveItemCountByClass::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCountByClass, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x0000C8, "Member 'InventoryBag_C_RemoveItemCountByClass::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCountByClass, CallFunc_GetObjectClass_ReturnValue_1) == 0x0000D0, "Member 'InventoryBag_C_RemoveItemCountByClass::CallFunc_GetObjectClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCountByClass, CallFunc_Conv_ClassToSoftClassReference_ReturnValue_1) == 0x0000D8, "Member 'InventoryBag_C_RemoveItemCountByClass::CallFunc_Conv_ClassToSoftClassReference_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCountByClass, CallFunc_EqualEqual_SoftClassReference_ReturnValue) == 0x000100, "Member 'InventoryBag_C_RemoveItemCountByClass::CallFunc_EqualEqual_SoftClassReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCountByClass, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x000101, "Member 'InventoryBag_C_RemoveItemCountByClass::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCountByClass, CallFunc_Set_ToArray_Result) == 0x000108, "Member 'InventoryBag_C_RemoveItemCountByClass::CallFunc_Set_ToArray_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCountByClass, CallFunc_Array_Get_Item) == 0x000118, "Member 'InventoryBag_C_RemoveItemCountByClass::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCountByClass, CallFunc_Array_Length_ReturnValue) == 0x000120, "Member 'InventoryBag_C_RemoveItemCountByClass::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCountByClass, CallFunc_Less_IntInt_ReturnValue_1) == 0x000124, "Member 'InventoryBag_C_RemoveItemCountByClass::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCountByClass, CallFunc_Subtract_IntInt_ReturnValue_2) == 0x000128, "Member 'InventoryBag_C_RemoveItemCountByClass::CallFunc_Subtract_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCountByClass, CallFunc_RemoveItemCount_RemovedItem_1) == 0x000130, "Member 'InventoryBag_C_RemoveItemCountByClass::CallFunc_RemoveItemCount_RemovedItem_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCountByClass, CallFunc_Subtract_IntInt_ReturnValue_3) == 0x000138, "Member 'InventoryBag_C_RemoveItemCountByClass::CallFunc_Subtract_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCountByClass, CallFunc_GetCount_Result_3) == 0x00013C, "Member 'InventoryBag_C_RemoveItemCountByClass::CallFunc_GetCount_Result_3' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCountByClass, CallFunc_Min_ReturnValue_1) == 0x000140, "Member 'InventoryBag_C_RemoveItemCountByClass::CallFunc_Min_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCountByClass, CallFunc_EqualEqual_SoftClassReference_ReturnValue_1) == 0x000144, "Member 'InventoryBag_C_RemoveItemCountByClass::CallFunc_EqualEqual_SoftClassReference_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCountByClass, CallFunc_Set_ToArray_Result_1) == 0x000148, "Member 'InventoryBag_C_RemoveItemCountByClass::CallFunc_Set_ToArray_Result_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCountByClass, CallFunc_Array_Length_ReturnValue_1) == 0x000158, "Member 'InventoryBag_C_RemoveItemCountByClass::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCountByClass, CallFunc_Array_Get_Item_1) == 0x000160, "Member 'InventoryBag_C_RemoveItemCountByClass::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_RemoveItemCountByClass, CallFunc_Less_IntInt_ReturnValue_2) == 0x000168, "Member 'InventoryBag_C_RemoveItemCountByClass::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.GetItemRotatedGridSize
// 0x0040 (0x0040 - 0x0000)
struct InventoryBag_C_GetItemRotatedGridSize final
{
public:
	class UITEM_Base_C*                           Item;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 ItemClass;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRotated;                                         // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              Result;                                            // 0x0014(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              OriginalSize;                                      // 0x001C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              CallFunc_GetItemGridSize_Result;                   // 0x0024(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              K2Node_MakeStruct_IntPoint;                        // 0x002C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              K2Node_Select_Default;                             // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(InventoryBag_C_GetItemRotatedGridSize) == 0x000008, "Wrong alignment on InventoryBag_C_GetItemRotatedGridSize");
static_assert(sizeof(InventoryBag_C_GetItemRotatedGridSize) == 0x000040, "Wrong size on InventoryBag_C_GetItemRotatedGridSize");
static_assert(offsetof(InventoryBag_C_GetItemRotatedGridSize, Item) == 0x000000, "Member 'InventoryBag_C_GetItemRotatedGridSize::Item' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemRotatedGridSize, ItemClass) == 0x000008, "Member 'InventoryBag_C_GetItemRotatedGridSize::ItemClass' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemRotatedGridSize, IsRotated) == 0x000010, "Member 'InventoryBag_C_GetItemRotatedGridSize::IsRotated' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemRotatedGridSize, Result) == 0x000014, "Member 'InventoryBag_C_GetItemRotatedGridSize::Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemRotatedGridSize, OriginalSize) == 0x00001C, "Member 'InventoryBag_C_GetItemRotatedGridSize::OriginalSize' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemRotatedGridSize, CallFunc_GetItemGridSize_Result) == 0x000024, "Member 'InventoryBag_C_GetItemRotatedGridSize::CallFunc_GetItemGridSize_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemRotatedGridSize, K2Node_MakeStruct_IntPoint) == 0x00002C, "Member 'InventoryBag_C_GetItemRotatedGridSize::K2Node_MakeStruct_IntPoint' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemRotatedGridSize, Temp_bool_Variable) == 0x000034, "Member 'InventoryBag_C_GetItemRotatedGridSize::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetItemRotatedGridSize, K2Node_Select_Default) == 0x000038, "Member 'InventoryBag_C_GetItemRotatedGridSize::K2Node_Select_Default' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.GetBestSlotInCardinalDirection
// 0x0190 (0x0190 - 0x0000)
struct InventoryBag_C_GetBestSlotInCardinalDirection final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_CardinalDirection                        Direction;                                         // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Result;                                            // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TraverseRightSign;                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentRightOffset;                                // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TangentSlotCount;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              CurrentGridCoords;                                 // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              CurrentForwardGridCoords;                          // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              CycleRightDirection;                               // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              CycleForwardDirection;                             // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              ItemGridSize;                                      // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              GridCoords;                                        // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           CurrentItem;                                       // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           OriginalItem;                                      // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidSlotIndex_Result;                  // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ENUM_CardinalDirection                        Temp_byte_Variable;                                // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5E[0x2];                                       // 0x005E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_1;                               // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_CardinalDirection                        Temp_byte_Variable_1;                              // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              Temp_struct_Variable;                              // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_72[0x2];                                       // 0x0072(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_2;                               // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_4;                               // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidGridCoordinates_Result;            // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_82[0x2];                                       // 0x0082(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_BoolToInt_ReturnValue;               // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidGridCoordinates_Result_1;          // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_5;                               // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_6;                               // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_7;                               // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue;                // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x00AD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ENUM_CardinalDirection                        Temp_byte_Variable_2;                              // 0x00AE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AF[0x1];                                       // 0x00AF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              K2Node_MakeStruct_IntPoint;                        // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default_1;                           // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSlotIndexFromGridCoordinates_SlotIndex; // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              K2Node_MakeStruct_IntPoint_1;                      // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default_2;                           // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              CallFunc_Subtract_IntPointIntPoint_ReturnValue;    // 0x00CC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              CallFunc_Divide_IntPointInt_ReturnValue;           // 0x00D4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              K2Node_MakeStruct_IntPoint_2;                      // 0x00DC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              K2Node_MakeStruct_IntPoint_3;                      // 0x00E4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              K2Node_MakeStruct_IntPoint_4;                      // 0x00EC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              K2Node_MakeStruct_IntPoint_5;                      // 0x00F4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              K2Node_Select_Default_3;                           // 0x00FC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              CallFunc_GetGridCoordinatesFromSlotIndex_GridCoords; // 0x0104(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              CallFunc_Add_IntPointIntPoint_ReturnValue;         // 0x010C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              CallFunc_GetRotatedGridSize_Result;                // 0x0114(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSlotIndex_Result;                      // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              CallFunc_GetGridCoordinatesFromSlotIndex_GridCoords_1; // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_CardinalDirection                        Temp_byte_Variable_3;                              // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_129[0x3];                                      // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              K2Node_MakeStruct_IntPoint_6;                      // 0x012C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default_4;                           // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_139[0x3];                                      // 0x0139(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetSlotIndex_Result_1;                    // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           CallFunc_GetSlotItem_Item;                         // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_149[0x3];                                      // 0x0149(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetSlotIndexFromGridCoordinates_SlotIndex_1; // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           CallFunc_GetSlotItem_Item_1;                       // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              CallFunc_Multiply_IntPointInt_ReturnValue;         // 0x015C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              CallFunc_Add_IntPointIntPoint_ReturnValue_1;       // 0x0164(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              CallFunc_Add_IntPointIntPoint_ReturnValue_2;       // 0x016C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              CallFunc_GetIntPointFromCardinalDirection_Point;   // 0x0174(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue_1;            // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              CallFunc_Multiply_IntPointIntPoint_ReturnValue;    // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              K2Node_MakeStruct_IntPoint_7;                      // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(InventoryBag_C_GetBestSlotInCardinalDirection) == 0x000008, "Wrong alignment on InventoryBag_C_GetBestSlotInCardinalDirection");
static_assert(sizeof(InventoryBag_C_GetBestSlotInCardinalDirection) == 0x000190, "Wrong size on InventoryBag_C_GetBestSlotInCardinalDirection");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, SlotIndex) == 0x000000, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::SlotIndex' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, Direction) == 0x000004, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::Direction' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, Result) == 0x000008, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, TraverseRightSign) == 0x00000C, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::TraverseRightSign' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, CurrentRightOffset) == 0x000010, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::CurrentRightOffset' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, TangentSlotCount) == 0x000014, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::TangentSlotCount' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, CurrentGridCoords) == 0x000018, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::CurrentGridCoords' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, CurrentForwardGridCoords) == 0x000020, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::CurrentForwardGridCoords' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, CycleRightDirection) == 0x000028, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::CycleRightDirection' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, CycleForwardDirection) == 0x000030, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::CycleForwardDirection' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, ItemGridSize) == 0x000038, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::ItemGridSize' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, GridCoords) == 0x000040, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::GridCoords' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, CurrentItem) == 0x000048, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::CurrentItem' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, OriginalItem) == 0x000050, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::OriginalItem' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, Temp_int_Variable) == 0x000058, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, CallFunc_IsValidSlotIndex_Result) == 0x00005C, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::CallFunc_IsValidSlotIndex_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, Temp_byte_Variable) == 0x00005D, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, Temp_int_Variable_1) == 0x000060, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, Temp_byte_Variable_1) == 0x000064, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, Temp_struct_Variable) == 0x000068, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, CallFunc_IsValid_ReturnValue) == 0x000070, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, CallFunc_IsValid_ReturnValue_1) == 0x000071, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, Temp_int_Variable_2) == 0x000074, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, Temp_int_Variable_3) == 0x000078, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, Temp_int_Variable_4) == 0x00007C, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::Temp_int_Variable_4' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, CallFunc_IsValidGridCoordinates_Result) == 0x000080, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::CallFunc_IsValidGridCoordinates_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, CallFunc_Greater_IntInt_ReturnValue) == 0x000081, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, CallFunc_Conv_BoolToInt_ReturnValue) == 0x000084, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::CallFunc_Conv_BoolToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, CallFunc_IsValidGridCoordinates_Result_1) == 0x000088, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::CallFunc_IsValidGridCoordinates_Result_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, Temp_int_Variable_5) == 0x00008C, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::Temp_int_Variable_5' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, Temp_int_Variable_6) == 0x000090, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::Temp_int_Variable_6' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, CallFunc_Add_IntInt_ReturnValue) == 0x000094, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, Temp_int_Variable_7) == 0x000098, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::Temp_int_Variable_7' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, K2Node_Select_Default) == 0x00009C, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0000A0, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, CallFunc_Add_IntInt_ReturnValue_1) == 0x0000A4, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, CallFunc_Divide_IntInt_ReturnValue) == 0x0000A8, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::CallFunc_Divide_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x0000AC, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, CallFunc_Greater_IntInt_ReturnValue_1) == 0x0000AD, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, Temp_byte_Variable_2) == 0x0000AE, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, K2Node_MakeStruct_IntPoint) == 0x0000B0, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::K2Node_MakeStruct_IntPoint' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, K2Node_Select_Default_1) == 0x0000B8, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, CallFunc_GetSlotIndexFromGridCoordinates_SlotIndex) == 0x0000BC, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::CallFunc_GetSlotIndexFromGridCoordinates_SlotIndex' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, K2Node_MakeStruct_IntPoint_1) == 0x0000C0, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::K2Node_MakeStruct_IntPoint_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, K2Node_Select_Default_2) == 0x0000C8, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, CallFunc_Subtract_IntPointIntPoint_ReturnValue) == 0x0000CC, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::CallFunc_Subtract_IntPointIntPoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, CallFunc_Divide_IntPointInt_ReturnValue) == 0x0000D4, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::CallFunc_Divide_IntPointInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, K2Node_MakeStruct_IntPoint_2) == 0x0000DC, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::K2Node_MakeStruct_IntPoint_2' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, K2Node_MakeStruct_IntPoint_3) == 0x0000E4, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::K2Node_MakeStruct_IntPoint_3' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, K2Node_MakeStruct_IntPoint_4) == 0x0000EC, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::K2Node_MakeStruct_IntPoint_4' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, K2Node_MakeStruct_IntPoint_5) == 0x0000F4, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::K2Node_MakeStruct_IntPoint_5' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, K2Node_Select_Default_3) == 0x0000FC, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, CallFunc_GetGridCoordinatesFromSlotIndex_GridCoords) == 0x000104, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::CallFunc_GetGridCoordinatesFromSlotIndex_GridCoords' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, CallFunc_Add_IntPointIntPoint_ReturnValue) == 0x00010C, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::CallFunc_Add_IntPointIntPoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, CallFunc_GetRotatedGridSize_Result) == 0x000114, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::CallFunc_GetRotatedGridSize_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, CallFunc_GetSlotIndex_Result) == 0x00011C, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::CallFunc_GetSlotIndex_Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, CallFunc_GetGridCoordinatesFromSlotIndex_GridCoords_1) == 0x000120, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::CallFunc_GetGridCoordinatesFromSlotIndex_GridCoords_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, Temp_byte_Variable_3) == 0x000128, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, K2Node_MakeStruct_IntPoint_6) == 0x00012C, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::K2Node_MakeStruct_IntPoint_6' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, K2Node_Select_Default_4) == 0x000134, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000138, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, CallFunc_GetSlotIndex_Result_1) == 0x00013C, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::CallFunc_GetSlotIndex_Result_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, CallFunc_GetSlotItem_Item) == 0x000140, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::CallFunc_GetSlotItem_Item' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000148, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, CallFunc_GetSlotIndexFromGridCoordinates_SlotIndex_1) == 0x00014C, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::CallFunc_GetSlotIndexFromGridCoordinates_SlotIndex_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, CallFunc_GetSlotItem_Item_1) == 0x000150, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::CallFunc_GetSlotItem_Item_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, CallFunc_Multiply_IntInt_ReturnValue) == 0x000158, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, CallFunc_Multiply_IntPointInt_ReturnValue) == 0x00015C, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::CallFunc_Multiply_IntPointInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, CallFunc_Add_IntPointIntPoint_ReturnValue_1) == 0x000164, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::CallFunc_Add_IntPointIntPoint_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, CallFunc_Add_IntPointIntPoint_ReturnValue_2) == 0x00016C, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::CallFunc_Add_IntPointIntPoint_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, CallFunc_GetIntPointFromCardinalDirection_Point) == 0x000174, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::CallFunc_GetIntPointFromCardinalDirection_Point' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, CallFunc_Multiply_IntInt_ReturnValue_1) == 0x00017C, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::CallFunc_Multiply_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, CallFunc_Multiply_IntPointIntPoint_ReturnValue) == 0x000180, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::CallFunc_Multiply_IntPointIntPoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetBestSlotInCardinalDirection, K2Node_MakeStruct_IntPoint_7) == 0x000188, "Member 'InventoryBag_C_GetBestSlotInCardinalDirection::K2Node_MakeStruct_IntPoint_7' has a wrong offset!");

// Function InventoryBag.InventoryBag_C.GetFirstOccupiedSlotIndex
// 0x0028 (0x0028 - 0x0000)
struct InventoryBag_C_GetFirstOccupiedSlotIndex final
{
public:
	int32                                         Result;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_Base_C*                           CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(InventoryBag_C_GetFirstOccupiedSlotIndex) == 0x000008, "Wrong alignment on InventoryBag_C_GetFirstOccupiedSlotIndex");
static_assert(sizeof(InventoryBag_C_GetFirstOccupiedSlotIndex) == 0x000028, "Wrong size on InventoryBag_C_GetFirstOccupiedSlotIndex");
static_assert(offsetof(InventoryBag_C_GetFirstOccupiedSlotIndex, Result) == 0x000000, "Member 'InventoryBag_C_GetFirstOccupiedSlotIndex::Result' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetFirstOccupiedSlotIndex, Temp_int_Array_Index_Variable) == 0x000004, "Member 'InventoryBag_C_GetFirstOccupiedSlotIndex::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetFirstOccupiedSlotIndex, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'InventoryBag_C_GetFirstOccupiedSlotIndex::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetFirstOccupiedSlotIndex, CallFunc_Array_Get_Item) == 0x000010, "Member 'InventoryBag_C_GetFirstOccupiedSlotIndex::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetFirstOccupiedSlotIndex, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'InventoryBag_C_GetFirstOccupiedSlotIndex::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetFirstOccupiedSlotIndex, CallFunc_IsValid_ReturnValue) == 0x00001C, "Member 'InventoryBag_C_GetFirstOccupiedSlotIndex::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetFirstOccupiedSlotIndex, CallFunc_Less_IntInt_ReturnValue) == 0x00001D, "Member 'InventoryBag_C_GetFirstOccupiedSlotIndex::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(InventoryBag_C_GetFirstOccupiedSlotIndex, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'InventoryBag_C_GetFirstOccupiedSlotIndex::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

}

