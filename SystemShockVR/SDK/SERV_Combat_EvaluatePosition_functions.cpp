#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SERV_Combat_EvaluatePosition

#include "Basic.hpp"

#include "SERV_Combat_EvaluatePosition_classes.hpp"
#include "SERV_Combat_EvaluatePosition_parameters.hpp"


namespace SDK
{

// Function SERV_Combat_EvaluatePosition.SERV_Combat_EvaluatePosition_C.ExecuteUbergraph_SERV_Combat_EvaluatePosition
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USERV_Combat_EvaluatePosition_C::ExecuteUbergraph_SERV_Combat_EvaluatePosition(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SERV_Combat_EvaluatePosition_C", "ExecuteUbergraph_SERV_Combat_EvaluatePosition");

	Params::SERV_Combat_EvaluatePosition_C_ExecuteUbergraph_SERV_Combat_EvaluatePosition Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SERV_Combat_EvaluatePosition.SERV_Combat_EvaluatePosition_C.ReceiveActivationAI
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AAIController*                    OwnerController                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USERV_Combat_EvaluatePosition_C::ReceiveActivationAI(class AAIController* OwnerController, class APawn* ControlledPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SERV_Combat_EvaluatePosition_C", "ReceiveActivationAI");

	Params::SERV_Combat_EvaluatePosition_C_ReceiveActivationAI Parms{};

	Parms.OwnerController = OwnerController;
	Parms.ControlledPawn = ControlledPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SERV_Combat_EvaluatePosition.SERV_Combat_EvaluatePosition_C.ReceiveTickAI
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AAIController*                    OwnerController                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USERV_Combat_EvaluatePosition_C::ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SERV_Combat_EvaluatePosition_C", "ReceiveTickAI");

	Params::SERV_Combat_EvaluatePosition_C_ReceiveTickAI Parms{};

	Parms.OwnerController = OwnerController;
	Parms.ControlledPawn = ControlledPawn;
	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SERV_Combat_EvaluatePosition.SERV_Combat_EvaluatePosition_C.IsMoving
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void USERV_Combat_EvaluatePosition_C::IsMoving(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SERV_Combat_EvaluatePosition_C", "IsMoving");

	Params::SERV_Combat_EvaluatePosition_C_IsMoving Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function SERV_Combat_EvaluatePosition.SERV_Combat_EvaluatePosition_C.GetFrameDesireForNewNavTarget
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FrameDesire                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USERV_Combat_EvaluatePosition_C::GetFrameDesireForNewNavTarget(float DeltaSeconds, float* FrameDesire)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SERV_Combat_EvaluatePosition_C", "GetFrameDesireForNewNavTarget");

	Params::SERV_Combat_EvaluatePosition_C_GetFrameDesireForNewNavTarget Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);

	if (FrameDesire != nullptr)
		*FrameDesire = Parms.FrameDesire;
}


// Function SERV_Combat_EvaluatePosition.SERV_Combat_EvaluatePosition_C.GetFrameDesireToMoveCloser
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FrameDesire                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USERV_Combat_EvaluatePosition_C::GetFrameDesireToMoveCloser(float DeltaSeconds, float* FrameDesire)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SERV_Combat_EvaluatePosition_C", "GetFrameDesireToMoveCloser");

	Params::SERV_Combat_EvaluatePosition_C_GetFrameDesireToMoveCloser Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);

	if (FrameDesire != nullptr)
		*FrameDesire = Parms.FrameDesire;
}


// Function SERV_Combat_EvaluatePosition.SERV_Combat_EvaluatePosition_C.GetSkillTargetAgentLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          TargetLocation                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USERV_Combat_EvaluatePosition_C::GetSkillTargetAgentLocation(struct FVector* TargetLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SERV_Combat_EvaluatePosition_C", "GetSkillTargetAgentLocation");

	Params::SERV_Combat_EvaluatePosition_C_GetSkillTargetAgentLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TargetLocation != nullptr)
		*TargetLocation = std::move(Parms.TargetLocation);
}


// Function SERV_Combat_EvaluatePosition.SERV_Combat_EvaluatePosition_C.UpdateState
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USERV_Combat_EvaluatePosition_C::UpdateState(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SERV_Combat_EvaluatePosition_C", "UpdateState");

	Params::SERV_Combat_EvaluatePosition_C_UpdateState Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SERV_Combat_EvaluatePosition.SERV_Combat_EvaluatePosition_C.UpdateTargetLocation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USERV_Combat_EvaluatePosition_C::UpdateTargetLocation(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SERV_Combat_EvaluatePosition_C", "UpdateTargetLocation");

	Params::SERV_Combat_EvaluatePosition_C_UpdateTargetLocation Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SERV_Combat_EvaluatePosition.SERV_Combat_EvaluatePosition_C.InitializeMovement
// (Public, BlueprintCallable, BlueprintEvent)

void USERV_Combat_EvaluatePosition_C::InitializeMovement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SERV_Combat_EvaluatePosition_C", "InitializeMovement");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SERV_Combat_EvaluatePosition.SERV_Combat_EvaluatePosition_C.GetFrameDesireToMoveAway
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FrameDesire                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USERV_Combat_EvaluatePosition_C::GetFrameDesireToMoveAway(float DeltaSeconds, float* FrameDesire)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SERV_Combat_EvaluatePosition_C", "GetFrameDesireToMoveAway");

	Params::SERV_Combat_EvaluatePosition_C_GetFrameDesireToMoveAway Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);

	if (FrameDesire != nullptr)
		*FrameDesire = Parms.FrameDesire;
}


// Function SERV_Combat_EvaluatePosition.SERV_Combat_EvaluatePosition_C.GetDistanceToSkillTarget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Distance                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USERV_Combat_EvaluatePosition_C::GetDistanceToSkillTarget(float* Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SERV_Combat_EvaluatePosition_C", "GetDistanceToSkillTarget");

	Params::SERV_Combat_EvaluatePosition_C_GetDistanceToSkillTarget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Distance != nullptr)
		*Distance = Parms.Distance;
}


// Function SERV_Combat_EvaluatePosition.SERV_Combat_EvaluatePosition_C.GetDistanceToManeuverLocation
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Distance                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USERV_Combat_EvaluatePosition_C::GetDistanceToManeuverLocation(float* Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SERV_Combat_EvaluatePosition_C", "GetDistanceToManeuverLocation");

	Params::SERV_Combat_EvaluatePosition_C_GetDistanceToManeuverLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Distance != nullptr)
		*Distance = Parms.Distance;
}


// Function SERV_Combat_EvaluatePosition.SERV_Combat_EvaluatePosition_C.GetDistanceFromNavToSkillTarget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Distance                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USERV_Combat_EvaluatePosition_C::GetDistanceFromNavToSkillTarget(float* Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SERV_Combat_EvaluatePosition_C", "GetDistanceFromNavToSkillTarget");

	Params::SERV_Combat_EvaluatePosition_C_GetDistanceFromNavToSkillTarget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Distance != nullptr)
		*Distance = Parms.Distance;
}


// Function SERV_Combat_EvaluatePosition.SERV_Combat_EvaluatePosition_C.GetDistanceFromManeuverLocToSkillLoc
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Distance                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USERV_Combat_EvaluatePosition_C::GetDistanceFromManeuverLocToSkillLoc(float* Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SERV_Combat_EvaluatePosition_C", "GetDistanceFromManeuverLocToSkillLoc");

	Params::SERV_Combat_EvaluatePosition_C_GetDistanceFromManeuverLocToSkillLoc Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Distance != nullptr)
		*Distance = Parms.Distance;
}


// Function SERV_Combat_EvaluatePosition.SERV_Combat_EvaluatePosition_C.GetPawnTouchingDistance
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Distance                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USERV_Combat_EvaluatePosition_C::GetPawnTouchingDistance(float* Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SERV_Combat_EvaluatePosition_C", "GetPawnTouchingDistance");

	Params::SERV_Combat_EvaluatePosition_C_GetPawnTouchingDistance Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Distance != nullptr)
		*Distance = Parms.Distance;
}


// Function SERV_Combat_EvaluatePosition.SERV_Combat_EvaluatePosition_C.GetPerfectDistance
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Distance                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USERV_Combat_EvaluatePosition_C::GetPerfectDistance(float* Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SERV_Combat_EvaluatePosition_C", "GetPerfectDistance");

	Params::SERV_Combat_EvaluatePosition_C_GetPerfectDistance Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Distance != nullptr)
		*Distance = Parms.Distance;
}


// Function SERV_Combat_EvaluatePosition.SERV_Combat_EvaluatePosition_C.GetWalkDistance
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Distance                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USERV_Combat_EvaluatePosition_C::GetWalkDistance(float* Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SERV_Combat_EvaluatePosition_C", "GetWalkDistance");

	Params::SERV_Combat_EvaluatePosition_C_GetWalkDistance Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Distance != nullptr)
		*Distance = Parms.Distance;
}


// Function SERV_Combat_EvaluatePosition.SERV_Combat_EvaluatePosition_C.GetJogDistance
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Distance                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USERV_Combat_EvaluatePosition_C::GetJogDistance(float* Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SERV_Combat_EvaluatePosition_C", "GetJogDistance");

	Params::SERV_Combat_EvaluatePosition_C_GetJogDistance Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Distance != nullptr)
		*Distance = Parms.Distance;
}


// Function SERV_Combat_EvaluatePosition.SERV_Combat_EvaluatePosition_C.GetSprintDistance
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Distance                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USERV_Combat_EvaluatePosition_C::GetSprintDistance(float* Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SERV_Combat_EvaluatePosition_C", "GetSprintDistance");

	Params::SERV_Combat_EvaluatePosition_C_GetSprintDistance Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Distance != nullptr)
		*Distance = Parms.Distance;
}


// Function SERV_Combat_EvaluatePosition.SERV_Combat_EvaluatePosition_C.IsNavigatingDirectlyToSkillTarget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void USERV_Combat_EvaluatePosition_C::IsNavigatingDirectlyToSkillTarget(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SERV_Combat_EvaluatePosition_C", "IsNavigatingDirectlyToSkillTarget");

	Params::SERV_Combat_EvaluatePosition_C_IsNavigatingDirectlyToSkillTarget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function SERV_Combat_EvaluatePosition.SERV_Combat_EvaluatePosition_C.GetNavTargetLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USERV_Combat_EvaluatePosition_C::GetNavTargetLocation(struct FVector* Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SERV_Combat_EvaluatePosition_C", "GetNavTargetLocation");

	Params::SERV_Combat_EvaluatePosition_C_GetNavTargetLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);
}


// Function SERV_Combat_EvaluatePosition.SERV_Combat_EvaluatePosition_C.MakeGroundManeuverEQSQuery
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UVoxelSpatialNavigationQuery*     Query                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USERV_Combat_EvaluatePosition_C::MakeGroundManeuverEQSQuery(class UVoxelSpatialNavigationQuery** Query)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SERV_Combat_EvaluatePosition_C", "MakeGroundManeuverEQSQuery");

	Params::SERV_Combat_EvaluatePosition_C_MakeGroundManeuverEQSQuery Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Query != nullptr)
		*Query = Parms.Query;
}


// Function SERV_Combat_EvaluatePosition.SERV_Combat_EvaluatePosition_C.EVENT_OnManeuverQueryFinished
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bResult                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<struct FVector4>                 WeightedWorldLocations                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void USERV_Combat_EvaluatePosition_C::EVENT_OnManeuverQueryFinished(bool bResult, const TArray<struct FVector4>& WeightedWorldLocations)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SERV_Combat_EvaluatePosition_C", "EVENT_OnManeuverQueryFinished");

	Params::SERV_Combat_EvaluatePosition_C_EVENT_OnManeuverQueryFinished Parms{};

	Parms.bResult = bResult;
	Parms.WeightedWorldLocations = std::move(WeightedWorldLocations);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SERV_Combat_EvaluatePosition.SERV_Combat_EvaluatePosition_C.GetPerfectDistanceBufferRange
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   BufferRange                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USERV_Combat_EvaluatePosition_C::GetPerfectDistanceBufferRange(float* BufferRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SERV_Combat_EvaluatePosition_C", "GetPerfectDistanceBufferRange");

	Params::SERV_Combat_EvaluatePosition_C_GetPerfectDistanceBufferRange Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BufferRange != nullptr)
		*BufferRange = Parms.BufferRange;
}


// Function SERV_Combat_EvaluatePosition.SERV_Combat_EvaluatePosition_C.GetDirectionToManeuverTarget
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Direction                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USERV_Combat_EvaluatePosition_C::GetDirectionToManeuverTarget(struct FVector* Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SERV_Combat_EvaluatePosition_C", "GetDirectionToManeuverTarget");

	Params::SERV_Combat_EvaluatePosition_C_GetDirectionToManeuverTarget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Direction != nullptr)
		*Direction = std::move(Parms.Direction);
}


// Function SERV_Combat_EvaluatePosition.SERV_Combat_EvaluatePosition_C.GetDirectionToSkillTarget
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Direction                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USERV_Combat_EvaluatePosition_C::GetDirectionToSkillTarget(struct FVector* Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SERV_Combat_EvaluatePosition_C", "GetDirectionToSkillTarget");

	Params::SERV_Combat_EvaluatePosition_C_GetDirectionToSkillTarget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Direction != nullptr)
		*Direction = std::move(Parms.Direction);
}

}

