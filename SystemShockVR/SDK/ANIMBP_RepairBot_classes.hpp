#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ANIMBP_RepairBot

#include "Basic.hpp"

#include "AnimGraphRuntime_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "ENUM_DeathBlowType_structs.hpp"
#include "ENUM_Emotions_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ANIMBP_RepairBot.ANIMBP_RepairBot_C
// 0x03E0 (0x06A0 - 0x02C0)
class UANIMBP_RepairBot_C final : public UAnimInstance
{
public:
	uint8                                         Pad_2B8[0x8];                                      // 0x02B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x02C8(0x0030)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer;                    // 0x02F8(0x00E8)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x03E0(0x0048)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_1;                   // 0x0428(0x00A0)()
	struct FAnimNode_PoseSnapshot                 AnimGraphNode_PoseSnapshot;                        // 0x04C8(0x0090)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool;                     // 0x0558(0x00A0)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x05F8(0x0080)()
	float                                         MoveAngle;                                         // 0x0678(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoveSpeed;                                         // 0x067C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAlive;                                           // 0x0680(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_681[0x7];                                      // 0x0681(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          StunnedAnimSequence;                               // 0x0688(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseStunnedSequence;                                // 0x0690(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_ANIMBP_RepairBot(int32 EntryPoint);
	void AnimGraph(struct FPoseLink* AnimGraph_0);
	void SetAimTarget(class UOBJ_EnemyTarget_C* Target, bool* Result);
	void GetIdleOverrideSequence(class UAnimSequenceBase** IdleOverride);
	void SetIdleOverrideSequence(class UAnimSequenceBase* IdleOverride, bool* Result);
	void SetRelativeAimAngleOffset(float YawOffset, float PitchOffset, float Alpha, bool* Result);
	void GetRotation(struct FRotator* AnimRotationPerSecond, float* AnimRotationAlpha);
	void GetStance(ENUM_Emotions* Stance);
	void SetStance(ENUM_Emotions Stance, bool* Result);
	void SetCatatonic(bool State, bool* Result);
	void SetStandingTurn(float SignedAngleToTarget, bool IsStanding, bool* Result);
	void ReceiveDeathBlow(ENUM_DeathBlowType BodyPart, bool* Result);
	void ReceiveImpact(const struct FVector& Impulse, const struct FVector& ImpactLocation, const struct FVector& ImpactNormal, class FName BoneName, const class FString& DamageType, float DamageAmount, float FlinchTime, bool* Result);
	void SetIsAlive(bool IsAlive_0, bool* Result);
	void SetMovementParameters(const struct FVector& Velocity, const struct FRotator& Rotation, const struct FRotator& DesiredRotation, bool* Result);
	void SetLookAtAlpha(float Alpha, bool* Result);
	void SetLookAtLocation(const struct FVector& Location, bool* Result);
	void SetTravelMode(bool TravelModeOn, bool* Result);
	void GetAimTarget(class UOBJ_EnemyTarget_C** Target);
	void SetSprintEnabled(bool SprintEnabled, bool* Result);
	void SetStunnedSequence(class UAnimSequence* StunnedSequence, bool* Result);
	void IsStunned(bool* Result);
	void SetVoiceAmplitude(float VoiceAmplitude, bool* Result);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ANIMBP_RepairBot_C">();
	}
	static class UANIMBP_RepairBot_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UANIMBP_RepairBot_C>();
	}
};
static_assert(alignof(UANIMBP_RepairBot_C) == 0x000010, "Wrong alignment on UANIMBP_RepairBot_C");
static_assert(sizeof(UANIMBP_RepairBot_C) == 0x0006A0, "Wrong size on UANIMBP_RepairBot_C");
static_assert(offsetof(UANIMBP_RepairBot_C, UberGraphFrame) == 0x0002C0, "Member 'UANIMBP_RepairBot_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UANIMBP_RepairBot_C, AnimGraphNode_Root) == 0x0002C8, "Member 'UANIMBP_RepairBot_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UANIMBP_RepairBot_C, AnimGraphNode_BlendSpacePlayer) == 0x0002F8, "Member 'UANIMBP_RepairBot_C::AnimGraphNode_BlendSpacePlayer' has a wrong offset!");
static_assert(offsetof(UANIMBP_RepairBot_C, AnimGraphNode_Slot) == 0x0003E0, "Member 'UANIMBP_RepairBot_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UANIMBP_RepairBot_C, AnimGraphNode_BlendListByBool_1) == 0x000428, "Member 'UANIMBP_RepairBot_C::AnimGraphNode_BlendListByBool_1' has a wrong offset!");
static_assert(offsetof(UANIMBP_RepairBot_C, AnimGraphNode_PoseSnapshot) == 0x0004C8, "Member 'UANIMBP_RepairBot_C::AnimGraphNode_PoseSnapshot' has a wrong offset!");
static_assert(offsetof(UANIMBP_RepairBot_C, AnimGraphNode_BlendListByBool) == 0x000558, "Member 'UANIMBP_RepairBot_C::AnimGraphNode_BlendListByBool' has a wrong offset!");
static_assert(offsetof(UANIMBP_RepairBot_C, AnimGraphNode_SequencePlayer) == 0x0005F8, "Member 'UANIMBP_RepairBot_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UANIMBP_RepairBot_C, MoveAngle) == 0x000678, "Member 'UANIMBP_RepairBot_C::MoveAngle' has a wrong offset!");
static_assert(offsetof(UANIMBP_RepairBot_C, MoveSpeed) == 0x00067C, "Member 'UANIMBP_RepairBot_C::MoveSpeed' has a wrong offset!");
static_assert(offsetof(UANIMBP_RepairBot_C, IsAlive) == 0x000680, "Member 'UANIMBP_RepairBot_C::IsAlive' has a wrong offset!");
static_assert(offsetof(UANIMBP_RepairBot_C, StunnedAnimSequence) == 0x000688, "Member 'UANIMBP_RepairBot_C::StunnedAnimSequence' has a wrong offset!");
static_assert(offsetof(UANIMBP_RepairBot_C, UseStunnedSequence) == 0x000690, "Member 'UANIMBP_RepairBot_C::UseStunnedSequence' has a wrong offset!");

}

