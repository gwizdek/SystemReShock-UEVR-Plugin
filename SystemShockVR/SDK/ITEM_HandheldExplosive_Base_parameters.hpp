#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ITEM_HandheldExplosive_Base

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "ENUM_GameDifficulty_structs.hpp"
#include "STRUCT_WeaponMode_structs.hpp"


namespace SDK::Params
{

// Function ITEM_HandheldExplosive_Base.ITEM_HandheldExplosive_Base_C.ExplosiveCountChanged__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct ITEM_HandheldExplosive_Base_C_ExplosiveCountChanged__DelegateSignature final
{
public:
	class UITEM_Base_C*                           ExplosiveWeapon;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Count_0;                                           // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ITEM_HandheldExplosive_Base_C_ExplosiveCountChanged__DelegateSignature) == 0x000008, "Wrong alignment on ITEM_HandheldExplosive_Base_C_ExplosiveCountChanged__DelegateSignature");
static_assert(sizeof(ITEM_HandheldExplosive_Base_C_ExplosiveCountChanged__DelegateSignature) == 0x000010, "Wrong size on ITEM_HandheldExplosive_Base_C_ExplosiveCountChanged__DelegateSignature");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ExplosiveCountChanged__DelegateSignature, ExplosiveWeapon) == 0x000000, "Member 'ITEM_HandheldExplosive_Base_C_ExplosiveCountChanged__DelegateSignature::ExplosiveWeapon' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ExplosiveCountChanged__DelegateSignature, Count_0) == 0x000008, "Member 'ITEM_HandheldExplosive_Base_C_ExplosiveCountChanged__DelegateSignature::Count_0' has a wrong offset!");

// Function ITEM_HandheldExplosive_Base.ITEM_HandheldExplosive_Base_C.ExecuteUbergraph_ITEM_HandheldExplosive_Base
// 0x00C8 (0x00C8 - 0x0000)
struct ITEM_HandheldExplosive_Base_C_ExecuteUbergraph_ITEM_HandheldExplosive_Base final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate_1;            // 0x0014(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_CustomEvent_Loaded_3;                       // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable;                              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           K2Node_DynamicCast_AsAnim_Montage;                 // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_CustomEvent_Loaded_2;                       // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_1;                            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           K2Node_DynamicCast_AsAnim_Montage_1;               // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_CustomEvent_Loaded_1;                       // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_2;                            // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           K2Node_DynamicCast_AsAnim_Montage_2;               // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_CustomEvent_Loaded;                         // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_3;                            // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimComposite*                         K2Node_DynamicCast_AsAnim_Composite;               // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate_2;            // 0x00A4(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate_3;            // 0x00B4(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(ITEM_HandheldExplosive_Base_C_ExecuteUbergraph_ITEM_HandheldExplosive_Base) == 0x000008, "Wrong alignment on ITEM_HandheldExplosive_Base_C_ExecuteUbergraph_ITEM_HandheldExplosive_Base");
static_assert(sizeof(ITEM_HandheldExplosive_Base_C_ExecuteUbergraph_ITEM_HandheldExplosive_Base) == 0x0000C8, "Wrong size on ITEM_HandheldExplosive_Base_C_ExecuteUbergraph_ITEM_HandheldExplosive_Base");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ExecuteUbergraph_ITEM_HandheldExplosive_Base, EntryPoint) == 0x000000, "Member 'ITEM_HandheldExplosive_Base_C_ExecuteUbergraph_ITEM_HandheldExplosive_Base::EntryPoint' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ExecuteUbergraph_ITEM_HandheldExplosive_Base, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'ITEM_HandheldExplosive_Base_C_ExecuteUbergraph_ITEM_HandheldExplosive_Base::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ExecuteUbergraph_ITEM_HandheldExplosive_Base, K2Node_CreateDelegate_OutputDelegate_1) == 0x000014, "Member 'ITEM_HandheldExplosive_Base_C_ExecuteUbergraph_ITEM_HandheldExplosive_Base::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ExecuteUbergraph_ITEM_HandheldExplosive_Base, K2Node_CustomEvent_Loaded_3) == 0x000028, "Member 'ITEM_HandheldExplosive_Base_C_ExecuteUbergraph_ITEM_HandheldExplosive_Base::K2Node_CustomEvent_Loaded_3' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ExecuteUbergraph_ITEM_HandheldExplosive_Base, Temp_object_Variable) == 0x000030, "Member 'ITEM_HandheldExplosive_Base_C_ExecuteUbergraph_ITEM_HandheldExplosive_Base::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ExecuteUbergraph_ITEM_HandheldExplosive_Base, K2Node_DynamicCast_AsAnim_Montage) == 0x000038, "Member 'ITEM_HandheldExplosive_Base_C_ExecuteUbergraph_ITEM_HandheldExplosive_Base::K2Node_DynamicCast_AsAnim_Montage' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ExecuteUbergraph_ITEM_HandheldExplosive_Base, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'ITEM_HandheldExplosive_Base_C_ExecuteUbergraph_ITEM_HandheldExplosive_Base::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ExecuteUbergraph_ITEM_HandheldExplosive_Base, K2Node_CustomEvent_Loaded_2) == 0x000048, "Member 'ITEM_HandheldExplosive_Base_C_ExecuteUbergraph_ITEM_HandheldExplosive_Base::K2Node_CustomEvent_Loaded_2' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ExecuteUbergraph_ITEM_HandheldExplosive_Base, Temp_object_Variable_1) == 0x000050, "Member 'ITEM_HandheldExplosive_Base_C_ExecuteUbergraph_ITEM_HandheldExplosive_Base::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ExecuteUbergraph_ITEM_HandheldExplosive_Base, K2Node_DynamicCast_AsAnim_Montage_1) == 0x000058, "Member 'ITEM_HandheldExplosive_Base_C_ExecuteUbergraph_ITEM_HandheldExplosive_Base::K2Node_DynamicCast_AsAnim_Montage_1' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ExecuteUbergraph_ITEM_HandheldExplosive_Base, K2Node_DynamicCast_bSuccess_1) == 0x000060, "Member 'ITEM_HandheldExplosive_Base_C_ExecuteUbergraph_ITEM_HandheldExplosive_Base::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ExecuteUbergraph_ITEM_HandheldExplosive_Base, K2Node_CustomEvent_Loaded_1) == 0x000068, "Member 'ITEM_HandheldExplosive_Base_C_ExecuteUbergraph_ITEM_HandheldExplosive_Base::K2Node_CustomEvent_Loaded_1' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ExecuteUbergraph_ITEM_HandheldExplosive_Base, Temp_object_Variable_2) == 0x000070, "Member 'ITEM_HandheldExplosive_Base_C_ExecuteUbergraph_ITEM_HandheldExplosive_Base::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ExecuteUbergraph_ITEM_HandheldExplosive_Base, K2Node_DynamicCast_AsAnim_Montage_2) == 0x000078, "Member 'ITEM_HandheldExplosive_Base_C_ExecuteUbergraph_ITEM_HandheldExplosive_Base::K2Node_DynamicCast_AsAnim_Montage_2' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ExecuteUbergraph_ITEM_HandheldExplosive_Base, K2Node_DynamicCast_bSuccess_2) == 0x000080, "Member 'ITEM_HandheldExplosive_Base_C_ExecuteUbergraph_ITEM_HandheldExplosive_Base::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ExecuteUbergraph_ITEM_HandheldExplosive_Base, K2Node_CustomEvent_Loaded) == 0x000088, "Member 'ITEM_HandheldExplosive_Base_C_ExecuteUbergraph_ITEM_HandheldExplosive_Base::K2Node_CustomEvent_Loaded' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ExecuteUbergraph_ITEM_HandheldExplosive_Base, Temp_object_Variable_3) == 0x000090, "Member 'ITEM_HandheldExplosive_Base_C_ExecuteUbergraph_ITEM_HandheldExplosive_Base::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ExecuteUbergraph_ITEM_HandheldExplosive_Base, K2Node_DynamicCast_AsAnim_Composite) == 0x000098, "Member 'ITEM_HandheldExplosive_Base_C_ExecuteUbergraph_ITEM_HandheldExplosive_Base::K2Node_DynamicCast_AsAnim_Composite' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ExecuteUbergraph_ITEM_HandheldExplosive_Base, K2Node_DynamicCast_bSuccess_3) == 0x0000A0, "Member 'ITEM_HandheldExplosive_Base_C_ExecuteUbergraph_ITEM_HandheldExplosive_Base::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ExecuteUbergraph_ITEM_HandheldExplosive_Base, K2Node_CreateDelegate_OutputDelegate_2) == 0x0000A4, "Member 'ITEM_HandheldExplosive_Base_C_ExecuteUbergraph_ITEM_HandheldExplosive_Base::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ExecuteUbergraph_ITEM_HandheldExplosive_Base, K2Node_CreateDelegate_OutputDelegate_3) == 0x0000B4, "Member 'ITEM_HandheldExplosive_Base_C_ExecuteUbergraph_ITEM_HandheldExplosive_Base::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");

// Function ITEM_HandheldExplosive_Base.ITEM_HandheldExplosive_Base_C.OnLoaded_96417AC94DDC661C84B1E4954ECF6B32
// 0x0008 (0x0008 - 0x0000)
struct ITEM_HandheldExplosive_Base_C_OnLoaded_96417AC94DDC661C84B1E4954ECF6B32 final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ITEM_HandheldExplosive_Base_C_OnLoaded_96417AC94DDC661C84B1E4954ECF6B32) == 0x000008, "Wrong alignment on ITEM_HandheldExplosive_Base_C_OnLoaded_96417AC94DDC661C84B1E4954ECF6B32");
static_assert(sizeof(ITEM_HandheldExplosive_Base_C_OnLoaded_96417AC94DDC661C84B1E4954ECF6B32) == 0x000008, "Wrong size on ITEM_HandheldExplosive_Base_C_OnLoaded_96417AC94DDC661C84B1E4954ECF6B32");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_OnLoaded_96417AC94DDC661C84B1E4954ECF6B32, Loaded) == 0x000000, "Member 'ITEM_HandheldExplosive_Base_C_OnLoaded_96417AC94DDC661C84B1E4954ECF6B32::Loaded' has a wrong offset!");

// Function ITEM_HandheldExplosive_Base.ITEM_HandheldExplosive_Base_C.OnLoaded_308BA8074E3CAD8DAF0C8BB53922EEB2
// 0x0008 (0x0008 - 0x0000)
struct ITEM_HandheldExplosive_Base_C_OnLoaded_308BA8074E3CAD8DAF0C8BB53922EEB2 final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ITEM_HandheldExplosive_Base_C_OnLoaded_308BA8074E3CAD8DAF0C8BB53922EEB2) == 0x000008, "Wrong alignment on ITEM_HandheldExplosive_Base_C_OnLoaded_308BA8074E3CAD8DAF0C8BB53922EEB2");
static_assert(sizeof(ITEM_HandheldExplosive_Base_C_OnLoaded_308BA8074E3CAD8DAF0C8BB53922EEB2) == 0x000008, "Wrong size on ITEM_HandheldExplosive_Base_C_OnLoaded_308BA8074E3CAD8DAF0C8BB53922EEB2");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_OnLoaded_308BA8074E3CAD8DAF0C8BB53922EEB2, Loaded) == 0x000000, "Member 'ITEM_HandheldExplosive_Base_C_OnLoaded_308BA8074E3CAD8DAF0C8BB53922EEB2::Loaded' has a wrong offset!");

// Function ITEM_HandheldExplosive_Base.ITEM_HandheldExplosive_Base_C.OnLoaded_48F107AB4173F6C0C5BE7C84FBE53010
// 0x0008 (0x0008 - 0x0000)
struct ITEM_HandheldExplosive_Base_C_OnLoaded_48F107AB4173F6C0C5BE7C84FBE53010 final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ITEM_HandheldExplosive_Base_C_OnLoaded_48F107AB4173F6C0C5BE7C84FBE53010) == 0x000008, "Wrong alignment on ITEM_HandheldExplosive_Base_C_OnLoaded_48F107AB4173F6C0C5BE7C84FBE53010");
static_assert(sizeof(ITEM_HandheldExplosive_Base_C_OnLoaded_48F107AB4173F6C0C5BE7C84FBE53010) == 0x000008, "Wrong size on ITEM_HandheldExplosive_Base_C_OnLoaded_48F107AB4173F6C0C5BE7C84FBE53010");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_OnLoaded_48F107AB4173F6C0C5BE7C84FBE53010, Loaded) == 0x000000, "Member 'ITEM_HandheldExplosive_Base_C_OnLoaded_48F107AB4173F6C0C5BE7C84FBE53010::Loaded' has a wrong offset!");

// Function ITEM_HandheldExplosive_Base.ITEM_HandheldExplosive_Base_C.OnLoaded_AC8957D747F4B1E491AD66B72F6EA99C
// 0x0008 (0x0008 - 0x0000)
struct ITEM_HandheldExplosive_Base_C_OnLoaded_AC8957D747F4B1E491AD66B72F6EA99C final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ITEM_HandheldExplosive_Base_C_OnLoaded_AC8957D747F4B1E491AD66B72F6EA99C) == 0x000008, "Wrong alignment on ITEM_HandheldExplosive_Base_C_OnLoaded_AC8957D747F4B1E491AD66B72F6EA99C");
static_assert(sizeof(ITEM_HandheldExplosive_Base_C_OnLoaded_AC8957D747F4B1E491AD66B72F6EA99C) == 0x000008, "Wrong size on ITEM_HandheldExplosive_Base_C_OnLoaded_AC8957D747F4B1E491AD66B72F6EA99C");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_OnLoaded_AC8957D747F4B1E491AD66B72F6EA99C, Loaded) == 0x000000, "Member 'ITEM_HandheldExplosive_Base_C_OnLoaded_AC8957D747F4B1E491AD66B72F6EA99C::Loaded' has a wrong offset!");

// Function ITEM_HandheldExplosive_Base.ITEM_HandheldExplosive_Base_C.GetArmTimestamp
// 0x0004 (0x0004 - 0x0000)
struct ITEM_HandheldExplosive_Base_C_GetArmTimestamp final
{
public:
	float                                         Timestamp;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ITEM_HandheldExplosive_Base_C_GetArmTimestamp) == 0x000004, "Wrong alignment on ITEM_HandheldExplosive_Base_C_GetArmTimestamp");
static_assert(sizeof(ITEM_HandheldExplosive_Base_C_GetArmTimestamp) == 0x000004, "Wrong size on ITEM_HandheldExplosive_Base_C_GetArmTimestamp");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_GetArmTimestamp, Timestamp) == 0x000000, "Member 'ITEM_HandheldExplosive_Base_C_GetArmTimestamp::Timestamp' has a wrong offset!");

// Function ITEM_HandheldExplosive_Base.ITEM_HandheldExplosive_Base_C.GetArmedExplosiveItem
// 0x0020 (0x0020 - 0x0000)
struct ITEM_HandheldExplosive_Base_C_GetArmedExplosiveItem final
{
public:
	class UITEM_ExplosiveBase_C*                  Result;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_ConsumableBase_C*                 CallFunc_GetActiveConsumableItem_Result;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_ExplosiveBase_C*                  K2Node_DynamicCast_AsITEM_Explosive_Base;          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_HandheldExplosive_Base_C_GetArmedExplosiveItem) == 0x000008, "Wrong alignment on ITEM_HandheldExplosive_Base_C_GetArmedExplosiveItem");
static_assert(sizeof(ITEM_HandheldExplosive_Base_C_GetArmedExplosiveItem) == 0x000020, "Wrong size on ITEM_HandheldExplosive_Base_C_GetArmedExplosiveItem");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_GetArmedExplosiveItem, Result) == 0x000000, "Member 'ITEM_HandheldExplosive_Base_C_GetArmedExplosiveItem::Result' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_GetArmedExplosiveItem, CallFunc_GetActiveConsumableItem_Result) == 0x000008, "Member 'ITEM_HandheldExplosive_Base_C_GetArmedExplosiveItem::CallFunc_GetActiveConsumableItem_Result' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_GetArmedExplosiveItem, K2Node_DynamicCast_AsITEM_Explosive_Base) == 0x000010, "Member 'ITEM_HandheldExplosive_Base_C_GetArmedExplosiveItem::K2Node_DynamicCast_AsITEM_Explosive_Base' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_GetArmedExplosiveItem, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'ITEM_HandheldExplosive_Base_C_GetArmedExplosiveItem::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function ITEM_HandheldExplosive_Base.ITEM_HandheldExplosive_Base_C.GetElapsedTimeSinceExplosiveArmed
// 0x0010 (0x0010 - 0x0000)
struct ITEM_HandheldExplosive_Base_C_GetElapsedTimeSinceExplosiveArmed final
{
public:
	float                                         Result;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetPlayTimeInSeconds_ReturnValue;         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ITEM_HandheldExplosive_Base_C_GetElapsedTimeSinceExplosiveArmed) == 0x000004, "Wrong alignment on ITEM_HandheldExplosive_Base_C_GetElapsedTimeSinceExplosiveArmed");
static_assert(sizeof(ITEM_HandheldExplosive_Base_C_GetElapsedTimeSinceExplosiveArmed) == 0x000010, "Wrong size on ITEM_HandheldExplosive_Base_C_GetElapsedTimeSinceExplosiveArmed");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_GetElapsedTimeSinceExplosiveArmed, Result) == 0x000000, "Member 'ITEM_HandheldExplosive_Base_C_GetElapsedTimeSinceExplosiveArmed::Result' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_GetElapsedTimeSinceExplosiveArmed, CallFunc_GetPlayTimeInSeconds_ReturnValue) == 0x000004, "Member 'ITEM_HandheldExplosive_Base_C_GetElapsedTimeSinceExplosiveArmed::CallFunc_GetPlayTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_GetElapsedTimeSinceExplosiveArmed, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000008, "Member 'ITEM_HandheldExplosive_Base_C_GetElapsedTimeSinceExplosiveArmed::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_GetElapsedTimeSinceExplosiveArmed, CallFunc_FMax_ReturnValue) == 0x00000C, "Member 'ITEM_HandheldExplosive_Base_C_GetElapsedTimeSinceExplosiveArmed::CallFunc_FMax_ReturnValue' has a wrong offset!");

// Function ITEM_HandheldExplosive_Base.ITEM_HandheldExplosive_Base_C.IsThrowingExplosive
// 0x0090 (0x0090 - 0x0000)
struct ITEM_HandheldExplosive_Base_C_IsThrowingExplosive final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UAnimMontage>            CurrentMontageSoftRef;                             // 0x0008(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class UCharacterAction_C*                     CurrentAction;                                     // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_SystemShockCharacter_C*           OwnerCharacter;                                    // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharacterAction_C*                     CallFunc_GetCurrentAction_CurrentAction;           // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_SoftObjectReference_ReturnValue; // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_SoftObjectReference_ReturnValue_1; // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_SystemShockCharacter_C*           CallFunc_GetOwnerCharacter_Character;              // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           CallFunc_GetMontage_Result;                        // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimMontage>            CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue; // 0x0068(0x0028)(UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(ITEM_HandheldExplosive_Base_C_IsThrowingExplosive) == 0x000008, "Wrong alignment on ITEM_HandheldExplosive_Base_C_IsThrowingExplosive");
static_assert(sizeof(ITEM_HandheldExplosive_Base_C_IsThrowingExplosive) == 0x000090, "Wrong size on ITEM_HandheldExplosive_Base_C_IsThrowingExplosive");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_IsThrowingExplosive, Result) == 0x000000, "Member 'ITEM_HandheldExplosive_Base_C_IsThrowingExplosive::Result' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_IsThrowingExplosive, CurrentMontageSoftRef) == 0x000008, "Member 'ITEM_HandheldExplosive_Base_C_IsThrowingExplosive::CurrentMontageSoftRef' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_IsThrowingExplosive, CurrentAction) == 0x000030, "Member 'ITEM_HandheldExplosive_Base_C_IsThrowingExplosive::CurrentAction' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_IsThrowingExplosive, OwnerCharacter) == 0x000038, "Member 'ITEM_HandheldExplosive_Base_C_IsThrowingExplosive::OwnerCharacter' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_IsThrowingExplosive, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'ITEM_HandheldExplosive_Base_C_IsThrowingExplosive::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_IsThrowingExplosive, CallFunc_GetCurrentAction_CurrentAction) == 0x000048, "Member 'ITEM_HandheldExplosive_Base_C_IsThrowingExplosive::CallFunc_GetCurrentAction_CurrentAction' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_IsThrowingExplosive, CallFunc_EqualEqual_SoftObjectReference_ReturnValue) == 0x000050, "Member 'ITEM_HandheldExplosive_Base_C_IsThrowingExplosive::CallFunc_EqualEqual_SoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_IsThrowingExplosive, CallFunc_EqualEqual_SoftObjectReference_ReturnValue_1) == 0x000051, "Member 'ITEM_HandheldExplosive_Base_C_IsThrowingExplosive::CallFunc_EqualEqual_SoftObjectReference_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_IsThrowingExplosive, CallFunc_BooleanOR_ReturnValue) == 0x000052, "Member 'ITEM_HandheldExplosive_Base_C_IsThrowingExplosive::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_IsThrowingExplosive, CallFunc_IsValid_ReturnValue_1) == 0x000053, "Member 'ITEM_HandheldExplosive_Base_C_IsThrowingExplosive::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_IsThrowingExplosive, CallFunc_GetOwnerCharacter_Character) == 0x000058, "Member 'ITEM_HandheldExplosive_Base_C_IsThrowingExplosive::CallFunc_GetOwnerCharacter_Character' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_IsThrowingExplosive, CallFunc_GetMontage_Result) == 0x000060, "Member 'ITEM_HandheldExplosive_Base_C_IsThrowingExplosive::CallFunc_GetMontage_Result' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_IsThrowingExplosive, CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue) == 0x000068, "Member 'ITEM_HandheldExplosive_Base_C_IsThrowingExplosive::CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue' has a wrong offset!");

// Function ITEM_HandheldExplosive_Base.ITEM_HandheldExplosive_Base_C.IsArmingOrThrowingExplosive
// 0x0090 (0x0090 - 0x0000)
struct ITEM_HandheldExplosive_Base_C_IsArmingOrThrowingExplosive final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UAnimMontage>            CurrentMontageSoftRef;                             // 0x0008(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class UCharacterAction_C*                     CurrentAction;                                     // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_SoftObjectReference_ReturnValue; // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_SoftObjectReference_ReturnValue_1; // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_SoftObjectReference_ReturnValue_2; // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           CallFunc_GetMontage_Result;                        // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UAnimMontage>            CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue; // 0x0050(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	class APAWN_SystemShockCharacter_C*           CallFunc_GetOwnerCharacter_Character;              // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_82[0x6];                                       // 0x0082(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharacterAction_C*                     CallFunc_GetCurrentAction_CurrentAction;           // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ITEM_HandheldExplosive_Base_C_IsArmingOrThrowingExplosive) == 0x000008, "Wrong alignment on ITEM_HandheldExplosive_Base_C_IsArmingOrThrowingExplosive");
static_assert(sizeof(ITEM_HandheldExplosive_Base_C_IsArmingOrThrowingExplosive) == 0x000090, "Wrong size on ITEM_HandheldExplosive_Base_C_IsArmingOrThrowingExplosive");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_IsArmingOrThrowingExplosive, Result) == 0x000000, "Member 'ITEM_HandheldExplosive_Base_C_IsArmingOrThrowingExplosive::Result' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_IsArmingOrThrowingExplosive, CurrentMontageSoftRef) == 0x000008, "Member 'ITEM_HandheldExplosive_Base_C_IsArmingOrThrowingExplosive::CurrentMontageSoftRef' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_IsArmingOrThrowingExplosive, CurrentAction) == 0x000030, "Member 'ITEM_HandheldExplosive_Base_C_IsArmingOrThrowingExplosive::CurrentAction' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_IsArmingOrThrowingExplosive, CallFunc_IsValid_ReturnValue) == 0x000038, "Member 'ITEM_HandheldExplosive_Base_C_IsArmingOrThrowingExplosive::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_IsArmingOrThrowingExplosive, CallFunc_EqualEqual_SoftObjectReference_ReturnValue) == 0x000039, "Member 'ITEM_HandheldExplosive_Base_C_IsArmingOrThrowingExplosive::CallFunc_EqualEqual_SoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_IsArmingOrThrowingExplosive, CallFunc_EqualEqual_SoftObjectReference_ReturnValue_1) == 0x00003A, "Member 'ITEM_HandheldExplosive_Base_C_IsArmingOrThrowingExplosive::CallFunc_EqualEqual_SoftObjectReference_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_IsArmingOrThrowingExplosive, CallFunc_EqualEqual_SoftObjectReference_ReturnValue_2) == 0x00003B, "Member 'ITEM_HandheldExplosive_Base_C_IsArmingOrThrowingExplosive::CallFunc_EqualEqual_SoftObjectReference_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_IsArmingOrThrowingExplosive, CallFunc_BooleanOR_ReturnValue) == 0x00003C, "Member 'ITEM_HandheldExplosive_Base_C_IsArmingOrThrowingExplosive::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_IsArmingOrThrowingExplosive, CallFunc_GetMontage_Result) == 0x000040, "Member 'ITEM_HandheldExplosive_Base_C_IsArmingOrThrowingExplosive::CallFunc_GetMontage_Result' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_IsArmingOrThrowingExplosive, CallFunc_BooleanOR_ReturnValue_1) == 0x000048, "Member 'ITEM_HandheldExplosive_Base_C_IsArmingOrThrowingExplosive::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_IsArmingOrThrowingExplosive, CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue) == 0x000050, "Member 'ITEM_HandheldExplosive_Base_C_IsArmingOrThrowingExplosive::CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_IsArmingOrThrowingExplosive, CallFunc_GetOwnerCharacter_Character) == 0x000078, "Member 'ITEM_HandheldExplosive_Base_C_IsArmingOrThrowingExplosive::CallFunc_GetOwnerCharacter_Character' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_IsArmingOrThrowingExplosive, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000080, "Member 'ITEM_HandheldExplosive_Base_C_IsArmingOrThrowingExplosive::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_IsArmingOrThrowingExplosive, CallFunc_IsValid_ReturnValue_1) == 0x000081, "Member 'ITEM_HandheldExplosive_Base_C_IsArmingOrThrowingExplosive::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_IsArmingOrThrowingExplosive, CallFunc_GetCurrentAction_CurrentAction) == 0x000088, "Member 'ITEM_HandheldExplosive_Base_C_IsArmingOrThrowingExplosive::CallFunc_GetCurrentAction_CurrentAction' has a wrong offset!");

// Function ITEM_HandheldExplosive_Base.ITEM_HandheldExplosive_Base_C.TryArmExplosive
// 0x0058 (0x0058 - 0x0000)
struct ITEM_HandheldExplosive_Base_C_TryArmExplosive final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_ConsumableBase_C*                 CallFunc_GetBestSlottedItemToConsume_ConsumableItem; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_ExplosiveBase_C*                  CallFunc_GetArmedExplosiveItem_Result;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_SystemShockCharacter_C*           CallFunc_GetOwnerCharacter_Character;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 CallFunc_GetActionMeshComponent_SkeletalMeshComponent; // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetPlayTimeInSeconds_ReturnValue;         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IINTERF_ANIM_Hacker_C> K2Node_DynamicCast_AsINTERF_ANIM_Hacker;           // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetOverrideIdleSequence_Result;           // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_HandheldExplosive_Base_C_TryArmExplosive) == 0x000008, "Wrong alignment on ITEM_HandheldExplosive_Base_C_TryArmExplosive");
static_assert(sizeof(ITEM_HandheldExplosive_Base_C_TryArmExplosive) == 0x000058, "Wrong size on ITEM_HandheldExplosive_Base_C_TryArmExplosive");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryArmExplosive, Result) == 0x000000, "Member 'ITEM_HandheldExplosive_Base_C_TryArmExplosive::Result' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryArmExplosive, CallFunc_GetBestSlottedItemToConsume_ConsumableItem) == 0x000008, "Member 'ITEM_HandheldExplosive_Base_C_TryArmExplosive::CallFunc_GetBestSlottedItemToConsume_ConsumableItem' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryArmExplosive, CallFunc_GetArmedExplosiveItem_Result) == 0x000010, "Member 'ITEM_HandheldExplosive_Base_C_TryArmExplosive::CallFunc_GetArmedExplosiveItem_Result' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryArmExplosive, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'ITEM_HandheldExplosive_Base_C_TryArmExplosive::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryArmExplosive, CallFunc_IsValid_ReturnValue_1) == 0x000019, "Member 'ITEM_HandheldExplosive_Base_C_TryArmExplosive::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryArmExplosive, CallFunc_GetOwnerCharacter_Character) == 0x000020, "Member 'ITEM_HandheldExplosive_Base_C_TryArmExplosive::CallFunc_GetOwnerCharacter_Character' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryArmExplosive, CallFunc_GetActionMeshComponent_SkeletalMeshComponent) == 0x000028, "Member 'ITEM_HandheldExplosive_Base_C_TryArmExplosive::CallFunc_GetActionMeshComponent_SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryArmExplosive, CallFunc_GetPlayTimeInSeconds_ReturnValue) == 0x000030, "Member 'ITEM_HandheldExplosive_Base_C_TryArmExplosive::CallFunc_GetPlayTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryArmExplosive, CallFunc_GetAnimInstance_ReturnValue) == 0x000038, "Member 'ITEM_HandheldExplosive_Base_C_TryArmExplosive::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryArmExplosive, K2Node_DynamicCast_AsINTERF_ANIM_Hacker) == 0x000040, "Member 'ITEM_HandheldExplosive_Base_C_TryArmExplosive::K2Node_DynamicCast_AsINTERF_ANIM_Hacker' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryArmExplosive, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'ITEM_HandheldExplosive_Base_C_TryArmExplosive::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryArmExplosive, CallFunc_SetOverrideIdleSequence_Result) == 0x000051, "Member 'ITEM_HandheldExplosive_Base_C_TryArmExplosive::CallFunc_SetOverrideIdleSequence_Result' has a wrong offset!");

// Function ITEM_HandheldExplosive_Base.ITEM_HandheldExplosive_Base_C.ThrowExplosive
// 0x0350 (0x0350 - 0x0000)
struct ITEM_HandheldExplosive_Base_C_ThrowExplosive final
{
public:
	float                                         Speed;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_WeaponMode                     CurrentMode;                                       // 0x0008(0x0100)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class UITEM_ExplosiveBase_C*                  RemovedExplosiveItem;                              // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_ExplosiveBase_C*                  ArmedExplosiveItem;                                // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AExplosiveProjectile_Base_C*            SpawnedExplosive;                                  // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             SpawnTransform;                                    // 0x0120(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	class APAWN_Hacker_Simple_C*                  HackerPawn;                                        // 0x0150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UInventoryBag_C*                        CallFunc_GetBag_Result;                            // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_Base_C*                           CallFunc_RemoveItemCount_RemovedItem;              // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_ExplosiveBase_C*                  K2Node_DynamicCast_AsITEM_Explosive_Base;          // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_171[0x3];                                      // 0x0171(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetTotalConsumableItemCount_Result;       // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_179[0x7];                                      // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_ExplosiveBase_C*                  CallFunc_GetArmedExplosiveItem_Result;             // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetWeaponPropertyValueByType_Value;       // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetWeaponPropertyValueByType_Value_1;     // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_WeaponMode                     CallFunc_GetCurrentMode_Mode;                      // 0x0190(0x0100)(HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipped_Result;                        // 0x0290(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0291(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0292(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_293[0xD];                                      // 0x0293(0x000D)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetIdealSpawnTransform_Transform;         // 0x02A0(0x0030)(IsPlainOldData, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x02D0(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_CycleEquippedWeapon_Success;              // 0x02E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E1[0x7];                                      // 0x02E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CallFunc_GetActionMeshComponent_SkeletalMeshComponent; // 0x02E8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCharacterAction_C*                     CallFunc_GetCurrentAction_CurrentAction;           // 0x02F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x02F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0300(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_301[0x7];                                      // 0x0301(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IINTERF_ANIM_Hacker_C> K2Node_DynamicCast_AsINTERF_ANIM_Hacker;           // 0x0308(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0318(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetOverrideIdleSequence_Result;           // 0x0319(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31A[0x6];                                      // 0x031A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_SystemShockCharacter_C*           CallFunc_GetOwnerCharacter_Character;              // 0x0320(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 CallFunc_GetDisplayMeshComponent_MeshComponent;    // 0x0328(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_Hacker_Simple_C*                  K2Node_DynamicCast_AsPAWN_Hacker_Simple;           // 0x0330(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0338(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_339[0x7];                                      // 0x0339(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AExplosiveProjectile_Base_C*            CallFunc_SpawnExplosive_Result;                    // 0x0340(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ITEM_HandheldExplosive_Base_C_ThrowExplosive) == 0x000010, "Wrong alignment on ITEM_HandheldExplosive_Base_C_ThrowExplosive");
static_assert(sizeof(ITEM_HandheldExplosive_Base_C_ThrowExplosive) == 0x000350, "Wrong size on ITEM_HandheldExplosive_Base_C_ThrowExplosive");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ThrowExplosive, Speed) == 0x000000, "Member 'ITEM_HandheldExplosive_Base_C_ThrowExplosive::Speed' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ThrowExplosive, CurrentMode) == 0x000008, "Member 'ITEM_HandheldExplosive_Base_C_ThrowExplosive::CurrentMode' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ThrowExplosive, RemovedExplosiveItem) == 0x000108, "Member 'ITEM_HandheldExplosive_Base_C_ThrowExplosive::RemovedExplosiveItem' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ThrowExplosive, ArmedExplosiveItem) == 0x000110, "Member 'ITEM_HandheldExplosive_Base_C_ThrowExplosive::ArmedExplosiveItem' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ThrowExplosive, SpawnedExplosive) == 0x000118, "Member 'ITEM_HandheldExplosive_Base_C_ThrowExplosive::SpawnedExplosive' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ThrowExplosive, SpawnTransform) == 0x000120, "Member 'ITEM_HandheldExplosive_Base_C_ThrowExplosive::SpawnTransform' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ThrowExplosive, HackerPawn) == 0x000150, "Member 'ITEM_HandheldExplosive_Base_C_ThrowExplosive::HackerPawn' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ThrowExplosive, CallFunc_GetBag_Result) == 0x000158, "Member 'ITEM_HandheldExplosive_Base_C_ThrowExplosive::CallFunc_GetBag_Result' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ThrowExplosive, CallFunc_RemoveItemCount_RemovedItem) == 0x000160, "Member 'ITEM_HandheldExplosive_Base_C_ThrowExplosive::CallFunc_RemoveItemCount_RemovedItem' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ThrowExplosive, K2Node_DynamicCast_AsITEM_Explosive_Base) == 0x000168, "Member 'ITEM_HandheldExplosive_Base_C_ThrowExplosive::K2Node_DynamicCast_AsITEM_Explosive_Base' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ThrowExplosive, K2Node_DynamicCast_bSuccess) == 0x000170, "Member 'ITEM_HandheldExplosive_Base_C_ThrowExplosive::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ThrowExplosive, CallFunc_GetTotalConsumableItemCount_Result) == 0x000174, "Member 'ITEM_HandheldExplosive_Base_C_ThrowExplosive::CallFunc_GetTotalConsumableItemCount_Result' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ThrowExplosive, CallFunc_Greater_IntInt_ReturnValue) == 0x000178, "Member 'ITEM_HandheldExplosive_Base_C_ThrowExplosive::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ThrowExplosive, CallFunc_GetArmedExplosiveItem_Result) == 0x000180, "Member 'ITEM_HandheldExplosive_Base_C_ThrowExplosive::CallFunc_GetArmedExplosiveItem_Result' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ThrowExplosive, CallFunc_GetWeaponPropertyValueByType_Value) == 0x000188, "Member 'ITEM_HandheldExplosive_Base_C_ThrowExplosive::CallFunc_GetWeaponPropertyValueByType_Value' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ThrowExplosive, CallFunc_GetWeaponPropertyValueByType_Value_1) == 0x00018C, "Member 'ITEM_HandheldExplosive_Base_C_ThrowExplosive::CallFunc_GetWeaponPropertyValueByType_Value_1' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ThrowExplosive, CallFunc_GetCurrentMode_Mode) == 0x000190, "Member 'ITEM_HandheldExplosive_Base_C_ThrowExplosive::CallFunc_GetCurrentMode_Mode' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ThrowExplosive, CallFunc_IsEquipped_Result) == 0x000290, "Member 'ITEM_HandheldExplosive_Base_C_ThrowExplosive::CallFunc_IsEquipped_Result' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ThrowExplosive, CallFunc_Not_PreBool_ReturnValue) == 0x000291, "Member 'ITEM_HandheldExplosive_Base_C_ThrowExplosive::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ThrowExplosive, CallFunc_BooleanOR_ReturnValue) == 0x000292, "Member 'ITEM_HandheldExplosive_Base_C_ThrowExplosive::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ThrowExplosive, CallFunc_GetIdealSpawnTransform_Transform) == 0x0002A0, "Member 'ITEM_HandheldExplosive_Base_C_ThrowExplosive::CallFunc_GetIdealSpawnTransform_Transform' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ThrowExplosive, K2Node_CreateDelegate_OutputDelegate) == 0x0002D0, "Member 'ITEM_HandheldExplosive_Base_C_ThrowExplosive::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ThrowExplosive, CallFunc_CycleEquippedWeapon_Success) == 0x0002E0, "Member 'ITEM_HandheldExplosive_Base_C_ThrowExplosive::CallFunc_CycleEquippedWeapon_Success' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ThrowExplosive, CallFunc_GetActionMeshComponent_SkeletalMeshComponent) == 0x0002E8, "Member 'ITEM_HandheldExplosive_Base_C_ThrowExplosive::CallFunc_GetActionMeshComponent_SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ThrowExplosive, CallFunc_GetCurrentAction_CurrentAction) == 0x0002F0, "Member 'ITEM_HandheldExplosive_Base_C_ThrowExplosive::CallFunc_GetCurrentAction_CurrentAction' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ThrowExplosive, CallFunc_GetAnimInstance_ReturnValue) == 0x0002F8, "Member 'ITEM_HandheldExplosive_Base_C_ThrowExplosive::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ThrowExplosive, CallFunc_IsValid_ReturnValue) == 0x000300, "Member 'ITEM_HandheldExplosive_Base_C_ThrowExplosive::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ThrowExplosive, K2Node_DynamicCast_AsINTERF_ANIM_Hacker) == 0x000308, "Member 'ITEM_HandheldExplosive_Base_C_ThrowExplosive::K2Node_DynamicCast_AsINTERF_ANIM_Hacker' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ThrowExplosive, K2Node_DynamicCast_bSuccess_1) == 0x000318, "Member 'ITEM_HandheldExplosive_Base_C_ThrowExplosive::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ThrowExplosive, CallFunc_SetOverrideIdleSequence_Result) == 0x000319, "Member 'ITEM_HandheldExplosive_Base_C_ThrowExplosive::CallFunc_SetOverrideIdleSequence_Result' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ThrowExplosive, CallFunc_GetOwnerCharacter_Character) == 0x000320, "Member 'ITEM_HandheldExplosive_Base_C_ThrowExplosive::CallFunc_GetOwnerCharacter_Character' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ThrowExplosive, CallFunc_GetDisplayMeshComponent_MeshComponent) == 0x000328, "Member 'ITEM_HandheldExplosive_Base_C_ThrowExplosive::CallFunc_GetDisplayMeshComponent_MeshComponent' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ThrowExplosive, K2Node_DynamicCast_AsPAWN_Hacker_Simple) == 0x000330, "Member 'ITEM_HandheldExplosive_Base_C_ThrowExplosive::K2Node_DynamicCast_AsPAWN_Hacker_Simple' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ThrowExplosive, K2Node_DynamicCast_bSuccess_2) == 0x000338, "Member 'ITEM_HandheldExplosive_Base_C_ThrowExplosive::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ThrowExplosive, CallFunc_SpawnExplosive_Result) == 0x000340, "Member 'ITEM_HandheldExplosive_Base_C_ThrowExplosive::CallFunc_SpawnExplosive_Result' has a wrong offset!");

// Function ITEM_HandheldExplosive_Base.ITEM_HandheldExplosive_Base_C.EVENT_OnThrowFinished
// 0x0058 (0x0058 - 0x0000)
struct ITEM_HandheldExplosive_Base_C_EVENT_OnThrowFinished final
{
public:
	class APAWN_Hacker_Simple_C*                  HackerPawn;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	int32                                         CallFunc_GetTotalConsumableItemCount_Result;       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CallFunc_GetDisplayMeshComponent_MeshComponent;    // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipped_Result;                        // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMeshComponent*                         CallFunc_GetWeaponMeshComponent_Result;            // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEquipped_Result_1;                      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsWaitingToHolster_Result;                // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B[0x5];                                       // 0x002B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           CallFunc_GetDrawMontage_Montage;                   // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_SystemShockCharacter_C*           CallFunc_GetOwnerCharacter_Character;              // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_Hacker_Simple_C*                  K2Node_DynamicCast_AsPAWN_Hacker_Simple;           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharacterAction_C*                     CallFunc_TryBeginAction_Action;                    // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ITEM_HandheldExplosive_Base_C_EVENT_OnThrowFinished) == 0x000008, "Wrong alignment on ITEM_HandheldExplosive_Base_C_EVENT_OnThrowFinished");
static_assert(sizeof(ITEM_HandheldExplosive_Base_C_EVENT_OnThrowFinished) == 0x000058, "Wrong size on ITEM_HandheldExplosive_Base_C_EVENT_OnThrowFinished");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_EVENT_OnThrowFinished, HackerPawn) == 0x000000, "Member 'ITEM_HandheldExplosive_Base_C_EVENT_OnThrowFinished::HackerPawn' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_EVENT_OnThrowFinished, CallFunc_GetTotalConsumableItemCount_Result) == 0x000008, "Member 'ITEM_HandheldExplosive_Base_C_EVENT_OnThrowFinished::CallFunc_GetTotalConsumableItemCount_Result' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_EVENT_OnThrowFinished, CallFunc_Greater_IntInt_ReturnValue) == 0x00000C, "Member 'ITEM_HandheldExplosive_Base_C_EVENT_OnThrowFinished::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_EVENT_OnThrowFinished, CallFunc_GetDisplayMeshComponent_MeshComponent) == 0x000010, "Member 'ITEM_HandheldExplosive_Base_C_EVENT_OnThrowFinished::CallFunc_GetDisplayMeshComponent_MeshComponent' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_EVENT_OnThrowFinished, CallFunc_IsEquipped_Result) == 0x000018, "Member 'ITEM_HandheldExplosive_Base_C_EVENT_OnThrowFinished::CallFunc_IsEquipped_Result' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_EVENT_OnThrowFinished, CallFunc_GetWeaponMeshComponent_Result) == 0x000020, "Member 'ITEM_HandheldExplosive_Base_C_EVENT_OnThrowFinished::CallFunc_GetWeaponMeshComponent_Result' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_EVENT_OnThrowFinished, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'ITEM_HandheldExplosive_Base_C_EVENT_OnThrowFinished::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_EVENT_OnThrowFinished, CallFunc_IsEquipped_Result_1) == 0x000029, "Member 'ITEM_HandheldExplosive_Base_C_EVENT_OnThrowFinished::CallFunc_IsEquipped_Result_1' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_EVENT_OnThrowFinished, CallFunc_IsWaitingToHolster_Result) == 0x00002A, "Member 'ITEM_HandheldExplosive_Base_C_EVENT_OnThrowFinished::CallFunc_IsWaitingToHolster_Result' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_EVENT_OnThrowFinished, CallFunc_GetDrawMontage_Montage) == 0x000030, "Member 'ITEM_HandheldExplosive_Base_C_EVENT_OnThrowFinished::CallFunc_GetDrawMontage_Montage' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_EVENT_OnThrowFinished, CallFunc_GetOwnerCharacter_Character) == 0x000038, "Member 'ITEM_HandheldExplosive_Base_C_EVENT_OnThrowFinished::CallFunc_GetOwnerCharacter_Character' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_EVENT_OnThrowFinished, K2Node_DynamicCast_AsPAWN_Hacker_Simple) == 0x000040, "Member 'ITEM_HandheldExplosive_Base_C_EVENT_OnThrowFinished::K2Node_DynamicCast_AsPAWN_Hacker_Simple' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_EVENT_OnThrowFinished, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'ITEM_HandheldExplosive_Base_C_EVENT_OnThrowFinished::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_EVENT_OnThrowFinished, CallFunc_TryBeginAction_Action) == 0x000050, "Member 'ITEM_HandheldExplosive_Base_C_EVENT_OnThrowFinished::CallFunc_TryBeginAction_Action' has a wrong offset!");

// Function ITEM_HandheldExplosive_Base.ITEM_HandheldExplosive_Base_C.TryDisarmExplosive
// 0x0048 (0x0048 - 0x0000)
struct ITEM_HandheldExplosive_Base_C_TryDisarmExplosive final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_SystemShockCharacter_C*           CallFunc_GetOwnerCharacter_Character;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 CallFunc_GetActionMeshComponent_SkeletalMeshComponent; // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IINTERF_ANIM_Hacker_C> K2Node_DynamicCast_AsINTERF_ANIM_Hacker;           // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      CallFunc_GetOverrideIdleSequence_Result;           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_HandheldExplosive_Base_C_TryDisarmExplosive) == 0x000008, "Wrong alignment on ITEM_HandheldExplosive_Base_C_TryDisarmExplosive");
static_assert(sizeof(ITEM_HandheldExplosive_Base_C_TryDisarmExplosive) == 0x000048, "Wrong size on ITEM_HandheldExplosive_Base_C_TryDisarmExplosive");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryDisarmExplosive, Success) == 0x000000, "Member 'ITEM_HandheldExplosive_Base_C_TryDisarmExplosive::Success' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryDisarmExplosive, CallFunc_GetOwnerCharacter_Character) == 0x000008, "Member 'ITEM_HandheldExplosive_Base_C_TryDisarmExplosive::CallFunc_GetOwnerCharacter_Character' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryDisarmExplosive, CallFunc_GetActionMeshComponent_SkeletalMeshComponent) == 0x000010, "Member 'ITEM_HandheldExplosive_Base_C_TryDisarmExplosive::CallFunc_GetActionMeshComponent_SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryDisarmExplosive, CallFunc_GetAnimInstance_ReturnValue) == 0x000018, "Member 'ITEM_HandheldExplosive_Base_C_TryDisarmExplosive::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryDisarmExplosive, K2Node_DynamicCast_AsINTERF_ANIM_Hacker) == 0x000020, "Member 'ITEM_HandheldExplosive_Base_C_TryDisarmExplosive::K2Node_DynamicCast_AsINTERF_ANIM_Hacker' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryDisarmExplosive, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'ITEM_HandheldExplosive_Base_C_TryDisarmExplosive::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryDisarmExplosive, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000031, "Member 'ITEM_HandheldExplosive_Base_C_TryDisarmExplosive::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryDisarmExplosive, CallFunc_GetOverrideIdleSequence_Result) == 0x000038, "Member 'ITEM_HandheldExplosive_Base_C_TryDisarmExplosive::CallFunc_GetOverrideIdleSequence_Result' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryDisarmExplosive, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'ITEM_HandheldExplosive_Base_C_TryDisarmExplosive::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryDisarmExplosive, CallFunc_BooleanAND_ReturnValue) == 0x000041, "Member 'ITEM_HandheldExplosive_Base_C_TryDisarmExplosive::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function ITEM_HandheldExplosive_Base.ITEM_HandheldExplosive_Base_C.TryStartFuseTimer
// 0x0078 (0x0078 - 0x0000)
struct ITEM_HandheldExplosive_Base_C_TryStartFuseTimer final
{
public:
	float                                         ElapsedTimeSinceArmed;                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxFuseTime;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_K2_IsTimerActiveHandle_ReturnValue;       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0028(0x0008)(NoDestructor, HasGetValueTypeHash)
	class UClass*                                 K2Node_ClassDynamicCast_AsITEM_Explosive_Base;     // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_ClassDynamicCast_AsGrenade_Projectile_Base; // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess_1;                // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetPlayTimeInSeconds_ReturnValue;         // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ENUM_GameDifficulty                           CallFunc_GetDifficultyByType_Difficulty;           // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6A[0x2];                                       // 0x006A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_HandheldExplosive_Base_C_TryStartFuseTimer) == 0x000008, "Wrong alignment on ITEM_HandheldExplosive_Base_C_TryStartFuseTimer");
static_assert(sizeof(ITEM_HandheldExplosive_Base_C_TryStartFuseTimer) == 0x000078, "Wrong size on ITEM_HandheldExplosive_Base_C_TryStartFuseTimer");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryStartFuseTimer, ElapsedTimeSinceArmed) == 0x000000, "Member 'ITEM_HandheldExplosive_Base_C_TryStartFuseTimer::ElapsedTimeSinceArmed' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryStartFuseTimer, MaxFuseTime) == 0x000004, "Member 'ITEM_HandheldExplosive_Base_C_TryStartFuseTimer::MaxFuseTime' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryStartFuseTimer, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'ITEM_HandheldExplosive_Base_C_TryStartFuseTimer::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryStartFuseTimer, CallFunc_K2_IsTimerActiveHandle_ReturnValue) == 0x000018, "Member 'ITEM_HandheldExplosive_Base_C_TryStartFuseTimer::CallFunc_K2_IsTimerActiveHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryStartFuseTimer, CallFunc_Not_PreBool_ReturnValue) == 0x000019, "Member 'ITEM_HandheldExplosive_Base_C_TryStartFuseTimer::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryStartFuseTimer, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00001C, "Member 'ITEM_HandheldExplosive_Base_C_TryStartFuseTimer::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryStartFuseTimer, CallFunc_FMax_ReturnValue) == 0x000020, "Member 'ITEM_HandheldExplosive_Base_C_TryStartFuseTimer::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryStartFuseTimer, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000028, "Member 'ITEM_HandheldExplosive_Base_C_TryStartFuseTimer::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryStartFuseTimer, K2Node_ClassDynamicCast_AsITEM_Explosive_Base) == 0x000030, "Member 'ITEM_HandheldExplosive_Base_C_TryStartFuseTimer::K2Node_ClassDynamicCast_AsITEM_Explosive_Base' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryStartFuseTimer, K2Node_ClassDynamicCast_bSuccess) == 0x000038, "Member 'ITEM_HandheldExplosive_Base_C_TryStartFuseTimer::K2Node_ClassDynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryStartFuseTimer, K2Node_ClassDynamicCast_AsGrenade_Projectile_Base) == 0x000040, "Member 'ITEM_HandheldExplosive_Base_C_TryStartFuseTimer::K2Node_ClassDynamicCast_AsGrenade_Projectile_Base' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryStartFuseTimer, K2Node_ClassDynamicCast_bSuccess_1) == 0x000048, "Member 'ITEM_HandheldExplosive_Base_C_TryStartFuseTimer::K2Node_ClassDynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryStartFuseTimer, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000049, "Member 'ITEM_HandheldExplosive_Base_C_TryStartFuseTimer::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryStartFuseTimer, CallFunc_GetGameInstance_ReturnValue) == 0x000050, "Member 'ITEM_HandheldExplosive_Base_C_TryStartFuseTimer::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryStartFuseTimer, CallFunc_GetPlayTimeInSeconds_ReturnValue) == 0x000058, "Member 'ITEM_HandheldExplosive_Base_C_TryStartFuseTimer::CallFunc_GetPlayTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryStartFuseTimer, K2Node_DynamicCast_AsGI_Single_Player) == 0x000060, "Member 'ITEM_HandheldExplosive_Base_C_TryStartFuseTimer::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryStartFuseTimer, K2Node_DynamicCast_bSuccess) == 0x000068, "Member 'ITEM_HandheldExplosive_Base_C_TryStartFuseTimer::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryStartFuseTimer, CallFunc_GetDifficultyByType_Difficulty) == 0x000069, "Member 'ITEM_HandheldExplosive_Base_C_TryStartFuseTimer::CallFunc_GetDifficultyByType_Difficulty' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryStartFuseTimer, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x00006C, "Member 'ITEM_HandheldExplosive_Base_C_TryStartFuseTimer::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryStartFuseTimer, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000070, "Member 'ITEM_HandheldExplosive_Base_C_TryStartFuseTimer::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function ITEM_HandheldExplosive_Base.ITEM_HandheldExplosive_Base_C.LaunchExplosiveFromCamera
// 0x0100 (0x0100 - 0x0000)
struct ITEM_HandheldExplosive_Base_C_LaunchExplosiveFromCamera final
{
public:
	class UCameraComponent*                       CameraComponent;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AExplosiveProjectile_Base_C*            ExplosiveProjectile;                               // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UITEM_ExplosiveBase_C*                  RemovedExplosiveItem;                              // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ThrowDirection;                                    // 0x001C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_GetExplosivePhysicsComponent_PhysicsComponent; // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0030(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetYawPitchFromVector_Yaw;                // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetYawPitchFromVector_Pitch;              // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue_1;           // 0x0098(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x00A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x00B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x00D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetYawPitchFromVector_Yaw_1;              // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetYawPitchFromVector_Pitch_1;            // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue_2;           // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ITEM_HandheldExplosive_Base_C_LaunchExplosiveFromCamera) == 0x000010, "Wrong alignment on ITEM_HandheldExplosive_Base_C_LaunchExplosiveFromCamera");
static_assert(sizeof(ITEM_HandheldExplosive_Base_C_LaunchExplosiveFromCamera) == 0x000100, "Wrong size on ITEM_HandheldExplosive_Base_C_LaunchExplosiveFromCamera");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_LaunchExplosiveFromCamera, CameraComponent) == 0x000000, "Member 'ITEM_HandheldExplosive_Base_C_LaunchExplosiveFromCamera::CameraComponent' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_LaunchExplosiveFromCamera, ExplosiveProjectile) == 0x000008, "Member 'ITEM_HandheldExplosive_Base_C_LaunchExplosiveFromCamera::ExplosiveProjectile' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_LaunchExplosiveFromCamera, RemovedExplosiveItem) == 0x000010, "Member 'ITEM_HandheldExplosive_Base_C_LaunchExplosiveFromCamera::RemovedExplosiveItem' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_LaunchExplosiveFromCamera, Speed) == 0x000018, "Member 'ITEM_HandheldExplosive_Base_C_LaunchExplosiveFromCamera::Speed' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_LaunchExplosiveFromCamera, ThrowDirection) == 0x00001C, "Member 'ITEM_HandheldExplosive_Base_C_LaunchExplosiveFromCamera::ThrowDirection' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_LaunchExplosiveFromCamera, CallFunc_GetExplosivePhysicsComponent_PhysicsComponent) == 0x000028, "Member 'ITEM_HandheldExplosive_Base_C_LaunchExplosiveFromCamera::CallFunc_GetExplosivePhysicsComponent_PhysicsComponent' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_LaunchExplosiveFromCamera, CallFunc_GetTransform_ReturnValue) == 0x000030, "Member 'ITEM_HandheldExplosive_Base_C_LaunchExplosiveFromCamera::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_LaunchExplosiveFromCamera, CallFunc_BreakTransform_Location) == 0x000060, "Member 'ITEM_HandheldExplosive_Base_C_LaunchExplosiveFromCamera::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_LaunchExplosiveFromCamera, CallFunc_BreakTransform_Rotation) == 0x00006C, "Member 'ITEM_HandheldExplosive_Base_C_LaunchExplosiveFromCamera::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_LaunchExplosiveFromCamera, CallFunc_BreakTransform_Scale) == 0x000078, "Member 'ITEM_HandheldExplosive_Base_C_LaunchExplosiveFromCamera::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_LaunchExplosiveFromCamera, CallFunc_GetForwardVector_ReturnValue) == 0x000084, "Member 'ITEM_HandheldExplosive_Base_C_LaunchExplosiveFromCamera::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_LaunchExplosiveFromCamera, CallFunc_GetYawPitchFromVector_Yaw) == 0x000090, "Member 'ITEM_HandheldExplosive_Base_C_LaunchExplosiveFromCamera::CallFunc_GetYawPitchFromVector_Yaw' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_LaunchExplosiveFromCamera, CallFunc_GetYawPitchFromVector_Pitch) == 0x000094, "Member 'ITEM_HandheldExplosive_Base_C_LaunchExplosiveFromCamera::CallFunc_GetYawPitchFromVector_Pitch' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_LaunchExplosiveFromCamera, CallFunc_GetForwardVector_ReturnValue_1) == 0x000098, "Member 'ITEM_HandheldExplosive_Base_C_LaunchExplosiveFromCamera::CallFunc_GetForwardVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_LaunchExplosiveFromCamera, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x0000A4, "Member 'ITEM_HandheldExplosive_Base_C_LaunchExplosiveFromCamera::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_LaunchExplosiveFromCamera, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0000B0, "Member 'ITEM_HandheldExplosive_Base_C_LaunchExplosiveFromCamera::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_LaunchExplosiveFromCamera, CallFunc_Add_VectorVector_ReturnValue) == 0x0000BC, "Member 'ITEM_HandheldExplosive_Base_C_LaunchExplosiveFromCamera::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_LaunchExplosiveFromCamera, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000C8, "Member 'ITEM_HandheldExplosive_Base_C_LaunchExplosiveFromCamera::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_LaunchExplosiveFromCamera, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x0000D4, "Member 'ITEM_HandheldExplosive_Base_C_LaunchExplosiveFromCamera::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_LaunchExplosiveFromCamera, CallFunc_GetYawPitchFromVector_Yaw_1) == 0x0000E0, "Member 'ITEM_HandheldExplosive_Base_C_LaunchExplosiveFromCamera::CallFunc_GetYawPitchFromVector_Yaw_1' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_LaunchExplosiveFromCamera, CallFunc_GetYawPitchFromVector_Pitch_1) == 0x0000E4, "Member 'ITEM_HandheldExplosive_Base_C_LaunchExplosiveFromCamera::CallFunc_GetYawPitchFromVector_Pitch_1' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_LaunchExplosiveFromCamera, CallFunc_MakeRotator_ReturnValue) == 0x0000E8, "Member 'ITEM_HandheldExplosive_Base_C_LaunchExplosiveFromCamera::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_LaunchExplosiveFromCamera, CallFunc_GetForwardVector_ReturnValue_2) == 0x0000F4, "Member 'ITEM_HandheldExplosive_Base_C_LaunchExplosiveFromCamera::CallFunc_GetForwardVector_ReturnValue_2' has a wrong offset!");

// Function ITEM_HandheldExplosive_Base.ITEM_HandheldExplosive_Base_C.EVENT_OnFuseTimeExpired
// 0x0001 (0x0001 - 0x0000)
struct ITEM_HandheldExplosive_Base_C_EVENT_OnFuseTimeExpired final
{
public:
	bool                                          CallFunc_Deactivate_Result;                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_HandheldExplosive_Base_C_EVENT_OnFuseTimeExpired) == 0x000001, "Wrong alignment on ITEM_HandheldExplosive_Base_C_EVENT_OnFuseTimeExpired");
static_assert(sizeof(ITEM_HandheldExplosive_Base_C_EVENT_OnFuseTimeExpired) == 0x000001, "Wrong size on ITEM_HandheldExplosive_Base_C_EVENT_OnFuseTimeExpired");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_EVENT_OnFuseTimeExpired, CallFunc_Deactivate_Result) == 0x000000, "Member 'ITEM_HandheldExplosive_Base_C_EVENT_OnFuseTimeExpired::CallFunc_Deactivate_Result' has a wrong offset!");

// Function ITEM_HandheldExplosive_Base.ITEM_HandheldExplosive_Base_C.ReceiveAnimationMessage
// 0x0038 (0x0038 - 0x0000)
struct ITEM_HandheldExplosive_Base_C_ReceiveAnimationMessage final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_ExplosiveBase_C*                  CallFunc_GetArmedExplosiveItem_Result;             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ReceiveAnimationMessage_Result;           // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_ExplosiveBase_C*                  CallFunc_GetArmedExplosiveItem_Result_1;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryArmExplosive_Result;                   // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue;            // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue_1;          // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue_2;          // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_HandheldExplosive_Base_C_ReceiveAnimationMessage) == 0x000008, "Wrong alignment on ITEM_HandheldExplosive_Base_C_ReceiveAnimationMessage");
static_assert(sizeof(ITEM_HandheldExplosive_Base_C_ReceiveAnimationMessage) == 0x000038, "Wrong size on ITEM_HandheldExplosive_Base_C_ReceiveAnimationMessage");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ReceiveAnimationMessage, Message) == 0x000000, "Member 'ITEM_HandheldExplosive_Base_C_ReceiveAnimationMessage::Message' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ReceiveAnimationMessage, Result) == 0x000010, "Member 'ITEM_HandheldExplosive_Base_C_ReceiveAnimationMessage::Result' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ReceiveAnimationMessage, CallFunc_GetArmedExplosiveItem_Result) == 0x000018, "Member 'ITEM_HandheldExplosive_Base_C_ReceiveAnimationMessage::CallFunc_GetArmedExplosiveItem_Result' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ReceiveAnimationMessage, CallFunc_ReceiveAnimationMessage_Result) == 0x000020, "Member 'ITEM_HandheldExplosive_Base_C_ReceiveAnimationMessage::CallFunc_ReceiveAnimationMessage_Result' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ReceiveAnimationMessage, CallFunc_IsValid_ReturnValue) == 0x000021, "Member 'ITEM_HandheldExplosive_Base_C_ReceiveAnimationMessage::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ReceiveAnimationMessage, CallFunc_GetArmedExplosiveItem_Result_1) == 0x000028, "Member 'ITEM_HandheldExplosive_Base_C_ReceiveAnimationMessage::CallFunc_GetArmedExplosiveItem_Result_1' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ReceiveAnimationMessage, CallFunc_IsValid_ReturnValue_1) == 0x000030, "Member 'ITEM_HandheldExplosive_Base_C_ReceiveAnimationMessage::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ReceiveAnimationMessage, CallFunc_TryArmExplosive_Result) == 0x000031, "Member 'ITEM_HandheldExplosive_Base_C_ReceiveAnimationMessage::CallFunc_TryArmExplosive_Result' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ReceiveAnimationMessage, CallFunc_EqualEqual_StrStr_ReturnValue) == 0x000032, "Member 'ITEM_HandheldExplosive_Base_C_ReceiveAnimationMessage::CallFunc_EqualEqual_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ReceiveAnimationMessage, CallFunc_EqualEqual_StrStr_ReturnValue_1) == 0x000033, "Member 'ITEM_HandheldExplosive_Base_C_ReceiveAnimationMessage::CallFunc_EqualEqual_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_ReceiveAnimationMessage, CallFunc_EqualEqual_StrStr_ReturnValue_2) == 0x000034, "Member 'ITEM_HandheldExplosive_Base_C_ReceiveAnimationMessage::CallFunc_EqualEqual_StrStr_ReturnValue_2' has a wrong offset!");

// Function ITEM_HandheldExplosive_Base.ITEM_HandheldExplosive_Base_C.TryBecomeActivatableImmediately
// 0x00A0 (0x00A0 - 0x0000)
struct ITEM_HandheldExplosive_Base_C_TryBecomeActivatableImmediately final
{
public:
	bool                                          ShowImmediately;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Result;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_SystemShockCharacter_C*           CharacterOwner;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TryBecomeActivatableImmediately_Result;   // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharacterAction_C*                     CallFunc_GetCurrentAction_CurrentAction;           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Deactivate_Result;                        // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CallFunc_GetActionMeshComponent_SkeletalMeshComponent; // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IINTERF_ANIM_Hacker_C> K2Node_DynamicCast_AsINTERF_ANIM_Hacker;           // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_SystemShockCharacter_C*           CallFunc_GetOwnerCharacter_Character;              // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCharacterAction_C*                     CallFunc_GetCurrentAction_CurrentAction_1;         // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_LoadAsset_Blocking_ReturnValue;           // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimComposite*                         K2Node_DynamicCast_AsAnim_Composite;               // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsThrowingExplosive_Result;               // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Deactivate_Result_1;                      // 0x007A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B[0x5];                                       // 0x007B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_ConsumableBase_C*                 CallFunc_GetBestSlottedItemToConsume_ConsumableItem; // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetOverrideIdleSequence_Result;           // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8A[0x2];                                       // 0x008A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x008C(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_HandheldExplosive_Base_C_TryBecomeActivatableImmediately) == 0x000008, "Wrong alignment on ITEM_HandheldExplosive_Base_C_TryBecomeActivatableImmediately");
static_assert(sizeof(ITEM_HandheldExplosive_Base_C_TryBecomeActivatableImmediately) == 0x0000A0, "Wrong size on ITEM_HandheldExplosive_Base_C_TryBecomeActivatableImmediately");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryBecomeActivatableImmediately, ShowImmediately) == 0x000000, "Member 'ITEM_HandheldExplosive_Base_C_TryBecomeActivatableImmediately::ShowImmediately' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryBecomeActivatableImmediately, Result) == 0x000001, "Member 'ITEM_HandheldExplosive_Base_C_TryBecomeActivatableImmediately::Result' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryBecomeActivatableImmediately, CharacterOwner) == 0x000008, "Member 'ITEM_HandheldExplosive_Base_C_TryBecomeActivatableImmediately::CharacterOwner' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryBecomeActivatableImmediately, CallFunc_TryBecomeActivatableImmediately_Result) == 0x000010, "Member 'ITEM_HandheldExplosive_Base_C_TryBecomeActivatableImmediately::CallFunc_TryBecomeActivatableImmediately_Result' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryBecomeActivatableImmediately, CallFunc_GetCurrentAction_CurrentAction) == 0x000018, "Member 'ITEM_HandheldExplosive_Base_C_TryBecomeActivatableImmediately::CallFunc_GetCurrentAction_CurrentAction' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryBecomeActivatableImmediately, CallFunc_Deactivate_Result) == 0x000020, "Member 'ITEM_HandheldExplosive_Base_C_TryBecomeActivatableImmediately::CallFunc_Deactivate_Result' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryBecomeActivatableImmediately, CallFunc_IsValid_ReturnValue) == 0x000021, "Member 'ITEM_HandheldExplosive_Base_C_TryBecomeActivatableImmediately::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryBecomeActivatableImmediately, CallFunc_Not_PreBool_ReturnValue) == 0x000022, "Member 'ITEM_HandheldExplosive_Base_C_TryBecomeActivatableImmediately::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryBecomeActivatableImmediately, CallFunc_GetActionMeshComponent_SkeletalMeshComponent) == 0x000028, "Member 'ITEM_HandheldExplosive_Base_C_TryBecomeActivatableImmediately::CallFunc_GetActionMeshComponent_SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryBecomeActivatableImmediately, CallFunc_GetAnimInstance_ReturnValue) == 0x000030, "Member 'ITEM_HandheldExplosive_Base_C_TryBecomeActivatableImmediately::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryBecomeActivatableImmediately, K2Node_DynamicCast_AsINTERF_ANIM_Hacker) == 0x000038, "Member 'ITEM_HandheldExplosive_Base_C_TryBecomeActivatableImmediately::K2Node_DynamicCast_AsINTERF_ANIM_Hacker' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryBecomeActivatableImmediately, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'ITEM_HandheldExplosive_Base_C_TryBecomeActivatableImmediately::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryBecomeActivatableImmediately, CallFunc_GetOwnerCharacter_Character) == 0x000050, "Member 'ITEM_HandheldExplosive_Base_C_TryBecomeActivatableImmediately::CallFunc_GetOwnerCharacter_Character' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryBecomeActivatableImmediately, CallFunc_GetCurrentAction_CurrentAction_1) == 0x000058, "Member 'ITEM_HandheldExplosive_Base_C_TryBecomeActivatableImmediately::CallFunc_GetCurrentAction_CurrentAction_1' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryBecomeActivatableImmediately, CallFunc_LoadAsset_Blocking_ReturnValue) == 0x000060, "Member 'ITEM_HandheldExplosive_Base_C_TryBecomeActivatableImmediately::CallFunc_LoadAsset_Blocking_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryBecomeActivatableImmediately, CallFunc_IsValid_ReturnValue_1) == 0x000068, "Member 'ITEM_HandheldExplosive_Base_C_TryBecomeActivatableImmediately::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryBecomeActivatableImmediately, K2Node_DynamicCast_AsAnim_Composite) == 0x000070, "Member 'ITEM_HandheldExplosive_Base_C_TryBecomeActivatableImmediately::K2Node_DynamicCast_AsAnim_Composite' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryBecomeActivatableImmediately, K2Node_DynamicCast_bSuccess_1) == 0x000078, "Member 'ITEM_HandheldExplosive_Base_C_TryBecomeActivatableImmediately::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryBecomeActivatableImmediately, CallFunc_IsThrowingExplosive_Result) == 0x000079, "Member 'ITEM_HandheldExplosive_Base_C_TryBecomeActivatableImmediately::CallFunc_IsThrowingExplosive_Result' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryBecomeActivatableImmediately, CallFunc_Deactivate_Result_1) == 0x00007A, "Member 'ITEM_HandheldExplosive_Base_C_TryBecomeActivatableImmediately::CallFunc_Deactivate_Result_1' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryBecomeActivatableImmediately, CallFunc_GetBestSlottedItemToConsume_ConsumableItem) == 0x000080, "Member 'ITEM_HandheldExplosive_Base_C_TryBecomeActivatableImmediately::CallFunc_GetBestSlottedItemToConsume_ConsumableItem' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryBecomeActivatableImmediately, CallFunc_SetOverrideIdleSequence_Result) == 0x000088, "Member 'ITEM_HandheldExplosive_Base_C_TryBecomeActivatableImmediately::CallFunc_SetOverrideIdleSequence_Result' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryBecomeActivatableImmediately, CallFunc_IsValid_ReturnValue_2) == 0x000089, "Member 'ITEM_HandheldExplosive_Base_C_TryBecomeActivatableImmediately::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryBecomeActivatableImmediately, K2Node_CreateDelegate_OutputDelegate) == 0x00008C, "Member 'ITEM_HandheldExplosive_Base_C_TryBecomeActivatableImmediately::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_TryBecomeActivatableImmediately, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00009C, "Member 'ITEM_HandheldExplosive_Base_C_TryBecomeActivatableImmediately::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function ITEM_HandheldExplosive_Base.ITEM_HandheldExplosive_Base_C.OnBecomeUnactivatable
// 0x0003 (0x0003 - 0x0000)
struct ITEM_HandheldExplosive_Base_C_OnBecomeUnactivatable final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryDisarmExplosive_Success;               // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnBecomeUnactivatable_Result;             // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_HandheldExplosive_Base_C_OnBecomeUnactivatable) == 0x000001, "Wrong alignment on ITEM_HandheldExplosive_Base_C_OnBecomeUnactivatable");
static_assert(sizeof(ITEM_HandheldExplosive_Base_C_OnBecomeUnactivatable) == 0x000003, "Wrong size on ITEM_HandheldExplosive_Base_C_OnBecomeUnactivatable");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_OnBecomeUnactivatable, Result) == 0x000000, "Member 'ITEM_HandheldExplosive_Base_C_OnBecomeUnactivatable::Result' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_OnBecomeUnactivatable, CallFunc_TryDisarmExplosive_Success) == 0x000001, "Member 'ITEM_HandheldExplosive_Base_C_OnBecomeUnactivatable::CallFunc_TryDisarmExplosive_Success' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_OnBecomeUnactivatable, CallFunc_OnBecomeUnactivatable_Result) == 0x000002, "Member 'ITEM_HandheldExplosive_Base_C_OnBecomeUnactivatable::CallFunc_OnBecomeUnactivatable_Result' has a wrong offset!");

// Function ITEM_HandheldExplosive_Base.ITEM_HandheldExplosive_Base_C.Activate
// 0x0028 (0x0028 - 0x0000)
struct ITEM_HandheldExplosive_Base_C_Activate final
{
public:
	class APAWN_SystemShockCharacter_C*           Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetTotalConsumableItemCount_Result;       // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Activate_Result;                          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsArmingOrThrowingExplosive_Result;       // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_SystemShockCharacter_C*           CallFunc_GetOwnerCharacter_Character;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_HandheldExplosive_Base_C_Activate) == 0x000008, "Wrong alignment on ITEM_HandheldExplosive_Base_C_Activate");
static_assert(sizeof(ITEM_HandheldExplosive_Base_C_Activate) == 0x000028, "Wrong size on ITEM_HandheldExplosive_Base_C_Activate");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_Activate, Character) == 0x000000, "Member 'ITEM_HandheldExplosive_Base_C_Activate::Character' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_Activate, Result) == 0x000008, "Member 'ITEM_HandheldExplosive_Base_C_Activate::Result' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_Activate, CallFunc_GetTotalConsumableItemCount_Result) == 0x00000C, "Member 'ITEM_HandheldExplosive_Base_C_Activate::CallFunc_GetTotalConsumableItemCount_Result' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_Activate, CallFunc_Activate_Result) == 0x000010, "Member 'ITEM_HandheldExplosive_Base_C_Activate::CallFunc_Activate_Result' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_Activate, CallFunc_Greater_IntInt_ReturnValue) == 0x000011, "Member 'ITEM_HandheldExplosive_Base_C_Activate::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_Activate, CallFunc_IsArmingOrThrowingExplosive_Result) == 0x000012, "Member 'ITEM_HandheldExplosive_Base_C_Activate::CallFunc_IsArmingOrThrowingExplosive_Result' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_Activate, CallFunc_Not_PreBool_ReturnValue) == 0x000013, "Member 'ITEM_HandheldExplosive_Base_C_Activate::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_Activate, CallFunc_GetOwnerCharacter_Character) == 0x000018, "Member 'ITEM_HandheldExplosive_Base_C_Activate::CallFunc_GetOwnerCharacter_Character' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_Activate, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'ITEM_HandheldExplosive_Base_C_Activate::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function ITEM_HandheldExplosive_Base.ITEM_HandheldExplosive_Base_C.Deactivate
// 0x0128 (0x0128 - 0x0000)
struct ITEM_HandheldExplosive_Base_C_Deactivate final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharacterAction_C*                     CurrentAction;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_SystemShockCharacter_C*           CharacterOwner;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 CallFunc_GetActionMeshComponent_SkeletalMeshComponent; // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_LoadAsset_Blocking_ReturnValue;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IINTERF_ANIM_Hacker_C> K2Node_DynamicCast_AsINTERF_ANIM_Hacker;           // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           K2Node_DynamicCast_AsAnim_Montage;                 // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      CallFunc_GetOverrideIdleSequence_Result;           // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_LoadAsset_Blocking_ReturnValue_1;         // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           K2Node_DynamicCast_AsAnim_Montage_1;               // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x007A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x007B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UITEM_ExplosiveBase_C*                  CallFunc_GetArmedExplosiveItem_Result;             // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsActionQueuedWithMontage_Result;         // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8A[0x6];                                       // 0x008A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CallFunc_GetActionMeshComponent_SkeletalMeshComponent_1; // 0x0090(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue_1;            // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IINTERF_ANIM_Hacker_C> K2Node_DynamicCast_AsINTERF_ANIM_Hacker_1;         // 0x00A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      CallFunc_GetOverrideIdleSequence_Result_1;         // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           CallFunc_GetMontage_Result;                        // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimMontage>            CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue; // 0x00D0(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_SoftObjectReference_ReturnValue; // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x00FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_FB[0x5];                                       // 0x00FB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharacterAction_C*                     CallFunc_GetCurrentAction_CurrentAction;           // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_109[0x3];                                      // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetPlayTimeInSeconds_ReturnValue;         // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0114(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_115[0x3];                                      // 0x0115(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_SystemShockCharacter_C*           CallFunc_GetOwnerCharacter_Character;              // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Deactivate_Result;                        // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ITEM_HandheldExplosive_Base_C_Deactivate) == 0x000008, "Wrong alignment on ITEM_HandheldExplosive_Base_C_Deactivate");
static_assert(sizeof(ITEM_HandheldExplosive_Base_C_Deactivate) == 0x000128, "Wrong size on ITEM_HandheldExplosive_Base_C_Deactivate");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_Deactivate, Result) == 0x000000, "Member 'ITEM_HandheldExplosive_Base_C_Deactivate::Result' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_Deactivate, CurrentAction) == 0x000008, "Member 'ITEM_HandheldExplosive_Base_C_Deactivate::CurrentAction' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_Deactivate, CharacterOwner) == 0x000010, "Member 'ITEM_HandheldExplosive_Base_C_Deactivate::CharacterOwner' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_Deactivate, CallFunc_GetActionMeshComponent_SkeletalMeshComponent) == 0x000018, "Member 'ITEM_HandheldExplosive_Base_C_Deactivate::CallFunc_GetActionMeshComponent_SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_Deactivate, CallFunc_GetAnimInstance_ReturnValue) == 0x000020, "Member 'ITEM_HandheldExplosive_Base_C_Deactivate::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_Deactivate, CallFunc_LoadAsset_Blocking_ReturnValue) == 0x000028, "Member 'ITEM_HandheldExplosive_Base_C_Deactivate::CallFunc_LoadAsset_Blocking_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_Deactivate, K2Node_DynamicCast_AsINTERF_ANIM_Hacker) == 0x000030, "Member 'ITEM_HandheldExplosive_Base_C_Deactivate::K2Node_DynamicCast_AsINTERF_ANIM_Hacker' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_Deactivate, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'ITEM_HandheldExplosive_Base_C_Deactivate::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_Deactivate, K2Node_DynamicCast_AsAnim_Montage) == 0x000048, "Member 'ITEM_HandheldExplosive_Base_C_Deactivate::K2Node_DynamicCast_AsAnim_Montage' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_Deactivate, K2Node_DynamicCast_bSuccess_1) == 0x000050, "Member 'ITEM_HandheldExplosive_Base_C_Deactivate::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_Deactivate, CallFunc_GetOverrideIdleSequence_Result) == 0x000058, "Member 'ITEM_HandheldExplosive_Base_C_Deactivate::CallFunc_GetOverrideIdleSequence_Result' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_Deactivate, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000060, "Member 'ITEM_HandheldExplosive_Base_C_Deactivate::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_Deactivate, CallFunc_LoadAsset_Blocking_ReturnValue_1) == 0x000068, "Member 'ITEM_HandheldExplosive_Base_C_Deactivate::CallFunc_LoadAsset_Blocking_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_Deactivate, K2Node_DynamicCast_AsAnim_Montage_1) == 0x000070, "Member 'ITEM_HandheldExplosive_Base_C_Deactivate::K2Node_DynamicCast_AsAnim_Montage_1' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_Deactivate, K2Node_DynamicCast_bSuccess_2) == 0x000078, "Member 'ITEM_HandheldExplosive_Base_C_Deactivate::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_Deactivate, CallFunc_IsValid_ReturnValue) == 0x000079, "Member 'ITEM_HandheldExplosive_Base_C_Deactivate::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_Deactivate, CallFunc_IsValid_ReturnValue_1) == 0x00007A, "Member 'ITEM_HandheldExplosive_Base_C_Deactivate::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_Deactivate, CallFunc_IsValid_ReturnValue_2) == 0x00007B, "Member 'ITEM_HandheldExplosive_Base_C_Deactivate::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_Deactivate, CallFunc_GetArmedExplosiveItem_Result) == 0x000080, "Member 'ITEM_HandheldExplosive_Base_C_Deactivate::CallFunc_GetArmedExplosiveItem_Result' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_Deactivate, CallFunc_IsActionQueuedWithMontage_Result) == 0x000088, "Member 'ITEM_HandheldExplosive_Base_C_Deactivate::CallFunc_IsActionQueuedWithMontage_Result' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_Deactivate, CallFunc_IsValid_ReturnValue_3) == 0x000089, "Member 'ITEM_HandheldExplosive_Base_C_Deactivate::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_Deactivate, CallFunc_GetActionMeshComponent_SkeletalMeshComponent_1) == 0x000090, "Member 'ITEM_HandheldExplosive_Base_C_Deactivate::CallFunc_GetActionMeshComponent_SkeletalMeshComponent_1' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_Deactivate, CallFunc_IsValid_ReturnValue_4) == 0x000098, "Member 'ITEM_HandheldExplosive_Base_C_Deactivate::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_Deactivate, CallFunc_GetAnimInstance_ReturnValue_1) == 0x0000A0, "Member 'ITEM_HandheldExplosive_Base_C_Deactivate::CallFunc_GetAnimInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_Deactivate, K2Node_DynamicCast_AsINTERF_ANIM_Hacker_1) == 0x0000A8, "Member 'ITEM_HandheldExplosive_Base_C_Deactivate::K2Node_DynamicCast_AsINTERF_ANIM_Hacker_1' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_Deactivate, K2Node_DynamicCast_bSuccess_3) == 0x0000B8, "Member 'ITEM_HandheldExplosive_Base_C_Deactivate::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_Deactivate, CallFunc_GetOverrideIdleSequence_Result_1) == 0x0000C0, "Member 'ITEM_HandheldExplosive_Base_C_Deactivate::CallFunc_GetOverrideIdleSequence_Result_1' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_Deactivate, CallFunc_GetMontage_Result) == 0x0000C8, "Member 'ITEM_HandheldExplosive_Base_C_Deactivate::CallFunc_GetMontage_Result' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_Deactivate, CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue) == 0x0000D0, "Member 'ITEM_HandheldExplosive_Base_C_Deactivate::CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_Deactivate, CallFunc_IsValid_ReturnValue_5) == 0x0000F8, "Member 'ITEM_HandheldExplosive_Base_C_Deactivate::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_Deactivate, CallFunc_NotEqual_SoftObjectReference_ReturnValue) == 0x0000F9, "Member 'ITEM_HandheldExplosive_Base_C_Deactivate::CallFunc_NotEqual_SoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_Deactivate, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0000FA, "Member 'ITEM_HandheldExplosive_Base_C_Deactivate::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_Deactivate, CallFunc_GetCurrentAction_CurrentAction) == 0x000100, "Member 'ITEM_HandheldExplosive_Base_C_Deactivate::CallFunc_GetCurrentAction_CurrentAction' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_Deactivate, CallFunc_IsValid_ReturnValue_6) == 0x000108, "Member 'ITEM_HandheldExplosive_Base_C_Deactivate::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_Deactivate, CallFunc_GetPlayTimeInSeconds_ReturnValue) == 0x00010C, "Member 'ITEM_HandheldExplosive_Base_C_Deactivate::CallFunc_GetPlayTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_Deactivate, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000110, "Member 'ITEM_HandheldExplosive_Base_C_Deactivate::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_Deactivate, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000114, "Member 'ITEM_HandheldExplosive_Base_C_Deactivate::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_Deactivate, CallFunc_GetOwnerCharacter_Character) == 0x000118, "Member 'ITEM_HandheldExplosive_Base_C_Deactivate::CallFunc_GetOwnerCharacter_Character' has a wrong offset!");
static_assert(offsetof(ITEM_HandheldExplosive_Base_C_Deactivate, CallFunc_Deactivate_Result) == 0x000120, "Member 'ITEM_HandheldExplosive_Base_C_Deactivate::CallFunc_Deactivate_Result' has a wrong offset!");

}

