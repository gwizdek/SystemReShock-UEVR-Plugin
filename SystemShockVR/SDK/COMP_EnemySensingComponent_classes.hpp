#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: COMP_EnemySensingComponent

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "ENUM_VisionTraceType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass COMP_EnemySensingComponent.COMP_EnemySensingComponent_C
// 0x0090 (0x0140 - 0x00B0)
class UCOMP_EnemySensingComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	ETraceTypeQuery                               SightTraceChannel;                                 // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SightDistance;                                     // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SightDistanceSquared;                              // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SightConeHalfAngle;                                // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnSeePawn;                                         // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnHearPawn;                                        // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         SightConeHalfCosAngle;                             // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SightNoticePercentage;                             // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_VisionTraceType                          LastSightingType;                                  // 0x00F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DebugSightTraces;                                  // 0x00F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F2[0x6];                                       // 0x00F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCOMP_EnemyDetection_C*                 EnemyDetectionComponent;                           // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        BodyComponent;                                     // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   BodySocketName;                                    // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LocalBodyRotation;                                 // 0x0110(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        HeadComponent;                                     // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   HeadSocketName;                                    // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LocalHeadOffset;                                   // 0x0130(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void OnSeePawn__DelegateSignature(class APAWN_SystemShockCharacter_C* Pawn, const struct FVector& Location);
	void OnHearPawn__DelegateSignature(class APAWN_SystemShockCharacter_C* Pawn, const struct FVector& Location, float Loudness);
	void ExecuteUbergraph_COMP_EnemySensingComponent(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void InitializeSensingComponent(class UCOMP_EnemyDetection_C* DetectionComponent, class USceneComponent* BodyComponent_0, class FName BodySocketName_0, const struct FRotator& LocalBodyRotation_0, class USceneComponent* HeadComponent_0, class FName HeadSocketName_0, const struct FVector& LocalHeadOffset_0);
	void BindAttributeEvents();
	void SetSensingUpdatesEnabled(bool Enabled);
	void SetSightDistance(float NewDistance);
	void UpdateVision();
	void OnHearSound(class APAWN_SystemShockCharacter_C* SourcePawn, const struct FVector& SourceLocation, const struct FVector& TargetLocation, float SoundRange, float Obstruction, float Occlusion);
	void GetBodyTransform(struct FTransform* Result);
	void GetHeadLocation(struct FVector* Result);
	void HadVisionToTargetLastTick(bool* Visible, ENUM_VisionTraceType* SightingType);
	void IsLocationInVisionCone(const struct FVector& Location, bool* Result, float* DistanceToTarget, float* CosAngleToTarget);
	void EVENT_OnSightConeScaleChanged(float CurrValue, float LastValue);
	void EVENT_OnSightDistanceScaleChanged(float CurrValue, float LastValue);
	void PerformVisionTrace(const struct FVector& SourceLocation, const struct FVector& TargetLocation, float DistanceToTarget, float CosAngleToTarget, class APAWN_SystemShockCharacter_C* PlayerPawn, TArray<class AActor*>& ActorsToIgnore, bool* Result);
	void IsLocationInVisionConeInternal(const struct FTransform& VisionTransform, const struct FVector& TargetLocation, bool* Result, float* DistanceToTarget, float* CosAngleToTarget);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"COMP_EnemySensingComponent_C">();
	}
	static class UCOMP_EnemySensingComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCOMP_EnemySensingComponent_C>();
	}
};
static_assert(alignof(UCOMP_EnemySensingComponent_C) == 0x000008, "Wrong alignment on UCOMP_EnemySensingComponent_C");
static_assert(sizeof(UCOMP_EnemySensingComponent_C) == 0x000140, "Wrong size on UCOMP_EnemySensingComponent_C");
static_assert(offsetof(UCOMP_EnemySensingComponent_C, UberGraphFrame) == 0x0000B0, "Member 'UCOMP_EnemySensingComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemySensingComponent_C, SightTraceChannel) == 0x0000B8, "Member 'UCOMP_EnemySensingComponent_C::SightTraceChannel' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemySensingComponent_C, SightDistance) == 0x0000BC, "Member 'UCOMP_EnemySensingComponent_C::SightDistance' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemySensingComponent_C, SightDistanceSquared) == 0x0000C0, "Member 'UCOMP_EnemySensingComponent_C::SightDistanceSquared' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemySensingComponent_C, SightConeHalfAngle) == 0x0000C4, "Member 'UCOMP_EnemySensingComponent_C::SightConeHalfAngle' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemySensingComponent_C, OnSeePawn) == 0x0000C8, "Member 'UCOMP_EnemySensingComponent_C::OnSeePawn' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemySensingComponent_C, OnHearPawn) == 0x0000D8, "Member 'UCOMP_EnemySensingComponent_C::OnHearPawn' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemySensingComponent_C, SightConeHalfCosAngle) == 0x0000E8, "Member 'UCOMP_EnemySensingComponent_C::SightConeHalfCosAngle' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemySensingComponent_C, SightNoticePercentage) == 0x0000EC, "Member 'UCOMP_EnemySensingComponent_C::SightNoticePercentage' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemySensingComponent_C, LastSightingType) == 0x0000F0, "Member 'UCOMP_EnemySensingComponent_C::LastSightingType' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemySensingComponent_C, DebugSightTraces) == 0x0000F1, "Member 'UCOMP_EnemySensingComponent_C::DebugSightTraces' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemySensingComponent_C, EnemyDetectionComponent) == 0x0000F8, "Member 'UCOMP_EnemySensingComponent_C::EnemyDetectionComponent' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemySensingComponent_C, BodyComponent) == 0x000100, "Member 'UCOMP_EnemySensingComponent_C::BodyComponent' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemySensingComponent_C, BodySocketName) == 0x000108, "Member 'UCOMP_EnemySensingComponent_C::BodySocketName' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemySensingComponent_C, LocalBodyRotation) == 0x000110, "Member 'UCOMP_EnemySensingComponent_C::LocalBodyRotation' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemySensingComponent_C, HeadComponent) == 0x000120, "Member 'UCOMP_EnemySensingComponent_C::HeadComponent' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemySensingComponent_C, HeadSocketName) == 0x000128, "Member 'UCOMP_EnemySensingComponent_C::HeadSocketName' has a wrong offset!");
static_assert(offsetof(UCOMP_EnemySensingComponent_C, LocalHeadOffset) == 0x000130, "Member 'UCOMP_EnemySensingComponent_C::LocalHeadOffset' has a wrong offset!");

}

