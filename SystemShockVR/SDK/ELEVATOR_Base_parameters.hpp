#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ELEVATOR_Base

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "ENUM_FailSucceedIgnore_structs.hpp"
#include "STRUCT_MusicParams_structs.hpp"
#include "Engine_structs.hpp"
#include "STRUCT_LevelAtmosphereSettings_structs.hpp"
#include "STRUC_ElevatorInfo_structs.hpp"
#include "ENUM_UpDown_structs.hpp"
#include "ENUM_InteractionType_structs.hpp"
#include "STRUCT_LevelInfo_structs.hpp"
#include "LevelVoxelization_structs.hpp"
#include "ENUM_InnerOuter_structs.hpp"
#include "ENUM_DoorState_structs.hpp"
#include "STRUCT_InteractResults_structs.hpp"


namespace SDK::Params
{

// Function ELEVATOR_Base.ELEVATOR_Base_C.ExecuteUbergraph_ELEVATOR_Base
// 0x0290 (0x0290 - 0x0000)
struct ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_3;  // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_3;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_3;            // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_3;       // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep_1;           // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult_1;          // 0x0028(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_2;  // 0x00B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_2;           // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_2;            // 0x00C0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_2;       // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsElevatorOccupiedByPawn_Result;          // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryOpenElevatorDoors_Result;              // 0x00CD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x00CE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanCloseDoors_ReturnValue;                // 0x00CF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAnyDoorClosing_Result;                  // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_ComponentBoundEvent_bVisibleState;          // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D2[0x6];                                       // 0x00D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_1;  // 0x00D8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_1;           // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_1;            // 0x00E8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_1;       // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x00F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F5[0x3];                                       // 0x00F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x00F8(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UCullableVoxelActorComponent*           CallFunc_GetComponentByClass_ReturnValue;          // 0x0180(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetRoomAssignmentType_ReturnValue;        // 0x0189(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_18A[0x6];                                      // 0x018A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_SystemShockCharacter_C*           K2Node_DynamicCast_AsPAWN_System_Shock_Character;  // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValidOccupant_Result;                   // 0x0199(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19A[0x6];                                      // 0x019A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_Hacker_Implant_C*                 K2Node_DynamicCast_AsPAWN_Hacker_Implant;          // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A9[0x7];                                      // 0x01A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevel*                                 CallFunc_GetActorLevel_ReturnValue;                // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_MoveActorToLevel_ReturnValue;             // 0x01B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1BA[0x2];                                      // 0x01BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate;              // 0x01BC(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x01CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x01CD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryStreamInTargetLevelCollection_Result;  // 0x01CE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1CF[0x1];                                      // 0x01CF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequencePlayer*                   CallFunc_GetSequencePlayer_ReturnValue;            // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bAudibleState;          // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryStartElevatorMusic_Result;             // 0x01E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E2[0x6];                                      // 0x01E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x01E8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x01F8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_204[0x4];                                      // 0x0204(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Temp_object_Variable;                              // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_Hacker_Implant_C*                 K2Node_DynamicCast_AsPAWN_Hacker_Implant_1;        // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_219[0x7];                                      // 0x0219(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundCue*                              K2Node_DynamicCast_AsSound_Cue;                    // 0x0220(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0229(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x022A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22B[0x5];                                      // 0x022B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_CustomEvent_Loaded;                         // 0x0230(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TryUnselectActiveControlButton_Result;    // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_239[0x3];                                      // 0x0239(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x023C(0x0010)(ZeroConstructor, NoDestructor)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x024C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULevelSequencePlayer*                   CallFunc_GetSequencePlayer_ReturnValue_1;          // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_4;                // 0x0258(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryStopElevatorMusic_Result;              // 0x0259(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25A[0x6];                                      // 0x025A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USoundCue>               K2Node_CustomEvent_SoundCue;                       // 0x0260(0x0028)(HasGetValueTypeHash)
	class UAudioComponent*                        CallFunc_SpawnSoundAttached_ReturnValue;           // 0x0288(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base) == 0x000008, "Wrong alignment on ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base");
static_assert(sizeof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base) == 0x000290, "Wrong size on ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, EntryPoint) == 0x000000, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::EntryPoint' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, CallFunc_Not_PreBool_ReturnValue) == 0x000004, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, K2Node_Event_EndPlayReason) == 0x000005, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::K2Node_Event_EndPlayReason' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, K2Node_ComponentBoundEvent_OverlappedComponent_3) == 0x000008, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::K2Node_ComponentBoundEvent_OverlappedComponent_3' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, K2Node_ComponentBoundEvent_OtherActor_3) == 0x000010, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::K2Node_ComponentBoundEvent_OtherActor_3' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, K2Node_ComponentBoundEvent_OtherComp_3) == 0x000018, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::K2Node_ComponentBoundEvent_OtherComp_3' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, K2Node_ComponentBoundEvent_OtherBodyIndex_3) == 0x000020, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::K2Node_ComponentBoundEvent_OtherBodyIndex_3' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, K2Node_ComponentBoundEvent_bFromSweep_1) == 0x000024, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::K2Node_ComponentBoundEvent_bFromSweep_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, K2Node_ComponentBoundEvent_SweepResult_1) == 0x000028, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::K2Node_ComponentBoundEvent_SweepResult_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, K2Node_ComponentBoundEvent_OverlappedComponent_2) == 0x0000B0, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::K2Node_ComponentBoundEvent_OverlappedComponent_2' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, K2Node_ComponentBoundEvent_OtherActor_2) == 0x0000B8, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::K2Node_ComponentBoundEvent_OtherActor_2' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, K2Node_ComponentBoundEvent_OtherComp_2) == 0x0000C0, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::K2Node_ComponentBoundEvent_OtherComp_2' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, K2Node_ComponentBoundEvent_OtherBodyIndex_2) == 0x0000C8, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::K2Node_ComponentBoundEvent_OtherBodyIndex_2' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, CallFunc_IsElevatorOccupiedByPawn_Result) == 0x0000CC, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::CallFunc_IsElevatorOccupiedByPawn_Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, CallFunc_TryOpenElevatorDoors_Result) == 0x0000CD, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::CallFunc_TryOpenElevatorDoors_Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, CallFunc_Not_PreBool_ReturnValue_1) == 0x0000CE, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, CallFunc_CanCloseDoors_ReturnValue) == 0x0000CF, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::CallFunc_CanCloseDoors_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, CallFunc_IsAnyDoorClosing_Result) == 0x0000D0, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::CallFunc_IsAnyDoorClosing_Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, K2Node_ComponentBoundEvent_bVisibleState) == 0x0000D1, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::K2Node_ComponentBoundEvent_bVisibleState' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, K2Node_ComponentBoundEvent_OverlappedComponent_1) == 0x0000D8, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::K2Node_ComponentBoundEvent_OverlappedComponent_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, K2Node_ComponentBoundEvent_OtherActor_1) == 0x0000E0, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::K2Node_ComponentBoundEvent_OtherActor_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, K2Node_ComponentBoundEvent_OtherComp_1) == 0x0000E8, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::K2Node_ComponentBoundEvent_OtherComp_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, K2Node_ComponentBoundEvent_OtherBodyIndex_1) == 0x0000F0, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::K2Node_ComponentBoundEvent_OtherBodyIndex_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, K2Node_ComponentBoundEvent_bFromSweep) == 0x0000F4, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, K2Node_ComponentBoundEvent_SweepResult) == 0x0000F8, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, CallFunc_GetComponentByClass_ReturnValue) == 0x000180, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, CallFunc_IsValid_ReturnValue) == 0x000188, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, CallFunc_SetRoomAssignmentType_ReturnValue) == 0x000189, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::CallFunc_SetRoomAssignmentType_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, K2Node_DynamicCast_AsPAWN_System_Shock_Character) == 0x000190, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::K2Node_DynamicCast_AsPAWN_System_Shock_Character' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, K2Node_DynamicCast_bSuccess) == 0x000198, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, CallFunc_IsValidOccupant_Result) == 0x000199, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::CallFunc_IsValidOccupant_Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, K2Node_DynamicCast_AsPAWN_Hacker_Implant) == 0x0001A0, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::K2Node_DynamicCast_AsPAWN_Hacker_Implant' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, K2Node_DynamicCast_bSuccess_1) == 0x0001A8, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, CallFunc_GetActorLevel_ReturnValue) == 0x0001B0, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::CallFunc_GetActorLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, CallFunc_BooleanAND_ReturnValue) == 0x0001B8, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, CallFunc_MoveActorToLevel_ReturnValue) == 0x0001B9, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::CallFunc_MoveActorToLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, K2Node_CreateDelegate_OutputDelegate) == 0x0001BC, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, CallFunc_IsValid_ReturnValue_1) == 0x0001CC, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, CallFunc_BooleanOR_ReturnValue) == 0x0001CD, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, CallFunc_TryStreamInTargetLevelCollection_Result) == 0x0001CE, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::CallFunc_TryStreamInTargetLevelCollection_Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, CallFunc_GetSequencePlayer_ReturnValue) == 0x0001D0, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::CallFunc_GetSequencePlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, CallFunc_GetController_ReturnValue) == 0x0001D8, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, K2Node_ComponentBoundEvent_bAudibleState) == 0x0001E0, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::K2Node_ComponentBoundEvent_bAudibleState' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, CallFunc_TryStartElevatorMusic_Result) == 0x0001E1, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::CallFunc_TryStartElevatorMusic_Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x0001E8, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, K2Node_ComponentBoundEvent_OtherActor) == 0x0001F0, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, K2Node_ComponentBoundEvent_OtherComp) == 0x0001F8, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x000200, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, Temp_object_Variable) == 0x000208, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, K2Node_DynamicCast_AsPAWN_Hacker_Implant_1) == 0x000210, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::K2Node_DynamicCast_AsPAWN_Hacker_Implant_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, K2Node_DynamicCast_bSuccess_2) == 0x000218, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, K2Node_DynamicCast_AsSound_Cue) == 0x000220, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::K2Node_DynamicCast_AsSound_Cue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, K2Node_DynamicCast_bSuccess_3) == 0x000228, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, CallFunc_Not_PreBool_ReturnValue_2) == 0x000229, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, CallFunc_Not_PreBool_ReturnValue_3) == 0x00022A, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, K2Node_CustomEvent_Loaded) == 0x000230, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::K2Node_CustomEvent_Loaded' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, CallFunc_TryUnselectActiveControlButton_Result) == 0x000238, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::CallFunc_TryUnselectActiveControlButton_Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, K2Node_CreateDelegate_OutputDelegate_1) == 0x00023C, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, K2Node_Event_DeltaSeconds) == 0x00024C, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, CallFunc_GetSequencePlayer_ReturnValue_1) == 0x000250, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::CallFunc_GetSequencePlayer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, CallFunc_Not_PreBool_ReturnValue_4) == 0x000258, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::CallFunc_Not_PreBool_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, CallFunc_TryStopElevatorMusic_Result) == 0x000259, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::CallFunc_TryStopElevatorMusic_Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, K2Node_CustomEvent_SoundCue) == 0x000260, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::K2Node_CustomEvent_SoundCue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base, CallFunc_SpawnSoundAttached_ReturnValue) == 0x000288, "Member 'ELEVATOR_Base_C_ExecuteUbergraph_ELEVATOR_Base::CallFunc_SpawnSoundAttached_ReturnValue' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.PlayElevatorMovementSound
// 0x0028 (0x0028 - 0x0000)
struct ELEVATOR_Base_C_PlayElevatorMovementSound final
{
public:
	TSoftObjectPtr<class USoundCue>               SoundCue;                                          // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(ELEVATOR_Base_C_PlayElevatorMovementSound) == 0x000008, "Wrong alignment on ELEVATOR_Base_C_PlayElevatorMovementSound");
static_assert(sizeof(ELEVATOR_Base_C_PlayElevatorMovementSound) == 0x000028, "Wrong size on ELEVATOR_Base_C_PlayElevatorMovementSound");
static_assert(offsetof(ELEVATOR_Base_C_PlayElevatorMovementSound, SoundCue) == 0x000000, "Member 'ELEVATOR_Base_C_PlayElevatorMovementSound::SoundCue' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct ELEVATOR_Base_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ELEVATOR_Base_C_ReceiveTick) == 0x000004, "Wrong alignment on ELEVATOR_Base_C_ReceiveTick");
static_assert(sizeof(ELEVATOR_Base_C_ReceiveTick) == 0x000004, "Wrong size on ELEVATOR_Base_C_ReceiveTick");
static_assert(offsetof(ELEVATOR_Base_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'ELEVATOR_Base_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.BndEvt__ELEVATOR_Base_CompartmentSensor_K2Node_ComponentBoundEvent_5_ComponentEndOverlapSignature__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct ELEVATOR_Base_C_BndEvt__ELEVATOR_Base_CompartmentSensor_K2Node_ComponentBoundEvent_5_ComponentEndOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ELEVATOR_Base_C_BndEvt__ELEVATOR_Base_CompartmentSensor_K2Node_ComponentBoundEvent_5_ComponentEndOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on ELEVATOR_Base_C_BndEvt__ELEVATOR_Base_CompartmentSensor_K2Node_ComponentBoundEvent_5_ComponentEndOverlapSignature__DelegateSignature");
static_assert(sizeof(ELEVATOR_Base_C_BndEvt__ELEVATOR_Base_CompartmentSensor_K2Node_ComponentBoundEvent_5_ComponentEndOverlapSignature__DelegateSignature) == 0x000020, "Wrong size on ELEVATOR_Base_C_BndEvt__ELEVATOR_Base_CompartmentSensor_K2Node_ComponentBoundEvent_5_ComponentEndOverlapSignature__DelegateSignature");
static_assert(offsetof(ELEVATOR_Base_C_BndEvt__ELEVATOR_Base_CompartmentSensor_K2Node_ComponentBoundEvent_5_ComponentEndOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'ELEVATOR_Base_C_BndEvt__ELEVATOR_Base_CompartmentSensor_K2Node_ComponentBoundEvent_5_ComponentEndOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_BndEvt__ELEVATOR_Base_CompartmentSensor_K2Node_ComponentBoundEvent_5_ComponentEndOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'ELEVATOR_Base_C_BndEvt__ELEVATOR_Base_CompartmentSensor_K2Node_ComponentBoundEvent_5_ComponentEndOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_BndEvt__ELEVATOR_Base_CompartmentSensor_K2Node_ComponentBoundEvent_5_ComponentEndOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'ELEVATOR_Base_C_BndEvt__ELEVATOR_Base_CompartmentSensor_K2Node_ComponentBoundEvent_5_ComponentEndOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_BndEvt__ELEVATOR_Base_CompartmentSensor_K2Node_ComponentBoundEvent_5_ComponentEndOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'ELEVATOR_Base_C_BndEvt__ELEVATOR_Base_CompartmentSensor_K2Node_ComponentBoundEvent_5_ComponentEndOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.BndEvt__ELEVATOR_Base_COMP_VoxelCullable_K2Node_ComponentBoundEvent_4_CullableAudibilitySignature__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct ELEVATOR_Base_C_BndEvt__ELEVATOR_Base_COMP_VoxelCullable_K2Node_ComponentBoundEvent_4_CullableAudibilitySignature__DelegateSignature final
{
public:
	bool                                          bAudibleState;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ELEVATOR_Base_C_BndEvt__ELEVATOR_Base_COMP_VoxelCullable_K2Node_ComponentBoundEvent_4_CullableAudibilitySignature__DelegateSignature) == 0x000001, "Wrong alignment on ELEVATOR_Base_C_BndEvt__ELEVATOR_Base_COMP_VoxelCullable_K2Node_ComponentBoundEvent_4_CullableAudibilitySignature__DelegateSignature");
static_assert(sizeof(ELEVATOR_Base_C_BndEvt__ELEVATOR_Base_COMP_VoxelCullable_K2Node_ComponentBoundEvent_4_CullableAudibilitySignature__DelegateSignature) == 0x000001, "Wrong size on ELEVATOR_Base_C_BndEvt__ELEVATOR_Base_COMP_VoxelCullable_K2Node_ComponentBoundEvent_4_CullableAudibilitySignature__DelegateSignature");
static_assert(offsetof(ELEVATOR_Base_C_BndEvt__ELEVATOR_Base_COMP_VoxelCullable_K2Node_ComponentBoundEvent_4_CullableAudibilitySignature__DelegateSignature, bAudibleState) == 0x000000, "Member 'ELEVATOR_Base_C_BndEvt__ELEVATOR_Base_COMP_VoxelCullable_K2Node_ComponentBoundEvent_4_CullableAudibilitySignature__DelegateSignature::bAudibleState' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.BndEvt__CompartmentSensor_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct ELEVATOR_Base_C_BndEvt__CompartmentSensor_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(ELEVATOR_Base_C_BndEvt__CompartmentSensor_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on ELEVATOR_Base_C_BndEvt__CompartmentSensor_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(ELEVATOR_Base_C_BndEvt__CompartmentSensor_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000A8, "Wrong size on ELEVATOR_Base_C_BndEvt__CompartmentSensor_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(ELEVATOR_Base_C_BndEvt__CompartmentSensor_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'ELEVATOR_Base_C_BndEvt__CompartmentSensor_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_BndEvt__CompartmentSensor_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'ELEVATOR_Base_C_BndEvt__CompartmentSensor_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_BndEvt__CompartmentSensor_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'ELEVATOR_Base_C_BndEvt__CompartmentSensor_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_BndEvt__CompartmentSensor_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'ELEVATOR_Base_C_BndEvt__CompartmentSensor_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_BndEvt__CompartmentSensor_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'ELEVATOR_Base_C_BndEvt__CompartmentSensor_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_BndEvt__CompartmentSensor_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'ELEVATOR_Base_C_BndEvt__CompartmentSensor_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.BndEvt__COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct ELEVATOR_Base_C_BndEvt__COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature final
{
public:
	bool                                          bVisibleState;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ELEVATOR_Base_C_BndEvt__COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature) == 0x000001, "Wrong alignment on ELEVATOR_Base_C_BndEvt__COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature");
static_assert(sizeof(ELEVATOR_Base_C_BndEvt__COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature) == 0x000001, "Wrong size on ELEVATOR_Base_C_BndEvt__COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature");
static_assert(offsetof(ELEVATOR_Base_C_BndEvt__COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature, bVisibleState) == 0x000000, "Member 'ELEVATOR_Base_C_BndEvt__COMP_VoxelCullable_K2Node_ComponentBoundEvent_0_CullableVisibilitySignature__DelegateSignature::bVisibleState' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.BndEvt__SafetySensor_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct ELEVATOR_Base_C_BndEvt__SafetySensor_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ELEVATOR_Base_C_BndEvt__SafetySensor_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on ELEVATOR_Base_C_BndEvt__SafetySensor_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature");
static_assert(sizeof(ELEVATOR_Base_C_BndEvt__SafetySensor_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature) == 0x000020, "Wrong size on ELEVATOR_Base_C_BndEvt__SafetySensor_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature");
static_assert(offsetof(ELEVATOR_Base_C_BndEvt__SafetySensor_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'ELEVATOR_Base_C_BndEvt__SafetySensor_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_BndEvt__SafetySensor_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'ELEVATOR_Base_C_BndEvt__SafetySensor_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_BndEvt__SafetySensor_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'ELEVATOR_Base_C_BndEvt__SafetySensor_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_BndEvt__SafetySensor_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'ELEVATOR_Base_C_BndEvt__SafetySensor_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.BndEvt__SafetySensor_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct ELEVATOR_Base_C_BndEvt__SafetySensor_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(ELEVATOR_Base_C_BndEvt__SafetySensor_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on ELEVATOR_Base_C_BndEvt__SafetySensor_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(ELEVATOR_Base_C_BndEvt__SafetySensor_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000A8, "Wrong size on ELEVATOR_Base_C_BndEvt__SafetySensor_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(ELEVATOR_Base_C_BndEvt__SafetySensor_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'ELEVATOR_Base_C_BndEvt__SafetySensor_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_BndEvt__SafetySensor_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'ELEVATOR_Base_C_BndEvt__SafetySensor_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_BndEvt__SafetySensor_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'ELEVATOR_Base_C_BndEvt__SafetySensor_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_BndEvt__SafetySensor_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'ELEVATOR_Base_C_BndEvt__SafetySensor_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_BndEvt__SafetySensor_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'ELEVATOR_Base_C_BndEvt__SafetySensor_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_BndEvt__SafetySensor_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'ELEVATOR_Base_C_BndEvt__SafetySensor_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct ELEVATOR_Base_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ELEVATOR_Base_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on ELEVATOR_Base_C_ReceiveEndPlay");
static_assert(sizeof(ELEVATOR_Base_C_ReceiveEndPlay) == 0x000001, "Wrong size on ELEVATOR_Base_C_ReceiveEndPlay");
static_assert(offsetof(ELEVATOR_Base_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'ELEVATOR_Base_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.OnLoaded_E8AF5A7C4E1C8638BDB1439B3EE08341
// 0x0008 (0x0008 - 0x0000)
struct ELEVATOR_Base_C_OnLoaded_E8AF5A7C4E1C8638BDB1439B3EE08341 final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ELEVATOR_Base_C_OnLoaded_E8AF5A7C4E1C8638BDB1439B3EE08341) == 0x000008, "Wrong alignment on ELEVATOR_Base_C_OnLoaded_E8AF5A7C4E1C8638BDB1439B3EE08341");
static_assert(sizeof(ELEVATOR_Base_C_OnLoaded_E8AF5A7C4E1C8638BDB1439B3EE08341) == 0x000008, "Wrong size on ELEVATOR_Base_C_OnLoaded_E8AF5A7C4E1C8638BDB1439B3EE08341");
static_assert(offsetof(ELEVATOR_Base_C_OnLoaded_E8AF5A7C4E1C8638BDB1439B3EE08341, Loaded) == 0x000000, "Member 'ELEVATOR_Base_C_OnLoaded_E8AF5A7C4E1C8638BDB1439B3EE08341::Loaded' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.EVENT_StartOpeningOuterDoor
// 0x0038 (0x0038 - 0x0000)
struct ELEVATOR_Base_C_EVENT_StartOpeningOuterDoor final
{
public:
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AINTERACT_ElevatorDoors_Base_C*         K2Node_DynamicCast_AsINTERACT_Elevator_Doors_Base; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ActivateDoor_Result;                      // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ActivateDoor_Result_1;                    // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsElevatorOccupiedByPawn_Result;          // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0020(0x0010)(ZeroConstructor, NoDestructor)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0030(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ELEVATOR_Base_C_EVENT_StartOpeningOuterDoor) == 0x000008, "Wrong alignment on ELEVATOR_Base_C_EVENT_StartOpeningOuterDoor");
static_assert(sizeof(ELEVATOR_Base_C_EVENT_StartOpeningOuterDoor) == 0x000038, "Wrong size on ELEVATOR_Base_C_EVENT_StartOpeningOuterDoor");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_StartOpeningOuterDoor, CallFunc_GetOwner_ReturnValue) == 0x000000, "Member 'ELEVATOR_Base_C_EVENT_StartOpeningOuterDoor::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_StartOpeningOuterDoor, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'ELEVATOR_Base_C_EVENT_StartOpeningOuterDoor::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_StartOpeningOuterDoor, K2Node_DynamicCast_AsINTERACT_Elevator_Doors_Base) == 0x000010, "Member 'ELEVATOR_Base_C_EVENT_StartOpeningOuterDoor::K2Node_DynamicCast_AsINTERACT_Elevator_Doors_Base' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_StartOpeningOuterDoor, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'ELEVATOR_Base_C_EVENT_StartOpeningOuterDoor::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_StartOpeningOuterDoor, K2Node_SwitchEnum_CmpSuccess) == 0x000019, "Member 'ELEVATOR_Base_C_EVENT_StartOpeningOuterDoor::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_StartOpeningOuterDoor, CallFunc_ActivateDoor_Result) == 0x00001A, "Member 'ELEVATOR_Base_C_EVENT_StartOpeningOuterDoor::CallFunc_ActivateDoor_Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_StartOpeningOuterDoor, CallFunc_ActivateDoor_Result_1) == 0x00001B, "Member 'ELEVATOR_Base_C_EVENT_StartOpeningOuterDoor::CallFunc_ActivateDoor_Result_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_StartOpeningOuterDoor, CallFunc_IsElevatorOccupiedByPawn_Result) == 0x00001C, "Member 'ELEVATOR_Base_C_EVENT_StartOpeningOuterDoor::CallFunc_IsElevatorOccupiedByPawn_Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_StartOpeningOuterDoor, CallFunc_Not_PreBool_ReturnValue) == 0x00001D, "Member 'ELEVATOR_Base_C_EVENT_StartOpeningOuterDoor::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_StartOpeningOuterDoor, K2Node_CreateDelegate_OutputDelegate) == 0x000020, "Member 'ELEVATOR_Base_C_EVENT_StartOpeningOuterDoor::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_StartOpeningOuterDoor, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000030, "Member 'ELEVATOR_Base_C_EVENT_StartOpeningOuterDoor::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.EVENT_StartClosingOuterDoor
// 0x0002 (0x0002 - 0x0000)
struct ELEVATOR_Base_C_EVENT_StartClosingOuterDoor final
{
public:
	bool                                          CallFunc_ActivateDoor_Result;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ELEVATOR_Base_C_EVENT_StartClosingOuterDoor) == 0x000001, "Wrong alignment on ELEVATOR_Base_C_EVENT_StartClosingOuterDoor");
static_assert(sizeof(ELEVATOR_Base_C_EVENT_StartClosingOuterDoor) == 0x000002, "Wrong size on ELEVATOR_Base_C_EVENT_StartClosingOuterDoor");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_StartClosingOuterDoor, CallFunc_ActivateDoor_Result) == 0x000000, "Member 'ELEVATOR_Base_C_EVENT_StartClosingOuterDoor::CallFunc_ActivateDoor_Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_StartClosingOuterDoor, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'ELEVATOR_Base_C_EVENT_StartClosingOuterDoor::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.EVENT_StartOpeningInnerDoor
// 0x0001 (0x0001 - 0x0000)
struct ELEVATOR_Base_C_EVENT_StartOpeningInnerDoor final
{
public:
	bool                                          CallFunc_ActivateDoor_Result;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ELEVATOR_Base_C_EVENT_StartOpeningInnerDoor) == 0x000001, "Wrong alignment on ELEVATOR_Base_C_EVENT_StartOpeningInnerDoor");
static_assert(sizeof(ELEVATOR_Base_C_EVENT_StartOpeningInnerDoor) == 0x000001, "Wrong size on ELEVATOR_Base_C_EVENT_StartOpeningInnerDoor");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_StartOpeningInnerDoor, CallFunc_ActivateDoor_Result) == 0x000000, "Member 'ELEVATOR_Base_C_EVENT_StartOpeningInnerDoor::CallFunc_ActivateDoor_Result' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.EVENT_OnStartedUnloadingLevelCollection
// 0x0008 (0x0008 - 0x0000)
struct ELEVATOR_Base_C_EVENT_OnStartedUnloadingLevelCollection final
{
public:
	int32                                         ElevatorIndex;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ELEVATOR_Base_C_EVENT_OnStartedUnloadingLevelCollection) == 0x000004, "Wrong alignment on ELEVATOR_Base_C_EVENT_OnStartedUnloadingLevelCollection");
static_assert(sizeof(ELEVATOR_Base_C_EVENT_OnStartedUnloadingLevelCollection) == 0x000008, "Wrong size on ELEVATOR_Base_C_EVENT_OnStartedUnloadingLevelCollection");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnStartedUnloadingLevelCollection, ElevatorIndex) == 0x000000, "Member 'ELEVATOR_Base_C_EVENT_OnStartedUnloadingLevelCollection::ElevatorIndex' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnStartedUnloadingLevelCollection, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'ELEVATOR_Base_C_EVENT_OnStartedUnloadingLevelCollection::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnStartedUnloadingLevelCollection, CallFunc_Not_PreBool_ReturnValue) == 0x000005, "Member 'ELEVATOR_Base_C_EVENT_OnStartedUnloadingLevelCollection::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.EVENT_OnFinishedLoadingLevelCollection
// 0x0150 (0x0150 - 0x0000)
struct ELEVATOR_Base_C_EVENT_OnFinishedLoadingLevelCollection final
{
public:
	float                                         OffsetDistance;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AINTERACT_ElevatorDoors_Base_C*         CurrentDoorActor;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetTileCollisionEnabled_Result;           // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0044(0x0010)(ZeroConstructor, NoDestructor)
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue;         // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0058(0x0008)(NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0074(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_1;        // 0x0088(0x0008)(NoDestructor, HasGetValueTypeHash)
	class AINTERACT_ElevatorDoors_Base_C*         CallFunc_GetElevatorDoor_Door;                     // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x00A0(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F5[0x3];                                       // 0x00F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x00F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_104[0xC];                                      // 0x0104(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0110(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ELEVATOR_Base_C_EVENT_OnFinishedLoadingLevelCollection) == 0x000010, "Wrong alignment on ELEVATOR_Base_C_EVENT_OnFinishedLoadingLevelCollection");
static_assert(sizeof(ELEVATOR_Base_C_EVENT_OnFinishedLoadingLevelCollection) == 0x000150, "Wrong size on ELEVATOR_Base_C_EVENT_OnFinishedLoadingLevelCollection");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnFinishedLoadingLevelCollection, OffsetDistance) == 0x000000, "Member 'ELEVATOR_Base_C_EVENT_OnFinishedLoadingLevelCollection::OffsetDistance' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnFinishedLoadingLevelCollection, CurrentDoorActor) == 0x000008, "Member 'ELEVATOR_Base_C_EVENT_OnFinishedLoadingLevelCollection::CurrentDoorActor' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnFinishedLoadingLevelCollection, CallFunc_GetActorForwardVector_ReturnValue) == 0x000010, "Member 'ELEVATOR_Base_C_EVENT_OnFinishedLoadingLevelCollection::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnFinishedLoadingLevelCollection, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00001C, "Member 'ELEVATOR_Base_C_EVENT_OnFinishedLoadingLevelCollection::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnFinishedLoadingLevelCollection, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000028, "Member 'ELEVATOR_Base_C_EVENT_OnFinishedLoadingLevelCollection::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnFinishedLoadingLevelCollection, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000034, "Member 'ELEVATOR_Base_C_EVENT_OnFinishedLoadingLevelCollection::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnFinishedLoadingLevelCollection, CallFunc_SetTileCollisionEnabled_Result) == 0x000040, "Member 'ELEVATOR_Base_C_EVENT_OnFinishedLoadingLevelCollection::CallFunc_SetTileCollisionEnabled_Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnFinishedLoadingLevelCollection, K2Node_CreateDelegate_OutputDelegate) == 0x000044, "Member 'ELEVATOR_Base_C_EVENT_OnFinishedLoadingLevelCollection::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnFinishedLoadingLevelCollection, CallFunc_GetGameTimeInSeconds_ReturnValue) == 0x000054, "Member 'ELEVATOR_Base_C_EVENT_OnFinishedLoadingLevelCollection::CallFunc_GetGameTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnFinishedLoadingLevelCollection, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000058, "Member 'ELEVATOR_Base_C_EVENT_OnFinishedLoadingLevelCollection::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnFinishedLoadingLevelCollection, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000060, "Member 'ELEVATOR_Base_C_EVENT_OnFinishedLoadingLevelCollection::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnFinishedLoadingLevelCollection, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000064, "Member 'ELEVATOR_Base_C_EVENT_OnFinishedLoadingLevelCollection::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnFinishedLoadingLevelCollection, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x000068, "Member 'ELEVATOR_Base_C_EVENT_OnFinishedLoadingLevelCollection::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnFinishedLoadingLevelCollection, K2Node_CreateDelegate_OutputDelegate_1) == 0x000074, "Member 'ELEVATOR_Base_C_EVENT_OnFinishedLoadingLevelCollection::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnFinishedLoadingLevelCollection, CallFunc_K2_SetTimerDelegate_ReturnValue_1) == 0x000088, "Member 'ELEVATOR_Base_C_EVENT_OnFinishedLoadingLevelCollection::CallFunc_K2_SetTimerDelegate_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnFinishedLoadingLevelCollection, CallFunc_GetElevatorDoor_Door) == 0x000090, "Member 'ELEVATOR_Base_C_EVENT_OnFinishedLoadingLevelCollection::CallFunc_GetElevatorDoor_Door' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnFinishedLoadingLevelCollection, CallFunc_GetTransform_ReturnValue) == 0x0000A0, "Member 'ELEVATOR_Base_C_EVENT_OnFinishedLoadingLevelCollection::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnFinishedLoadingLevelCollection, CallFunc_BreakTransform_Location) == 0x0000D0, "Member 'ELEVATOR_Base_C_EVENT_OnFinishedLoadingLevelCollection::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnFinishedLoadingLevelCollection, CallFunc_BreakTransform_Rotation) == 0x0000DC, "Member 'ELEVATOR_Base_C_EVENT_OnFinishedLoadingLevelCollection::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnFinishedLoadingLevelCollection, CallFunc_BreakTransform_Scale) == 0x0000E8, "Member 'ELEVATOR_Base_C_EVENT_OnFinishedLoadingLevelCollection::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnFinishedLoadingLevelCollection, CallFunc_IsValid_ReturnValue) == 0x0000F4, "Member 'ELEVATOR_Base_C_EVENT_OnFinishedLoadingLevelCollection::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnFinishedLoadingLevelCollection, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x0000F8, "Member 'ELEVATOR_Base_C_EVENT_OnFinishedLoadingLevelCollection::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnFinishedLoadingLevelCollection, CallFunc_MakeTransform_ReturnValue) == 0x000110, "Member 'ELEVATOR_Base_C_EVENT_OnFinishedLoadingLevelCollection::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnFinishedLoadingLevelCollection, CallFunc_IsValid_ReturnValue_1) == 0x000140, "Member 'ELEVATOR_Base_C_EVENT_OnFinishedLoadingLevelCollection::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.InitializeElevator
// 0x0080 (0x0080 - 0x0000)
struct ELEVATOR_Base_C_InitializeElevator final
{
public:
	class UGI_SinglePlayer_C*                     GameInstance;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName StoryQuestName, bool Value)> K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_HasCompletedStoryQuest_Completed;         // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_BoolBool_ReturnValue;          // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0034(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_2;            // 0x005C(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_3;            // 0x006C(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(ELEVATOR_Base_C_InitializeElevator) == 0x000008, "Wrong alignment on ELEVATOR_Base_C_InitializeElevator");
static_assert(sizeof(ELEVATOR_Base_C_InitializeElevator) == 0x000080, "Wrong size on ELEVATOR_Base_C_InitializeElevator");
static_assert(offsetof(ELEVATOR_Base_C_InitializeElevator, GameInstance) == 0x000000, "Member 'ELEVATOR_Base_C_InitializeElevator::GameInstance' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_InitializeElevator, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'ELEVATOR_Base_C_InitializeElevator::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_InitializeElevator, CallFunc_HasCompletedStoryQuest_Completed) == 0x000018, "Member 'ELEVATOR_Base_C_InitializeElevator::CallFunc_HasCompletedStoryQuest_Completed' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_InitializeElevator, CallFunc_EqualEqual_BoolBool_ReturnValue) == 0x000019, "Member 'ELEVATOR_Base_C_InitializeElevator::CallFunc_EqualEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_InitializeElevator, CallFunc_NotEqual_NameName_ReturnValue) == 0x00001A, "Member 'ELEVATOR_Base_C_InitializeElevator::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_InitializeElevator, CallFunc_IsValid_ReturnValue) == 0x00001B, "Member 'ELEVATOR_Base_C_InitializeElevator::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_InitializeElevator, CallFunc_K2_GetActorRotation_ReturnValue) == 0x00001C, "Member 'ELEVATOR_Base_C_InitializeElevator::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_InitializeElevator, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000028, "Member 'ELEVATOR_Base_C_InitializeElevator::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_InitializeElevator, K2Node_CreateDelegate_OutputDelegate_1) == 0x000034, "Member 'ELEVATOR_Base_C_InitializeElevator::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_InitializeElevator, CallFunc_GetGameInstance_ReturnValue) == 0x000048, "Member 'ELEVATOR_Base_C_InitializeElevator::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_InitializeElevator, K2Node_DynamicCast_AsGI_Single_Player) == 0x000050, "Member 'ELEVATOR_Base_C_InitializeElevator::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_InitializeElevator, K2Node_DynamicCast_bSuccess) == 0x000058, "Member 'ELEVATOR_Base_C_InitializeElevator::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_InitializeElevator, K2Node_CreateDelegate_OutputDelegate_2) == 0x00005C, "Member 'ELEVATOR_Base_C_InitializeElevator::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_InitializeElevator, K2Node_CreateDelegate_OutputDelegate_3) == 0x00006C, "Member 'ELEVATOR_Base_C_InitializeElevator::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.InitializeAttributes
// 0x0014 (0x0014 - 0x0000)
struct ELEVATOR_Base_C_InitializeAttributes final
{
public:
	TDelegate<void(float CurrValue, float LastValue)> K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor)
	float                                         CallFunc_GetAttribValue_ReturnValue;               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ELEVATOR_Base_C_InitializeAttributes) == 0x000004, "Wrong alignment on ELEVATOR_Base_C_InitializeAttributes");
static_assert(sizeof(ELEVATOR_Base_C_InitializeAttributes) == 0x000014, "Wrong size on ELEVATOR_Base_C_InitializeAttributes");
static_assert(offsetof(ELEVATOR_Base_C_InitializeAttributes, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'ELEVATOR_Base_C_InitializeAttributes::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_InitializeAttributes, CallFunc_GetAttribValue_ReturnValue) == 0x000010, "Member 'ELEVATOR_Base_C_InitializeAttributes::CallFunc_GetAttribValue_ReturnValue' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.SetElevatorEnabled
// 0x0038 (0x0038 - 0x0000)
struct ELEVATOR_Base_C_SetElevatorEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(ELEVATOR_Base_C_SetElevatorEnabled) == 0x000008, "Wrong alignment on ELEVATOR_Base_C_SetElevatorEnabled");
static_assert(sizeof(ELEVATOR_Base_C_SetElevatorEnabled) == 0x000038, "Wrong size on ELEVATOR_Base_C_SetElevatorEnabled");
static_assert(offsetof(ELEVATOR_Base_C_SetElevatorEnabled, Enabled) == 0x000000, "Member 'ELEVATOR_Base_C_SetElevatorEnabled::Enabled' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_SetElevatorEnabled, CallFunc_GetDisplayName_ReturnValue) == 0x000008, "Member 'ELEVATOR_Base_C_SetElevatorEnabled::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_SetElevatorEnabled, CallFunc_Concat_StrStr_ReturnValue) == 0x000018, "Member 'ELEVATOR_Base_C_SetElevatorEnabled::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_SetElevatorEnabled, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000028, "Member 'ELEVATOR_Base_C_SetElevatorEnabled::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.EVENT_OnFinishedUnloadingLevelCollection
// 0x0020 (0x0020 - 0x0000)
struct ELEVATOR_Base_C_EVENT_OnFinishedUnloadingLevelCollection final
{
public:
	bool                                          CallFunc_K2_IsTimerActiveHandle_ReturnValue;       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0018(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ELEVATOR_Base_C_EVENT_OnFinishedUnloadingLevelCollection) == 0x000008, "Wrong alignment on ELEVATOR_Base_C_EVENT_OnFinishedUnloadingLevelCollection");
static_assert(sizeof(ELEVATOR_Base_C_EVENT_OnFinishedUnloadingLevelCollection) == 0x000020, "Wrong size on ELEVATOR_Base_C_EVENT_OnFinishedUnloadingLevelCollection");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnFinishedUnloadingLevelCollection, CallFunc_K2_IsTimerActiveHandle_ReturnValue) == 0x000000, "Member 'ELEVATOR_Base_C_EVENT_OnFinishedUnloadingLevelCollection::CallFunc_K2_IsTimerActiveHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnFinishedUnloadingLevelCollection, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'ELEVATOR_Base_C_EVENT_OnFinishedUnloadingLevelCollection::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnFinishedUnloadingLevelCollection, CallFunc_Not_PreBool_ReturnValue) == 0x000014, "Member 'ELEVATOR_Base_C_EVENT_OnFinishedUnloadingLevelCollection::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnFinishedUnloadingLevelCollection, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000018, "Member 'ELEVATOR_Base_C_EVENT_OnFinishedUnloadingLevelCollection::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.IsElevatorOccupiedByPawn
// 0x0020 (0x0020 - 0x0000)
struct ELEVATOR_Base_C_IsElevatorOccupiedByPawn final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetOverlappingActors_OverlappingActors;   // 0x0008(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ELEVATOR_Base_C_IsElevatorOccupiedByPawn) == 0x000008, "Wrong alignment on ELEVATOR_Base_C_IsElevatorOccupiedByPawn");
static_assert(sizeof(ELEVATOR_Base_C_IsElevatorOccupiedByPawn) == 0x000020, "Wrong size on ELEVATOR_Base_C_IsElevatorOccupiedByPawn");
static_assert(offsetof(ELEVATOR_Base_C_IsElevatorOccupiedByPawn, Result) == 0x000000, "Member 'ELEVATOR_Base_C_IsElevatorOccupiedByPawn::Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_IsElevatorOccupiedByPawn, CallFunc_GetOverlappingActors_OverlappingActors) == 0x000008, "Member 'ELEVATOR_Base_C_IsElevatorOccupiedByPawn::CallFunc_GetOverlappingActors_OverlappingActors' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_IsElevatorOccupiedByPawn, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'ELEVATOR_Base_C_IsElevatorOccupiedByPawn::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_IsElevatorOccupiedByPawn, CallFunc_Greater_IntInt_ReturnValue) == 0x00001C, "Member 'ELEVATOR_Base_C_IsElevatorOccupiedByPawn::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.IsSafetySensorOccupiedByPawn
// 0x0020 (0x0020 - 0x0000)
struct ELEVATOR_Base_C_IsSafetySensorOccupiedByPawn final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetOverlappingActors_OverlappingActors;   // 0x0008(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ELEVATOR_Base_C_IsSafetySensorOccupiedByPawn) == 0x000008, "Wrong alignment on ELEVATOR_Base_C_IsSafetySensorOccupiedByPawn");
static_assert(sizeof(ELEVATOR_Base_C_IsSafetySensorOccupiedByPawn) == 0x000020, "Wrong size on ELEVATOR_Base_C_IsSafetySensorOccupiedByPawn");
static_assert(offsetof(ELEVATOR_Base_C_IsSafetySensorOccupiedByPawn, Result) == 0x000000, "Member 'ELEVATOR_Base_C_IsSafetySensorOccupiedByPawn::Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_IsSafetySensorOccupiedByPawn, CallFunc_GetOverlappingActors_OverlappingActors) == 0x000008, "Member 'ELEVATOR_Base_C_IsSafetySensorOccupiedByPawn::CallFunc_GetOverlappingActors_OverlappingActors' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_IsSafetySensorOccupiedByPawn, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'ELEVATOR_Base_C_IsSafetySensorOccupiedByPawn::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_IsSafetySensorOccupiedByPawn, CallFunc_Greater_IntInt_ReturnValue) == 0x00001C, "Member 'ELEVATOR_Base_C_IsSafetySensorOccupiedByPawn::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.TryOpenElevatorDoors
// 0x0028 (0x0028 - 0x0000)
struct ELEVATOR_Base_C_TryOpenElevatorDoors final
{
public:
	bool                                          Force;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Result;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryStartAtmosphereTransition_Result;      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0018(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanOpenDoors_ReturnValue;                 // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ELEVATOR_Base_C_TryOpenElevatorDoors) == 0x000008, "Wrong alignment on ELEVATOR_Base_C_TryOpenElevatorDoors");
static_assert(sizeof(ELEVATOR_Base_C_TryOpenElevatorDoors) == 0x000028, "Wrong size on ELEVATOR_Base_C_TryOpenElevatorDoors");
static_assert(offsetof(ELEVATOR_Base_C_TryOpenElevatorDoors, Force) == 0x000000, "Member 'ELEVATOR_Base_C_TryOpenElevatorDoors::Force' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryOpenElevatorDoors, Result) == 0x000001, "Member 'ELEVATOR_Base_C_TryOpenElevatorDoors::Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryOpenElevatorDoors, CallFunc_TryStartAtmosphereTransition_Result) == 0x000002, "Member 'ELEVATOR_Base_C_TryOpenElevatorDoors::CallFunc_TryStartAtmosphereTransition_Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryOpenElevatorDoors, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'ELEVATOR_Base_C_TryOpenElevatorDoors::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryOpenElevatorDoors, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000018, "Member 'ELEVATOR_Base_C_TryOpenElevatorDoors::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryOpenElevatorDoors, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000020, "Member 'ELEVATOR_Base_C_TryOpenElevatorDoors::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryOpenElevatorDoors, CallFunc_CanOpenDoors_ReturnValue) == 0x000021, "Member 'ELEVATOR_Base_C_TryOpenElevatorDoors::CallFunc_CanOpenDoors_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryOpenElevatorDoors, CallFunc_IsValid_ReturnValue) == 0x000022, "Member 'ELEVATOR_Base_C_TryOpenElevatorDoors::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.TryCloseElevatorDoors
// 0x0020 (0x0020 - 0x0000)
struct ELEVATOR_Base_C_TryCloseElevatorDoors final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryStartAtmosphereTransition_Result;      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ActivateDoor_Result;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ActivateDoor_Result_1;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanCloseDoors_ReturnValue;                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0018(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ELEVATOR_Base_C_TryCloseElevatorDoors) == 0x000008, "Wrong alignment on ELEVATOR_Base_C_TryCloseElevatorDoors");
static_assert(sizeof(ELEVATOR_Base_C_TryCloseElevatorDoors) == 0x000020, "Wrong size on ELEVATOR_Base_C_TryCloseElevatorDoors");
static_assert(offsetof(ELEVATOR_Base_C_TryCloseElevatorDoors, Result) == 0x000000, "Member 'ELEVATOR_Base_C_TryCloseElevatorDoors::Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryCloseElevatorDoors, CallFunc_TryStartAtmosphereTransition_Result) == 0x000001, "Member 'ELEVATOR_Base_C_TryCloseElevatorDoors::CallFunc_TryStartAtmosphereTransition_Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryCloseElevatorDoors, CallFunc_ActivateDoor_Result) == 0x000002, "Member 'ELEVATOR_Base_C_TryCloseElevatorDoors::CallFunc_ActivateDoor_Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryCloseElevatorDoors, CallFunc_ActivateDoor_Result_1) == 0x000003, "Member 'ELEVATOR_Base_C_TryCloseElevatorDoors::CallFunc_ActivateDoor_Result_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryCloseElevatorDoors, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000004, "Member 'ELEVATOR_Base_C_TryCloseElevatorDoors::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryCloseElevatorDoors, CallFunc_CanCloseDoors_ReturnValue) == 0x000005, "Member 'ELEVATOR_Base_C_TryCloseElevatorDoors::CallFunc_CanCloseDoors_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryCloseElevatorDoors, CallFunc_IsValid_ReturnValue) == 0x000006, "Member 'ELEVATOR_Base_C_TryCloseElevatorDoors::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryCloseElevatorDoors, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'ELEVATOR_Base_C_TryCloseElevatorDoors::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryCloseElevatorDoors, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000018, "Member 'ELEVATOR_Base_C_TryCloseElevatorDoors::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.StartAutoCloseTimer
// 0x0020 (0x0020 - 0x0000)
struct ELEVATOR_Base_C_StartAutoCloseTimer final
{
public:
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0018(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ELEVATOR_Base_C_StartAutoCloseTimer) == 0x000008, "Wrong alignment on ELEVATOR_Base_C_StartAutoCloseTimer");
static_assert(sizeof(ELEVATOR_Base_C_StartAutoCloseTimer) == 0x000020, "Wrong size on ELEVATOR_Base_C_StartAutoCloseTimer");
static_assert(offsetof(ELEVATOR_Base_C_StartAutoCloseTimer, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'ELEVATOR_Base_C_StartAutoCloseTimer::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_StartAutoCloseTimer, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000010, "Member 'ELEVATOR_Base_C_StartAutoCloseTimer::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_StartAutoCloseTimer, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000018, "Member 'ELEVATOR_Base_C_StartAutoCloseTimer::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.EVENT_OnMovementTick
// 0x01E0 (0x01E0 - 0x0000)
struct ELEVATOR_Base_C_EVENT_OnMovementTick final
{
public:
	float                                         MoveTimeRemaining;                                 // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FrameMoveDistance;                                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ElapsedTime;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentTimestamp;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSmoothMovementParameters_OutAcceleration; // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSmoothMovementParameters_OutConstantSpeedDuration; // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSmoothMovementParameters_OutConstantSpeedDistance; // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSmoothMovementParameters_OutActualAccelerationTime; // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSmoothMovementParameters_OutActualAccelerationDistance; // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetSmoothMovementParameters_ReturnValue;  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_1;                             // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0050(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0098(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x00C0(0x0030)(IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetDistanceAlongPathAtElapsedTime_ReturnValue; // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_2;        // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x00FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00FD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_IsTimerActiveHandle_ReturnValue;       // 0x00FE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x00FF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_101[0x3];                                      // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x0104(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetTransform_ReturnValue_1;               // 0x0110(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x0140(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x014C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x0158(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0164(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_171[0xF];                                      // 0x0171(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x0180(0x0030)(IsPlainOldData, NoDestructor)
	float                                         Temp_float_Variable_2;                             // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x01B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B5[0x3];                                      // 0x01B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default_1;                           // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_3;        // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_4;        // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_1;    // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1C9[0x3];                                      // 0x01C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue;         // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ELEVATOR_Base_C_EVENT_OnMovementTick) == 0x000010, "Wrong alignment on ELEVATOR_Base_C_EVENT_OnMovementTick");
static_assert(sizeof(ELEVATOR_Base_C_EVENT_OnMovementTick) == 0x0001E0, "Wrong size on ELEVATOR_Base_C_EVENT_OnMovementTick");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnMovementTick, MoveTimeRemaining) == 0x000000, "Member 'ELEVATOR_Base_C_EVENT_OnMovementTick::MoveTimeRemaining' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnMovementTick, FrameMoveDistance) == 0x000004, "Member 'ELEVATOR_Base_C_EVENT_OnMovementTick::FrameMoveDistance' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnMovementTick, ElapsedTime) == 0x000008, "Member 'ELEVATOR_Base_C_EVENT_OnMovementTick::ElapsedTime' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnMovementTick, CurrentTimestamp) == 0x00000C, "Member 'ELEVATOR_Base_C_EVENT_OnMovementTick::CurrentTimestamp' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnMovementTick, Temp_float_Variable) == 0x000010, "Member 'ELEVATOR_Base_C_EVENT_OnMovementTick::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnMovementTick, CallFunc_GetSmoothMovementParameters_OutAcceleration) == 0x000014, "Member 'ELEVATOR_Base_C_EVENT_OnMovementTick::CallFunc_GetSmoothMovementParameters_OutAcceleration' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnMovementTick, CallFunc_GetSmoothMovementParameters_OutConstantSpeedDuration) == 0x000018, "Member 'ELEVATOR_Base_C_EVENT_OnMovementTick::CallFunc_GetSmoothMovementParameters_OutConstantSpeedDuration' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnMovementTick, CallFunc_GetSmoothMovementParameters_OutConstantSpeedDistance) == 0x00001C, "Member 'ELEVATOR_Base_C_EVENT_OnMovementTick::CallFunc_GetSmoothMovementParameters_OutConstantSpeedDistance' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnMovementTick, CallFunc_GetSmoothMovementParameters_OutActualAccelerationTime) == 0x000020, "Member 'ELEVATOR_Base_C_EVENT_OnMovementTick::CallFunc_GetSmoothMovementParameters_OutActualAccelerationTime' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnMovementTick, CallFunc_GetSmoothMovementParameters_OutActualAccelerationDistance) == 0x000024, "Member 'ELEVATOR_Base_C_EVENT_OnMovementTick::CallFunc_GetSmoothMovementParameters_OutActualAccelerationDistance' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnMovementTick, CallFunc_GetSmoothMovementParameters_ReturnValue) == 0x000028, "Member 'ELEVATOR_Base_C_EVENT_OnMovementTick::CallFunc_GetSmoothMovementParameters_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnMovementTick, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00002C, "Member 'ELEVATOR_Base_C_EVENT_OnMovementTick::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnMovementTick, CallFunc_Add_FloatFloat_ReturnValue) == 0x000030, "Member 'ELEVATOR_Base_C_EVENT_OnMovementTick::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnMovementTick, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000034, "Member 'ELEVATOR_Base_C_EVENT_OnMovementTick::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnMovementTick, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000038, "Member 'ELEVATOR_Base_C_EVENT_OnMovementTick::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnMovementTick, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00003C, "Member 'ELEVATOR_Base_C_EVENT_OnMovementTick::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnMovementTick, CallFunc_Not_PreBool_ReturnValue) == 0x000040, "Member 'ELEVATOR_Base_C_EVENT_OnMovementTick::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnMovementTick, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000041, "Member 'ELEVATOR_Base_C_EVENT_OnMovementTick::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnMovementTick, Temp_float_Variable_1) == 0x000044, "Member 'ELEVATOR_Base_C_EVENT_OnMovementTick::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnMovementTick, Temp_bool_Variable) == 0x000048, "Member 'ELEVATOR_Base_C_EVENT_OnMovementTick::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnMovementTick, CallFunc_GetTransform_ReturnValue) == 0x000050, "Member 'ELEVATOR_Base_C_EVENT_OnMovementTick::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnMovementTick, CallFunc_BreakTransform_Location) == 0x000080, "Member 'ELEVATOR_Base_C_EVENT_OnMovementTick::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnMovementTick, CallFunc_BreakTransform_Rotation) == 0x00008C, "Member 'ELEVATOR_Base_C_EVENT_OnMovementTick::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnMovementTick, CallFunc_BreakTransform_Scale) == 0x000098, "Member 'ELEVATOR_Base_C_EVENT_OnMovementTick::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnMovementTick, K2Node_Select_Default) == 0x0000A4, "Member 'ELEVATOR_Base_C_EVENT_OnMovementTick::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnMovementTick, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0000A8, "Member 'ELEVATOR_Base_C_EVENT_OnMovementTick::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnMovementTick, CallFunc_Add_VectorVector_ReturnValue) == 0x0000B4, "Member 'ELEVATOR_Base_C_EVENT_OnMovementTick::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnMovementTick, CallFunc_MakeTransform_ReturnValue) == 0x0000C0, "Member 'ELEVATOR_Base_C_EVENT_OnMovementTick::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnMovementTick, CallFunc_GetDistanceAlongPathAtElapsedTime_ReturnValue) == 0x0000F0, "Member 'ELEVATOR_Base_C_EVENT_OnMovementTick::CallFunc_GetDistanceAlongPathAtElapsedTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnMovementTick, CallFunc_FMin_ReturnValue) == 0x0000F4, "Member 'ELEVATOR_Base_C_EVENT_OnMovementTick::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnMovementTick, CallFunc_Subtract_FloatFloat_ReturnValue_2) == 0x0000F8, "Member 'ELEVATOR_Base_C_EVENT_OnMovementTick::CallFunc_Subtract_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnMovementTick, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x0000FC, "Member 'ELEVATOR_Base_C_EVENT_OnMovementTick::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnMovementTick, CallFunc_BooleanOR_ReturnValue) == 0x0000FD, "Member 'ELEVATOR_Base_C_EVENT_OnMovementTick::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnMovementTick, CallFunc_K2_IsTimerActiveHandle_ReturnValue) == 0x0000FE, "Member 'ELEVATOR_Base_C_EVENT_OnMovementTick::CallFunc_K2_IsTimerActiveHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnMovementTick, CallFunc_Not_PreBool_ReturnValue_1) == 0x0000FF, "Member 'ELEVATOR_Base_C_EVENT_OnMovementTick::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnMovementTick, CallFunc_BooleanAND_ReturnValue) == 0x000100, "Member 'ELEVATOR_Base_C_EVENT_OnMovementTick::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnMovementTick, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x000104, "Member 'ELEVATOR_Base_C_EVENT_OnMovementTick::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnMovementTick, CallFunc_GetTransform_ReturnValue_1) == 0x000110, "Member 'ELEVATOR_Base_C_EVENT_OnMovementTick::CallFunc_GetTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnMovementTick, CallFunc_BreakTransform_Location_1) == 0x000140, "Member 'ELEVATOR_Base_C_EVENT_OnMovementTick::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnMovementTick, CallFunc_BreakTransform_Rotation_1) == 0x00014C, "Member 'ELEVATOR_Base_C_EVENT_OnMovementTick::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnMovementTick, CallFunc_BreakTransform_Scale_1) == 0x000158, "Member 'ELEVATOR_Base_C_EVENT_OnMovementTick::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnMovementTick, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000164, "Member 'ELEVATOR_Base_C_EVENT_OnMovementTick::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnMovementTick, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000170, "Member 'ELEVATOR_Base_C_EVENT_OnMovementTick::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnMovementTick, CallFunc_MakeTransform_ReturnValue_1) == 0x000180, "Member 'ELEVATOR_Base_C_EVENT_OnMovementTick::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnMovementTick, Temp_float_Variable_2) == 0x0001B0, "Member 'ELEVATOR_Base_C_EVENT_OnMovementTick::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnMovementTick, Temp_bool_Variable_1) == 0x0001B4, "Member 'ELEVATOR_Base_C_EVENT_OnMovementTick::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnMovementTick, K2Node_Select_Default_1) == 0x0001B8, "Member 'ELEVATOR_Base_C_EVENT_OnMovementTick::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnMovementTick, CallFunc_Subtract_FloatFloat_ReturnValue_3) == 0x0001BC, "Member 'ELEVATOR_Base_C_EVENT_OnMovementTick::CallFunc_Subtract_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnMovementTick, CallFunc_Subtract_FloatFloat_ReturnValue_4) == 0x0001C0, "Member 'ELEVATOR_Base_C_EVENT_OnMovementTick::CallFunc_Subtract_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnMovementTick, CallFunc_FMax_ReturnValue) == 0x0001C4, "Member 'ELEVATOR_Base_C_EVENT_OnMovementTick::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnMovementTick, CallFunc_GreaterEqual_FloatFloat_ReturnValue_1) == 0x0001C8, "Member 'ELEVATOR_Base_C_EVENT_OnMovementTick::CallFunc_GreaterEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnMovementTick, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x0001CC, "Member 'ELEVATOR_Base_C_EVENT_OnMovementTick::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnMovementTick, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x0001D0, "Member 'ELEVATOR_Base_C_EVENT_OnMovementTick::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnMovementTick, CallFunc_GetGameTimeInSeconds_ReturnValue) == 0x0001D4, "Member 'ELEVATOR_Base_C_EVENT_OnMovementTick::CallFunc_GetGameTimeInSeconds_ReturnValue' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.EVENT_AutoCloseDoors
// 0x0001 (0x0001 - 0x0000)
struct ELEVATOR_Base_C_EVENT_AutoCloseDoors final
{
public:
	bool                                          CallFunc_TryCloseElevatorDoors_Result;             // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ELEVATOR_Base_C_EVENT_AutoCloseDoors) == 0x000001, "Wrong alignment on ELEVATOR_Base_C_EVENT_AutoCloseDoors");
static_assert(sizeof(ELEVATOR_Base_C_EVENT_AutoCloseDoors) == 0x000001, "Wrong size on ELEVATOR_Base_C_EVENT_AutoCloseDoors");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_AutoCloseDoors, CallFunc_TryCloseElevatorDoors_Result) == 0x000000, "Member 'ELEVATOR_Base_C_EVENT_AutoCloseDoors::CallFunc_TryCloseElevatorDoors_Result' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.IsOverlappingAnyLivingEnemy
// 0x0090 (0x0090 - 0x0000)
struct ELEVATOR_Base_C_IsOverlappingAnyLivingEnemy final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         EnemyActors;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item_1;                         // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_Enemy_C*                          K2Node_DynamicCast_AsPAWN_Enemy;                   // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_Enemy_C*                          K2Node_DynamicCast_AsPAWN_Enemy_1;                 // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetOverlappingActors_OverlappingActors;   // 0x0068(0x0010)(ReferenceParm)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         CallFunc_GetOverlappingActors_OverlappingActors_1; // 0x0080(0x0010)(ReferenceParm)
};
static_assert(alignof(ELEVATOR_Base_C_IsOverlappingAnyLivingEnemy) == 0x000008, "Wrong alignment on ELEVATOR_Base_C_IsOverlappingAnyLivingEnemy");
static_assert(sizeof(ELEVATOR_Base_C_IsOverlappingAnyLivingEnemy) == 0x000090, "Wrong size on ELEVATOR_Base_C_IsOverlappingAnyLivingEnemy");
static_assert(offsetof(ELEVATOR_Base_C_IsOverlappingAnyLivingEnemy, Result) == 0x000000, "Member 'ELEVATOR_Base_C_IsOverlappingAnyLivingEnemy::Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_IsOverlappingAnyLivingEnemy, EnemyActors) == 0x000008, "Member 'ELEVATOR_Base_C_IsOverlappingAnyLivingEnemy::EnemyActors' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_IsOverlappingAnyLivingEnemy, Temp_int_Array_Index_Variable) == 0x000018, "Member 'ELEVATOR_Base_C_IsOverlappingAnyLivingEnemy::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_IsOverlappingAnyLivingEnemy, CallFunc_Array_Length_ReturnValue) == 0x00001C, "Member 'ELEVATOR_Base_C_IsOverlappingAnyLivingEnemy::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_IsOverlappingAnyLivingEnemy, Temp_int_Loop_Counter_Variable) == 0x000020, "Member 'ELEVATOR_Base_C_IsOverlappingAnyLivingEnemy::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_IsOverlappingAnyLivingEnemy, CallFunc_Less_IntInt_ReturnValue) == 0x000024, "Member 'ELEVATOR_Base_C_IsOverlappingAnyLivingEnemy::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_IsOverlappingAnyLivingEnemy, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'ELEVATOR_Base_C_IsOverlappingAnyLivingEnemy::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_IsOverlappingAnyLivingEnemy, Temp_int_Array_Index_Variable_1) == 0x00002C, "Member 'ELEVATOR_Base_C_IsOverlappingAnyLivingEnemy::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_IsOverlappingAnyLivingEnemy, CallFunc_Array_Get_Item) == 0x000030, "Member 'ELEVATOR_Base_C_IsOverlappingAnyLivingEnemy::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_IsOverlappingAnyLivingEnemy, CallFunc_Array_Get_Item_1) == 0x000038, "Member 'ELEVATOR_Base_C_IsOverlappingAnyLivingEnemy::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_IsOverlappingAnyLivingEnemy, K2Node_DynamicCast_AsPAWN_Enemy) == 0x000040, "Member 'ELEVATOR_Base_C_IsOverlappingAnyLivingEnemy::K2Node_DynamicCast_AsPAWN_Enemy' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_IsOverlappingAnyLivingEnemy, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'ELEVATOR_Base_C_IsOverlappingAnyLivingEnemy::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_IsOverlappingAnyLivingEnemy, K2Node_DynamicCast_AsPAWN_Enemy_1) == 0x000050, "Member 'ELEVATOR_Base_C_IsOverlappingAnyLivingEnemy::K2Node_DynamicCast_AsPAWN_Enemy_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_IsOverlappingAnyLivingEnemy, K2Node_DynamicCast_bSuccess_1) == 0x000058, "Member 'ELEVATOR_Base_C_IsOverlappingAnyLivingEnemy::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_IsOverlappingAnyLivingEnemy, CallFunc_Array_Length_ReturnValue_1) == 0x00005C, "Member 'ELEVATOR_Base_C_IsOverlappingAnyLivingEnemy::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_IsOverlappingAnyLivingEnemy, Temp_int_Loop_Counter_Variable_1) == 0x000060, "Member 'ELEVATOR_Base_C_IsOverlappingAnyLivingEnemy::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_IsOverlappingAnyLivingEnemy, CallFunc_GetOverlappingActors_OverlappingActors) == 0x000068, "Member 'ELEVATOR_Base_C_IsOverlappingAnyLivingEnemy::CallFunc_GetOverlappingActors_OverlappingActors' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_IsOverlappingAnyLivingEnemy, CallFunc_Less_IntInt_ReturnValue_1) == 0x000078, "Member 'ELEVATOR_Base_C_IsOverlappingAnyLivingEnemy::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_IsOverlappingAnyLivingEnemy, CallFunc_Add_IntInt_ReturnValue_1) == 0x00007C, "Member 'ELEVATOR_Base_C_IsOverlappingAnyLivingEnemy::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_IsOverlappingAnyLivingEnemy, CallFunc_GetOverlappingActors_OverlappingActors_1) == 0x000080, "Member 'ELEVATOR_Base_C_IsOverlappingAnyLivingEnemy::CallFunc_GetOverlappingActors_OverlappingActors_1' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.IsValidOccupant
// 0x0060 (0x0060 - 0x0000)
struct ELEVATOR_Base_C_IsValidOccupant final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_SystemShockCharacter_C*           K2Node_DynamicCast_AsPAWN_System_Shock_Character;  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AExplosiveProjectile_Base_C*            K2Node_DynamicCast_AsExplosive_Projectile_Base;    // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADEBRIS_Base_C*                         K2Node_DynamicCast_AsDEBRIS_Base;                  // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADismembermentLimb_Base_C*              K2Node_DynamicCast_AsDismemberment_Limb_Base;      // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APICKUP_Base_C*                         K2Node_DynamicCast_AsPICKUP_Base;                  // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x005B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_3;                  // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ELEVATOR_Base_C_IsValidOccupant) == 0x000008, "Wrong alignment on ELEVATOR_Base_C_IsValidOccupant");
static_assert(sizeof(ELEVATOR_Base_C_IsValidOccupant) == 0x000060, "Wrong size on ELEVATOR_Base_C_IsValidOccupant");
static_assert(offsetof(ELEVATOR_Base_C_IsValidOccupant, Actor) == 0x000000, "Member 'ELEVATOR_Base_C_IsValidOccupant::Actor' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_IsValidOccupant, Result) == 0x000008, "Member 'ELEVATOR_Base_C_IsValidOccupant::Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_IsValidOccupant, K2Node_DynamicCast_AsPAWN_System_Shock_Character) == 0x000010, "Member 'ELEVATOR_Base_C_IsValidOccupant::K2Node_DynamicCast_AsPAWN_System_Shock_Character' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_IsValidOccupant, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'ELEVATOR_Base_C_IsValidOccupant::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_IsValidOccupant, K2Node_DynamicCast_AsExplosive_Projectile_Base) == 0x000020, "Member 'ELEVATOR_Base_C_IsValidOccupant::K2Node_DynamicCast_AsExplosive_Projectile_Base' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_IsValidOccupant, K2Node_DynamicCast_bSuccess_1) == 0x000028, "Member 'ELEVATOR_Base_C_IsValidOccupant::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_IsValidOccupant, K2Node_DynamicCast_AsDEBRIS_Base) == 0x000030, "Member 'ELEVATOR_Base_C_IsValidOccupant::K2Node_DynamicCast_AsDEBRIS_Base' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_IsValidOccupant, K2Node_DynamicCast_bSuccess_2) == 0x000038, "Member 'ELEVATOR_Base_C_IsValidOccupant::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_IsValidOccupant, K2Node_DynamicCast_AsDismemberment_Limb_Base) == 0x000040, "Member 'ELEVATOR_Base_C_IsValidOccupant::K2Node_DynamicCast_AsDismemberment_Limb_Base' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_IsValidOccupant, K2Node_DynamicCast_bSuccess_3) == 0x000048, "Member 'ELEVATOR_Base_C_IsValidOccupant::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_IsValidOccupant, K2Node_DynamicCast_AsPICKUP_Base) == 0x000050, "Member 'ELEVATOR_Base_C_IsValidOccupant::K2Node_DynamicCast_AsPICKUP_Base' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_IsValidOccupant, K2Node_DynamicCast_bSuccess_4) == 0x000058, "Member 'ELEVATOR_Base_C_IsValidOccupant::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_IsValidOccupant, CallFunc_BooleanOR_ReturnValue) == 0x000059, "Member 'ELEVATOR_Base_C_IsValidOccupant::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_IsValidOccupant, CallFunc_BooleanOR_ReturnValue_1) == 0x00005A, "Member 'ELEVATOR_Base_C_IsValidOccupant::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_IsValidOccupant, CallFunc_BooleanOR_ReturnValue_2) == 0x00005B, "Member 'ELEVATOR_Base_C_IsValidOccupant::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_IsValidOccupant, CallFunc_BooleanOR_ReturnValue_3) == 0x00005C, "Member 'ELEVATOR_Base_C_IsValidOccupant::CallFunc_BooleanOR_ReturnValue_3' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.CanOpenDoors
// 0x0011 (0x0011 - 0x0000)
struct ELEVATOR_Base_C_CanOpenDoors final
{
public:
	bool                                          Force;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_4;        // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_5;        // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_6;        // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_3;                  // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_7;        // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_4;                  // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ELEVATOR_Base_C_CanOpenDoors) == 0x000001, "Wrong alignment on ELEVATOR_Base_C_CanOpenDoors");
static_assert(sizeof(ELEVATOR_Base_C_CanOpenDoors) == 0x000011, "Wrong size on ELEVATOR_Base_C_CanOpenDoors");
static_assert(offsetof(ELEVATOR_Base_C_CanOpenDoors, Force) == 0x000000, "Member 'ELEVATOR_Base_C_CanOpenDoors::Force' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_CanOpenDoors, ReturnValue) == 0x000001, "Member 'ELEVATOR_Base_C_CanOpenDoors::ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_CanOpenDoors, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000002, "Member 'ELEVATOR_Base_C_CanOpenDoors::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_CanOpenDoors, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000003, "Member 'ELEVATOR_Base_C_CanOpenDoors::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_CanOpenDoors, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000004, "Member 'ELEVATOR_Base_C_CanOpenDoors::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_CanOpenDoors, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000005, "Member 'ELEVATOR_Base_C_CanOpenDoors::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_CanOpenDoors, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x000006, "Member 'ELEVATOR_Base_C_CanOpenDoors::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_CanOpenDoors, CallFunc_EqualEqual_ByteByte_ReturnValue_4) == 0x000007, "Member 'ELEVATOR_Base_C_CanOpenDoors::CallFunc_EqualEqual_ByteByte_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_CanOpenDoors, CallFunc_EqualEqual_ByteByte_ReturnValue_5) == 0x000008, "Member 'ELEVATOR_Base_C_CanOpenDoors::CallFunc_EqualEqual_ByteByte_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_CanOpenDoors, CallFunc_BooleanOR_ReturnValue) == 0x000009, "Member 'ELEVATOR_Base_C_CanOpenDoors::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_CanOpenDoors, CallFunc_BooleanOR_ReturnValue_1) == 0x00000A, "Member 'ELEVATOR_Base_C_CanOpenDoors::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_CanOpenDoors, CallFunc_BooleanOR_ReturnValue_2) == 0x00000B, "Member 'ELEVATOR_Base_C_CanOpenDoors::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_CanOpenDoors, CallFunc_EqualEqual_ByteByte_ReturnValue_6) == 0x00000C, "Member 'ELEVATOR_Base_C_CanOpenDoors::CallFunc_EqualEqual_ByteByte_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_CanOpenDoors, CallFunc_BooleanOR_ReturnValue_3) == 0x00000D, "Member 'ELEVATOR_Base_C_CanOpenDoors::CallFunc_BooleanOR_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_CanOpenDoors, CallFunc_EqualEqual_ByteByte_ReturnValue_7) == 0x00000E, "Member 'ELEVATOR_Base_C_CanOpenDoors::CallFunc_EqualEqual_ByteByte_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_CanOpenDoors, CallFunc_BooleanOR_ReturnValue_4) == 0x00000F, "Member 'ELEVATOR_Base_C_CanOpenDoors::CallFunc_BooleanOR_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_CanOpenDoors, CallFunc_BooleanAND_ReturnValue) == 0x000010, "Member 'ELEVATOR_Base_C_CanOpenDoors::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.TryInteract
// 0x02E0 (0x02E0 - 0x0000)
struct ELEVATOR_Base_C_TryInteract final
{
public:
	class AActor*                                 SourceActor;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CursorPrimitive;                                   // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_InteractionType                          InteractionType;                                   // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_InteractResults                InteractResults;                                   // 0x0018(0x0020)(Parm, OutParm, HasGetValueTypeHash)
	class FName                                   DesiredTargetLevel;                                // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_DoorState                                InnerDoorState;                                    // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TriedMovingToCurrentLevel;                         // 0x0041(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class FName>                             LevelNames;                                        // 0x0048(0x0050)(Edit, BlueprintVisible)
	float                                         ElevatorCloseDuration;                             // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_InteractResults                K2Node_MakeStruct_STRUCT_InteractResults;          // 0x00A0(0x0020)(HasGetValueTypeHash)
	class APAWN_Hacker_Implant_C*                 K2Node_DynamicCast_AsPAWN_Hacker_Implant;          // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_InteractResults                K2Node_MakeStruct_STRUCT_InteractResults_1;        // 0x00D0(0x0020)(HasGetValueTypeHash)
	TSet<class FName>                             K2Node_MakeVariable_MakeVariableOutput;            // 0x00F0(0x0050)()
	struct FSTRUCT_InteractResults                K2Node_MakeStruct_STRUCT_InteractResults_2;        // 0x0140(0x0020)(HasGetValueTypeHash)
	struct FSTRUCT_InteractResults                K2Node_MakeStruct_STRUCT_InteractResults_3;        // 0x0160(0x0020)(HasGetValueTypeHash)
	struct FSTRUCT_InteractResults                K2Node_MakeStruct_STRUCT_InteractResults_4;        // 0x0180(0x0020)(HasGetValueTypeHash)
	struct FSTRUCT_InteractResults                K2Node_MakeStruct_STRUCT_InteractResults_5;        // 0x01A0(0x0020)(HasGetValueTypeHash)
	struct FSTRUCT_InteractResults                K2Node_MakeStruct_STRUCT_InteractResults_6;        // 0x01C0(0x0020)(HasGetValueTypeHash)
	struct FSTRUCT_InteractResults                K2Node_MakeStruct_STRUCT_InteractResults_7;        // 0x01E0(0x0020)(HasGetValueTypeHash)
	struct FSTRUCT_InteractResults                K2Node_MakeStruct_STRUCT_InteractResults_8;        // 0x0200(0x0020)(HasGetValueTypeHash)
	struct FSTRUCT_InteractResults                K2Node_MakeStruct_STRUCT_InteractResults_9;        // 0x0220(0x0020)(HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0240(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanUseElevator_Success;                   // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_249[0x7];                                      // 0x0249(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_CanUseElevator_FailMessage;               // 0x0250(0x0018)()
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x0268(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0270(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_271[0x7];                                      // 0x0271(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_InteractResults                K2Node_MakeStruct_STRUCT_InteractResults_10;       // 0x0278(0x0020)(HasGetValueTypeHash)
	class FName                                   CallFunc_GetCurrentLevelName_Result;               // 0x0298(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAnyDoorClosing_Result;                  // 0x02A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEveryDoorClosed_Result;                 // 0x02A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryOpenElevatorDoors_Result;              // 0x02A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x02A3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEveryDoorClosed_Result_1;               // 0x02A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAnyDoorOpening_Result;                  // 0x02A5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAnyDoorClosing_Result_1;                // 0x02A6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryCloseElevatorDoors_Result;             // 0x02A7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEveryDoorClosed_Result_2;               // 0x02A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAnyDoorOpening_Result_1;                // 0x02A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAnyDoorClosing_Result_2;                // 0x02AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2AB[0x5];                                      // 0x02AB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_InteractResults                K2Node_MakeStruct_STRUCT_InteractResults_11;       // 0x02B0(0x0020)(HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x02D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryOpenElevatorDoors_Result_1;            // 0x02D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D2[0x2];                                      // 0x02D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetTargetLevelName_TargetLevel;           // 0x02D4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ELEVATOR_Base_C_TryInteract) == 0x000008, "Wrong alignment on ELEVATOR_Base_C_TryInteract");
static_assert(sizeof(ELEVATOR_Base_C_TryInteract) == 0x0002E0, "Wrong size on ELEVATOR_Base_C_TryInteract");
static_assert(offsetof(ELEVATOR_Base_C_TryInteract, SourceActor) == 0x000000, "Member 'ELEVATOR_Base_C_TryInteract::SourceActor' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryInteract, CursorPrimitive) == 0x000008, "Member 'ELEVATOR_Base_C_TryInteract::CursorPrimitive' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryInteract, InteractionType) == 0x000010, "Member 'ELEVATOR_Base_C_TryInteract::InteractionType' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryInteract, InteractResults) == 0x000018, "Member 'ELEVATOR_Base_C_TryInteract::InteractResults' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryInteract, DesiredTargetLevel) == 0x000038, "Member 'ELEVATOR_Base_C_TryInteract::DesiredTargetLevel' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryInteract, InnerDoorState) == 0x000040, "Member 'ELEVATOR_Base_C_TryInteract::InnerDoorState' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryInteract, TriedMovingToCurrentLevel) == 0x000041, "Member 'ELEVATOR_Base_C_TryInteract::TriedMovingToCurrentLevel' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryInteract, LevelNames) == 0x000048, "Member 'ELEVATOR_Base_C_TryInteract::LevelNames' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryInteract, ElevatorCloseDuration) == 0x000098, "Member 'ELEVATOR_Base_C_TryInteract::ElevatorCloseDuration' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryInteract, K2Node_MakeStruct_STRUCT_InteractResults) == 0x0000A0, "Member 'ELEVATOR_Base_C_TryInteract::K2Node_MakeStruct_STRUCT_InteractResults' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryInteract, K2Node_DynamicCast_AsPAWN_Hacker_Implant) == 0x0000C0, "Member 'ELEVATOR_Base_C_TryInteract::K2Node_DynamicCast_AsPAWN_Hacker_Implant' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryInteract, K2Node_DynamicCast_bSuccess) == 0x0000C8, "Member 'ELEVATOR_Base_C_TryInteract::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryInteract, K2Node_MakeStruct_STRUCT_InteractResults_1) == 0x0000D0, "Member 'ELEVATOR_Base_C_TryInteract::K2Node_MakeStruct_STRUCT_InteractResults_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryInteract, K2Node_MakeVariable_MakeVariableOutput) == 0x0000F0, "Member 'ELEVATOR_Base_C_TryInteract::K2Node_MakeVariable_MakeVariableOutput' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryInteract, K2Node_MakeStruct_STRUCT_InteractResults_2) == 0x000140, "Member 'ELEVATOR_Base_C_TryInteract::K2Node_MakeStruct_STRUCT_InteractResults_2' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryInteract, K2Node_MakeStruct_STRUCT_InteractResults_3) == 0x000160, "Member 'ELEVATOR_Base_C_TryInteract::K2Node_MakeStruct_STRUCT_InteractResults_3' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryInteract, K2Node_MakeStruct_STRUCT_InteractResults_4) == 0x000180, "Member 'ELEVATOR_Base_C_TryInteract::K2Node_MakeStruct_STRUCT_InteractResults_4' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryInteract, K2Node_MakeStruct_STRUCT_InteractResults_5) == 0x0001A0, "Member 'ELEVATOR_Base_C_TryInteract::K2Node_MakeStruct_STRUCT_InteractResults_5' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryInteract, K2Node_MakeStruct_STRUCT_InteractResults_6) == 0x0001C0, "Member 'ELEVATOR_Base_C_TryInteract::K2Node_MakeStruct_STRUCT_InteractResults_6' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryInteract, K2Node_MakeStruct_STRUCT_InteractResults_7) == 0x0001E0, "Member 'ELEVATOR_Base_C_TryInteract::K2Node_MakeStruct_STRUCT_InteractResults_7' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryInteract, K2Node_MakeStruct_STRUCT_InteractResults_8) == 0x000200, "Member 'ELEVATOR_Base_C_TryInteract::K2Node_MakeStruct_STRUCT_InteractResults_8' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryInteract, K2Node_MakeStruct_STRUCT_InteractResults_9) == 0x000220, "Member 'ELEVATOR_Base_C_TryInteract::K2Node_MakeStruct_STRUCT_InteractResults_9' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryInteract, CallFunc_GetGameInstance_ReturnValue) == 0x000240, "Member 'ELEVATOR_Base_C_TryInteract::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryInteract, CallFunc_CanUseElevator_Success) == 0x000248, "Member 'ELEVATOR_Base_C_TryInteract::CallFunc_CanUseElevator_Success' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryInteract, CallFunc_CanUseElevator_FailMessage) == 0x000250, "Member 'ELEVATOR_Base_C_TryInteract::CallFunc_CanUseElevator_FailMessage' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryInteract, K2Node_DynamicCast_AsGI_Single_Player) == 0x000268, "Member 'ELEVATOR_Base_C_TryInteract::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryInteract, K2Node_DynamicCast_bSuccess_1) == 0x000270, "Member 'ELEVATOR_Base_C_TryInteract::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryInteract, K2Node_MakeStruct_STRUCT_InteractResults_10) == 0x000278, "Member 'ELEVATOR_Base_C_TryInteract::K2Node_MakeStruct_STRUCT_InteractResults_10' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryInteract, CallFunc_GetCurrentLevelName_Result) == 0x000298, "Member 'ELEVATOR_Base_C_TryInteract::CallFunc_GetCurrentLevelName_Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryInteract, CallFunc_IsAnyDoorClosing_Result) == 0x0002A0, "Member 'ELEVATOR_Base_C_TryInteract::CallFunc_IsAnyDoorClosing_Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryInteract, CallFunc_IsEveryDoorClosed_Result) == 0x0002A1, "Member 'ELEVATOR_Base_C_TryInteract::CallFunc_IsEveryDoorClosed_Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryInteract, CallFunc_TryOpenElevatorDoors_Result) == 0x0002A2, "Member 'ELEVATOR_Base_C_TryInteract::CallFunc_TryOpenElevatorDoors_Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryInteract, CallFunc_BooleanOR_ReturnValue) == 0x0002A3, "Member 'ELEVATOR_Base_C_TryInteract::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryInteract, CallFunc_IsEveryDoorClosed_Result_1) == 0x0002A4, "Member 'ELEVATOR_Base_C_TryInteract::CallFunc_IsEveryDoorClosed_Result_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryInteract, CallFunc_IsAnyDoorOpening_Result) == 0x0002A5, "Member 'ELEVATOR_Base_C_TryInteract::CallFunc_IsAnyDoorOpening_Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryInteract, CallFunc_IsAnyDoorClosing_Result_1) == 0x0002A6, "Member 'ELEVATOR_Base_C_TryInteract::CallFunc_IsAnyDoorClosing_Result_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryInteract, CallFunc_TryCloseElevatorDoors_Result) == 0x0002A7, "Member 'ELEVATOR_Base_C_TryInteract::CallFunc_TryCloseElevatorDoors_Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryInteract, CallFunc_IsEveryDoorClosed_Result_2) == 0x0002A8, "Member 'ELEVATOR_Base_C_TryInteract::CallFunc_IsEveryDoorClosed_Result_2' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryInteract, CallFunc_IsAnyDoorOpening_Result_1) == 0x0002A9, "Member 'ELEVATOR_Base_C_TryInteract::CallFunc_IsAnyDoorOpening_Result_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryInteract, CallFunc_IsAnyDoorClosing_Result_2) == 0x0002AA, "Member 'ELEVATOR_Base_C_TryInteract::CallFunc_IsAnyDoorClosing_Result_2' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryInteract, K2Node_MakeStruct_STRUCT_InteractResults_11) == 0x0002B0, "Member 'ELEVATOR_Base_C_TryInteract::K2Node_MakeStruct_STRUCT_InteractResults_11' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryInteract, CallFunc_EqualEqual_NameName_ReturnValue) == 0x0002D0, "Member 'ELEVATOR_Base_C_TryInteract::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryInteract, CallFunc_TryOpenElevatorDoors_Result_1) == 0x0002D1, "Member 'ELEVATOR_Base_C_TryInteract::CallFunc_TryOpenElevatorDoors_Result_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryInteract, CallFunc_GetTargetLevelName_TargetLevel) == 0x0002D4, "Member 'ELEVATOR_Base_C_TryInteract::CallFunc_GetTargetLevelName_TargetLevel' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.CanCloseDoors
// 0x0008 (0x0008 - 0x0000)
struct ELEVATOR_Base_C_CanCloseDoors final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ELEVATOR_Base_C_CanCloseDoors) == 0x000001, "Wrong alignment on ELEVATOR_Base_C_CanCloseDoors");
static_assert(sizeof(ELEVATOR_Base_C_CanCloseDoors) == 0x000008, "Wrong size on ELEVATOR_Base_C_CanCloseDoors");
static_assert(offsetof(ELEVATOR_Base_C_CanCloseDoors, ReturnValue) == 0x000000, "Member 'ELEVATOR_Base_C_CanCloseDoors::ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_CanCloseDoors, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000001, "Member 'ELEVATOR_Base_C_CanCloseDoors::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_CanCloseDoors, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000002, "Member 'ELEVATOR_Base_C_CanCloseDoors::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_CanCloseDoors, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000003, "Member 'ELEVATOR_Base_C_CanCloseDoors::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_CanCloseDoors, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x000004, "Member 'ELEVATOR_Base_C_CanCloseDoors::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_CanCloseDoors, CallFunc_BooleanOR_ReturnValue) == 0x000005, "Member 'ELEVATOR_Base_C_CanCloseDoors::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_CanCloseDoors, CallFunc_BooleanOR_ReturnValue_1) == 0x000006, "Member 'ELEVATOR_Base_C_CanCloseDoors::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_CanCloseDoors, CallFunc_BooleanAND_ReturnValue) == 0x000007, "Member 'ELEVATOR_Base_C_CanCloseDoors::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.CanUseElevator
// 0x0060 (0x0060 - 0x0000)
struct ELEVATOR_Base_C_CanUseElevator final
{
public:
	class APAWN_Hacker_Simple_C*                  Hacker;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CursorPrimitive;                                   // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   FailMessage;                                       // 0x0018(0x0018)(Parm, OutParm)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryPlayPublicAddressMessage_Result;       // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSoundPlaying_ReturnValue;               // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsElevatorFunctional_Result;              // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0056(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOverlappingAnyLivingEnemy_Result;       // 0x0057(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOverlappingActor_ReturnValue;           // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOverlappingActor_ReturnValue_1;         // 0x005B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ELEVATOR_Base_C_CanUseElevator) == 0x000008, "Wrong alignment on ELEVATOR_Base_C_CanUseElevator");
static_assert(sizeof(ELEVATOR_Base_C_CanUseElevator) == 0x000060, "Wrong size on ELEVATOR_Base_C_CanUseElevator");
static_assert(offsetof(ELEVATOR_Base_C_CanUseElevator, Hacker) == 0x000000, "Member 'ELEVATOR_Base_C_CanUseElevator::Hacker' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_CanUseElevator, CursorPrimitive) == 0x000008, "Member 'ELEVATOR_Base_C_CanUseElevator::CursorPrimitive' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_CanUseElevator, Success) == 0x000010, "Member 'ELEVATOR_Base_C_CanUseElevator::Success' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_CanUseElevator, FailMessage) == 0x000018, "Member 'ELEVATOR_Base_C_CanUseElevator::FailMessage' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_CanUseElevator, CallFunc_GetGameInstance_ReturnValue) == 0x000030, "Member 'ELEVATOR_Base_C_CanUseElevator::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_CanUseElevator, K2Node_DynamicCast_AsGI_Single_Player) == 0x000038, "Member 'ELEVATOR_Base_C_CanUseElevator::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_CanUseElevator, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'ELEVATOR_Base_C_CanUseElevator::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_CanUseElevator, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000044, "Member 'ELEVATOR_Base_C_CanUseElevator::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_CanUseElevator, CallFunc_NotEqual_NameName_ReturnValue) == 0x000050, "Member 'ELEVATOR_Base_C_CanUseElevator::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_CanUseElevator, CallFunc_TryPlayPublicAddressMessage_Result) == 0x000051, "Member 'ELEVATOR_Base_C_CanUseElevator::CallFunc_TryPlayPublicAddressMessage_Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_CanUseElevator, CallFunc_Not_PreBool_ReturnValue) == 0x000052, "Member 'ELEVATOR_Base_C_CanUseElevator::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_CanUseElevator, CallFunc_IsSoundPlaying_ReturnValue) == 0x000053, "Member 'ELEVATOR_Base_C_CanUseElevator::CallFunc_IsSoundPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_CanUseElevator, CallFunc_Not_PreBool_ReturnValue_1) == 0x000054, "Member 'ELEVATOR_Base_C_CanUseElevator::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_CanUseElevator, CallFunc_IsElevatorFunctional_Result) == 0x000055, "Member 'ELEVATOR_Base_C_CanUseElevator::CallFunc_IsElevatorFunctional_Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_CanUseElevator, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000056, "Member 'ELEVATOR_Base_C_CanUseElevator::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_CanUseElevator, CallFunc_IsOverlappingAnyLivingEnemy_Result) == 0x000057, "Member 'ELEVATOR_Base_C_CanUseElevator::CallFunc_IsOverlappingAnyLivingEnemy_Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_CanUseElevator, CallFunc_Not_PreBool_ReturnValue_2) == 0x000058, "Member 'ELEVATOR_Base_C_CanUseElevator::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_CanUseElevator, CallFunc_IsOverlappingActor_ReturnValue) == 0x000059, "Member 'ELEVATOR_Base_C_CanUseElevator::CallFunc_IsOverlappingActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_CanUseElevator, CallFunc_Not_PreBool_ReturnValue_3) == 0x00005A, "Member 'ELEVATOR_Base_C_CanUseElevator::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_CanUseElevator, CallFunc_IsOverlappingActor_ReturnValue_1) == 0x00005B, "Member 'ELEVATOR_Base_C_CanUseElevator::CallFunc_IsOverlappingActor_ReturnValue_1' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.StartLevelTransition
// 0x0038 (0x0038 - 0x0000)
struct ELEVATOR_Base_C_StartLevelTransition final
{
public:
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    CallFunc_GetLevelCollectionFromPrimaryLevelName_Result; // 0x0018(0x0010)(NoDestructor)
	TArray<class FName>                           CallFunc_GetSharedLevelNamesForMapMove_SharedLevelNames; // 0x0028(0x0010)(ReferenceParm)
};
static_assert(alignof(ELEVATOR_Base_C_StartLevelTransition) == 0x000008, "Wrong alignment on ELEVATOR_Base_C_StartLevelTransition");
static_assert(sizeof(ELEVATOR_Base_C_StartLevelTransition) == 0x000038, "Wrong size on ELEVATOR_Base_C_StartLevelTransition");
static_assert(offsetof(ELEVATOR_Base_C_StartLevelTransition, CallFunc_GetGameInstance_ReturnValue) == 0x000000, "Member 'ELEVATOR_Base_C_StartLevelTransition::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_StartLevelTransition, K2Node_DynamicCast_AsGI_Single_Player) == 0x000008, "Member 'ELEVATOR_Base_C_StartLevelTransition::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_StartLevelTransition, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'ELEVATOR_Base_C_StartLevelTransition::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_StartLevelTransition, CallFunc_GetLevelCollectionFromPrimaryLevelName_Result) == 0x000018, "Member 'ELEVATOR_Base_C_StartLevelTransition::CallFunc_GetLevelCollectionFromPrimaryLevelName_Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_StartLevelTransition, CallFunc_GetSharedLevelNamesForMapMove_SharedLevelNames) == 0x000028, "Member 'ELEVATOR_Base_C_StartLevelTransition::CallFunc_GetSharedLevelNamesForMapMove_SharedLevelNames' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.TryFixupPlayerPosition
// 0x01B0 (0x01B0 - 0x0000)
struct ELEVATOR_Base_C_TryFixupPlayerPosition final
{
public:
	struct FVector                                ToOriginSigns;                                     // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ToOriginVector;                                    // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ClosestPointOnCompartment;                         // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CompartmentHalfExtents;                            // 0x0024(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CompartmentOrigin;                                 // 0x0030(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0040(0x0010)(ConstParm, ReferenceParm)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleRadius_ReturnValue;       // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0088(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x0094(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x011C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11D[0x3];                                      // 0x011D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0120(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x012C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x0138(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBox                                   CallFunc_MakeBox_ReturnValue;                      // 0x0144(0x001C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetComponentBounds_Origin;                // 0x0160(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetComponentBounds_BoxExtent;             // 0x016C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetComponentBounds_SphereRadius;          // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ClosestPointOnBox_ReturnValue;            // 0x017C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         CallFunc_ComponentOverlapActors_OutActors;         // 0x0188(0x0010)(ReferenceParm)
	bool                                          CallFunc_ComponentOverlapActors_ReturnValue;       // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0199(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOverlappingActor_ReturnValue;           // 0x019A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x019B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x019C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19D[0x3];                                      // 0x019D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Vector_GetSignVector_ReturnValue;         // 0x01A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ELEVATOR_Base_C_TryFixupPlayerPosition) == 0x000008, "Wrong alignment on ELEVATOR_Base_C_TryFixupPlayerPosition");
static_assert(sizeof(ELEVATOR_Base_C_TryFixupPlayerPosition) == 0x0001B0, "Wrong size on ELEVATOR_Base_C_TryFixupPlayerPosition");
static_assert(offsetof(ELEVATOR_Base_C_TryFixupPlayerPosition, ToOriginSigns) == 0x000000, "Member 'ELEVATOR_Base_C_TryFixupPlayerPosition::ToOriginSigns' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFixupPlayerPosition, ToOriginVector) == 0x00000C, "Member 'ELEVATOR_Base_C_TryFixupPlayerPosition::ToOriginVector' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFixupPlayerPosition, ClosestPointOnCompartment) == 0x000018, "Member 'ELEVATOR_Base_C_TryFixupPlayerPosition::ClosestPointOnCompartment' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFixupPlayerPosition, CompartmentHalfExtents) == 0x000024, "Member 'ELEVATOR_Base_C_TryFixupPlayerPosition::CompartmentHalfExtents' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFixupPlayerPosition, CompartmentOrigin) == 0x000030, "Member 'ELEVATOR_Base_C_TryFixupPlayerPosition::CompartmentOrigin' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFixupPlayerPosition, Temp_object_Variable) == 0x000040, "Member 'ELEVATOR_Base_C_TryFixupPlayerPosition::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFixupPlayerPosition, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x000050, "Member 'ELEVATOR_Base_C_TryFixupPlayerPosition::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFixupPlayerPosition, CallFunc_GetScaledCapsuleRadius_ReturnValue) == 0x000054, "Member 'ELEVATOR_Base_C_TryFixupPlayerPosition::CallFunc_GetScaledCapsuleRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFixupPlayerPosition, CallFunc_MakeVector_ReturnValue) == 0x000058, "Member 'ELEVATOR_Base_C_TryFixupPlayerPosition::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFixupPlayerPosition, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000064, "Member 'ELEVATOR_Base_C_TryFixupPlayerPosition::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFixupPlayerPosition, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000070, "Member 'ELEVATOR_Base_C_TryFixupPlayerPosition::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFixupPlayerPosition, CallFunc_Add_VectorVector_ReturnValue) == 0x00007C, "Member 'ELEVATOR_Base_C_TryFixupPlayerPosition::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFixupPlayerPosition, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000088, "Member 'ELEVATOR_Base_C_TryFixupPlayerPosition::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFixupPlayerPosition, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x000094, "Member 'ELEVATOR_Base_C_TryFixupPlayerPosition::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFixupPlayerPosition, CallFunc_K2_SetActorLocation_ReturnValue) == 0x00011C, "Member 'ELEVATOR_Base_C_TryFixupPlayerPosition::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFixupPlayerPosition, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000120, "Member 'ELEVATOR_Base_C_TryFixupPlayerPosition::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFixupPlayerPosition, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x00012C, "Member 'ELEVATOR_Base_C_TryFixupPlayerPosition::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFixupPlayerPosition, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x000138, "Member 'ELEVATOR_Base_C_TryFixupPlayerPosition::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFixupPlayerPosition, CallFunc_MakeBox_ReturnValue) == 0x000144, "Member 'ELEVATOR_Base_C_TryFixupPlayerPosition::CallFunc_MakeBox_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFixupPlayerPosition, CallFunc_GetComponentBounds_Origin) == 0x000160, "Member 'ELEVATOR_Base_C_TryFixupPlayerPosition::CallFunc_GetComponentBounds_Origin' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFixupPlayerPosition, CallFunc_GetComponentBounds_BoxExtent) == 0x00016C, "Member 'ELEVATOR_Base_C_TryFixupPlayerPosition::CallFunc_GetComponentBounds_BoxExtent' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFixupPlayerPosition, CallFunc_GetComponentBounds_SphereRadius) == 0x000178, "Member 'ELEVATOR_Base_C_TryFixupPlayerPosition::CallFunc_GetComponentBounds_SphereRadius' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFixupPlayerPosition, CallFunc_ClosestPointOnBox_ReturnValue) == 0x00017C, "Member 'ELEVATOR_Base_C_TryFixupPlayerPosition::CallFunc_ClosestPointOnBox_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFixupPlayerPosition, CallFunc_ComponentOverlapActors_OutActors) == 0x000188, "Member 'ELEVATOR_Base_C_TryFixupPlayerPosition::CallFunc_ComponentOverlapActors_OutActors' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFixupPlayerPosition, CallFunc_ComponentOverlapActors_ReturnValue) == 0x000198, "Member 'ELEVATOR_Base_C_TryFixupPlayerPosition::CallFunc_ComponentOverlapActors_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFixupPlayerPosition, CallFunc_Not_PreBool_ReturnValue) == 0x000199, "Member 'ELEVATOR_Base_C_TryFixupPlayerPosition::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFixupPlayerPosition, CallFunc_IsOverlappingActor_ReturnValue) == 0x00019A, "Member 'ELEVATOR_Base_C_TryFixupPlayerPosition::CallFunc_IsOverlappingActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFixupPlayerPosition, CallFunc_Not_PreBool_ReturnValue_1) == 0x00019B, "Member 'ELEVATOR_Base_C_TryFixupPlayerPosition::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFixupPlayerPosition, CallFunc_IsValid_ReturnValue) == 0x00019C, "Member 'ELEVATOR_Base_C_TryFixupPlayerPosition::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFixupPlayerPosition, CallFunc_Vector_GetSignVector_ReturnValue) == 0x0001A0, "Member 'ELEVATOR_Base_C_TryFixupPlayerPosition::CallFunc_Vector_GetSignVector_ReturnValue' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.TryFinishElevatorMove
// 0x0190 (0x0190 - 0x0000)
struct ELEVATOR_Base_C_TryFinishElevatorMove final
{
public:
	class AActor*                                 OverlappingActors;                                 // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULevelVoxelizationData*                 LevelVoxelData;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AINTERACT_ElevatorDoors_Base_C*         CurrentDoorActor;                                  // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     GameInstance;                                      // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      K2Node_DynamicCast_AsPlayer_Controller;            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AINTERACT_ElevatorDoors_Base_C*         K2Node_DynamicCast_AsINTERACT_Elevator_Doors_Base; // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetTileCollisionEnabled_Result;           // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_52[0xE];                                       // 0x0052(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0060(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ConditionalAutoSave_Result;               // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetCurrentLevelName_Result;               // 0x0094(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetCurrentLevelName_Result_1;             // 0x009C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x00A5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A6[0x2];                                       // 0x00A6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelVoxelizationData*                 CallFunc_GetVoxelDataForLevelByName_ReturnValue;   // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSafetySensorOccupiedByPawn_Result;      // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C2[0x2];                                       // 0x00C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetRoomCount_ReturnValue;                 // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsElevatorOccupiedByPawn_Result;          // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00CB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetDoorAnimInstance_AnimInstance;         // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IINTERF_ANIM_Door_C>   K2Node_DynamicCast_AsINTERF_ANIM_Door;             // 0x00D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OpenDoor_Result;                          // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_EA[0x6];                                       // 0x00EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetDoorAnimInstance_AnimInstance_1;       // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IINTERF_ANIM_Door_C>   K2Node_DynamicCast_AsINTERF_ANIM_Door_1;           // 0x00F8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OpenDoor_Result_1;                        // 0x0109(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10A[0x6];                                      // 0x010A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AINTERACT_ElevatorDoors_Base_C*         CallFunc_GetElevatorDoor_Door;                     // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0124(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0130(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0160(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TryOpenElevatorDoors_Result;              // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x0179(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x017A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_17B[0x5];                                      // 0x017B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue;       // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0189(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ELEVATOR_Base_C_TryFinishElevatorMove) == 0x000010, "Wrong alignment on ELEVATOR_Base_C_TryFinishElevatorMove");
static_assert(sizeof(ELEVATOR_Base_C_TryFinishElevatorMove) == 0x000190, "Wrong size on ELEVATOR_Base_C_TryFinishElevatorMove");
static_assert(offsetof(ELEVATOR_Base_C_TryFinishElevatorMove, OverlappingActors) == 0x000000, "Member 'ELEVATOR_Base_C_TryFinishElevatorMove::OverlappingActors' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFinishElevatorMove, LevelVoxelData) == 0x000008, "Member 'ELEVATOR_Base_C_TryFinishElevatorMove::LevelVoxelData' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFinishElevatorMove, CurrentDoorActor) == 0x000010, "Member 'ELEVATOR_Base_C_TryFinishElevatorMove::CurrentDoorActor' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFinishElevatorMove, GameInstance) == 0x000018, "Member 'ELEVATOR_Base_C_TryFinishElevatorMove::GameInstance' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFinishElevatorMove, CallFunc_GetController_ReturnValue) == 0x000020, "Member 'ELEVATOR_Base_C_TryFinishElevatorMove::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFinishElevatorMove, K2Node_DynamicCast_AsPlayer_Controller) == 0x000028, "Member 'ELEVATOR_Base_C_TryFinishElevatorMove::K2Node_DynamicCast_AsPlayer_Controller' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFinishElevatorMove, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'ELEVATOR_Base_C_TryFinishElevatorMove::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFinishElevatorMove, CallFunc_GetOwner_ReturnValue) == 0x000038, "Member 'ELEVATOR_Base_C_TryFinishElevatorMove::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFinishElevatorMove, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'ELEVATOR_Base_C_TryFinishElevatorMove::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFinishElevatorMove, K2Node_DynamicCast_AsINTERACT_Elevator_Doors_Base) == 0x000048, "Member 'ELEVATOR_Base_C_TryFinishElevatorMove::K2Node_DynamicCast_AsINTERACT_Elevator_Doors_Base' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFinishElevatorMove, K2Node_DynamicCast_bSuccess_1) == 0x000050, "Member 'ELEVATOR_Base_C_TryFinishElevatorMove::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFinishElevatorMove, CallFunc_SetTileCollisionEnabled_Result) == 0x000051, "Member 'ELEVATOR_Base_C_TryFinishElevatorMove::CallFunc_SetTileCollisionEnabled_Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFinishElevatorMove, CallFunc_GetTransform_ReturnValue) == 0x000060, "Member 'ELEVATOR_Base_C_TryFinishElevatorMove::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFinishElevatorMove, CallFunc_ConditionalAutoSave_Result) == 0x000090, "Member 'ELEVATOR_Base_C_TryFinishElevatorMove::CallFunc_ConditionalAutoSave_Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFinishElevatorMove, CallFunc_GetCurrentLevelName_Result) == 0x000094, "Member 'ELEVATOR_Base_C_TryFinishElevatorMove::CallFunc_GetCurrentLevelName_Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFinishElevatorMove, CallFunc_GetCurrentLevelName_Result_1) == 0x00009C, "Member 'ELEVATOR_Base_C_TryFinishElevatorMove::CallFunc_GetCurrentLevelName_Result_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFinishElevatorMove, CallFunc_IsValid_ReturnValue_1) == 0x0000A4, "Member 'ELEVATOR_Base_C_TryFinishElevatorMove::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFinishElevatorMove, CallFunc_NotEqual_NameName_ReturnValue) == 0x0000A5, "Member 'ELEVATOR_Base_C_TryFinishElevatorMove::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFinishElevatorMove, CallFunc_GetVoxelDataForLevelByName_ReturnValue) == 0x0000A8, "Member 'ELEVATOR_Base_C_TryFinishElevatorMove::CallFunc_GetVoxelDataForLevelByName_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFinishElevatorMove, CallFunc_GetGameInstance_ReturnValue) == 0x0000B0, "Member 'ELEVATOR_Base_C_TryFinishElevatorMove::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFinishElevatorMove, K2Node_DynamicCast_AsGI_Single_Player) == 0x0000B8, "Member 'ELEVATOR_Base_C_TryFinishElevatorMove::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFinishElevatorMove, K2Node_DynamicCast_bSuccess_2) == 0x0000C0, "Member 'ELEVATOR_Base_C_TryFinishElevatorMove::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFinishElevatorMove, CallFunc_IsSafetySensorOccupiedByPawn_Result) == 0x0000C1, "Member 'ELEVATOR_Base_C_TryFinishElevatorMove::CallFunc_IsSafetySensorOccupiedByPawn_Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFinishElevatorMove, CallFunc_GetRoomCount_ReturnValue) == 0x0000C4, "Member 'ELEVATOR_Base_C_TryFinishElevatorMove::CallFunc_GetRoomCount_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFinishElevatorMove, CallFunc_IsElevatorOccupiedByPawn_Result) == 0x0000C8, "Member 'ELEVATOR_Base_C_TryFinishElevatorMove::CallFunc_IsElevatorOccupiedByPawn_Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFinishElevatorMove, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0000C9, "Member 'ELEVATOR_Base_C_TryFinishElevatorMove::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFinishElevatorMove, CallFunc_BooleanOR_ReturnValue) == 0x0000CA, "Member 'ELEVATOR_Base_C_TryFinishElevatorMove::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFinishElevatorMove, CallFunc_IsValid_ReturnValue_2) == 0x0000CB, "Member 'ELEVATOR_Base_C_TryFinishElevatorMove::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFinishElevatorMove, CallFunc_GetDoorAnimInstance_AnimInstance) == 0x0000D0, "Member 'ELEVATOR_Base_C_TryFinishElevatorMove::CallFunc_GetDoorAnimInstance_AnimInstance' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFinishElevatorMove, K2Node_DynamicCast_AsINTERF_ANIM_Door) == 0x0000D8, "Member 'ELEVATOR_Base_C_TryFinishElevatorMove::K2Node_DynamicCast_AsINTERF_ANIM_Door' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFinishElevatorMove, K2Node_DynamicCast_bSuccess_3) == 0x0000E8, "Member 'ELEVATOR_Base_C_TryFinishElevatorMove::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFinishElevatorMove, CallFunc_OpenDoor_Result) == 0x0000E9, "Member 'ELEVATOR_Base_C_TryFinishElevatorMove::CallFunc_OpenDoor_Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFinishElevatorMove, CallFunc_GetDoorAnimInstance_AnimInstance_1) == 0x0000F0, "Member 'ELEVATOR_Base_C_TryFinishElevatorMove::CallFunc_GetDoorAnimInstance_AnimInstance_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFinishElevatorMove, K2Node_DynamicCast_AsINTERF_ANIM_Door_1) == 0x0000F8, "Member 'ELEVATOR_Base_C_TryFinishElevatorMove::K2Node_DynamicCast_AsINTERF_ANIM_Door_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFinishElevatorMove, K2Node_DynamicCast_bSuccess_4) == 0x000108, "Member 'ELEVATOR_Base_C_TryFinishElevatorMove::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFinishElevatorMove, CallFunc_OpenDoor_Result_1) == 0x000109, "Member 'ELEVATOR_Base_C_TryFinishElevatorMove::CallFunc_OpenDoor_Result_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFinishElevatorMove, CallFunc_GetElevatorDoor_Door) == 0x000110, "Member 'ELEVATOR_Base_C_TryFinishElevatorMove::CallFunc_GetElevatorDoor_Door' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFinishElevatorMove, CallFunc_BreakVector_X) == 0x000118, "Member 'ELEVATOR_Base_C_TryFinishElevatorMove::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFinishElevatorMove, CallFunc_BreakVector_Y) == 0x00011C, "Member 'ELEVATOR_Base_C_TryFinishElevatorMove::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFinishElevatorMove, CallFunc_BreakVector_Z) == 0x000120, "Member 'ELEVATOR_Base_C_TryFinishElevatorMove::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFinishElevatorMove, CallFunc_MakeVector_ReturnValue) == 0x000124, "Member 'ELEVATOR_Base_C_TryFinishElevatorMove::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFinishElevatorMove, CallFunc_MakeTransform_ReturnValue) == 0x000130, "Member 'ELEVATOR_Base_C_TryFinishElevatorMove::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFinishElevatorMove, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000160, "Member 'ELEVATOR_Base_C_TryFinishElevatorMove::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFinishElevatorMove, CallFunc_BreakVector_X_1) == 0x00016C, "Member 'ELEVATOR_Base_C_TryFinishElevatorMove::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFinishElevatorMove, CallFunc_BreakVector_Y_1) == 0x000170, "Member 'ELEVATOR_Base_C_TryFinishElevatorMove::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFinishElevatorMove, CallFunc_BreakVector_Z_1) == 0x000174, "Member 'ELEVATOR_Base_C_TryFinishElevatorMove::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFinishElevatorMove, CallFunc_TryOpenElevatorDoors_Result) == 0x000178, "Member 'ELEVATOR_Base_C_TryFinishElevatorMove::CallFunc_TryOpenElevatorDoors_Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFinishElevatorMove, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x000179, "Member 'ELEVATOR_Base_C_TryFinishElevatorMove::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFinishElevatorMove, CallFunc_IsValid_ReturnValue_3) == 0x00017A, "Member 'ELEVATOR_Base_C_TryFinishElevatorMove::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFinishElevatorMove, CallFunc_GetPlayerCameraManager_ReturnValue) == 0x000180, "Member 'ELEVATOR_Base_C_TryFinishElevatorMove::CallFunc_GetPlayerCameraManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFinishElevatorMove, CallFunc_IsValid_ReturnValue_4) == 0x000188, "Member 'ELEVATOR_Base_C_TryFinishElevatorMove::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryFinishElevatorMove, CallFunc_BooleanAND_ReturnValue) == 0x000189, "Member 'ELEVATOR_Base_C_TryFinishElevatorMove::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.IsAnyDoorOpening
// 0x0004 (0x0004 - 0x0000)
struct ELEVATOR_Base_C_IsAnyDoorOpening final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ELEVATOR_Base_C_IsAnyDoorOpening) == 0x000001, "Wrong alignment on ELEVATOR_Base_C_IsAnyDoorOpening");
static_assert(sizeof(ELEVATOR_Base_C_IsAnyDoorOpening) == 0x000004, "Wrong size on ELEVATOR_Base_C_IsAnyDoorOpening");
static_assert(offsetof(ELEVATOR_Base_C_IsAnyDoorOpening, Result) == 0x000000, "Member 'ELEVATOR_Base_C_IsAnyDoorOpening::Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_IsAnyDoorOpening, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000001, "Member 'ELEVATOR_Base_C_IsAnyDoorOpening::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_IsAnyDoorOpening, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000002, "Member 'ELEVATOR_Base_C_IsAnyDoorOpening::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_IsAnyDoorOpening, CallFunc_BooleanOR_ReturnValue) == 0x000003, "Member 'ELEVATOR_Base_C_IsAnyDoorOpening::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.IsAnyDoorClosing
// 0x0004 (0x0004 - 0x0000)
struct ELEVATOR_Base_C_IsAnyDoorClosing final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ELEVATOR_Base_C_IsAnyDoorClosing) == 0x000001, "Wrong alignment on ELEVATOR_Base_C_IsAnyDoorClosing");
static_assert(sizeof(ELEVATOR_Base_C_IsAnyDoorClosing) == 0x000004, "Wrong size on ELEVATOR_Base_C_IsAnyDoorClosing");
static_assert(offsetof(ELEVATOR_Base_C_IsAnyDoorClosing, Result) == 0x000000, "Member 'ELEVATOR_Base_C_IsAnyDoorClosing::Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_IsAnyDoorClosing, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000001, "Member 'ELEVATOR_Base_C_IsAnyDoorClosing::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_IsAnyDoorClosing, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000002, "Member 'ELEVATOR_Base_C_IsAnyDoorClosing::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_IsAnyDoorClosing, CallFunc_BooleanOR_ReturnValue) == 0x000003, "Member 'ELEVATOR_Base_C_IsAnyDoorClosing::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.IsEveryDoorClosed
// 0x0004 (0x0004 - 0x0000)
struct ELEVATOR_Base_C_IsEveryDoorClosed final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ELEVATOR_Base_C_IsEveryDoorClosed) == 0x000001, "Wrong alignment on ELEVATOR_Base_C_IsEveryDoorClosed");
static_assert(sizeof(ELEVATOR_Base_C_IsEveryDoorClosed) == 0x000004, "Wrong size on ELEVATOR_Base_C_IsEveryDoorClosed");
static_assert(offsetof(ELEVATOR_Base_C_IsEveryDoorClosed, Result) == 0x000000, "Member 'ELEVATOR_Base_C_IsEveryDoorClosed::Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_IsEveryDoorClosed, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000001, "Member 'ELEVATOR_Base_C_IsEveryDoorClosed::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_IsEveryDoorClosed, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000002, "Member 'ELEVATOR_Base_C_IsEveryDoorClosed::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_IsEveryDoorClosed, CallFunc_BooleanAND_ReturnValue) == 0x000003, "Member 'ELEVATOR_Base_C_IsEveryDoorClosed::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.TeleportElevator
// 0x05C0 (0x05C0 - 0x0000)
struct ELEVATOR_Base_C_TeleportElevator final
{
public:
	struct FTransform                             NewTransform;                                      // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         CharacterMaxHeightLocation;                        // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CharacterMinHeightLocation;                        // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CurrentPrimitiveComponent;                         // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_SystemShockCharacter_C*           CurrentCharacter;                                  // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CurrentOverlappingActor;                           // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FTransform>                     NewBodyTransforms;                                 // 0x0058(0x0010)(Edit, BlueprintVisible)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             NewOccupantTransform;                              // 0x0070(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	struct FTransform                             OldTransform;                                      // 0x00A0(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	TArray<class AActor*>                         OverlappingActors;                                 // 0x00D0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x00F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0114(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0120(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x012C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x0148(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x0154(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x0160(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x016C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_TeleportTo_ReturnValue;                // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_179[0x3];                                      // 0x0179(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult; // 0x017C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_BreakTransform_Location_2;                // 0x0204(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_2;                // 0x0210(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_2;                   // 0x021C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_2;                          // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_3;                          // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_3;                          // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_3;                          // 0x023C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0244(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_245[0x3];                                      // 0x0245(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0248(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0254(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_255[0x3];                                      // 0x0255(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    CallFunc_GetOccupantPrimitiveComponent_PrimitiveComponent; // 0x0258(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0260(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0264(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_265[0x3];                                      // 0x0265(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransform>                     CallFunc_GetSkeletalMeshBodyTransforms_ReturnValue; // 0x0268(0x0010)(ReferenceParm)
	uint8                                         Pad_278[0x8];                                      // 0x0278(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_Array_Get_Item;                           // 0x0280(0x0030)(IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x02B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x02B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_4;                          // 0x02C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_4;                          // 0x02C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_4;                          // 0x02C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue_1; // 0x02CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x02D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_3;                // 0x02D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_3;                // 0x02E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_3;                   // 0x02EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocationAndRotation_SweepHitResult; // 0x02F8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocationAndRotation_ReturnValue; // 0x0380(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_381[0xF];                                      // 0x0381(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeRelativeTransform_ReturnValue;        // 0x0390(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_ComposeTransforms_ReturnValue;            // 0x03C0(0x0030)(IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x03F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F4[0x4];                                      // 0x03F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 K2Node_DynamicCast_AsSkeletal_Mesh_Component;      // 0x03F8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0400(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_401[0xF];                                      // 0x0401(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0410(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_MakeRelativeTransform_ReturnValue_1;      // 0x0440(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_ComposeTransforms_ReturnValue_1;          // 0x0470(0x0030)(IsPlainOldData, NoDestructor)
	class APAWN_SystemShockCharacter_C*           K2Node_DynamicCast_AsPAWN_System_Shock_Character;  // 0x04A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x04A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A9[0x7];                                      // 0x04A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x04B0(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	TArray<class AActor*>                         CallFunc_GetOverlappingActors_OverlappingActors;   // 0x04E0(0x0010)(ReferenceParm)
	class AActor*                                 CallFunc_Array_Get_Item_1;                         // 0x04F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x04F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x04FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4FD[0x3];                                      // 0x04FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0500(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0504(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_505[0x3];                                      // 0x0505(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0508(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_4;                // 0x050C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_4;                // 0x0518(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_4;                   // 0x0524(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocationAndRotation_SweepHitResult_1; // 0x0530(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocationAndRotation_ReturnValue_1; // 0x05B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ELEVATOR_Base_C_TeleportElevator) == 0x000010, "Wrong alignment on ELEVATOR_Base_C_TeleportElevator");
static_assert(sizeof(ELEVATOR_Base_C_TeleportElevator) == 0x0005C0, "Wrong size on ELEVATOR_Base_C_TeleportElevator");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, NewTransform) == 0x000000, "Member 'ELEVATOR_Base_C_TeleportElevator::NewTransform' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CharacterMaxHeightLocation) == 0x000030, "Member 'ELEVATOR_Base_C_TeleportElevator::CharacterMaxHeightLocation' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CharacterMinHeightLocation) == 0x000034, "Member 'ELEVATOR_Base_C_TeleportElevator::CharacterMinHeightLocation' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, SkeletalMeshComponent) == 0x000038, "Member 'ELEVATOR_Base_C_TeleportElevator::SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CurrentPrimitiveComponent) == 0x000040, "Member 'ELEVATOR_Base_C_TeleportElevator::CurrentPrimitiveComponent' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CurrentCharacter) == 0x000048, "Member 'ELEVATOR_Base_C_TeleportElevator::CurrentCharacter' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CurrentOverlappingActor) == 0x000050, "Member 'ELEVATOR_Base_C_TeleportElevator::CurrentOverlappingActor' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, NewBodyTransforms) == 0x000058, "Member 'ELEVATOR_Base_C_TeleportElevator::NewBodyTransforms' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, NewOccupantTransform) == 0x000070, "Member 'ELEVATOR_Base_C_TeleportElevator::NewOccupantTransform' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, OldTransform) == 0x0000A0, "Member 'ELEVATOR_Base_C_TeleportElevator::OldTransform' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, OverlappingActors) == 0x0000D0, "Member 'ELEVATOR_Base_C_TeleportElevator::OverlappingActors' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, Temp_int_Loop_Counter_Variable) == 0x0000E0, "Member 'ELEVATOR_Base_C_TeleportElevator::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_Add_IntInt_ReturnValue) == 0x0000E4, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, Temp_int_Array_Index_Variable) == 0x0000E8, "Member 'ELEVATOR_Base_C_TeleportElevator::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, Temp_int_Array_Index_Variable_1) == 0x0000EC, "Member 'ELEVATOR_Base_C_TeleportElevator::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0000F0, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_BreakVector_X) == 0x0000FC, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_BreakVector_Y) == 0x000100, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_BreakVector_Z) == 0x000104, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x000108, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_Add_FloatFloat_ReturnValue) == 0x00010C, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000110, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_BreakTransform_Location) == 0x000114, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_BreakTransform_Rotation) == 0x000120, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_BreakTransform_Scale) == 0x00012C, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_BreakVector_X_1) == 0x000138, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_BreakVector_Y_1) == 0x00013C, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_BreakVector_Z_1) == 0x000140, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_FClamp_ReturnValue) == 0x000144, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_BreakTransform_Location_1) == 0x000148, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_BreakTransform_Rotation_1) == 0x000154, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_BreakTransform_Scale_1) == 0x000160, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_MakeVector_ReturnValue) == 0x00016C, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_K2_TeleportTo_ReturnValue) == 0x000178, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_K2_TeleportTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult) == 0x00017C, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_BreakTransform_Location_2) == 0x000204, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_BreakTransform_Location_2' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_BreakTransform_Rotation_2) == 0x000210, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_BreakTransform_Rotation_2' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_BreakTransform_Scale_2) == 0x00021C, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_BreakTransform_Scale_2' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_BreakVector_X_2) == 0x000228, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_BreakVector_Y_2) == 0x00022C, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_BreakVector_Z_2) == 0x000230, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_BreakVector_X_3) == 0x000234, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_BreakVector_X_3' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_BreakVector_Y_3) == 0x000238, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_BreakVector_Y_3' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_BreakVector_Z_3) == 0x00023C, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_BreakVector_Z_3' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_FMax_ReturnValue) == 0x000240, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000244, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_MakeVector_ReturnValue_1) == 0x000248, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_IsValid_ReturnValue) == 0x000254, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_GetOccupantPrimitiveComponent_PrimitiveComponent) == 0x000258, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_GetOccupantPrimitiveComponent_PrimitiveComponent' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_Array_AddUnique_ReturnValue) == 0x000260, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_IsValid_ReturnValue_1) == 0x000264, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_GetSkeletalMeshBodyTransforms_ReturnValue) == 0x000268, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_GetSkeletalMeshBodyTransforms_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_Array_Get_Item) == 0x000280, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_Array_Length_ReturnValue) == 0x0002B0, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x0002B4, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_BreakVector_X_4) == 0x0002C0, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_BreakVector_X_4' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_BreakVector_Y_4) == 0x0002C4, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_BreakVector_Y_4' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_BreakVector_Z_4) == 0x0002C8, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_BreakVector_Z_4' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue_1) == 0x0002CC, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x0002D0, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_BreakTransform_Location_3) == 0x0002D4, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_BreakTransform_Location_3' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_BreakTransform_Rotation_3) == 0x0002E0, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_BreakTransform_Rotation_3' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_BreakTransform_Scale_3) == 0x0002EC, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_BreakTransform_Scale_3' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_K2_SetActorLocationAndRotation_SweepHitResult) == 0x0002F8, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_K2_SetActorLocationAndRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_K2_SetActorLocationAndRotation_ReturnValue) == 0x000380, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_K2_SetActorLocationAndRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_MakeRelativeTransform_ReturnValue) == 0x000390, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_MakeRelativeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_ComposeTransforms_ReturnValue) == 0x0003C0, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_ComposeTransforms_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_Array_Add_ReturnValue) == 0x0003F0, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, K2Node_DynamicCast_AsSkeletal_Mesh_Component) == 0x0003F8, "Member 'ELEVATOR_Base_C_TeleportElevator::K2Node_DynamicCast_AsSkeletal_Mesh_Component' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, K2Node_DynamicCast_bSuccess) == 0x000400, "Member 'ELEVATOR_Base_C_TeleportElevator::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000410, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_MakeRelativeTransform_ReturnValue_1) == 0x000440, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_MakeRelativeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_ComposeTransforms_ReturnValue_1) == 0x000470, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_ComposeTransforms_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, K2Node_DynamicCast_AsPAWN_System_Shock_Character) == 0x0004A0, "Member 'ELEVATOR_Base_C_TeleportElevator::K2Node_DynamicCast_AsPAWN_System_Shock_Character' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, K2Node_DynamicCast_bSuccess_1) == 0x0004A8, "Member 'ELEVATOR_Base_C_TeleportElevator::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_GetTransform_ReturnValue) == 0x0004B0, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_GetOverlappingActors_OverlappingActors) == 0x0004E0, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_GetOverlappingActors_OverlappingActors' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_Array_Get_Item_1) == 0x0004F0, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_Array_Length_ReturnValue_1) == 0x0004F8, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_Less_IntInt_ReturnValue) == 0x0004FC, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, Temp_int_Loop_Counter_Variable_1) == 0x000500, "Member 'ELEVATOR_Base_C_TeleportElevator::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_Less_IntInt_ReturnValue_1) == 0x000504, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_Add_IntInt_ReturnValue_1) == 0x000508, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_BreakTransform_Location_4) == 0x00050C, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_BreakTransform_Location_4' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_BreakTransform_Rotation_4) == 0x000518, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_BreakTransform_Rotation_4' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_BreakTransform_Scale_4) == 0x000524, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_BreakTransform_Scale_4' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_K2_SetActorLocationAndRotation_SweepHitResult_1) == 0x000530, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_K2_SetActorLocationAndRotation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TeleportElevator, CallFunc_K2_SetActorLocationAndRotation_ReturnValue_1) == 0x0005B8, "Member 'ELEVATOR_Base_C_TeleportElevator::CallFunc_K2_SetActorLocationAndRotation_ReturnValue_1' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.ActivateDoor
// 0x00F8 (0x00F8 - 0x0000)
struct ELEVATOR_Base_C_ActivateDoor final
{
public:
	ENUM_InnerOuter                               TargetDoor;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Open;                                              // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Result;                                            // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeRemaining;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           MontageToPlay;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MontageStartTime;                                  // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_InnerOuter                               Temp_byte_Variable;                                // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_InnerOuter                               Temp_byte_Variable_1;                              // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_DoorState                                Temp_byte_Variable_2;                              // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetDoorAnimInstance_AnimInstance;         // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetPlayLength_ReturnValue;                // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetDoorAnimInstance_AnimInstance_1;       // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           CallFunc_GetCurrentActiveMontage_ReturnValue;      // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Montage_GetPosition_ReturnValue;          // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetPlayLength_ReturnValue_1;              // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_DoorState                                Temp_byte_Variable_3;                              // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_DoorState                                Temp_byte_Variable_4;                              // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0054(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0068(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0073(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetDoorAnimInstance_AnimInstance_2;       // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_DoorState                                K2Node_Select_Default;                             // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IINTERF_ANIM_Door_C>   K2Node_DynamicCast_AsINTERF_ANIM_Door;             // 0x0088(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CloseDoor_Result;                         // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9A[0x6];                                       // 0x009A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IINTERF_ANIM_Door_C>   K2Node_DynamicCast_AsINTERF_ANIM_Door_1;           // 0x00A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OpenDoor_Result;                          // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00B3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           CallFunc_GetDoorMontage_Montage;                   // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetDoorAnimInstance_AnimInstance_3;       // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_DoorState                                Temp_byte_Variable_5;                              // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_DoorState                                K2Node_Select_Default_1;                           // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CA[0x6];                                       // 0x00CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           K2Node_Select_Default_2;                           // 0x00D0(0x0008)(NoDestructor, HasGetValueTypeHash)
	ENUM_DoorState                                K2Node_Select_Default_3;                           // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_2;                    // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DA[0x2];                                       // 0x00DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Montage_Play_ReturnValue;                 // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x00E0(0x0010)(ZeroConstructor, NoDestructor)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_1;        // 0x00F0(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ELEVATOR_Base_C_ActivateDoor) == 0x000008, "Wrong alignment on ELEVATOR_Base_C_ActivateDoor");
static_assert(sizeof(ELEVATOR_Base_C_ActivateDoor) == 0x0000F8, "Wrong size on ELEVATOR_Base_C_ActivateDoor");
static_assert(offsetof(ELEVATOR_Base_C_ActivateDoor, TargetDoor) == 0x000000, "Member 'ELEVATOR_Base_C_ActivateDoor::TargetDoor' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ActivateDoor, Open) == 0x000001, "Member 'ELEVATOR_Base_C_ActivateDoor::Open' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ActivateDoor, Result) == 0x000002, "Member 'ELEVATOR_Base_C_ActivateDoor::Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ActivateDoor, TimeRemaining) == 0x000004, "Member 'ELEVATOR_Base_C_ActivateDoor::TimeRemaining' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ActivateDoor, MontageToPlay) == 0x000008, "Member 'ELEVATOR_Base_C_ActivateDoor::MontageToPlay' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ActivateDoor, MontageStartTime) == 0x000010, "Member 'ELEVATOR_Base_C_ActivateDoor::MontageStartTime' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ActivateDoor, Temp_byte_Variable) == 0x000014, "Member 'ELEVATOR_Base_C_ActivateDoor::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ActivateDoor, Temp_byte_Variable_1) == 0x000015, "Member 'ELEVATOR_Base_C_ActivateDoor::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ActivateDoor, Temp_byte_Variable_2) == 0x000016, "Member 'ELEVATOR_Base_C_ActivateDoor::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ActivateDoor, CallFunc_GetDoorAnimInstance_AnimInstance) == 0x000018, "Member 'ELEVATOR_Base_C_ActivateDoor::CallFunc_GetDoorAnimInstance_AnimInstance' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ActivateDoor, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000020, "Member 'ELEVATOR_Base_C_ActivateDoor::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ActivateDoor, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000021, "Member 'ELEVATOR_Base_C_ActivateDoor::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ActivateDoor, CallFunc_GetPlayLength_ReturnValue) == 0x000024, "Member 'ELEVATOR_Base_C_ActivateDoor::CallFunc_GetPlayLength_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ActivateDoor, CallFunc_GetDoorAnimInstance_AnimInstance_1) == 0x000028, "Member 'ELEVATOR_Base_C_ActivateDoor::CallFunc_GetDoorAnimInstance_AnimInstance_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ActivateDoor, CallFunc_GetCurrentActiveMontage_ReturnValue) == 0x000030, "Member 'ELEVATOR_Base_C_ActivateDoor::CallFunc_GetCurrentActiveMontage_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ActivateDoor, CallFunc_Montage_GetPosition_ReturnValue) == 0x000038, "Member 'ELEVATOR_Base_C_ActivateDoor::CallFunc_Montage_GetPosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ActivateDoor, CallFunc_GetPlayLength_ReturnValue_1) == 0x00003C, "Member 'ELEVATOR_Base_C_ActivateDoor::CallFunc_GetPlayLength_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ActivateDoor, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000040, "Member 'ELEVATOR_Base_C_ActivateDoor::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ActivateDoor, Temp_byte_Variable_3) == 0x000044, "Member 'ELEVATOR_Base_C_ActivateDoor::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ActivateDoor, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000048, "Member 'ELEVATOR_Base_C_ActivateDoor::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ActivateDoor, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00004C, "Member 'ELEVATOR_Base_C_ActivateDoor::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ActivateDoor, Temp_byte_Variable_4) == 0x000050, "Member 'ELEVATOR_Base_C_ActivateDoor::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ActivateDoor, K2Node_CreateDelegate_OutputDelegate) == 0x000054, "Member 'ELEVATOR_Base_C_ActivateDoor::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ActivateDoor, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000068, "Member 'ELEVATOR_Base_C_ActivateDoor::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ActivateDoor, K2Node_SwitchEnum_CmpSuccess) == 0x000070, "Member 'ELEVATOR_Base_C_ActivateDoor::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ActivateDoor, K2Node_SwitchEnum_CmpSuccess_1) == 0x000071, "Member 'ELEVATOR_Base_C_ActivateDoor::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ActivateDoor, Temp_bool_Variable) == 0x000072, "Member 'ELEVATOR_Base_C_ActivateDoor::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ActivateDoor, Temp_bool_Variable_1) == 0x000073, "Member 'ELEVATOR_Base_C_ActivateDoor::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ActivateDoor, CallFunc_GetDoorAnimInstance_AnimInstance_2) == 0x000078, "Member 'ELEVATOR_Base_C_ActivateDoor::CallFunc_GetDoorAnimInstance_AnimInstance_2' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ActivateDoor, K2Node_Select_Default) == 0x000080, "Member 'ELEVATOR_Base_C_ActivateDoor::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ActivateDoor, K2Node_DynamicCast_AsINTERF_ANIM_Door) == 0x000088, "Member 'ELEVATOR_Base_C_ActivateDoor::K2Node_DynamicCast_AsINTERF_ANIM_Door' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ActivateDoor, K2Node_DynamicCast_bSuccess) == 0x000098, "Member 'ELEVATOR_Base_C_ActivateDoor::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ActivateDoor, CallFunc_CloseDoor_Result) == 0x000099, "Member 'ELEVATOR_Base_C_ActivateDoor::CallFunc_CloseDoor_Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ActivateDoor, K2Node_DynamicCast_AsINTERF_ANIM_Door_1) == 0x0000A0, "Member 'ELEVATOR_Base_C_ActivateDoor::K2Node_DynamicCast_AsINTERF_ANIM_Door_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ActivateDoor, K2Node_DynamicCast_bSuccess_1) == 0x0000B0, "Member 'ELEVATOR_Base_C_ActivateDoor::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ActivateDoor, CallFunc_OpenDoor_Result) == 0x0000B1, "Member 'ELEVATOR_Base_C_ActivateDoor::CallFunc_OpenDoor_Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ActivateDoor, CallFunc_IsValid_ReturnValue) == 0x0000B2, "Member 'ELEVATOR_Base_C_ActivateDoor::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ActivateDoor, CallFunc_IsValid_ReturnValue_1) == 0x0000B3, "Member 'ELEVATOR_Base_C_ActivateDoor::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ActivateDoor, CallFunc_GetDoorMontage_Montage) == 0x0000B8, "Member 'ELEVATOR_Base_C_ActivateDoor::CallFunc_GetDoorMontage_Montage' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ActivateDoor, CallFunc_GetDoorAnimInstance_AnimInstance_3) == 0x0000C0, "Member 'ELEVATOR_Base_C_ActivateDoor::CallFunc_GetDoorAnimInstance_AnimInstance_3' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ActivateDoor, Temp_byte_Variable_5) == 0x0000C8, "Member 'ELEVATOR_Base_C_ActivateDoor::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ActivateDoor, K2Node_Select_Default_1) == 0x0000C9, "Member 'ELEVATOR_Base_C_ActivateDoor::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ActivateDoor, K2Node_Select_Default_2) == 0x0000D0, "Member 'ELEVATOR_Base_C_ActivateDoor::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ActivateDoor, K2Node_Select_Default_3) == 0x0000D8, "Member 'ELEVATOR_Base_C_ActivateDoor::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ActivateDoor, K2Node_SwitchEnum_CmpSuccess_2) == 0x0000D9, "Member 'ELEVATOR_Base_C_ActivateDoor::K2Node_SwitchEnum_CmpSuccess_2' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ActivateDoor, CallFunc_Montage_Play_ReturnValue) == 0x0000DC, "Member 'ELEVATOR_Base_C_ActivateDoor::CallFunc_Montage_Play_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ActivateDoor, K2Node_CreateDelegate_OutputDelegate_1) == 0x0000E0, "Member 'ELEVATOR_Base_C_ActivateDoor::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_ActivateDoor, CallFunc_K2_SetTimerDelegate_ReturnValue_1) == 0x0000F0, "Member 'ELEVATOR_Base_C_ActivateDoor::CallFunc_K2_SetTimerDelegate_ReturnValue_1' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.EVENT_InnerDoorsMontageFinished
// 0x00A0 (0x00A0 - 0x0000)
struct ELEVATOR_Base_C_EVENT_InnerDoorsMontageFinished final
{
public:
	struct FSTRUCT_LevelAtmosphereSettings        TargetAtmosphereSettings;                          // 0x0000(0x0024)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGI_SinglePlayer_C*                     GameInstance;                                      // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_K2_IsTimerActiveHandle_ReturnValue;       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_IsTimerActiveHandle_ReturnValue_1;     // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetCurrentLevelName_Result;               // 0x0034(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_LevelAtmosphereSettings        CallFunc_GetDataTableRowFromName_OutRow;           // 0x003C(0x0024)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_LevelAtmosphereSettings        CallFunc_GetLevelAtmosphereSettings_Settings;      // 0x0064(0x0024)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ELEVATOR_Base_C_EVENT_InnerDoorsMontageFinished) == 0x000008, "Wrong alignment on ELEVATOR_Base_C_EVENT_InnerDoorsMontageFinished");
static_assert(sizeof(ELEVATOR_Base_C_EVENT_InnerDoorsMontageFinished) == 0x0000A0, "Wrong size on ELEVATOR_Base_C_EVENT_InnerDoorsMontageFinished");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_InnerDoorsMontageFinished, TargetAtmosphereSettings) == 0x000000, "Member 'ELEVATOR_Base_C_EVENT_InnerDoorsMontageFinished::TargetAtmosphereSettings' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_InnerDoorsMontageFinished, GameInstance) == 0x000028, "Member 'ELEVATOR_Base_C_EVENT_InnerDoorsMontageFinished::GameInstance' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_InnerDoorsMontageFinished, CallFunc_K2_IsTimerActiveHandle_ReturnValue) == 0x000030, "Member 'ELEVATOR_Base_C_EVENT_InnerDoorsMontageFinished::CallFunc_K2_IsTimerActiveHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_InnerDoorsMontageFinished, CallFunc_K2_IsTimerActiveHandle_ReturnValue_1) == 0x000031, "Member 'ELEVATOR_Base_C_EVENT_InnerDoorsMontageFinished::CallFunc_K2_IsTimerActiveHandle_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_InnerDoorsMontageFinished, CallFunc_GetCurrentLevelName_Result) == 0x000034, "Member 'ELEVATOR_Base_C_EVENT_InnerDoorsMontageFinished::CallFunc_GetCurrentLevelName_Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_InnerDoorsMontageFinished, CallFunc_GetDataTableRowFromName_OutRow) == 0x00003C, "Member 'ELEVATOR_Base_C_EVENT_InnerDoorsMontageFinished::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_InnerDoorsMontageFinished, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000060, "Member 'ELEVATOR_Base_C_EVENT_InnerDoorsMontageFinished::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_InnerDoorsMontageFinished, CallFunc_GetLevelAtmosphereSettings_Settings) == 0x000064, "Member 'ELEVATOR_Base_C_EVENT_InnerDoorsMontageFinished::CallFunc_GetLevelAtmosphereSettings_Settings' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_InnerDoorsMontageFinished, CallFunc_GetGameInstance_ReturnValue) == 0x000088, "Member 'ELEVATOR_Base_C_EVENT_InnerDoorsMontageFinished::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_InnerDoorsMontageFinished, K2Node_DynamicCast_AsGI_Single_Player) == 0x000090, "Member 'ELEVATOR_Base_C_EVENT_InnerDoorsMontageFinished::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_InnerDoorsMontageFinished, K2Node_DynamicCast_bSuccess) == 0x000098, "Member 'ELEVATOR_Base_C_EVENT_InnerDoorsMontageFinished::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_InnerDoorsMontageFinished, K2Node_SwitchEnum_CmpSuccess) == 0x000099, "Member 'ELEVATOR_Base_C_EVENT_InnerDoorsMontageFinished::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.EVENT_OuterDoorsMontageFinished
// 0x0020 (0x0020 - 0x0000)
struct ELEVATOR_Base_C_EVENT_OuterDoorsMontageFinished final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AINTERACT_ElevatorDoors_Base_C*         K2Node_DynamicCast_AsINTERACT_Elevator_Doors_Base; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_StartElevatorMotion_Result;               // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsElevatorOccupiedByPawn_Result;          // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ELEVATOR_Base_C_EVENT_OuterDoorsMontageFinished) == 0x000008, "Wrong alignment on ELEVATOR_Base_C_EVENT_OuterDoorsMontageFinished");
static_assert(sizeof(ELEVATOR_Base_C_EVENT_OuterDoorsMontageFinished) == 0x000020, "Wrong size on ELEVATOR_Base_C_EVENT_OuterDoorsMontageFinished");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OuterDoorsMontageFinished, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'ELEVATOR_Base_C_EVENT_OuterDoorsMontageFinished::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OuterDoorsMontageFinished, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'ELEVATOR_Base_C_EVENT_OuterDoorsMontageFinished::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OuterDoorsMontageFinished, K2Node_DynamicCast_AsINTERACT_Elevator_Doors_Base) == 0x000010, "Member 'ELEVATOR_Base_C_EVENT_OuterDoorsMontageFinished::K2Node_DynamicCast_AsINTERACT_Elevator_Doors_Base' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OuterDoorsMontageFinished, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'ELEVATOR_Base_C_EVENT_OuterDoorsMontageFinished::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OuterDoorsMontageFinished, CallFunc_IsValid_ReturnValue_1) == 0x000019, "Member 'ELEVATOR_Base_C_EVENT_OuterDoorsMontageFinished::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OuterDoorsMontageFinished, CallFunc_StartElevatorMotion_Result) == 0x00001A, "Member 'ELEVATOR_Base_C_EVENT_OuterDoorsMontageFinished::CallFunc_StartElevatorMotion_Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OuterDoorsMontageFinished, CallFunc_IsElevatorOccupiedByPawn_Result) == 0x00001B, "Member 'ELEVATOR_Base_C_EVENT_OuterDoorsMontageFinished::CallFunc_IsElevatorOccupiedByPawn_Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OuterDoorsMontageFinished, CallFunc_NotEqual_NameName_ReturnValue) == 0x00001C, "Member 'ELEVATOR_Base_C_EVENT_OuterDoorsMontageFinished::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OuterDoorsMontageFinished, K2Node_SwitchEnum_CmpSuccess) == 0x00001D, "Member 'ELEVATOR_Base_C_EVENT_OuterDoorsMontageFinished::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.IsElevatorFunctional
// 0x000C (0x000C - 0x0000)
struct ELEVATOR_Base_C_IsElevatorFunctional final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetAttribValue_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ELEVATOR_Base_C_IsElevatorFunctional) == 0x000004, "Wrong alignment on ELEVATOR_Base_C_IsElevatorFunctional");
static_assert(sizeof(ELEVATOR_Base_C_IsElevatorFunctional) == 0x00000C, "Wrong size on ELEVATOR_Base_C_IsElevatorFunctional");
static_assert(offsetof(ELEVATOR_Base_C_IsElevatorFunctional, Result) == 0x000000, "Member 'ELEVATOR_Base_C_IsElevatorFunctional::Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_IsElevatorFunctional, CallFunc_GetAttribValue_ReturnValue) == 0x000004, "Member 'ELEVATOR_Base_C_IsElevatorFunctional::CallFunc_GetAttribValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_IsElevatorFunctional, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000008, "Member 'ELEVATOR_Base_C_IsElevatorFunctional::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.GetTargetDoorState
// 0x0003 (0x0003 - 0x0000)
struct ELEVATOR_Base_C_GetTargetDoorState final
{
public:
	ENUM_InnerOuter                               TargetType;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_DoorState                                State;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ELEVATOR_Base_C_GetTargetDoorState) == 0x000001, "Wrong alignment on ELEVATOR_Base_C_GetTargetDoorState");
static_assert(sizeof(ELEVATOR_Base_C_GetTargetDoorState) == 0x000003, "Wrong size on ELEVATOR_Base_C_GetTargetDoorState");
static_assert(offsetof(ELEVATOR_Base_C_GetTargetDoorState, TargetType) == 0x000000, "Member 'ELEVATOR_Base_C_GetTargetDoorState::TargetType' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetTargetDoorState, State) == 0x000001, "Member 'ELEVATOR_Base_C_GetTargetDoorState::State' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetTargetDoorState, K2Node_SwitchEnum_CmpSuccess) == 0x000002, "Member 'ELEVATOR_Base_C_GetTargetDoorState::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.GetDoorMontage
// 0x0098 (0x0098 - 0x0000)
struct ELEVATOR_Base_C_GetDoorMontage final
{
public:
	ENUM_InnerOuter                               Target;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Open;                                              // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           Montage;                                           // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UAnimMontage>            K2Node_Select_Default;                             // 0x0018(0x0028)(HasGetValueTypeHash)
	class UObject*                                CallFunc_LoadAsset_Blocking_ReturnValue;           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           K2Node_DynamicCast_AsAnim_Montage;                 // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UAnimMontage>            K2Node_Select_Default_1;                           // 0x0058(0x0028)(HasGetValueTypeHash)
	class UObject*                                CallFunc_LoadAsset_Blocking_ReturnValue_1;         // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           K2Node_DynamicCast_AsAnim_Montage_1;               // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ELEVATOR_Base_C_GetDoorMontage) == 0x000008, "Wrong alignment on ELEVATOR_Base_C_GetDoorMontage");
static_assert(sizeof(ELEVATOR_Base_C_GetDoorMontage) == 0x000098, "Wrong size on ELEVATOR_Base_C_GetDoorMontage");
static_assert(offsetof(ELEVATOR_Base_C_GetDoorMontage, Target) == 0x000000, "Member 'ELEVATOR_Base_C_GetDoorMontage::Target' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetDoorMontage, Open) == 0x000001, "Member 'ELEVATOR_Base_C_GetDoorMontage::Open' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetDoorMontage, Montage) == 0x000008, "Member 'ELEVATOR_Base_C_GetDoorMontage::Montage' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetDoorMontage, Temp_bool_Variable) == 0x000010, "Member 'ELEVATOR_Base_C_GetDoorMontage::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetDoorMontage, K2Node_SwitchEnum_CmpSuccess) == 0x000011, "Member 'ELEVATOR_Base_C_GetDoorMontage::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetDoorMontage, Temp_bool_Variable_1) == 0x000012, "Member 'ELEVATOR_Base_C_GetDoorMontage::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetDoorMontage, K2Node_Select_Default) == 0x000018, "Member 'ELEVATOR_Base_C_GetDoorMontage::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetDoorMontage, CallFunc_LoadAsset_Blocking_ReturnValue) == 0x000040, "Member 'ELEVATOR_Base_C_GetDoorMontage::CallFunc_LoadAsset_Blocking_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetDoorMontage, K2Node_DynamicCast_AsAnim_Montage) == 0x000048, "Member 'ELEVATOR_Base_C_GetDoorMontage::K2Node_DynamicCast_AsAnim_Montage' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetDoorMontage, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'ELEVATOR_Base_C_GetDoorMontage::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetDoorMontage, K2Node_Select_Default_1) == 0x000058, "Member 'ELEVATOR_Base_C_GetDoorMontage::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetDoorMontage, CallFunc_LoadAsset_Blocking_ReturnValue_1) == 0x000080, "Member 'ELEVATOR_Base_C_GetDoorMontage::CallFunc_LoadAsset_Blocking_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetDoorMontage, K2Node_DynamicCast_AsAnim_Montage_1) == 0x000088, "Member 'ELEVATOR_Base_C_GetDoorMontage::K2Node_DynamicCast_AsAnim_Montage_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetDoorMontage, K2Node_DynamicCast_bSuccess_1) == 0x000090, "Member 'ELEVATOR_Base_C_GetDoorMontage::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.GetDoorAnimInstance
// 0x0028 (0x0028 - 0x0000)
struct ELEVATOR_Base_C_GetDoorAnimInstance final
{
public:
	ENUM_InnerOuter                               Target;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          AnimInstance;                                      // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_InnerOuter                               Temp_byte_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 K2Node_Select_Default;                             // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ELEVATOR_Base_C_GetDoorAnimInstance) == 0x000008, "Wrong alignment on ELEVATOR_Base_C_GetDoorAnimInstance");
static_assert(sizeof(ELEVATOR_Base_C_GetDoorAnimInstance) == 0x000028, "Wrong size on ELEVATOR_Base_C_GetDoorAnimInstance");
static_assert(offsetof(ELEVATOR_Base_C_GetDoorAnimInstance, Target) == 0x000000, "Member 'ELEVATOR_Base_C_GetDoorAnimInstance::Target' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetDoorAnimInstance, AnimInstance) == 0x000008, "Member 'ELEVATOR_Base_C_GetDoorAnimInstance::AnimInstance' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetDoorAnimInstance, Temp_byte_Variable) == 0x000010, "Member 'ELEVATOR_Base_C_GetDoorAnimInstance::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetDoorAnimInstance, K2Node_Select_Default) == 0x000018, "Member 'ELEVATOR_Base_C_GetDoorAnimInstance::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetDoorAnimInstance, CallFunc_GetAnimInstance_ReturnValue) == 0x000020, "Member 'ELEVATOR_Base_C_GetDoorAnimInstance::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.SetDoorState
// 0x0003 (0x0003 - 0x0000)
struct ELEVATOR_Base_C_SetDoorState final
{
public:
	ENUM_InnerOuter                               Target;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_DoorState                                NewState;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ELEVATOR_Base_C_SetDoorState) == 0x000001, "Wrong alignment on ELEVATOR_Base_C_SetDoorState");
static_assert(sizeof(ELEVATOR_Base_C_SetDoorState) == 0x000003, "Wrong size on ELEVATOR_Base_C_SetDoorState");
static_assert(offsetof(ELEVATOR_Base_C_SetDoorState, Target) == 0x000000, "Member 'ELEVATOR_Base_C_SetDoorState::Target' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_SetDoorState, NewState) == 0x000001, "Member 'ELEVATOR_Base_C_SetDoorState::NewState' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_SetDoorState, K2Node_SwitchEnum_CmpSuccess) == 0x000002, "Member 'ELEVATOR_Base_C_SetDoorState::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.TransferOccupantsToLevel
// 0x0120 (0x0120 - 0x0000)
struct ELEVATOR_Base_C_TransferOccupantsToLevel final
{
public:
	class AINTERACT_ElevatorDoors_Base_C*         ElevatorDoors;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCOMP_VoxelCullable_C*                  CullableComponent;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FTransform>                     BodyTransforms;                                    // 0x0010(0x0010)(Edit, BlueprintVisible)
	class AActor*                                 OverlappingActor;                                  // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         OverlappingActors;                                 // 0x0028(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	class ULevelStreaming*                        PrimaryLevel;                                      // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     GameInstance;                                      // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValidOccupant_Result;                   // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5E[0x2];                                       // 0x005E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             K2Node_DynamicCast_AsCharacter;                    // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerControlled_ReturnValue;           // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x006B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelStreaming*                        CallFunc_GetPrimaryStreamingLevel_Level;           // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULevel*                                 CallFunc_GetLoadedLevel_ReturnValue;               // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_92[0x6];                                       // 0x0092(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    CallFunc_GetOccupantPrimitiveComponent_PrimitiveComponent; // 0x0098(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 K2Node_DynamicCast_AsSkeletal_Mesh_Component;      // 0x00A0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    CallFunc_GetOccupantPrimitiveComponent_PrimitiveComponent_1; // 0x00B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 K2Node_DynamicCast_AsSkeletal_Mesh_Component_1;    // 0x00B8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransform>                     CallFunc_GetSkeletalMeshBodyTransforms_ReturnValue; // 0x00C8(0x0010)(ReferenceParm)
	class ULevel*                                 CallFunc_GetActorLevel_ReturnValue;                // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULevel*                                 K2Node_Select_Default;                             // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevel*                                 CallFunc_GetActorLevel_ReturnValue_1;              // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULevel*                                 K2Node_Select_Default_1;                           // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_101[0x3];                                      // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_MoveActorToLevel_ReturnValue;             // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetOverlappingActors_OverlappingActors;   // 0x0110(0x0010)(ReferenceParm)
};
static_assert(alignof(ELEVATOR_Base_C_TransferOccupantsToLevel) == 0x000008, "Wrong alignment on ELEVATOR_Base_C_TransferOccupantsToLevel");
static_assert(sizeof(ELEVATOR_Base_C_TransferOccupantsToLevel) == 0x000120, "Wrong size on ELEVATOR_Base_C_TransferOccupantsToLevel");
static_assert(offsetof(ELEVATOR_Base_C_TransferOccupantsToLevel, ElevatorDoors) == 0x000000, "Member 'ELEVATOR_Base_C_TransferOccupantsToLevel::ElevatorDoors' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TransferOccupantsToLevel, CullableComponent) == 0x000008, "Member 'ELEVATOR_Base_C_TransferOccupantsToLevel::CullableComponent' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TransferOccupantsToLevel, BodyTransforms) == 0x000010, "Member 'ELEVATOR_Base_C_TransferOccupantsToLevel::BodyTransforms' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TransferOccupantsToLevel, OverlappingActor) == 0x000020, "Member 'ELEVATOR_Base_C_TransferOccupantsToLevel::OverlappingActor' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TransferOccupantsToLevel, OverlappingActors) == 0x000028, "Member 'ELEVATOR_Base_C_TransferOccupantsToLevel::OverlappingActors' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TransferOccupantsToLevel, PrimaryLevel) == 0x000038, "Member 'ELEVATOR_Base_C_TransferOccupantsToLevel::PrimaryLevel' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TransferOccupantsToLevel, GameInstance) == 0x000040, "Member 'ELEVATOR_Base_C_TransferOccupantsToLevel::GameInstance' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TransferOccupantsToLevel, Temp_int_Array_Index_Variable) == 0x000048, "Member 'ELEVATOR_Base_C_TransferOccupantsToLevel::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TransferOccupantsToLevel, CallFunc_Array_Get_Item) == 0x000050, "Member 'ELEVATOR_Base_C_TransferOccupantsToLevel::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TransferOccupantsToLevel, CallFunc_Array_Length_ReturnValue) == 0x000058, "Member 'ELEVATOR_Base_C_TransferOccupantsToLevel::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TransferOccupantsToLevel, Temp_bool_Variable) == 0x00005C, "Member 'ELEVATOR_Base_C_TransferOccupantsToLevel::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TransferOccupantsToLevel, CallFunc_IsValidOccupant_Result) == 0x00005D, "Member 'ELEVATOR_Base_C_TransferOccupantsToLevel::CallFunc_IsValidOccupant_Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TransferOccupantsToLevel, K2Node_DynamicCast_AsCharacter) == 0x000060, "Member 'ELEVATOR_Base_C_TransferOccupantsToLevel::K2Node_DynamicCast_AsCharacter' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TransferOccupantsToLevel, K2Node_DynamicCast_bSuccess) == 0x000068, "Member 'ELEVATOR_Base_C_TransferOccupantsToLevel::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TransferOccupantsToLevel, CallFunc_IsPlayerControlled_ReturnValue) == 0x000069, "Member 'ELEVATOR_Base_C_TransferOccupantsToLevel::CallFunc_IsPlayerControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TransferOccupantsToLevel, CallFunc_IsValid_ReturnValue) == 0x00006A, "Member 'ELEVATOR_Base_C_TransferOccupantsToLevel::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TransferOccupantsToLevel, CallFunc_Not_PreBool_ReturnValue) == 0x00006B, "Member 'ELEVATOR_Base_C_TransferOccupantsToLevel::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TransferOccupantsToLevel, CallFunc_IsValid_ReturnValue_1) == 0x00006C, "Member 'ELEVATOR_Base_C_TransferOccupantsToLevel::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TransferOccupantsToLevel, CallFunc_GetPrimaryStreamingLevel_Level) == 0x000070, "Member 'ELEVATOR_Base_C_TransferOccupantsToLevel::CallFunc_GetPrimaryStreamingLevel_Level' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TransferOccupantsToLevel, CallFunc_GetLoadedLevel_ReturnValue) == 0x000078, "Member 'ELEVATOR_Base_C_TransferOccupantsToLevel::CallFunc_GetLoadedLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TransferOccupantsToLevel, CallFunc_GetGameInstance_ReturnValue) == 0x000080, "Member 'ELEVATOR_Base_C_TransferOccupantsToLevel::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TransferOccupantsToLevel, K2Node_DynamicCast_AsGI_Single_Player) == 0x000088, "Member 'ELEVATOR_Base_C_TransferOccupantsToLevel::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TransferOccupantsToLevel, K2Node_DynamicCast_bSuccess_1) == 0x000090, "Member 'ELEVATOR_Base_C_TransferOccupantsToLevel::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TransferOccupantsToLevel, Temp_bool_Variable_1) == 0x000091, "Member 'ELEVATOR_Base_C_TransferOccupantsToLevel::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TransferOccupantsToLevel, CallFunc_GetOccupantPrimitiveComponent_PrimitiveComponent) == 0x000098, "Member 'ELEVATOR_Base_C_TransferOccupantsToLevel::CallFunc_GetOccupantPrimitiveComponent_PrimitiveComponent' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TransferOccupantsToLevel, K2Node_DynamicCast_AsSkeletal_Mesh_Component) == 0x0000A0, "Member 'ELEVATOR_Base_C_TransferOccupantsToLevel::K2Node_DynamicCast_AsSkeletal_Mesh_Component' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TransferOccupantsToLevel, K2Node_DynamicCast_bSuccess_2) == 0x0000A8, "Member 'ELEVATOR_Base_C_TransferOccupantsToLevel::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TransferOccupantsToLevel, CallFunc_GetOccupantPrimitiveComponent_PrimitiveComponent_1) == 0x0000B0, "Member 'ELEVATOR_Base_C_TransferOccupantsToLevel::CallFunc_GetOccupantPrimitiveComponent_PrimitiveComponent_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TransferOccupantsToLevel, K2Node_DynamicCast_AsSkeletal_Mesh_Component_1) == 0x0000B8, "Member 'ELEVATOR_Base_C_TransferOccupantsToLevel::K2Node_DynamicCast_AsSkeletal_Mesh_Component_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TransferOccupantsToLevel, K2Node_DynamicCast_bSuccess_3) == 0x0000C0, "Member 'ELEVATOR_Base_C_TransferOccupantsToLevel::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TransferOccupantsToLevel, CallFunc_GetSkeletalMeshBodyTransforms_ReturnValue) == 0x0000C8, "Member 'ELEVATOR_Base_C_TransferOccupantsToLevel::CallFunc_GetSkeletalMeshBodyTransforms_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TransferOccupantsToLevel, CallFunc_GetActorLevel_ReturnValue) == 0x0000D8, "Member 'ELEVATOR_Base_C_TransferOccupantsToLevel::CallFunc_GetActorLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TransferOccupantsToLevel, K2Node_Select_Default) == 0x0000E0, "Member 'ELEVATOR_Base_C_TransferOccupantsToLevel::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TransferOccupantsToLevel, Temp_int_Loop_Counter_Variable) == 0x0000E8, "Member 'ELEVATOR_Base_C_TransferOccupantsToLevel::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TransferOccupantsToLevel, CallFunc_GetActorLevel_ReturnValue_1) == 0x0000F0, "Member 'ELEVATOR_Base_C_TransferOccupantsToLevel::CallFunc_GetActorLevel_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TransferOccupantsToLevel, K2Node_Select_Default_1) == 0x0000F8, "Member 'ELEVATOR_Base_C_TransferOccupantsToLevel::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TransferOccupantsToLevel, CallFunc_Less_IntInt_ReturnValue) == 0x000100, "Member 'ELEVATOR_Base_C_TransferOccupantsToLevel::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TransferOccupantsToLevel, CallFunc_Add_IntInt_ReturnValue) == 0x000104, "Member 'ELEVATOR_Base_C_TransferOccupantsToLevel::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TransferOccupantsToLevel, CallFunc_MoveActorToLevel_ReturnValue) == 0x000108, "Member 'ELEVATOR_Base_C_TransferOccupantsToLevel::CallFunc_MoveActorToLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TransferOccupantsToLevel, CallFunc_GetOverlappingActors_OverlappingActors) == 0x000110, "Member 'ELEVATOR_Base_C_TransferOccupantsToLevel::CallFunc_GetOverlappingActors_OverlappingActors' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.EVENT_DelayedUnloadActions
// 0x0060 (0x0060 - 0x0000)
struct ELEVATOR_Base_C_EVENT_DelayedUnloadActions final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryStreamInTargetLevelCollection_Result;  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_X;                            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0030(0x0030)(IsPlainOldData, NoDestructor)
};
static_assert(alignof(ELEVATOR_Base_C_EVENT_DelayedUnloadActions) == 0x000010, "Wrong alignment on ELEVATOR_Base_C_EVENT_DelayedUnloadActions");
static_assert(sizeof(ELEVATOR_Base_C_EVENT_DelayedUnloadActions) == 0x000060, "Wrong size on ELEVATOR_Base_C_EVENT_DelayedUnloadActions");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_DelayedUnloadActions, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'ELEVATOR_Base_C_EVENT_DelayedUnloadActions::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_DelayedUnloadActions, CallFunc_IsValid_ReturnValue_1) == 0x000001, "Member 'ELEVATOR_Base_C_EVENT_DelayedUnloadActions::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_DelayedUnloadActions, CallFunc_TryStreamInTargetLevelCollection_Result) == 0x000002, "Member 'ELEVATOR_Base_C_EVENT_DelayedUnloadActions::CallFunc_TryStreamInTargetLevelCollection_Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_DelayedUnloadActions, CallFunc_NotEqual_NameName_ReturnValue) == 0x000003, "Member 'ELEVATOR_Base_C_EVENT_DelayedUnloadActions::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_DelayedUnloadActions, Temp_bool_Variable) == 0x000004, "Member 'ELEVATOR_Base_C_EVENT_DelayedUnloadActions::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_DelayedUnloadActions, CallFunc_BooleanAND_ReturnValue) == 0x000005, "Member 'ELEVATOR_Base_C_EVENT_DelayedUnloadActions::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_DelayedUnloadActions, CallFunc_IsValid_ReturnValue_2) == 0x000006, "Member 'ELEVATOR_Base_C_EVENT_DelayedUnloadActions::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_DelayedUnloadActions, CallFunc_Not_PreBool_ReturnValue) == 0x000007, "Member 'ELEVATOR_Base_C_EVENT_DelayedUnloadActions::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_DelayedUnloadActions, CallFunc_BreakVector_X) == 0x000008, "Member 'ELEVATOR_Base_C_EVENT_DelayedUnloadActions::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_DelayedUnloadActions, CallFunc_BreakVector_Y) == 0x00000C, "Member 'ELEVATOR_Base_C_EVENT_DelayedUnloadActions::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_DelayedUnloadActions, CallFunc_BreakVector_Z) == 0x000010, "Member 'ELEVATOR_Base_C_EVENT_DelayedUnloadActions::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_DelayedUnloadActions, CallFunc_BooleanOR_ReturnValue) == 0x000014, "Member 'ELEVATOR_Base_C_EVENT_DelayedUnloadActions::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_DelayedUnloadActions, K2Node_Select_Default) == 0x000018, "Member 'ELEVATOR_Base_C_EVENT_DelayedUnloadActions::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_DelayedUnloadActions, CallFunc_MakeVector_ReturnValue) == 0x00001C, "Member 'ELEVATOR_Base_C_EVENT_DelayedUnloadActions::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_DelayedUnloadActions, CallFunc_MakeTransform_ReturnValue) == 0x000030, "Member 'ELEVATOR_Base_C_EVENT_DelayedUnloadActions::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.UpdateScannableComponent
// 0x0020 (0x0020 - 0x0000)
struct ELEVATOR_Base_C_UpdateScannableComponent final
{
public:
	bool                                          Open;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AINTERACT_ElevatorDoors_Base_C*         K2Node_DynamicCast_AsINTERACT_Elevator_Doors_Base; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ELEVATOR_Base_C_UpdateScannableComponent) == 0x000008, "Wrong alignment on ELEVATOR_Base_C_UpdateScannableComponent");
static_assert(sizeof(ELEVATOR_Base_C_UpdateScannableComponent) == 0x000020, "Wrong size on ELEVATOR_Base_C_UpdateScannableComponent");
static_assert(offsetof(ELEVATOR_Base_C_UpdateScannableComponent, Open) == 0x000000, "Member 'ELEVATOR_Base_C_UpdateScannableComponent::Open' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_UpdateScannableComponent, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'ELEVATOR_Base_C_UpdateScannableComponent::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_UpdateScannableComponent, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'ELEVATOR_Base_C_UpdateScannableComponent::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_UpdateScannableComponent, K2Node_DynamicCast_AsINTERACT_Elevator_Doors_Base) == 0x000010, "Member 'ELEVATOR_Base_C_UpdateScannableComponent::K2Node_DynamicCast_AsINTERACT_Elevator_Doors_Base' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_UpdateScannableComponent, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'ELEVATOR_Base_C_UpdateScannableComponent::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.GetTargetLevelName
// 0x0088 (0x0088 - 0x0000)
struct ELEVATOR_Base_C_GetTargetLevelName final
{
public:
	class UPrimitiveComponent*                    CursorPrimitive;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   TargetLevel_0;                                     // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ButtonIndex;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUC_ElevatorInfo                    CallFunc_GetDataTableRowFromName_OutRow;           // 0x0020(0x0038)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBoxComponent*                          K2Node_DynamicCast_AsBox_Collision;                // 0x0060(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 K2Node_Select_Default;                             // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetLevelNameByDeckSymbol_LevelName;       // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ELEVATOR_Base_C_GetTargetLevelName) == 0x000008, "Wrong alignment on ELEVATOR_Base_C_GetTargetLevelName");
static_assert(sizeof(ELEVATOR_Base_C_GetTargetLevelName) == 0x000088, "Wrong size on ELEVATOR_Base_C_GetTargetLevelName");
static_assert(offsetof(ELEVATOR_Base_C_GetTargetLevelName, CursorPrimitive) == 0x000000, "Member 'ELEVATOR_Base_C_GetTargetLevelName::CursorPrimitive' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetTargetLevelName, TargetLevel_0) == 0x000008, "Member 'ELEVATOR_Base_C_GetTargetLevelName::TargetLevel_0' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetTargetLevelName, ButtonIndex) == 0x000010, "Member 'ELEVATOR_Base_C_GetTargetLevelName::ButtonIndex' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetTargetLevelName, Temp_int_Variable) == 0x000014, "Member 'ELEVATOR_Base_C_GetTargetLevelName::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetTargetLevelName, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000018, "Member 'ELEVATOR_Base_C_GetTargetLevelName::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetTargetLevelName, CallFunc_GetDataTableRowFromName_OutRow) == 0x000020, "Member 'ELEVATOR_Base_C_GetTargetLevelName::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetTargetLevelName, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000058, "Member 'ELEVATOR_Base_C_GetTargetLevelName::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetTargetLevelName, K2Node_DynamicCast_AsBox_Collision) == 0x000060, "Member 'ELEVATOR_Base_C_GetTargetLevelName::K2Node_DynamicCast_AsBox_Collision' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetTargetLevelName, K2Node_DynamicCast_bSuccess) == 0x000068, "Member 'ELEVATOR_Base_C_GetTargetLevelName::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetTargetLevelName, CallFunc_Array_Find_ReturnValue) == 0x00006C, "Member 'ELEVATOR_Base_C_GetTargetLevelName::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetTargetLevelName, K2Node_Select_Default) == 0x000070, "Member 'ELEVATOR_Base_C_GetTargetLevelName::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetTargetLevelName, CallFunc_GetLevelNameByDeckSymbol_LevelName) == 0x000080, "Member 'ELEVATOR_Base_C_GetTargetLevelName::CallFunc_GetLevelNameByDeckSymbol_LevelName' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.GetDirectionToTargetLevelFromSource
// 0x0078 (0x0078 - 0x0000)
struct ELEVATOR_Base_C_GetDirectionToTargetLevelFromSource final
{
public:
	class FName                                   SourceLevel;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   TargetLevel_0;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_UpDown                                   DirectionToTarget;                                 // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TargetLevelIndex;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SourceLevelIndex;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CurrentRowName;                                    // 0x001C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentIndex;                                      // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           LevelRowNames;                                     // 0x0028(0x0010)(Edit, BlueprintVisible)
	ENUM_UpDown                                   Temp_byte_Variable;                                // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_UpDown                                   Temp_byte_Variable_1;                              // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ENUM_UpDown                                   K2Node_Select_Default;                             // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_1;        // 0x004E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x004F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue_1;        // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CallFunc_GetDataTableRowNames_OutRowNames;         // 0x0058(0x0010)(ReferenceParm)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ELEVATOR_Base_C_GetDirectionToTargetLevelFromSource) == 0x000008, "Wrong alignment on ELEVATOR_Base_C_GetDirectionToTargetLevelFromSource");
static_assert(sizeof(ELEVATOR_Base_C_GetDirectionToTargetLevelFromSource) == 0x000078, "Wrong size on ELEVATOR_Base_C_GetDirectionToTargetLevelFromSource");
static_assert(offsetof(ELEVATOR_Base_C_GetDirectionToTargetLevelFromSource, SourceLevel) == 0x000000, "Member 'ELEVATOR_Base_C_GetDirectionToTargetLevelFromSource::SourceLevel' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetDirectionToTargetLevelFromSource, TargetLevel_0) == 0x000008, "Member 'ELEVATOR_Base_C_GetDirectionToTargetLevelFromSource::TargetLevel_0' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetDirectionToTargetLevelFromSource, DirectionToTarget) == 0x000010, "Member 'ELEVATOR_Base_C_GetDirectionToTargetLevelFromSource::DirectionToTarget' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetDirectionToTargetLevelFromSource, TargetLevelIndex) == 0x000014, "Member 'ELEVATOR_Base_C_GetDirectionToTargetLevelFromSource::TargetLevelIndex' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetDirectionToTargetLevelFromSource, SourceLevelIndex) == 0x000018, "Member 'ELEVATOR_Base_C_GetDirectionToTargetLevelFromSource::SourceLevelIndex' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetDirectionToTargetLevelFromSource, CurrentRowName) == 0x00001C, "Member 'ELEVATOR_Base_C_GetDirectionToTargetLevelFromSource::CurrentRowName' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetDirectionToTargetLevelFromSource, CurrentIndex) == 0x000024, "Member 'ELEVATOR_Base_C_GetDirectionToTargetLevelFromSource::CurrentIndex' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetDirectionToTargetLevelFromSource, LevelRowNames) == 0x000028, "Member 'ELEVATOR_Base_C_GetDirectionToTargetLevelFromSource::LevelRowNames' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetDirectionToTargetLevelFromSource, Temp_byte_Variable) == 0x000038, "Member 'ELEVATOR_Base_C_GetDirectionToTargetLevelFromSource::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetDirectionToTargetLevelFromSource, Temp_int_Array_Index_Variable) == 0x00003C, "Member 'ELEVATOR_Base_C_GetDirectionToTargetLevelFromSource::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetDirectionToTargetLevelFromSource, Temp_int_Loop_Counter_Variable) == 0x000040, "Member 'ELEVATOR_Base_C_GetDirectionToTargetLevelFromSource::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetDirectionToTargetLevelFromSource, CallFunc_Add_IntInt_ReturnValue) == 0x000044, "Member 'ELEVATOR_Base_C_GetDirectionToTargetLevelFromSource::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetDirectionToTargetLevelFromSource, Temp_byte_Variable_1) == 0x000048, "Member 'ELEVATOR_Base_C_GetDirectionToTargetLevelFromSource::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetDirectionToTargetLevelFromSource, CallFunc_NotEqual_NameName_ReturnValue) == 0x000049, "Member 'ELEVATOR_Base_C_GetDirectionToTargetLevelFromSource::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetDirectionToTargetLevelFromSource, Temp_bool_Variable) == 0x00004A, "Member 'ELEVATOR_Base_C_GetDirectionToTargetLevelFromSource::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetDirectionToTargetLevelFromSource, CallFunc_Greater_IntInt_ReturnValue) == 0x00004B, "Member 'ELEVATOR_Base_C_GetDirectionToTargetLevelFromSource::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetDirectionToTargetLevelFromSource, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00004C, "Member 'ELEVATOR_Base_C_GetDirectionToTargetLevelFromSource::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetDirectionToTargetLevelFromSource, K2Node_Select_Default) == 0x00004D, "Member 'ELEVATOR_Base_C_GetDirectionToTargetLevelFromSource::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetDirectionToTargetLevelFromSource, CallFunc_GreaterEqual_IntInt_ReturnValue_1) == 0x00004E, "Member 'ELEVATOR_Base_C_GetDirectionToTargetLevelFromSource::CallFunc_GreaterEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetDirectionToTargetLevelFromSource, CallFunc_BooleanAND_ReturnValue) == 0x00004F, "Member 'ELEVATOR_Base_C_GetDirectionToTargetLevelFromSource::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetDirectionToTargetLevelFromSource, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000050, "Member 'ELEVATOR_Base_C_GetDirectionToTargetLevelFromSource::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetDirectionToTargetLevelFromSource, CallFunc_EqualEqual_NameName_ReturnValue_1) == 0x000051, "Member 'ELEVATOR_Base_C_GetDirectionToTargetLevelFromSource::CallFunc_EqualEqual_NameName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetDirectionToTargetLevelFromSource, CallFunc_GetDataTableRowNames_OutRowNames) == 0x000058, "Member 'ELEVATOR_Base_C_GetDirectionToTargetLevelFromSource::CallFunc_GetDataTableRowNames_OutRowNames' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetDirectionToTargetLevelFromSource, CallFunc_Array_Get_Item) == 0x000068, "Member 'ELEVATOR_Base_C_GetDirectionToTargetLevelFromSource::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetDirectionToTargetLevelFromSource, CallFunc_Array_Length_ReturnValue) == 0x000070, "Member 'ELEVATOR_Base_C_GetDirectionToTargetLevelFromSource::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetDirectionToTargetLevelFromSource, CallFunc_Less_IntInt_ReturnValue) == 0x000074, "Member 'ELEVATOR_Base_C_GetDirectionToTargetLevelFromSource::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.GetTargetLevel
// 0x0008 (0x0008 - 0x0000)
struct ELEVATOR_Base_C_GetTargetLevel final
{
public:
	class FName                                   TargetLevel_0;                                     // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ELEVATOR_Base_C_GetTargetLevel) == 0x000004, "Wrong alignment on ELEVATOR_Base_C_GetTargetLevel");
static_assert(sizeof(ELEVATOR_Base_C_GetTargetLevel) == 0x000008, "Wrong size on ELEVATOR_Base_C_GetTargetLevel");
static_assert(offsetof(ELEVATOR_Base_C_GetTargetLevel, TargetLevel_0) == 0x000000, "Member 'ELEVATOR_Base_C_GetTargetLevel::TargetLevel_0' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.UpdateRoomAssignmentTypes
// 0x0070 (0x0070 - 0x0000)
struct ELEVATOR_Base_C_UpdateRoomAssignmentTypes final
{
public:
	bool                                          IsArriving;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCullableVoxelActorComponent*           CullableComponent;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OverlappingActor;                                  // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         OverlappingActors;                                 // 0x0018(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	ECullableRoomAssignmentType                   NewRoomAssignmentType;                             // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECullableRoomAssignmentType                   Temp_byte_Variable;                                // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECullableRoomAssignmentType                   Temp_byte_Variable_1;                              // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValidOccupant_Result;                   // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetRoomAssignmentType_ReturnValue;        // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ECullableRoomAssignmentType                   K2Node_Select_Default;                             // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetRoomAssignmentType_ReturnValue_1;      // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_53[0x5];                                       // 0x0053(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UCullableVoxelActorComponent*           CallFunc_GetComponentByClass_ReturnValue;          // 0x0058(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         CallFunc_GetOverlappingActors_OverlappingActors;   // 0x0060(0x0010)(ReferenceParm)
};
static_assert(alignof(ELEVATOR_Base_C_UpdateRoomAssignmentTypes) == 0x000008, "Wrong alignment on ELEVATOR_Base_C_UpdateRoomAssignmentTypes");
static_assert(sizeof(ELEVATOR_Base_C_UpdateRoomAssignmentTypes) == 0x000070, "Wrong size on ELEVATOR_Base_C_UpdateRoomAssignmentTypes");
static_assert(offsetof(ELEVATOR_Base_C_UpdateRoomAssignmentTypes, IsArriving) == 0x000000, "Member 'ELEVATOR_Base_C_UpdateRoomAssignmentTypes::IsArriving' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_UpdateRoomAssignmentTypes, CullableComponent) == 0x000008, "Member 'ELEVATOR_Base_C_UpdateRoomAssignmentTypes::CullableComponent' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_UpdateRoomAssignmentTypes, OverlappingActor) == 0x000010, "Member 'ELEVATOR_Base_C_UpdateRoomAssignmentTypes::OverlappingActor' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_UpdateRoomAssignmentTypes, OverlappingActors) == 0x000018, "Member 'ELEVATOR_Base_C_UpdateRoomAssignmentTypes::OverlappingActors' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_UpdateRoomAssignmentTypes, NewRoomAssignmentType) == 0x000028, "Member 'ELEVATOR_Base_C_UpdateRoomAssignmentTypes::NewRoomAssignmentType' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_UpdateRoomAssignmentTypes, Temp_byte_Variable) == 0x000029, "Member 'ELEVATOR_Base_C_UpdateRoomAssignmentTypes::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_UpdateRoomAssignmentTypes, Temp_byte_Variable_1) == 0x00002A, "Member 'ELEVATOR_Base_C_UpdateRoomAssignmentTypes::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_UpdateRoomAssignmentTypes, CallFunc_IsValid_ReturnValue) == 0x00002B, "Member 'ELEVATOR_Base_C_UpdateRoomAssignmentTypes::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_UpdateRoomAssignmentTypes, CallFunc_IsValidOccupant_Result) == 0x00002C, "Member 'ELEVATOR_Base_C_UpdateRoomAssignmentTypes::CallFunc_IsValidOccupant_Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_UpdateRoomAssignmentTypes, Temp_int_Loop_Counter_Variable) == 0x000030, "Member 'ELEVATOR_Base_C_UpdateRoomAssignmentTypes::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_UpdateRoomAssignmentTypes, CallFunc_Array_Length_ReturnValue) == 0x000034, "Member 'ELEVATOR_Base_C_UpdateRoomAssignmentTypes::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_UpdateRoomAssignmentTypes, CallFunc_Add_IntInt_ReturnValue) == 0x000038, "Member 'ELEVATOR_Base_C_UpdateRoomAssignmentTypes::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_UpdateRoomAssignmentTypes, CallFunc_Less_IntInt_ReturnValue) == 0x00003C, "Member 'ELEVATOR_Base_C_UpdateRoomAssignmentTypes::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_UpdateRoomAssignmentTypes, Temp_int_Array_Index_Variable) == 0x000040, "Member 'ELEVATOR_Base_C_UpdateRoomAssignmentTypes::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_UpdateRoomAssignmentTypes, Temp_bool_Variable) == 0x000044, "Member 'ELEVATOR_Base_C_UpdateRoomAssignmentTypes::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_UpdateRoomAssignmentTypes, CallFunc_Array_Get_Item) == 0x000048, "Member 'ELEVATOR_Base_C_UpdateRoomAssignmentTypes::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_UpdateRoomAssignmentTypes, CallFunc_SetRoomAssignmentType_ReturnValue) == 0x000050, "Member 'ELEVATOR_Base_C_UpdateRoomAssignmentTypes::CallFunc_SetRoomAssignmentType_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_UpdateRoomAssignmentTypes, K2Node_Select_Default) == 0x000051, "Member 'ELEVATOR_Base_C_UpdateRoomAssignmentTypes::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_UpdateRoomAssignmentTypes, CallFunc_SetRoomAssignmentType_ReturnValue_1) == 0x000052, "Member 'ELEVATOR_Base_C_UpdateRoomAssignmentTypes::CallFunc_SetRoomAssignmentType_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_UpdateRoomAssignmentTypes, CallFunc_GetComponentByClass_ReturnValue) == 0x000058, "Member 'ELEVATOR_Base_C_UpdateRoomAssignmentTypes::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_UpdateRoomAssignmentTypes, CallFunc_GetOverlappingActors_OverlappingActors) == 0x000060, "Member 'ELEVATOR_Base_C_UpdateRoomAssignmentTypes::CallFunc_GetOverlappingActors_OverlappingActors' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.UpdateEmissiveStrength
// 0x0004 (0x0004 - 0x0000)
struct ELEVATOR_Base_C_UpdateEmissiveStrength final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ELEVATOR_Base_C_UpdateEmissiveStrength) == 0x000004, "Wrong alignment on ELEVATOR_Base_C_UpdateEmissiveStrength");
static_assert(sizeof(ELEVATOR_Base_C_UpdateEmissiveStrength) == 0x000004, "Wrong size on ELEVATOR_Base_C_UpdateEmissiveStrength");
static_assert(offsetof(ELEVATOR_Base_C_UpdateEmissiveStrength, Scale) == 0x000000, "Member 'ELEVATOR_Base_C_UpdateEmissiveStrength::Scale' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.SetElevatorTargetLevel
// 0x00D0 (0x00D0 - 0x0000)
struct ELEVATOR_Base_C_SetElevatorTargetLevel final
{
public:
	class UPrimitiveComponent*                    CursorPrimitive;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   NewTargetLevel;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentDeckNumber;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TryUnselectActiveControlButton_Result;    // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryUnselectActiveControlButton_Result_1;  // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   CallFunc_GetControlsMeshComponent_MeshComponent;   // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   CallFunc_GetControlsMeshComponent_MeshComponent_1; // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          K2Node_DynamicCast_AsBox_Collision;                // 0x0050(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_1;            // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player_1;           // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetCurrentLevelName_Result;               // 0x008C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetDeckNumberByLevelName_Result;          // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_2;            // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player_2;           // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetTargetLevel_TargetLevel;               // 0x00B4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetCurrentLevelName_Result_1;             // 0x00BC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_UpDown                                   CallFunc_GetDirectionToTargetLevelFromSource_DirectionToTarget; // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00C5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C6[0x2];                                       // 0x00C6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ELEVATOR_Base_C_SetElevatorTargetLevel) == 0x000008, "Wrong alignment on ELEVATOR_Base_C_SetElevatorTargetLevel");
static_assert(sizeof(ELEVATOR_Base_C_SetElevatorTargetLevel) == 0x0000D0, "Wrong size on ELEVATOR_Base_C_SetElevatorTargetLevel");
static_assert(offsetof(ELEVATOR_Base_C_SetElevatorTargetLevel, CursorPrimitive) == 0x000000, "Member 'ELEVATOR_Base_C_SetElevatorTargetLevel::CursorPrimitive' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_SetElevatorTargetLevel, NewTargetLevel) == 0x000008, "Member 'ELEVATOR_Base_C_SetElevatorTargetLevel::NewTargetLevel' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_SetElevatorTargetLevel, CurrentDeckNumber) == 0x000010, "Member 'ELEVATOR_Base_C_SetElevatorTargetLevel::CurrentDeckNumber' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_SetElevatorTargetLevel, CallFunc_GetGameInstance_ReturnValue) == 0x000018, "Member 'ELEVATOR_Base_C_SetElevatorTargetLevel::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_SetElevatorTargetLevel, K2Node_DynamicCast_AsGI_Single_Player) == 0x000020, "Member 'ELEVATOR_Base_C_SetElevatorTargetLevel::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_SetElevatorTargetLevel, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'ELEVATOR_Base_C_SetElevatorTargetLevel::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_SetElevatorTargetLevel, Temp_float_Variable) == 0x00002C, "Member 'ELEVATOR_Base_C_SetElevatorTargetLevel::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_SetElevatorTargetLevel, Temp_float_Variable_1) == 0x000030, "Member 'ELEVATOR_Base_C_SetElevatorTargetLevel::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_SetElevatorTargetLevel, CallFunc_TryUnselectActiveControlButton_Result) == 0x000034, "Member 'ELEVATOR_Base_C_SetElevatorTargetLevel::CallFunc_TryUnselectActiveControlButton_Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_SetElevatorTargetLevel, CallFunc_TryUnselectActiveControlButton_Result_1) == 0x000035, "Member 'ELEVATOR_Base_C_SetElevatorTargetLevel::CallFunc_TryUnselectActiveControlButton_Result_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_SetElevatorTargetLevel, CallFunc_GetControlsMeshComponent_MeshComponent) == 0x000038, "Member 'ELEVATOR_Base_C_SetElevatorTargetLevel::CallFunc_GetControlsMeshComponent_MeshComponent' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_SetElevatorTargetLevel, CallFunc_NotEqual_NameName_ReturnValue) == 0x000040, "Member 'ELEVATOR_Base_C_SetElevatorTargetLevel::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_SetElevatorTargetLevel, CallFunc_GetControlsMeshComponent_MeshComponent_1) == 0x000048, "Member 'ELEVATOR_Base_C_SetElevatorTargetLevel::CallFunc_GetControlsMeshComponent_MeshComponent_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_SetElevatorTargetLevel, K2Node_DynamicCast_AsBox_Collision) == 0x000050, "Member 'ELEVATOR_Base_C_SetElevatorTargetLevel::K2Node_DynamicCast_AsBox_Collision' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_SetElevatorTargetLevel, K2Node_DynamicCast_bSuccess_1) == 0x000058, "Member 'ELEVATOR_Base_C_SetElevatorTargetLevel::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_SetElevatorTargetLevel, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x00005C, "Member 'ELEVATOR_Base_C_SetElevatorTargetLevel::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_SetElevatorTargetLevel, CallFunc_Array_Find_ReturnValue) == 0x000068, "Member 'ELEVATOR_Base_C_SetElevatorTargetLevel::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_SetElevatorTargetLevel, CallFunc_Add_IntInt_ReturnValue) == 0x00006C, "Member 'ELEVATOR_Base_C_SetElevatorTargetLevel::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_SetElevatorTargetLevel, CallFunc_GetGameInstance_ReturnValue_1) == 0x000070, "Member 'ELEVATOR_Base_C_SetElevatorTargetLevel::CallFunc_GetGameInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_SetElevatorTargetLevel, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000078, "Member 'ELEVATOR_Base_C_SetElevatorTargetLevel::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_SetElevatorTargetLevel, K2Node_DynamicCast_AsGI_Single_Player_1) == 0x000080, "Member 'ELEVATOR_Base_C_SetElevatorTargetLevel::K2Node_DynamicCast_AsGI_Single_Player_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_SetElevatorTargetLevel, K2Node_DynamicCast_bSuccess_2) == 0x000088, "Member 'ELEVATOR_Base_C_SetElevatorTargetLevel::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_SetElevatorTargetLevel, CallFunc_GetCurrentLevelName_Result) == 0x00008C, "Member 'ELEVATOR_Base_C_SetElevatorTargetLevel::CallFunc_GetCurrentLevelName_Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_SetElevatorTargetLevel, Temp_bool_Variable) == 0x000094, "Member 'ELEVATOR_Base_C_SetElevatorTargetLevel::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_SetElevatorTargetLevel, CallFunc_GetDeckNumberByLevelName_Result) == 0x000098, "Member 'ELEVATOR_Base_C_SetElevatorTargetLevel::CallFunc_GetDeckNumberByLevelName_Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_SetElevatorTargetLevel, CallFunc_GetGameInstance_ReturnValue_2) == 0x0000A0, "Member 'ELEVATOR_Base_C_SetElevatorTargetLevel::CallFunc_GetGameInstance_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_SetElevatorTargetLevel, K2Node_DynamicCast_AsGI_Single_Player_2) == 0x0000A8, "Member 'ELEVATOR_Base_C_SetElevatorTargetLevel::K2Node_DynamicCast_AsGI_Single_Player_2' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_SetElevatorTargetLevel, K2Node_DynamicCast_bSuccess_3) == 0x0000B0, "Member 'ELEVATOR_Base_C_SetElevatorTargetLevel::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_SetElevatorTargetLevel, CallFunc_GetTargetLevel_TargetLevel) == 0x0000B4, "Member 'ELEVATOR_Base_C_SetElevatorTargetLevel::CallFunc_GetTargetLevel_TargetLevel' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_SetElevatorTargetLevel, CallFunc_GetCurrentLevelName_Result_1) == 0x0000BC, "Member 'ELEVATOR_Base_C_SetElevatorTargetLevel::CallFunc_GetCurrentLevelName_Result_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_SetElevatorTargetLevel, CallFunc_GetDirectionToTargetLevelFromSource_DirectionToTarget) == 0x0000C4, "Member 'ELEVATOR_Base_C_SetElevatorTargetLevel::CallFunc_GetDirectionToTargetLevelFromSource_DirectionToTarget' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_SetElevatorTargetLevel, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000C5, "Member 'ELEVATOR_Base_C_SetElevatorTargetLevel::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_SetElevatorTargetLevel, K2Node_Select_Default) == 0x0000C8, "Member 'ELEVATOR_Base_C_SetElevatorTargetLevel::K2Node_Select_Default' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.StartElevatorMotion
// 0x00E0 (0x00E0 - 0x0000)
struct ELEVATOR_Base_C_StartElevatorMotion final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_1;        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACON_Hacker_C*                          K2Node_DynamicCast_AsCON_Hacker;                   // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWIDGET_EndGameScreen_C*                CallFunc_Create_ReturnValue;                       // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsMedicalDemo_Result;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            CallFunc_GetController_ReturnValue_1;              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      K2Node_DynamicCast_AsPlayer_Controller;            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      K2Node_DynamicCast_AsPlayer_Controller_1;          // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraShakeBase*                       CallFunc_StartCameraShake_ReturnValue;             // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetMoveDirectionVector_Direction;         // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AINTERACT_ElevatorDoors_Base_C*         K2Node_DynamicCast_AsINTERACT_Elevator_Doors_Base; // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetTileCollisionEnabled_Result;           // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AA[0x2];                                       // 0x00AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue;         // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x00B0(0x0010)(ZeroConstructor, NoDestructor)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x00C0(0x0008)(NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x00C8(0x0010)(ZeroConstructor, NoDestructor)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_1;        // 0x00D8(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ELEVATOR_Base_C_StartElevatorMotion) == 0x000008, "Wrong alignment on ELEVATOR_Base_C_StartElevatorMotion");
static_assert(sizeof(ELEVATOR_Base_C_StartElevatorMotion) == 0x0000E0, "Wrong size on ELEVATOR_Base_C_StartElevatorMotion");
static_assert(offsetof(ELEVATOR_Base_C_StartElevatorMotion, Result) == 0x000000, "Member 'ELEVATOR_Base_C_StartElevatorMotion::Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_StartElevatorMotion, CallFunc_GetPlayerController_ReturnValue) == 0x000008, "Member 'ELEVATOR_Base_C_StartElevatorMotion::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_StartElevatorMotion, CallFunc_GetPlayerController_ReturnValue_1) == 0x000010, "Member 'ELEVATOR_Base_C_StartElevatorMotion::CallFunc_GetPlayerController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_StartElevatorMotion, K2Node_DynamicCast_AsCON_Hacker) == 0x000018, "Member 'ELEVATOR_Base_C_StartElevatorMotion::K2Node_DynamicCast_AsCON_Hacker' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_StartElevatorMotion, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'ELEVATOR_Base_C_StartElevatorMotion::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_StartElevatorMotion, CallFunc_Create_ReturnValue) == 0x000028, "Member 'ELEVATOR_Base_C_StartElevatorMotion::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_StartElevatorMotion, CallFunc_IsMedicalDemo_Result) == 0x000030, "Member 'ELEVATOR_Base_C_StartElevatorMotion::CallFunc_IsMedicalDemo_Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_StartElevatorMotion, CallFunc_Not_PreBool_ReturnValue) == 0x000031, "Member 'ELEVATOR_Base_C_StartElevatorMotion::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_StartElevatorMotion, CallFunc_GetController_ReturnValue) == 0x000038, "Member 'ELEVATOR_Base_C_StartElevatorMotion::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_StartElevatorMotion, CallFunc_GetController_ReturnValue_1) == 0x000040, "Member 'ELEVATOR_Base_C_StartElevatorMotion::CallFunc_GetController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_StartElevatorMotion, K2Node_DynamicCast_AsPlayer_Controller) == 0x000048, "Member 'ELEVATOR_Base_C_StartElevatorMotion::K2Node_DynamicCast_AsPlayer_Controller' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_StartElevatorMotion, K2Node_DynamicCast_bSuccess_1) == 0x000050, "Member 'ELEVATOR_Base_C_StartElevatorMotion::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_StartElevatorMotion, K2Node_DynamicCast_AsPlayer_Controller_1) == 0x000058, "Member 'ELEVATOR_Base_C_StartElevatorMotion::K2Node_DynamicCast_AsPlayer_Controller_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_StartElevatorMotion, K2Node_DynamicCast_bSuccess_2) == 0x000060, "Member 'ELEVATOR_Base_C_StartElevatorMotion::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_StartElevatorMotion, CallFunc_StartCameraShake_ReturnValue) == 0x000068, "Member 'ELEVATOR_Base_C_StartElevatorMotion::CallFunc_StartCameraShake_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_StartElevatorMotion, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000070, "Member 'ELEVATOR_Base_C_StartElevatorMotion::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_StartElevatorMotion, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00007C, "Member 'ELEVATOR_Base_C_StartElevatorMotion::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_StartElevatorMotion, CallFunc_GetOwner_ReturnValue) == 0x000088, "Member 'ELEVATOR_Base_C_StartElevatorMotion::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_StartElevatorMotion, CallFunc_GetMoveDirectionVector_Direction) == 0x000090, "Member 'ELEVATOR_Base_C_StartElevatorMotion::CallFunc_GetMoveDirectionVector_Direction' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_StartElevatorMotion, K2Node_DynamicCast_AsINTERACT_Elevator_Doors_Base) == 0x0000A0, "Member 'ELEVATOR_Base_C_StartElevatorMotion::K2Node_DynamicCast_AsINTERACT_Elevator_Doors_Base' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_StartElevatorMotion, K2Node_DynamicCast_bSuccess_3) == 0x0000A8, "Member 'ELEVATOR_Base_C_StartElevatorMotion::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_StartElevatorMotion, CallFunc_SetTileCollisionEnabled_Result) == 0x0000A9, "Member 'ELEVATOR_Base_C_StartElevatorMotion::CallFunc_SetTileCollisionEnabled_Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_StartElevatorMotion, CallFunc_GetGameTimeInSeconds_ReturnValue) == 0x0000AC, "Member 'ELEVATOR_Base_C_StartElevatorMotion::CallFunc_GetGameTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_StartElevatorMotion, K2Node_CreateDelegate_OutputDelegate) == 0x0000B0, "Member 'ELEVATOR_Base_C_StartElevatorMotion::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_StartElevatorMotion, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x0000C0, "Member 'ELEVATOR_Base_C_StartElevatorMotion::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_StartElevatorMotion, K2Node_CreateDelegate_OutputDelegate_1) == 0x0000C8, "Member 'ELEVATOR_Base_C_StartElevatorMotion::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_StartElevatorMotion, CallFunc_K2_SetTimerDelegate_ReturnValue_1) == 0x0000D8, "Member 'ELEVATOR_Base_C_StartElevatorMotion::CallFunc_K2_SetTimerDelegate_ReturnValue_1' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.GetElevatorDoor
// 0x00E0 (0x00E0 - 0x0000)
struct ELEVATOR_Base_C_GetElevatorDoor final
{
public:
	class AINTERACT_ElevatorDoors_Base_C*         Door;                                              // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AINTERACT_ElevatorDoors_Base_C*         FoundDoorActor;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULevelStreaming*                        PrimaryLevel;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     GameInstance;                                      // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FSTRUC_ElevatorInfo                    ElevatorInfo;                                      // 0x0020(0x0038)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class ULevel*                                 CallFunc_GetLoadedLevel_ReturnValue;               // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevel*                                 CallFunc_GetLoadedLevel_ReturnValue_1;             // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULevelStreaming*                        CallFunc_GetPrimaryStreamingLevel_Level;           // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8A[0x6];                                       // 0x008A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AINTERACT_ElevatorDoors_Base_C*         CallFunc_GetActorOfClassWithTagInSubLevel_ReturnValue; // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x009A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x009B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUC_ElevatorInfo                    CallFunc_GetDataTableRowFromName_OutRow;           // 0x00A0(0x0038)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ELEVATOR_Base_C_GetElevatorDoor) == 0x000008, "Wrong alignment on ELEVATOR_Base_C_GetElevatorDoor");
static_assert(sizeof(ELEVATOR_Base_C_GetElevatorDoor) == 0x0000E0, "Wrong size on ELEVATOR_Base_C_GetElevatorDoor");
static_assert(offsetof(ELEVATOR_Base_C_GetElevatorDoor, Door) == 0x000000, "Member 'ELEVATOR_Base_C_GetElevatorDoor::Door' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetElevatorDoor, FoundDoorActor) == 0x000008, "Member 'ELEVATOR_Base_C_GetElevatorDoor::FoundDoorActor' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetElevatorDoor, PrimaryLevel) == 0x000010, "Member 'ELEVATOR_Base_C_GetElevatorDoor::PrimaryLevel' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetElevatorDoor, GameInstance) == 0x000018, "Member 'ELEVATOR_Base_C_GetElevatorDoor::GameInstance' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetElevatorDoor, ElevatorInfo) == 0x000020, "Member 'ELEVATOR_Base_C_GetElevatorDoor::ElevatorInfo' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetElevatorDoor, CallFunc_GetLoadedLevel_ReturnValue) == 0x000058, "Member 'ELEVATOR_Base_C_GetElevatorDoor::CallFunc_GetLoadedLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetElevatorDoor, CallFunc_IsValid_ReturnValue) == 0x000060, "Member 'ELEVATOR_Base_C_GetElevatorDoor::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetElevatorDoor, CallFunc_GetLoadedLevel_ReturnValue_1) == 0x000068, "Member 'ELEVATOR_Base_C_GetElevatorDoor::CallFunc_GetLoadedLevel_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetElevatorDoor, CallFunc_GetGameInstance_ReturnValue) == 0x000070, "Member 'ELEVATOR_Base_C_GetElevatorDoor::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetElevatorDoor, CallFunc_GetPrimaryStreamingLevel_Level) == 0x000078, "Member 'ELEVATOR_Base_C_GetElevatorDoor::CallFunc_GetPrimaryStreamingLevel_Level' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetElevatorDoor, K2Node_DynamicCast_AsGI_Single_Player) == 0x000080, "Member 'ELEVATOR_Base_C_GetElevatorDoor::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetElevatorDoor, K2Node_DynamicCast_bSuccess) == 0x000088, "Member 'ELEVATOR_Base_C_GetElevatorDoor::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetElevatorDoor, CallFunc_IsValid_ReturnValue_1) == 0x000089, "Member 'ELEVATOR_Base_C_GetElevatorDoor::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetElevatorDoor, CallFunc_GetActorOfClassWithTagInSubLevel_ReturnValue) == 0x000090, "Member 'ELEVATOR_Base_C_GetElevatorDoor::CallFunc_GetActorOfClassWithTagInSubLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetElevatorDoor, CallFunc_NotEqual_NameName_ReturnValue) == 0x000098, "Member 'ELEVATOR_Base_C_GetElevatorDoor::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetElevatorDoor, CallFunc_IsValid_ReturnValue_2) == 0x000099, "Member 'ELEVATOR_Base_C_GetElevatorDoor::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetElevatorDoor, CallFunc_BooleanAND_ReturnValue) == 0x00009A, "Member 'ELEVATOR_Base_C_GetElevatorDoor::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetElevatorDoor, CallFunc_IsValid_ReturnValue_3) == 0x00009B, "Member 'ELEVATOR_Base_C_GetElevatorDoor::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetElevatorDoor, CallFunc_GetDataTableRowFromName_OutRow) == 0x0000A0, "Member 'ELEVATOR_Base_C_GetElevatorDoor::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetElevatorDoor, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x0000D8, "Member 'ELEVATOR_Base_C_GetElevatorDoor::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.GetDeckSymbolByLevelName
// 0x00E8 (0x00E8 - 0x0000)
struct ELEVATOR_Base_C_GetDeckSymbolByLevelName final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 DeckSymbol;                                        // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	struct FSTRUCT_LevelInfo                      CallFunc_GetDataTableRowFromName_OutRow;           // 0x0018(0x00C8)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ELEVATOR_Base_C_GetDeckSymbolByLevelName) == 0x000008, "Wrong alignment on ELEVATOR_Base_C_GetDeckSymbolByLevelName");
static_assert(sizeof(ELEVATOR_Base_C_GetDeckSymbolByLevelName) == 0x0000E8, "Wrong size on ELEVATOR_Base_C_GetDeckSymbolByLevelName");
static_assert(offsetof(ELEVATOR_Base_C_GetDeckSymbolByLevelName, LevelName) == 0x000000, "Member 'ELEVATOR_Base_C_GetDeckSymbolByLevelName::LevelName' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetDeckSymbolByLevelName, DeckSymbol) == 0x000008, "Member 'ELEVATOR_Base_C_GetDeckSymbolByLevelName::DeckSymbol' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetDeckSymbolByLevelName, CallFunc_GetDataTableRowFromName_OutRow) == 0x000018, "Member 'ELEVATOR_Base_C_GetDeckSymbolByLevelName::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetDeckSymbolByLevelName, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x0000E0, "Member 'ELEVATOR_Base_C_GetDeckSymbolByLevelName::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.SetElevatorVisibility
// 0x0001 (0x0001 - 0x0000)
struct ELEVATOR_Base_C_SetElevatorVisibility final
{
public:
	bool                                          VisibilityState;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ELEVATOR_Base_C_SetElevatorVisibility) == 0x000001, "Wrong alignment on ELEVATOR_Base_C_SetElevatorVisibility");
static_assert(sizeof(ELEVATOR_Base_C_SetElevatorVisibility) == 0x000001, "Wrong size on ELEVATOR_Base_C_SetElevatorVisibility");
static_assert(offsetof(ELEVATOR_Base_C_SetElevatorVisibility, VisibilityState) == 0x000000, "Member 'ELEVATOR_Base_C_SetElevatorVisibility::VisibilityState' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.GetOccupantPrimitiveComponent
// 0x0070 (0x0070 - 0x0000)
struct ELEVATOR_Base_C_GetOccupantPrimitiveComponent final
{
public:
	class AActor*                                 OccupantActor;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    PrimitiveComponent;                                // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AExplosiveProjectile_Base_C*            K2Node_DynamicCast_AsExplosive_Projectile_Base;    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADismembermentLimb_Base_C*              K2Node_DynamicCast_AsDismemberment_Limb_Base;      // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    CallFunc_GetExplosivePhysicsComponent_PhysicsComponent; // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ADEBRIS_Base_C*                         K2Node_DynamicCast_AsDEBRIS_Base;                  // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APICKUP_Base_C*                         K2Node_DynamicCast_AsPICKUP_Base;                  // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   CallFunc_GetDebrisMeshComponent_Result;            // 0x0058(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_SystemShockCharacter_C*           K2Node_DynamicCast_AsPAWN_System_Shock_Character;  // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ELEVATOR_Base_C_GetOccupantPrimitiveComponent) == 0x000008, "Wrong alignment on ELEVATOR_Base_C_GetOccupantPrimitiveComponent");
static_assert(sizeof(ELEVATOR_Base_C_GetOccupantPrimitiveComponent) == 0x000070, "Wrong size on ELEVATOR_Base_C_GetOccupantPrimitiveComponent");
static_assert(offsetof(ELEVATOR_Base_C_GetOccupantPrimitiveComponent, OccupantActor) == 0x000000, "Member 'ELEVATOR_Base_C_GetOccupantPrimitiveComponent::OccupantActor' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetOccupantPrimitiveComponent, PrimitiveComponent) == 0x000008, "Member 'ELEVATOR_Base_C_GetOccupantPrimitiveComponent::PrimitiveComponent' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetOccupantPrimitiveComponent, K2Node_DynamicCast_AsExplosive_Projectile_Base) == 0x000010, "Member 'ELEVATOR_Base_C_GetOccupantPrimitiveComponent::K2Node_DynamicCast_AsExplosive_Projectile_Base' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetOccupantPrimitiveComponent, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'ELEVATOR_Base_C_GetOccupantPrimitiveComponent::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetOccupantPrimitiveComponent, K2Node_DynamicCast_AsDismemberment_Limb_Base) == 0x000020, "Member 'ELEVATOR_Base_C_GetOccupantPrimitiveComponent::K2Node_DynamicCast_AsDismemberment_Limb_Base' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetOccupantPrimitiveComponent, K2Node_DynamicCast_bSuccess_1) == 0x000028, "Member 'ELEVATOR_Base_C_GetOccupantPrimitiveComponent::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetOccupantPrimitiveComponent, CallFunc_GetExplosivePhysicsComponent_PhysicsComponent) == 0x000030, "Member 'ELEVATOR_Base_C_GetOccupantPrimitiveComponent::CallFunc_GetExplosivePhysicsComponent_PhysicsComponent' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetOccupantPrimitiveComponent, K2Node_DynamicCast_AsDEBRIS_Base) == 0x000038, "Member 'ELEVATOR_Base_C_GetOccupantPrimitiveComponent::K2Node_DynamicCast_AsDEBRIS_Base' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetOccupantPrimitiveComponent, K2Node_DynamicCast_bSuccess_2) == 0x000040, "Member 'ELEVATOR_Base_C_GetOccupantPrimitiveComponent::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetOccupantPrimitiveComponent, K2Node_DynamicCast_AsPICKUP_Base) == 0x000048, "Member 'ELEVATOR_Base_C_GetOccupantPrimitiveComponent::K2Node_DynamicCast_AsPICKUP_Base' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetOccupantPrimitiveComponent, K2Node_DynamicCast_bSuccess_3) == 0x000050, "Member 'ELEVATOR_Base_C_GetOccupantPrimitiveComponent::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetOccupantPrimitiveComponent, CallFunc_GetDebrisMeshComponent_Result) == 0x000058, "Member 'ELEVATOR_Base_C_GetOccupantPrimitiveComponent::CallFunc_GetDebrisMeshComponent_Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetOccupantPrimitiveComponent, K2Node_DynamicCast_AsPAWN_System_Shock_Character) == 0x000060, "Member 'ELEVATOR_Base_C_GetOccupantPrimitiveComponent::K2Node_DynamicCast_AsPAWN_System_Shock_Character' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetOccupantPrimitiveComponent, K2Node_DynamicCast_bSuccess_4) == 0x000068, "Member 'ELEVATOR_Base_C_GetOccupantPrimitiveComponent::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.GetTargetShape
// 0x0030 (0x0030 - 0x0000)
struct ELEVATOR_Base_C_GetTargetShape final
{
public:
	class UPrimitiveComponent*                    CursorPrimitive;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UShapeComponent*                        ShapeComponent;                                    // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ButtonIndex;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UBoxComponent*                          CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          K2Node_DynamicCast_AsBox_Collision;                // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ELEVATOR_Base_C_GetTargetShape) == 0x000008, "Wrong alignment on ELEVATOR_Base_C_GetTargetShape");
static_assert(sizeof(ELEVATOR_Base_C_GetTargetShape) == 0x000030, "Wrong size on ELEVATOR_Base_C_GetTargetShape");
static_assert(offsetof(ELEVATOR_Base_C_GetTargetShape, CursorPrimitive) == 0x000000, "Member 'ELEVATOR_Base_C_GetTargetShape::CursorPrimitive' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetTargetShape, ShapeComponent) == 0x000008, "Member 'ELEVATOR_Base_C_GetTargetShape::ShapeComponent' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetTargetShape, ButtonIndex) == 0x000010, "Member 'ELEVATOR_Base_C_GetTargetShape::ButtonIndex' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetTargetShape, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000014, "Member 'ELEVATOR_Base_C_GetTargetShape::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetTargetShape, CallFunc_Array_Get_Item) == 0x000018, "Member 'ELEVATOR_Base_C_GetTargetShape::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetTargetShape, K2Node_DynamicCast_AsBox_Collision) == 0x000020, "Member 'ELEVATOR_Base_C_GetTargetShape::K2Node_DynamicCast_AsBox_Collision' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetTargetShape, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'ELEVATOR_Base_C_GetTargetShape::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetTargetShape, CallFunc_Array_Find_ReturnValue) == 0x00002C, "Member 'ELEVATOR_Base_C_GetTargetShape::CallFunc_Array_Find_ReturnValue' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.GetControlsMeshComponent
// 0x0008 (0x0008 - 0x0000)
struct ELEVATOR_Base_C_GetControlsMeshComponent final
{
public:
	class UStaticMeshComponent*                   MeshComponent;                                     // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ELEVATOR_Base_C_GetControlsMeshComponent) == 0x000008, "Wrong alignment on ELEVATOR_Base_C_GetControlsMeshComponent");
static_assert(sizeof(ELEVATOR_Base_C_GetControlsMeshComponent) == 0x000008, "Wrong size on ELEVATOR_Base_C_GetControlsMeshComponent");
static_assert(offsetof(ELEVATOR_Base_C_GetControlsMeshComponent, MeshComponent) == 0x000000, "Member 'ELEVATOR_Base_C_GetControlsMeshComponent::MeshComponent' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.UpdateButtonColor
// 0x0028 (0x0028 - 0x0000)
struct ELEVATOR_Base_C_UpdateButtonColor final
{
public:
	int32                                         ButtonIndex;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_FailSucceedIgnore                        ButtonState;                                       // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_FailSucceedIgnore                        Temp_byte_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_2;                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   CallFunc_GetControlsMeshComponent_MeshComponent;   // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ELEVATOR_Base_C_UpdateButtonColor) == 0x000008, "Wrong alignment on ELEVATOR_Base_C_UpdateButtonColor");
static_assert(sizeof(ELEVATOR_Base_C_UpdateButtonColor) == 0x000028, "Wrong size on ELEVATOR_Base_C_UpdateButtonColor");
static_assert(offsetof(ELEVATOR_Base_C_UpdateButtonColor, ButtonIndex) == 0x000000, "Member 'ELEVATOR_Base_C_UpdateButtonColor::ButtonIndex' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_UpdateButtonColor, ButtonState) == 0x000004, "Member 'ELEVATOR_Base_C_UpdateButtonColor::ButtonState' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_UpdateButtonColor, Temp_byte_Variable) == 0x000005, "Member 'ELEVATOR_Base_C_UpdateButtonColor::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_UpdateButtonColor, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'ELEVATOR_Base_C_UpdateButtonColor::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_UpdateButtonColor, Temp_float_Variable) == 0x00000C, "Member 'ELEVATOR_Base_C_UpdateButtonColor::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_UpdateButtonColor, Temp_float_Variable_1) == 0x000010, "Member 'ELEVATOR_Base_C_UpdateButtonColor::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_UpdateButtonColor, Temp_float_Variable_2) == 0x000014, "Member 'ELEVATOR_Base_C_UpdateButtonColor::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_UpdateButtonColor, CallFunc_GetControlsMeshComponent_MeshComponent) == 0x000018, "Member 'ELEVATOR_Base_C_UpdateButtonColor::CallFunc_GetControlsMeshComponent_MeshComponent' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_UpdateButtonColor, K2Node_Select_Default) == 0x000020, "Member 'ELEVATOR_Base_C_UpdateButtonColor::K2Node_Select_Default' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.GetMoveDirectionVector
// 0x0068 (0x0068 - 0x0000)
struct ELEVATOR_Base_C_GetMoveDirectionVector final
{
public:
	class FName                                   TargetLevel_0;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Direction;                                         // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_Up_ReturnValue;                    // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetTargetLevel_TargetLevel;               // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetCurrentLevelName_Result;               // 0x004C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_UpDown                                   CallFunc_GetDirectionToTargetLevelFromSource_DirectionToTarget; // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_56[0x2];                                       // 0x0056(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorInt_ReturnValue;           // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ELEVATOR_Base_C_GetMoveDirectionVector) == 0x000008, "Wrong alignment on ELEVATOR_Base_C_GetMoveDirectionVector");
static_assert(sizeof(ELEVATOR_Base_C_GetMoveDirectionVector) == 0x000068, "Wrong size on ELEVATOR_Base_C_GetMoveDirectionVector");
static_assert(offsetof(ELEVATOR_Base_C_GetMoveDirectionVector, TargetLevel_0) == 0x000000, "Member 'ELEVATOR_Base_C_GetMoveDirectionVector::TargetLevel_0' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetMoveDirectionVector, Direction) == 0x000008, "Member 'ELEVATOR_Base_C_GetMoveDirectionVector::Direction' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetMoveDirectionVector, Temp_bool_Variable) == 0x000014, "Member 'ELEVATOR_Base_C_GetMoveDirectionVector::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetMoveDirectionVector, Temp_int_Variable) == 0x000018, "Member 'ELEVATOR_Base_C_GetMoveDirectionVector::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetMoveDirectionVector, Temp_int_Variable_1) == 0x00001C, "Member 'ELEVATOR_Base_C_GetMoveDirectionVector::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetMoveDirectionVector, CallFunc_Vector_Up_ReturnValue) == 0x000020, "Member 'ELEVATOR_Base_C_GetMoveDirectionVector::CallFunc_Vector_Up_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetMoveDirectionVector, CallFunc_GetGameInstance_ReturnValue) == 0x000030, "Member 'ELEVATOR_Base_C_GetMoveDirectionVector::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetMoveDirectionVector, CallFunc_GetTargetLevel_TargetLevel) == 0x000038, "Member 'ELEVATOR_Base_C_GetMoveDirectionVector::CallFunc_GetTargetLevel_TargetLevel' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetMoveDirectionVector, K2Node_DynamicCast_AsGI_Single_Player) == 0x000040, "Member 'ELEVATOR_Base_C_GetMoveDirectionVector::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetMoveDirectionVector, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'ELEVATOR_Base_C_GetMoveDirectionVector::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetMoveDirectionVector, CallFunc_GetCurrentLevelName_Result) == 0x00004C, "Member 'ELEVATOR_Base_C_GetMoveDirectionVector::CallFunc_GetCurrentLevelName_Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetMoveDirectionVector, CallFunc_GetDirectionToTargetLevelFromSource_DirectionToTarget) == 0x000054, "Member 'ELEVATOR_Base_C_GetMoveDirectionVector::CallFunc_GetDirectionToTargetLevelFromSource_DirectionToTarget' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetMoveDirectionVector, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000055, "Member 'ELEVATOR_Base_C_GetMoveDirectionVector::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetMoveDirectionVector, K2Node_Select_Default) == 0x000058, "Member 'ELEVATOR_Base_C_GetMoveDirectionVector::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_GetMoveDirectionVector, CallFunc_Multiply_VectorInt_ReturnValue) == 0x00005C, "Member 'ELEVATOR_Base_C_GetMoveDirectionVector::CallFunc_Multiply_VectorInt_ReturnValue' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.OnCinematicLevelLoaded
// 0x0010 (0x0010 - 0x0000)
struct ELEVATOR_Base_C_OnCinematicLevelLoaded final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ALevelSequenceActor*                    CallFunc_GetActorOfClassInSubLevelByName_ReturnValue; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ELEVATOR_Base_C_OnCinematicLevelLoaded) == 0x000008, "Wrong alignment on ELEVATOR_Base_C_OnCinematicLevelLoaded");
static_assert(sizeof(ELEVATOR_Base_C_OnCinematicLevelLoaded) == 0x000010, "Wrong size on ELEVATOR_Base_C_OnCinematicLevelLoaded");
static_assert(offsetof(ELEVATOR_Base_C_OnCinematicLevelLoaded, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'ELEVATOR_Base_C_OnCinematicLevelLoaded::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_OnCinematicLevelLoaded, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'ELEVATOR_Base_C_OnCinematicLevelLoaded::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_OnCinematicLevelLoaded, CallFunc_GetActorOfClassInSubLevelByName_ReturnValue) == 0x000008, "Member 'ELEVATOR_Base_C_OnCinematicLevelLoaded::CallFunc_GetActorOfClassInSubLevelByName_ReturnValue' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.UpdateElevatorAudibility
// 0x0048 (0x0048 - 0x0000)
struct ELEVATOR_Base_C_UpdateElevatorAudibility final
{
public:
	bool                                          AudibilityState;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGI_SinglePlayer_C*                     GameInstance;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class USoundCue* SoundCue, TSoftObjectPtr<class UTexture2D> PortraitTexture, int32 RowCount, int32 ColCount, int32 FrameRate)> K2Node_CreateDelegate_OutputDelegate;              // 0x0010(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(class USoundCue* SoundCue, TSoftObjectPtr<class UTexture2D> PortraitTexture, int32 RowCount, int32 ColCount, int32 FrameRate)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0020(0x0010)(ZeroConstructor, NoDestructor)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ELEVATOR_Base_C_UpdateElevatorAudibility) == 0x000008, "Wrong alignment on ELEVATOR_Base_C_UpdateElevatorAudibility");
static_assert(sizeof(ELEVATOR_Base_C_UpdateElevatorAudibility) == 0x000048, "Wrong size on ELEVATOR_Base_C_UpdateElevatorAudibility");
static_assert(offsetof(ELEVATOR_Base_C_UpdateElevatorAudibility, AudibilityState) == 0x000000, "Member 'ELEVATOR_Base_C_UpdateElevatorAudibility::AudibilityState' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_UpdateElevatorAudibility, GameInstance) == 0x000008, "Member 'ELEVATOR_Base_C_UpdateElevatorAudibility::GameInstance' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_UpdateElevatorAudibility, K2Node_CreateDelegate_OutputDelegate) == 0x000010, "Member 'ELEVATOR_Base_C_UpdateElevatorAudibility::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_UpdateElevatorAudibility, K2Node_CreateDelegate_OutputDelegate_1) == 0x000020, "Member 'ELEVATOR_Base_C_UpdateElevatorAudibility::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_UpdateElevatorAudibility, CallFunc_GetGameInstance_ReturnValue) == 0x000030, "Member 'ELEVATOR_Base_C_UpdateElevatorAudibility::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_UpdateElevatorAudibility, K2Node_DynamicCast_AsGI_Single_Player) == 0x000038, "Member 'ELEVATOR_Base_C_UpdateElevatorAudibility::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_UpdateElevatorAudibility, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'ELEVATOR_Base_C_UpdateElevatorAudibility::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.TryStartAtmosphereTransition
// 0x0020 (0x0020 - 0x0000)
struct ELEVATOR_Base_C_TryStartAtmosphereTransition final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0018(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ELEVATOR_Base_C_TryStartAtmosphereTransition) == 0x000008, "Wrong alignment on ELEVATOR_Base_C_TryStartAtmosphereTransition");
static_assert(sizeof(ELEVATOR_Base_C_TryStartAtmosphereTransition) == 0x000020, "Wrong size on ELEVATOR_Base_C_TryStartAtmosphereTransition");
static_assert(offsetof(ELEVATOR_Base_C_TryStartAtmosphereTransition, Result) == 0x000000, "Member 'ELEVATOR_Base_C_TryStartAtmosphereTransition::Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryStartAtmosphereTransition, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'ELEVATOR_Base_C_TryStartAtmosphereTransition::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryStartAtmosphereTransition, CallFunc_IsValid_ReturnValue) == 0x000014, "Member 'ELEVATOR_Base_C_TryStartAtmosphereTransition::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryStartAtmosphereTransition, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000018, "Member 'ELEVATOR_Base_C_TryStartAtmosphereTransition::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.EVENT_UpdateAtmosphereSettings
// 0x0108 (0x0108 - 0x0000)
struct ELEVATOR_Base_C_EVENT_UpdateAtmosphereSettings final
{
public:
	struct FSTRUCT_LevelAtmosphereSettings        LevelAtmosphereSettings;                           // 0x0000(0x0024)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_LevelAtmosphereSettings        ElevatorAtmosphereSettings;                        // 0x0024(0x0024)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MontageProgress;                                   // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           ActiveMontage;                                     // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          InnerDoorAnimInstance;                             // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     GameInstance;                                      // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	float                                         CallFunc_GetPlayLength_ReturnValue;                // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           CallFunc_GetCurrentActiveMontage_ReturnValue;      // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Montage_GetPosition_ReturnValue;          // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetCurrentLevelName_Result;               // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_LevelAtmosphereSettings        CallFunc_GetLevelAtmosphereSettings_Settings;      // 0x0088(0x0024)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_LevelAtmosphereSettings        CallFunc_GetDataTableRowFromName_OutRow;           // 0x00AC(0x0024)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D2[0x6];                                       // 0x00D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetDoorAnimInstance_AnimInstance;         // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ELEVATOR_Base_C_EVENT_UpdateAtmosphereSettings) == 0x000008, "Wrong alignment on ELEVATOR_Base_C_EVENT_UpdateAtmosphereSettings");
static_assert(sizeof(ELEVATOR_Base_C_EVENT_UpdateAtmosphereSettings) == 0x000108, "Wrong size on ELEVATOR_Base_C_EVENT_UpdateAtmosphereSettings");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_UpdateAtmosphereSettings, LevelAtmosphereSettings) == 0x000000, "Member 'ELEVATOR_Base_C_EVENT_UpdateAtmosphereSettings::LevelAtmosphereSettings' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_UpdateAtmosphereSettings, ElevatorAtmosphereSettings) == 0x000024, "Member 'ELEVATOR_Base_C_EVENT_UpdateAtmosphereSettings::ElevatorAtmosphereSettings' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_UpdateAtmosphereSettings, MontageProgress) == 0x000048, "Member 'ELEVATOR_Base_C_EVENT_UpdateAtmosphereSettings::MontageProgress' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_UpdateAtmosphereSettings, ActiveMontage) == 0x000050, "Member 'ELEVATOR_Base_C_EVENT_UpdateAtmosphereSettings::ActiveMontage' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_UpdateAtmosphereSettings, InnerDoorAnimInstance) == 0x000058, "Member 'ELEVATOR_Base_C_EVENT_UpdateAtmosphereSettings::InnerDoorAnimInstance' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_UpdateAtmosphereSettings, GameInstance) == 0x000060, "Member 'ELEVATOR_Base_C_EVENT_UpdateAtmosphereSettings::GameInstance' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_UpdateAtmosphereSettings, CallFunc_GetPlayLength_ReturnValue) == 0x000068, "Member 'ELEVATOR_Base_C_EVENT_UpdateAtmosphereSettings::CallFunc_GetPlayLength_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_UpdateAtmosphereSettings, CallFunc_GetCurrentActiveMontage_ReturnValue) == 0x000070, "Member 'ELEVATOR_Base_C_EVENT_UpdateAtmosphereSettings::CallFunc_GetCurrentActiveMontage_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_UpdateAtmosphereSettings, CallFunc_Montage_GetPosition_ReturnValue) == 0x000078, "Member 'ELEVATOR_Base_C_EVENT_UpdateAtmosphereSettings::CallFunc_Montage_GetPosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_UpdateAtmosphereSettings, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00007C, "Member 'ELEVATOR_Base_C_EVENT_UpdateAtmosphereSettings::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_UpdateAtmosphereSettings, CallFunc_GetCurrentLevelName_Result) == 0x000080, "Member 'ELEVATOR_Base_C_EVENT_UpdateAtmosphereSettings::CallFunc_GetCurrentLevelName_Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_UpdateAtmosphereSettings, CallFunc_GetLevelAtmosphereSettings_Settings) == 0x000088, "Member 'ELEVATOR_Base_C_EVENT_UpdateAtmosphereSettings::CallFunc_GetLevelAtmosphereSettings_Settings' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_UpdateAtmosphereSettings, CallFunc_GetDataTableRowFromName_OutRow) == 0x0000AC, "Member 'ELEVATOR_Base_C_EVENT_UpdateAtmosphereSettings::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_UpdateAtmosphereSettings, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x0000D0, "Member 'ELEVATOR_Base_C_EVENT_UpdateAtmosphereSettings::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_UpdateAtmosphereSettings, CallFunc_IsValid_ReturnValue) == 0x0000D1, "Member 'ELEVATOR_Base_C_EVENT_UpdateAtmosphereSettings::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_UpdateAtmosphereSettings, CallFunc_GetGameInstance_ReturnValue) == 0x0000D8, "Member 'ELEVATOR_Base_C_EVENT_UpdateAtmosphereSettings::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_UpdateAtmosphereSettings, CallFunc_IsValid_ReturnValue_1) == 0x0000E0, "Member 'ELEVATOR_Base_C_EVENT_UpdateAtmosphereSettings::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_UpdateAtmosphereSettings, K2Node_DynamicCast_AsGI_Single_Player) == 0x0000E8, "Member 'ELEVATOR_Base_C_EVENT_UpdateAtmosphereSettings::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_UpdateAtmosphereSettings, K2Node_DynamicCast_bSuccess) == 0x0000F0, "Member 'ELEVATOR_Base_C_EVENT_UpdateAtmosphereSettings::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_UpdateAtmosphereSettings, CallFunc_GetDoorAnimInstance_AnimInstance) == 0x0000F8, "Member 'ELEVATOR_Base_C_EVENT_UpdateAtmosphereSettings::CallFunc_GetDoorAnimInstance_AnimInstance' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_UpdateAtmosphereSettings, K2Node_SwitchEnum_CmpSuccess) == 0x000100, "Member 'ELEVATOR_Base_C_EVENT_UpdateAtmosphereSettings::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.TryUnselectActiveControlButton
// 0x0002 (0x0002 - 0x0000)
struct ELEVATOR_Base_C_TryUnselectActiveControlButton final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ELEVATOR_Base_C_TryUnselectActiveControlButton) == 0x000001, "Wrong alignment on ELEVATOR_Base_C_TryUnselectActiveControlButton");
static_assert(sizeof(ELEVATOR_Base_C_TryUnselectActiveControlButton) == 0x000002, "Wrong size on ELEVATOR_Base_C_TryUnselectActiveControlButton");
static_assert(offsetof(ELEVATOR_Base_C_TryUnselectActiveControlButton, Result) == 0x000000, "Member 'ELEVATOR_Base_C_TryUnselectActiveControlButton::Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryUnselectActiveControlButton, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000001, "Member 'ELEVATOR_Base_C_TryUnselectActiveControlButton::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.TryStartElevatorMusic
// 0x0060 (0x0060 - 0x0000)
struct ELEVATOR_Base_C_TryStartElevatorMusic final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_MusicParams                    K2Node_MakeStruct_STRUCT_MusicParams;              // 0x0020(0x0030)(HasGetValueTypeHash)
	class UBP_MusicCue_C*                         CallFunc_PlayStoryMusic_MusicCue;                  // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValidSoftClassReference_ReturnValue;    // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ELEVATOR_Base_C_TryStartElevatorMusic) == 0x000008, "Wrong alignment on ELEVATOR_Base_C_TryStartElevatorMusic");
static_assert(sizeof(ELEVATOR_Base_C_TryStartElevatorMusic) == 0x000060, "Wrong size on ELEVATOR_Base_C_TryStartElevatorMusic");
static_assert(offsetof(ELEVATOR_Base_C_TryStartElevatorMusic, Result) == 0x000000, "Member 'ELEVATOR_Base_C_TryStartElevatorMusic::Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryStartElevatorMusic, CallFunc_GetGameInstance_ReturnValue) == 0x000008, "Member 'ELEVATOR_Base_C_TryStartElevatorMusic::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryStartElevatorMusic, K2Node_DynamicCast_AsGI_Single_Player) == 0x000010, "Member 'ELEVATOR_Base_C_TryStartElevatorMusic::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryStartElevatorMusic, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'ELEVATOR_Base_C_TryStartElevatorMusic::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryStartElevatorMusic, K2Node_MakeStruct_STRUCT_MusicParams) == 0x000020, "Member 'ELEVATOR_Base_C_TryStartElevatorMusic::K2Node_MakeStruct_STRUCT_MusicParams' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryStartElevatorMusic, CallFunc_PlayStoryMusic_MusicCue) == 0x000050, "Member 'ELEVATOR_Base_C_TryStartElevatorMusic::CallFunc_PlayStoryMusic_MusicCue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryStartElevatorMusic, CallFunc_IsValid_ReturnValue) == 0x000058, "Member 'ELEVATOR_Base_C_TryStartElevatorMusic::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryStartElevatorMusic, CallFunc_IsValidSoftClassReference_ReturnValue) == 0x000059, "Member 'ELEVATOR_Base_C_TryStartElevatorMusic::CallFunc_IsValidSoftClassReference_ReturnValue' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.TryStopElevatorMusic
// 0x0020 (0x0020 - 0x0000)
struct ELEVATOR_Base_C_TryStopElevatorMusic final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ELEVATOR_Base_C_TryStopElevatorMusic) == 0x000008, "Wrong alignment on ELEVATOR_Base_C_TryStopElevatorMusic");
static_assert(sizeof(ELEVATOR_Base_C_TryStopElevatorMusic) == 0x000020, "Wrong size on ELEVATOR_Base_C_TryStopElevatorMusic");
static_assert(offsetof(ELEVATOR_Base_C_TryStopElevatorMusic, Result) == 0x000000, "Member 'ELEVATOR_Base_C_TryStopElevatorMusic::Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryStopElevatorMusic, CallFunc_GetGameInstance_ReturnValue) == 0x000008, "Member 'ELEVATOR_Base_C_TryStopElevatorMusic::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryStopElevatorMusic, K2Node_DynamicCast_AsGI_Single_Player) == 0x000010, "Member 'ELEVATOR_Base_C_TryStopElevatorMusic::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryStopElevatorMusic, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'ELEVATOR_Base_C_TryStopElevatorMusic::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.PlayElevatorStartSoundFX
// 0x0001 (0x0001 - 0x0000)
struct ELEVATOR_Base_C_PlayElevatorStartSoundFX final
{
public:
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue;   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ELEVATOR_Base_C_PlayElevatorStartSoundFX) == 0x000001, "Wrong alignment on ELEVATOR_Base_C_PlayElevatorStartSoundFX");
static_assert(sizeof(ELEVATOR_Base_C_PlayElevatorStartSoundFX) == 0x000001, "Wrong size on ELEVATOR_Base_C_PlayElevatorStartSoundFX");
static_assert(offsetof(ELEVATOR_Base_C_PlayElevatorStartSoundFX, CallFunc_IsValidSoftObjectReference_ReturnValue) == 0x000000, "Member 'ELEVATOR_Base_C_PlayElevatorStartSoundFX::CallFunc_IsValidSoftObjectReference_ReturnValue' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.PlayElevatorStopSoundFX
// 0x0002 (0x0002 - 0x0000)
struct ELEVATOR_Base_C_PlayElevatorStopSoundFX final
{
public:
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue;   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ELEVATOR_Base_C_PlayElevatorStopSoundFX) == 0x000001, "Wrong alignment on ELEVATOR_Base_C_PlayElevatorStopSoundFX");
static_assert(sizeof(ELEVATOR_Base_C_PlayElevatorStopSoundFX) == 0x000002, "Wrong size on ELEVATOR_Base_C_PlayElevatorStopSoundFX");
static_assert(offsetof(ELEVATOR_Base_C_PlayElevatorStopSoundFX, CallFunc_IsValidSoftObjectReference_ReturnValue) == 0x000000, "Member 'ELEVATOR_Base_C_PlayElevatorStopSoundFX::CallFunc_IsValidSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_PlayElevatorStopSoundFX, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000001, "Member 'ELEVATOR_Base_C_PlayElevatorStopSoundFX::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.TryStreamInTargetLevelCollection
// 0x0038 (0x0038 - 0x0000)
struct ELEVATOR_Base_C_TryStreamInTargetLevelCollection final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    CallFunc_GetLevelCollectionFromPrimaryLevelName_Result; // 0x0020(0x0010)(NoDestructor)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ELEVATOR_Base_C_TryStreamInTargetLevelCollection) == 0x000008, "Wrong alignment on ELEVATOR_Base_C_TryStreamInTargetLevelCollection");
static_assert(sizeof(ELEVATOR_Base_C_TryStreamInTargetLevelCollection) == 0x000038, "Wrong size on ELEVATOR_Base_C_TryStreamInTargetLevelCollection");
static_assert(offsetof(ELEVATOR_Base_C_TryStreamInTargetLevelCollection, Result) == 0x000000, "Member 'ELEVATOR_Base_C_TryStreamInTargetLevelCollection::Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryStreamInTargetLevelCollection, CallFunc_GetGameInstance_ReturnValue) == 0x000008, "Member 'ELEVATOR_Base_C_TryStreamInTargetLevelCollection::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryStreamInTargetLevelCollection, K2Node_DynamicCast_AsGI_Single_Player) == 0x000010, "Member 'ELEVATOR_Base_C_TryStreamInTargetLevelCollection::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryStreamInTargetLevelCollection, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'ELEVATOR_Base_C_TryStreamInTargetLevelCollection::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryStreamInTargetLevelCollection, CallFunc_GetLevelCollectionFromPrimaryLevelName_Result) == 0x000020, "Member 'ELEVATOR_Base_C_TryStreamInTargetLevelCollection::CallFunc_GetLevelCollectionFromPrimaryLevelName_Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_TryStreamInTargetLevelCollection, CallFunc_NotEqual_NameName_ReturnValue) == 0x000030, "Member 'ELEVATOR_Base_C_TryStreamInTargetLevelCollection::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.SetHackerPassengerPawn
// 0x0030 (0x0030 - 0x0000)
struct ELEVATOR_Base_C_SetHackerPassengerPawn final
{
public:
	class APAWN_Hacker_Implant_C*                 HackerPawn;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class APAWN_SystemShockCharacter_C* Character)> K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(class APAWN_SystemShockCharacter_C* Character)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0018(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ELEVATOR_Base_C_SetHackerPassengerPawn) == 0x000008, "Wrong alignment on ELEVATOR_Base_C_SetHackerPassengerPawn");
static_assert(sizeof(ELEVATOR_Base_C_SetHackerPassengerPawn) == 0x000030, "Wrong size on ELEVATOR_Base_C_SetHackerPassengerPawn");
static_assert(offsetof(ELEVATOR_Base_C_SetHackerPassengerPawn, HackerPawn) == 0x000000, "Member 'ELEVATOR_Base_C_SetHackerPassengerPawn::HackerPawn' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_SetHackerPassengerPawn, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'ELEVATOR_Base_C_SetHackerPassengerPawn::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_SetHackerPassengerPawn, K2Node_CreateDelegate_OutputDelegate_1) == 0x000018, "Member 'ELEVATOR_Base_C_SetHackerPassengerPawn::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_SetHackerPassengerPawn, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'ELEVATOR_Base_C_SetHackerPassengerPawn::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_SetHackerPassengerPawn, CallFunc_IsValid_ReturnValue_1) == 0x000029, "Member 'ELEVATOR_Base_C_SetHackerPassengerPawn::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_SetHackerPassengerPawn, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x00002A, "Member 'ELEVATOR_Base_C_SetHackerPassengerPawn::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.EVENT_OnHackerPassengerDied
// 0x0010 (0x0010 - 0x0000)
struct ELEVATOR_Base_C_EVENT_OnHackerPassengerDied final
{
public:
	class APAWN_SystemShockCharacter_C*           Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ELEVATOR_Base_C_EVENT_OnHackerPassengerDied) == 0x000008, "Wrong alignment on ELEVATOR_Base_C_EVENT_OnHackerPassengerDied");
static_assert(sizeof(ELEVATOR_Base_C_EVENT_OnHackerPassengerDied) == 0x000010, "Wrong size on ELEVATOR_Base_C_EVENT_OnHackerPassengerDied");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnHackerPassengerDied, Character) == 0x000000, "Member 'ELEVATOR_Base_C_EVENT_OnHackerPassengerDied::Character' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnHackerPassengerDied, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'ELEVATOR_Base_C_EVENT_OnHackerPassengerDied::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnHackerPassengerDied, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000009, "Member 'ELEVATOR_Base_C_EVENT_OnHackerPassengerDied::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.EVENT_OnCinematicFinished
// 0x0030 (0x0030 - 0x0000)
struct ELEVATOR_Base_C_EVENT_OnCinematicFinished final
{
public:
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_SetCompletedStoryQuest_LogString;         // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ELEVATOR_Base_C_EVENT_OnCinematicFinished) == 0x000008, "Wrong alignment on ELEVATOR_Base_C_EVENT_OnCinematicFinished");
static_assert(sizeof(ELEVATOR_Base_C_EVENT_OnCinematicFinished) == 0x000030, "Wrong size on ELEVATOR_Base_C_EVENT_OnCinematicFinished");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnCinematicFinished, CallFunc_GetGameInstance_ReturnValue) == 0x000000, "Member 'ELEVATOR_Base_C_EVENT_OnCinematicFinished::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnCinematicFinished, K2Node_DynamicCast_AsGI_Single_Player) == 0x000008, "Member 'ELEVATOR_Base_C_EVENT_OnCinematicFinished::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnCinematicFinished, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'ELEVATOR_Base_C_EVENT_OnCinematicFinished::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnCinematicFinished, CallFunc_NotEqual_NameName_ReturnValue) == 0x000011, "Member 'ELEVATOR_Base_C_EVENT_OnCinematicFinished::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnCinematicFinished, CallFunc_SetCompletedStoryQuest_LogString) == 0x000018, "Member 'ELEVATOR_Base_C_EVENT_OnCinematicFinished::CallFunc_SetCompletedStoryQuest_LogString' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnCinematicFinished, CallFunc_GetPlayerController_ReturnValue) == 0x000028, "Member 'ELEVATOR_Base_C_EVENT_OnCinematicFinished::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.EVENT_OnPublicAddressStateChanged
// 0x0080 (0x0080 - 0x0000)
struct ELEVATOR_Base_C_EVENT_OnPublicAddressStateChanged final
{
public:
	class USoundCue*                              SoundCue;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              PortraitTexture;                                   // 0x0008(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	int32                                         RowCount;                                          // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ColCount;                                          // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         FrameRate;                                         // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ElapsedTime;                                       // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     GameInstance;                                      // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetPublicAddressElapsedTime_Result;       // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMaxElement_ReturnValue;                // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanPublicAddressReachLocation_Result;     // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ELEVATOR_Base_C_EVENT_OnPublicAddressStateChanged) == 0x000008, "Wrong alignment on ELEVATOR_Base_C_EVENT_OnPublicAddressStateChanged");
static_assert(sizeof(ELEVATOR_Base_C_EVENT_OnPublicAddressStateChanged) == 0x000080, "Wrong size on ELEVATOR_Base_C_EVENT_OnPublicAddressStateChanged");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnPublicAddressStateChanged, SoundCue) == 0x000000, "Member 'ELEVATOR_Base_C_EVENT_OnPublicAddressStateChanged::SoundCue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnPublicAddressStateChanged, PortraitTexture) == 0x000008, "Member 'ELEVATOR_Base_C_EVENT_OnPublicAddressStateChanged::PortraitTexture' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnPublicAddressStateChanged, RowCount) == 0x000030, "Member 'ELEVATOR_Base_C_EVENT_OnPublicAddressStateChanged::RowCount' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnPublicAddressStateChanged, ColCount) == 0x000034, "Member 'ELEVATOR_Base_C_EVENT_OnPublicAddressStateChanged::ColCount' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnPublicAddressStateChanged, FrameRate) == 0x000038, "Member 'ELEVATOR_Base_C_EVENT_OnPublicAddressStateChanged::FrameRate' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnPublicAddressStateChanged, ElapsedTime) == 0x00003C, "Member 'ELEVATOR_Base_C_EVENT_OnPublicAddressStateChanged::ElapsedTime' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnPublicAddressStateChanged, GameInstance) == 0x000040, "Member 'ELEVATOR_Base_C_EVENT_OnPublicAddressStateChanged::GameInstance' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnPublicAddressStateChanged, CallFunc_IsValid_ReturnValue) == 0x000048, "Member 'ELEVATOR_Base_C_EVENT_OnPublicAddressStateChanged::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnPublicAddressStateChanged, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000049, "Member 'ELEVATOR_Base_C_EVENT_OnPublicAddressStateChanged::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnPublicAddressStateChanged, CallFunc_GetPublicAddressElapsedTime_Result) == 0x00004C, "Member 'ELEVATOR_Base_C_EVENT_OnPublicAddressStateChanged::CallFunc_GetPublicAddressElapsedTime_Result' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnPublicAddressStateChanged, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000050, "Member 'ELEVATOR_Base_C_EVENT_OnPublicAddressStateChanged::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnPublicAddressStateChanged, CallFunc_GetMaxElement_ReturnValue) == 0x00005C, "Member 'ELEVATOR_Base_C_EVENT_OnPublicAddressStateChanged::CallFunc_GetMaxElement_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnPublicAddressStateChanged, CallFunc_Not_PreBool_ReturnValue) == 0x000060, "Member 'ELEVATOR_Base_C_EVENT_OnPublicAddressStateChanged::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnPublicAddressStateChanged, CallFunc_GetGameInstance_ReturnValue) == 0x000068, "Member 'ELEVATOR_Base_C_EVENT_OnPublicAddressStateChanged::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnPublicAddressStateChanged, K2Node_DynamicCast_AsGI_Single_Player) == 0x000070, "Member 'ELEVATOR_Base_C_EVENT_OnPublicAddressStateChanged::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnPublicAddressStateChanged, K2Node_DynamicCast_bSuccess) == 0x000078, "Member 'ELEVATOR_Base_C_EVENT_OnPublicAddressStateChanged::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnPublicAddressStateChanged, CallFunc_CanPublicAddressReachLocation_Result) == 0x000079, "Member 'ELEVATOR_Base_C_EVENT_OnPublicAddressStateChanged::CallFunc_CanPublicAddressReachLocation_Result' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.EVENT_OnDisableAttribChanged
// 0x0010 (0x0010 - 0x0000)
struct ELEVATOR_Base_C_EVENT_OnDisableAttribChanged final
{
public:
	float                                         CurrValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastValue;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EmissiveScale;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ELEVATOR_Base_C_EVENT_OnDisableAttribChanged) == 0x000004, "Wrong alignment on ELEVATOR_Base_C_EVENT_OnDisableAttribChanged");
static_assert(sizeof(ELEVATOR_Base_C_EVENT_OnDisableAttribChanged) == 0x000010, "Wrong size on ELEVATOR_Base_C_EVENT_OnDisableAttribChanged");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnDisableAttribChanged, CurrValue) == 0x000000, "Member 'ELEVATOR_Base_C_EVENT_OnDisableAttribChanged::CurrValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnDisableAttribChanged, LastValue) == 0x000004, "Member 'ELEVATOR_Base_C_EVENT_OnDisableAttribChanged::LastValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnDisableAttribChanged, EmissiveScale) == 0x000008, "Member 'ELEVATOR_Base_C_EVENT_OnDisableAttribChanged::EmissiveScale' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnDisableAttribChanged, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00000C, "Member 'ELEVATOR_Base_C_EVENT_OnDisableAttribChanged::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.UpdateControlLockState
// 0x0010 (0x0010 - 0x0000)
struct ELEVATOR_Base_C_UpdateControlLockState final
{
public:
	bool                                          IsLocked;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ENUM_FailSucceedIgnore                        Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_FailSucceedIgnore                        Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_FailSucceedIgnore                        K2Node_Select_Default;                             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ELEVATOR_Base_C_UpdateControlLockState) == 0x000004, "Wrong alignment on ELEVATOR_Base_C_UpdateControlLockState");
static_assert(sizeof(ELEVATOR_Base_C_UpdateControlLockState) == 0x000010, "Wrong size on ELEVATOR_Base_C_UpdateControlLockState");
static_assert(offsetof(ELEVATOR_Base_C_UpdateControlLockState, IsLocked) == 0x000000, "Member 'ELEVATOR_Base_C_UpdateControlLockState::IsLocked' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_UpdateControlLockState, Temp_bool_Variable) == 0x000001, "Member 'ELEVATOR_Base_C_UpdateControlLockState::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_UpdateControlLockState, Temp_byte_Variable) == 0x000002, "Member 'ELEVATOR_Base_C_UpdateControlLockState::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_UpdateControlLockState, Temp_byte_Variable_1) == 0x000003, "Member 'ELEVATOR_Base_C_UpdateControlLockState::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_UpdateControlLockState, Temp_int_Variable) == 0x000004, "Member 'ELEVATOR_Base_C_UpdateControlLockState::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_UpdateControlLockState, K2Node_Select_Default) == 0x000008, "Member 'ELEVATOR_Base_C_UpdateControlLockState::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_UpdateControlLockState, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000009, "Member 'ELEVATOR_Base_C_UpdateControlLockState::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_UpdateControlLockState, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'ELEVATOR_Base_C_UpdateControlLockState::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function ELEVATOR_Base.ELEVATOR_Base_C.EVENT_OnStoryQuestChanged
// 0x000C (0x000C - 0x0000)
struct ELEVATOR_Base_C_EVENT_OnStoryQuestChanged final
{
public:
	class FName                                   StoryQuestName;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Value;                                             // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          DesiredLockState;                                  // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_BoolBool_ReturnValue;          // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ELEVATOR_Base_C_EVENT_OnStoryQuestChanged) == 0x000004, "Wrong alignment on ELEVATOR_Base_C_EVENT_OnStoryQuestChanged");
static_assert(sizeof(ELEVATOR_Base_C_EVENT_OnStoryQuestChanged) == 0x00000C, "Wrong size on ELEVATOR_Base_C_EVENT_OnStoryQuestChanged");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnStoryQuestChanged, StoryQuestName) == 0x000000, "Member 'ELEVATOR_Base_C_EVENT_OnStoryQuestChanged::StoryQuestName' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnStoryQuestChanged, Value) == 0x000008, "Member 'ELEVATOR_Base_C_EVENT_OnStoryQuestChanged::Value' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnStoryQuestChanged, DesiredLockState) == 0x000009, "Member 'ELEVATOR_Base_C_EVENT_OnStoryQuestChanged::DesiredLockState' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnStoryQuestChanged, CallFunc_EqualEqual_BoolBool_ReturnValue) == 0x00000A, "Member 'ELEVATOR_Base_C_EVENT_OnStoryQuestChanged::CallFunc_EqualEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ELEVATOR_Base_C_EVENT_OnStoryQuestChanged, CallFunc_EqualEqual_NameName_ReturnValue) == 0x00000B, "Member 'ELEVATOR_Base_C_EVENT_OnStoryQuestChanged::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");

}

