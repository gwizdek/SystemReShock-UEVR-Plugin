#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LimbDamageAccumulator

#include "Basic.hpp"

#include "LimbDamageAccumulator_classes.hpp"
#include "LimbDamageAccumulator_parameters.hpp"


namespace SDK
{

// Function LimbDamageAccumulator.LimbDamageAccumulator_C.AddDamageInstance
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   DamageValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CurrentTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NetDamage                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ULimbDamageAccumulator_C::AddDamageInstance(int32 DamageValue, float CurrentTime, int32* NetDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LimbDamageAccumulator_C", "AddDamageInstance");

	Params::LimbDamageAccumulator_C_AddDamageInstance Parms{};

	Parms.DamageValue = DamageValue;
	Parms.CurrentTime = CurrentTime;

	UObject::ProcessEvent(Func, &Parms);

	if (NetDamage != nullptr)
		*NetDamage = Parms.NetDamage;
}


// Function LimbDamageAccumulator.LimbDamageAccumulator_C.RemoveDamageAmount
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   DamageAmount                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ULimbDamageAccumulator_C::RemoveDamageAmount(int32 DamageAmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LimbDamageAccumulator_C", "RemoveDamageAmount");

	Params::LimbDamageAccumulator_C_RemoveDamageAmount Parms{};

	Parms.DamageAmount = DamageAmount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LimbDamageAccumulator.LimbDamageAccumulator_C.RemovedExpiredDamageInstances
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   CurrentTimestamp                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ULimbDamageAccumulator_C::RemovedExpiredDamageInstances(float CurrentTimestamp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LimbDamageAccumulator_C", "RemovedExpiredDamageInstances");

	Params::LimbDamageAccumulator_C_RemovedExpiredDamageInstances Parms{};

	Parms.CurrentTimestamp = CurrentTimestamp;

	UObject::ProcessEvent(Func, &Parms);
}

}

