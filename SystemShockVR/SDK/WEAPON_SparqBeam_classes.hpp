#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WEAPON_SparqBeam

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ITEM_EnergyWeapon_Base_classes.hpp"
#include "AttributeSystem_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass WEAPON_SparqBeam.WEAPON_SparqBeam_C
// 0x01B0 (0x0578 - 0x03C8)
class UWEAPON_SparqBeam_C final : public UITEM_EnergyWeapon_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_WEAPON_SparqBeam_C;                 // 0x03C8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TSoftObjectPtr<class UAnimMontage>            DischargeLowMontage;                               // 0x03D0(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimMontage>            DischargeHighMontage;                              // 0x03F8(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimMontage>            DischargeOverchargeMontage;                        // 0x0420(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimMontage>            ModeIncrementMontage;                              // 0x0448(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimMontage>            ModeDecrementMontage;                              // 0x0470(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class UDataTable*                             ImpactDataTable;                                   // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ImpactEffectParamName;                             // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ImpactFXStrength_Low;                              // 0x04A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ImpactFXStrength_High;                             // 0x04AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ImpactFXStrength_Overcharge;                       // 0x04B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B4[0x4];                                      // 0x04B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraSystem*                         PS_BeamFX;                                         // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         PS_ModeFX;                                         // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BeamImpactDetectionRadius;                         // 0x04C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CC[0x4];                                      // 0x04CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ModeSwitchMessage;                                 // 0x04D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 HeroicModeParamMessage;                            // 0x04E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 UpdateModeParamMessage;                            // 0x04F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         SwitchToModeIndex;                                 // 0x0500(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastModeUpdateTimestamp;                           // 0x0504(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastModeMaterialParam;                             // 0x0508(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ModeMaterialChangeSpeed;                           // 0x050C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           ModeUpdateTimerHandle;                             // 0x0510(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           CachedDischargeLowMontage;                         // 0x0518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           CachedDischargeHighMontage;                        // 0x0520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           CachedDischargeOverchargeMontage;                  // 0x0528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           CachedModeIncrementMontage;                        // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           CachedModeDecrementMontage;                        // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      PS_ActiveModeFX;                                   // 0x0540(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              CachedOverheatCue;                                 // 0x0548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               OverheatCue;                                       // 0x0550(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_WEAPON_SparqBeam(int32 EntryPoint);
	void AsyncPlayOverheatCue();
	void StreamWeaponMontages();
	void OnLoaded_26C27D2847CEA7CADE9D55B5540BD931(class UObject* Loaded);
	void OnLoaded_A8D7EA4E4DADDC2F356841B8CBDFCAF7(class UObject* Loaded);
	void OnLoaded_9AA889644536F3FE47B3C5854042E0C7(class UObject* Loaded);
	void OnLoaded_4453E29C4EB8D6F53DE5CBA60EA23F92(class UObject* Loaded);
	void OnLoaded_ACAF3726483954630377248BA8760B43(class UObject* Loaded);
	void OnLoaded_C7B0298B40951C0D5A4863980A72BA74(class UObject* Loaded);
	void PlayBeamParticleFX(const struct FVector& HitPoint, const struct FVector& SourcePoint, int32 ModeIndex, class UNiagaraComponent** ParticleSystemComponent);
	void FireBeam();
	void EnableDamage(bool* Result);
	void ReceiveAnimationMessage(const class FString& Message, bool* Result);
	void SetCurrentMode(int32 Mode, bool* Result);
	void CanAttemptModeSwitchWhileEquipped(int32 ModeIndex, bool* Result);
	void OnEnergyModeChanged();
	void GetTargetModeMaterialParameter(float* Result);
	void UpdateModeMaterialParameter();
	void TryUpdateModeMaterialParameter();
	void GetDischargeMontage(class UAnimMontage** Montage);
	void OnUpdateHeat();
	void UpdateModeFX(bool HasEnergyToFire);
	void EVENT_OnHolsterFinished();
	void OnBecameOverheated();
	void OnFinishedOverheating();
	void InitializeEnergyWeaponState();
	void OnWeaponBecameActivatable(class APAWN_SystemShockCharacter_C* Character, bool ShowImmediately);
	void ModifySparqBeamEventBindings(bool Activatable_0);
	void OnBecomeUnactivatable(bool* Result);
	void EVENT_OnEnergyChanged(float CurrValue, float LastValue, float MaxValue, EModApplyType ApplyType);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WEAPON_SparqBeam_C">();
	}
	static class UWEAPON_SparqBeam_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWEAPON_SparqBeam_C>();
	}
};
static_assert(alignof(UWEAPON_SparqBeam_C) == 0x000008, "Wrong alignment on UWEAPON_SparqBeam_C");
static_assert(sizeof(UWEAPON_SparqBeam_C) == 0x000578, "Wrong size on UWEAPON_SparqBeam_C");
static_assert(offsetof(UWEAPON_SparqBeam_C, UberGraphFrame_WEAPON_SparqBeam_C) == 0x0003C8, "Member 'UWEAPON_SparqBeam_C::UberGraphFrame_WEAPON_SparqBeam_C' has a wrong offset!");
static_assert(offsetof(UWEAPON_SparqBeam_C, DischargeLowMontage) == 0x0003D0, "Member 'UWEAPON_SparqBeam_C::DischargeLowMontage' has a wrong offset!");
static_assert(offsetof(UWEAPON_SparqBeam_C, DischargeHighMontage) == 0x0003F8, "Member 'UWEAPON_SparqBeam_C::DischargeHighMontage' has a wrong offset!");
static_assert(offsetof(UWEAPON_SparqBeam_C, DischargeOverchargeMontage) == 0x000420, "Member 'UWEAPON_SparqBeam_C::DischargeOverchargeMontage' has a wrong offset!");
static_assert(offsetof(UWEAPON_SparqBeam_C, ModeIncrementMontage) == 0x000448, "Member 'UWEAPON_SparqBeam_C::ModeIncrementMontage' has a wrong offset!");
static_assert(offsetof(UWEAPON_SparqBeam_C, ModeDecrementMontage) == 0x000470, "Member 'UWEAPON_SparqBeam_C::ModeDecrementMontage' has a wrong offset!");
static_assert(offsetof(UWEAPON_SparqBeam_C, ImpactDataTable) == 0x000498, "Member 'UWEAPON_SparqBeam_C::ImpactDataTable' has a wrong offset!");
static_assert(offsetof(UWEAPON_SparqBeam_C, ImpactEffectParamName) == 0x0004A0, "Member 'UWEAPON_SparqBeam_C::ImpactEffectParamName' has a wrong offset!");
static_assert(offsetof(UWEAPON_SparqBeam_C, ImpactFXStrength_Low) == 0x0004A8, "Member 'UWEAPON_SparqBeam_C::ImpactFXStrength_Low' has a wrong offset!");
static_assert(offsetof(UWEAPON_SparqBeam_C, ImpactFXStrength_High) == 0x0004AC, "Member 'UWEAPON_SparqBeam_C::ImpactFXStrength_High' has a wrong offset!");
static_assert(offsetof(UWEAPON_SparqBeam_C, ImpactFXStrength_Overcharge) == 0x0004B0, "Member 'UWEAPON_SparqBeam_C::ImpactFXStrength_Overcharge' has a wrong offset!");
static_assert(offsetof(UWEAPON_SparqBeam_C, PS_BeamFX) == 0x0004B8, "Member 'UWEAPON_SparqBeam_C::PS_BeamFX' has a wrong offset!");
static_assert(offsetof(UWEAPON_SparqBeam_C, PS_ModeFX) == 0x0004C0, "Member 'UWEAPON_SparqBeam_C::PS_ModeFX' has a wrong offset!");
static_assert(offsetof(UWEAPON_SparqBeam_C, BeamImpactDetectionRadius) == 0x0004C8, "Member 'UWEAPON_SparqBeam_C::BeamImpactDetectionRadius' has a wrong offset!");
static_assert(offsetof(UWEAPON_SparqBeam_C, ModeSwitchMessage) == 0x0004D0, "Member 'UWEAPON_SparqBeam_C::ModeSwitchMessage' has a wrong offset!");
static_assert(offsetof(UWEAPON_SparqBeam_C, HeroicModeParamMessage) == 0x0004E0, "Member 'UWEAPON_SparqBeam_C::HeroicModeParamMessage' has a wrong offset!");
static_assert(offsetof(UWEAPON_SparqBeam_C, UpdateModeParamMessage) == 0x0004F0, "Member 'UWEAPON_SparqBeam_C::UpdateModeParamMessage' has a wrong offset!");
static_assert(offsetof(UWEAPON_SparqBeam_C, SwitchToModeIndex) == 0x000500, "Member 'UWEAPON_SparqBeam_C::SwitchToModeIndex' has a wrong offset!");
static_assert(offsetof(UWEAPON_SparqBeam_C, LastModeUpdateTimestamp) == 0x000504, "Member 'UWEAPON_SparqBeam_C::LastModeUpdateTimestamp' has a wrong offset!");
static_assert(offsetof(UWEAPON_SparqBeam_C, LastModeMaterialParam) == 0x000508, "Member 'UWEAPON_SparqBeam_C::LastModeMaterialParam' has a wrong offset!");
static_assert(offsetof(UWEAPON_SparqBeam_C, ModeMaterialChangeSpeed) == 0x00050C, "Member 'UWEAPON_SparqBeam_C::ModeMaterialChangeSpeed' has a wrong offset!");
static_assert(offsetof(UWEAPON_SparqBeam_C, ModeUpdateTimerHandle) == 0x000510, "Member 'UWEAPON_SparqBeam_C::ModeUpdateTimerHandle' has a wrong offset!");
static_assert(offsetof(UWEAPON_SparqBeam_C, CachedDischargeLowMontage) == 0x000518, "Member 'UWEAPON_SparqBeam_C::CachedDischargeLowMontage' has a wrong offset!");
static_assert(offsetof(UWEAPON_SparqBeam_C, CachedDischargeHighMontage) == 0x000520, "Member 'UWEAPON_SparqBeam_C::CachedDischargeHighMontage' has a wrong offset!");
static_assert(offsetof(UWEAPON_SparqBeam_C, CachedDischargeOverchargeMontage) == 0x000528, "Member 'UWEAPON_SparqBeam_C::CachedDischargeOverchargeMontage' has a wrong offset!");
static_assert(offsetof(UWEAPON_SparqBeam_C, CachedModeIncrementMontage) == 0x000530, "Member 'UWEAPON_SparqBeam_C::CachedModeIncrementMontage' has a wrong offset!");
static_assert(offsetof(UWEAPON_SparqBeam_C, CachedModeDecrementMontage) == 0x000538, "Member 'UWEAPON_SparqBeam_C::CachedModeDecrementMontage' has a wrong offset!");
static_assert(offsetof(UWEAPON_SparqBeam_C, PS_ActiveModeFX) == 0x000540, "Member 'UWEAPON_SparqBeam_C::PS_ActiveModeFX' has a wrong offset!");
static_assert(offsetof(UWEAPON_SparqBeam_C, CachedOverheatCue) == 0x000548, "Member 'UWEAPON_SparqBeam_C::CachedOverheatCue' has a wrong offset!");
static_assert(offsetof(UWEAPON_SparqBeam_C, OverheatCue) == 0x000550, "Member 'UWEAPON_SparqBeam_C::OverheatCue' has a wrong offset!");

}

