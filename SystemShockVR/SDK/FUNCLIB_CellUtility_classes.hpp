#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FUNCLIB_CellUtility

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "ENUM_CardinalDirection_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass FUNCLIB_CellUtility.FUNCLIB_CellUtility_C
// 0x0000 (0x0028 - 0x0028)
class UFUNCLIB_CellUtility_C final : public UBlueprintFunctionLibrary
{
public:
	static void GetReverseCardinal(ENUM_CardinalDirection Input, class UObject* __WorldContext, ENUM_CardinalDirection* Output);
	static void GetNeighborCell(const struct FIntPoint& SourceCell, ENUM_CardinalDirection Direction, class UObject* __WorldContext, struct FIntPoint* NeighborCell);
	static void GetCardinalDirectionFromVector(const struct FVector& InputVector, class UObject* __WorldContext, ENUM_CardinalDirection* Direction);
	static void GetDescendingCostInsertionIndex(TArray<struct FSTRUCT_CellCostNode>& DescendingCostNodes, float Cost, class UObject* __WorldContext, int32* InsertionIndex);
	static void GetEuclideanDistanceBetweenCells(const struct FSTRUCT_CellLocationData& CellDataA, const struct FSTRUCT_CellLocationData& CellDataB, class UObject* __WorldContext, float* Distance);
	static void GetManhattanDistanceBetweenCells(const struct FSTRUCT_CellLocationData& CellDataA, const struct FSTRUCT_CellLocationData& CellDataB, class UObject* __WorldContext, float* Distance);
	static void GetCardinalDirectionFromIntPoint(const struct FIntPoint& Target, class UObject* __WorldContext, ENUM_CardinalDirection* Direction);
	static void GetNeighborCells(const struct FIntPoint& Source, class UObject* __WorldContext, TArray<struct FIntPoint>* Neighbors);
	static void GetDirectionToCell(const struct FIntPoint& Source, const struct FIntPoint& Target, class UObject* __WorldContext, ENUM_CardinalDirection* Direction);
	static void GetVectorFromCardinalDirection(ENUM_CardinalDirection Direction, class UObject* __WorldContext, struct FVector* Vector);
	static void GetIntPointFromCardinalDirection(ENUM_CardinalDirection Direction, class UObject* __WorldContext, struct FIntPoint* Point);
	static void GetCellTangentVector(const struct FVector& Vector, class UObject* __WorldContext, struct FVector* Tanget);
	static void GetCellWorldDirection(const struct FVector& Direction, class UObject* __WorldContext, struct FVector* WorldDirection);
	static void GetWorldToCellDirection(const struct FVector& WorldDirection, class UObject* __WorldContext, struct FVector* CellDirection);
	static void ExtractStraightLinePath(const struct FIntPoint& SourceCell, TArray<struct FIntPoint>& PathToModify, class UObject* __WorldContext, ENUM_CardinalDirection* Direction);
	static void IsAlignedToMoveToCell(const struct FSTRUCT_CellLocationData& SourceCellData, const struct FIntPoint& TargetCell, class UObject* __WorldContext, bool* Result);
	static void GetPathTravelDistance(const struct FSTRUCT_CellLocationData& SourceCellData, TArray<struct FIntPoint>& Path, class UObject* __WorldContext, float* Distance);
	static void GetVectorFromCellLocationData(const struct FSTRUCT_CellLocationData& CellLocation, class UObject* __WorldContext, struct FVector2D* Result);
	static void IsIntPointContainedInBounds(const struct FIntPoint& Point, const struct FIntPoint& BoundsMin, const struct FIntPoint& BoundsMax, bool InclusiveMax, class UObject* __WorldContext, bool* Result);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"FUNCLIB_CellUtility_C">();
	}
	static class UFUNCLIB_CellUtility_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFUNCLIB_CellUtility_C>();
	}
};
static_assert(alignof(UFUNCLIB_CellUtility_C) == 0x000008, "Wrong alignment on UFUNCLIB_CellUtility_C");
static_assert(sizeof(UFUNCLIB_CellUtility_C) == 0x000028, "Wrong size on UFUNCLIB_CellUtility_C");

}

