#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPC_SurgeryMachine

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "ENUM_LookControlType_structs.hpp"
#include "ENUM_SurgeryMachineMovementState_structs.hpp"
#include "MOVECONTROL_Base_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPC_SurgeryMachine.BPC_SurgeryMachine_C
// 0x0070 (0x0108 - 0x0098)
class UBPC_SurgeryMachine_C final : public UMOVECONTROL_Base_C
{
public:
	struct FVector                                InitialLocation;                                   // 0x0094(0x000C)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FRotator                               InitialRotation;                                   // 0x00A0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	struct FVector                                StartLocation;                                     // 0x00AC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FRotator                               StartRotation;                                     // 0x00B8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	struct FVector                                MaintainLocation;                                  // 0x00C4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FRotator                               MaintainRotation;                                  // 0x00D0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	struct FVector                                EndLocation;                                       // 0x00DC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FRotator                               EndRotation;                                       // 0x00E8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	ENUM_SurgeryMachineMovementState              CurrentState;                                      // 0x00F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F5[0x3];                                       // 0x00F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EnterStateTimestamp;                               // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              RelativeYawPitchOffset;                            // 0x00FC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void InitializeMoveControl(class APAWN_Hacker_Simple_C* Player_0, float GameTime, const struct FSTRUCT_MoveControlParams& InitialControlParams, bool* Result);
	void UpdateMoveControl(const struct FVector2D& MoveInput, const struct FVector2D& LookInput, const struct FSTRUCT_MoveControlParams& ControlParams, TArray<float>& ActionInputValues, float MoveInputScale, float Delta_Time, bool* ShouldExpire);
	void SetState(ENUM_SurgeryMachineMovementState State);
	void GetLookVector(const struct FRotator& Rot, struct FVector* Vec);
	void UpdateWaitingToEnter();
	void UpdateEntering();
	void UpdateExiting(bool* Finished);
	void ExpireMoveControl();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPC_SurgeryMachine_C">();
	}
	static class UBPC_SurgeryMachine_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPC_SurgeryMachine_C>();
	}
};
static_assert(alignof(UBPC_SurgeryMachine_C) == 0x000008, "Wrong alignment on UBPC_SurgeryMachine_C");
static_assert(sizeof(UBPC_SurgeryMachine_C) == 0x000108, "Wrong size on UBPC_SurgeryMachine_C");
static_assert(offsetof(UBPC_SurgeryMachine_C, InitialLocation) == 0x000094, "Member 'UBPC_SurgeryMachine_C::InitialLocation' has a wrong offset!");
static_assert(offsetof(UBPC_SurgeryMachine_C, InitialRotation) == 0x0000A0, "Member 'UBPC_SurgeryMachine_C::InitialRotation' has a wrong offset!");
static_assert(offsetof(UBPC_SurgeryMachine_C, StartLocation) == 0x0000AC, "Member 'UBPC_SurgeryMachine_C::StartLocation' has a wrong offset!");
static_assert(offsetof(UBPC_SurgeryMachine_C, StartRotation) == 0x0000B8, "Member 'UBPC_SurgeryMachine_C::StartRotation' has a wrong offset!");
static_assert(offsetof(UBPC_SurgeryMachine_C, MaintainLocation) == 0x0000C4, "Member 'UBPC_SurgeryMachine_C::MaintainLocation' has a wrong offset!");
static_assert(offsetof(UBPC_SurgeryMachine_C, MaintainRotation) == 0x0000D0, "Member 'UBPC_SurgeryMachine_C::MaintainRotation' has a wrong offset!");
static_assert(offsetof(UBPC_SurgeryMachine_C, EndLocation) == 0x0000DC, "Member 'UBPC_SurgeryMachine_C::EndLocation' has a wrong offset!");
static_assert(offsetof(UBPC_SurgeryMachine_C, EndRotation) == 0x0000E8, "Member 'UBPC_SurgeryMachine_C::EndRotation' has a wrong offset!");
static_assert(offsetof(UBPC_SurgeryMachine_C, CurrentState) == 0x0000F4, "Member 'UBPC_SurgeryMachine_C::CurrentState' has a wrong offset!");
static_assert(offsetof(UBPC_SurgeryMachine_C, EnterStateTimestamp) == 0x0000F8, "Member 'UBPC_SurgeryMachine_C::EnterStateTimestamp' has a wrong offset!");
static_assert(offsetof(UBPC_SurgeryMachine_C, RelativeYawPitchOffset) == 0x0000FC, "Member 'UBPC_SurgeryMachine_C::RelativeYawPitchOffset' has a wrong offset!");

}

