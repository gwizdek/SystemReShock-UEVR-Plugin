#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ProximityMineProjectile

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ExplosiveProjectile_Base_classes.hpp"
#include "ENUM_InteractionType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass ProximityMineProjectile.ProximityMineProjectile_C
// 0x0130 (0x0478 - 0x0348)
class AProximityMineProjectile_C final : public AExplosiveProjectile_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_ProximityMineProjectile_C;          // 0x0348(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          TargetBox;                                         // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       MotionSensor;                                      // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      BladeFX;                                           // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   ProximityMineMesh;                                 // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCOMP_VoxelCullable_C*                  COMP_VoxelCullable;                                // 0x0378(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         StartDetinationFXTimeline_NewTrack_0_BDFE9D0C445F30697B67819EEFD26BC3; // 0x0380(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            StartDetinationFXTimeline__Direction_BDFE9D0C445F30697B67819EEFD26BC3; // 0x0384(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_385[0x3];                                      // 0x0385(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     StartDetinationFXTimeline;                         // 0x0388(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StartsArmed;                                       // 0x0390(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_391[0x3];                                      // 0x0391(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ArmDelayTime;                                      // 0x0394(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BecomeArmedTimestamp;                              // 0x0398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ArmedBeepDelay;                                    // 0x039C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DetonateTimestamp;                                 // 0x03A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DetonationDelay;                                   // 0x03A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DetonationBeepDelay;                               // 0x03A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ContactDamage;                                     // 0x03AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           ArmBeepTimerHandle;                                // 0x03B0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               ArmBeepCue;                                        // 0x03B8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               BecomingArmedCue;                                  // 0x03E0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         PulseDurationArmed;                                // 0x0408(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PulseDurationDetonating;                           // 0x040C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MaterialInstance;                                  // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDataTableRowHandle                    DefaultEnemyStats;                                 // 0x0418(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	TSoftClassPtr<class UClass>                   DefaultSkillClass;                                 // 0x0428(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               DisarmSoundCue;                                    // 0x0450(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_ProximityMineProjectile(int32 EntryPoint);
	void BndEvt__ProximityMineProjectile_MotionSensor_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void StartDestinationFX();
	void AsyncInitializeDefaultDamageSettings();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void OnCursorLeave(class UPrimitiveComponent* Cursor_Primitive);
	void OnCursorEnter(class UPrimitiveComponent* Cursor_Primitive);
	void OnLoaded_CBA3A87543E9FAB5CF845EAAF5D9C834(TSubclassOf<class UObject> Loaded);
	void StartDetinationFXTimeline__UpdateFunc();
	void StartDetinationFXTimeline__FinishedFunc();
	void EVENT_OnArmProximityMine();
	void InitializeProximityMine();
	void IsProxyMineArmed(bool* Result);
	void IsProxyMineDetonating(bool* Result);
	void CanCharacterTripProximityMine(class APAWN_SystemShockCharacter_C* Character, bool* Result);
	void CanAnyOverlappingActorTripProxyMine(bool* Result);
	void StartBecomingArmed(bool OnBeginPlay);
	void TryStartDetonationCountdown(bool* Result);
	void EVENT_ArmedBeep();
	void EVENT_DetonatingBeep();
	void EVENT_OnProximityMineHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void PlayExplosionEffects(class UNiagaraComponent** SpawnedFX);
	void UpdateHoverMotion();
	void DetonateExplosive();
	void CanReceiveItem(class UITEM_Base_C* Item, bool* Result);
	void ShouldIgnoreInteractRange(bool* Result);
	void IsHiddenInteractablePrimitive(class APAWN_SystemShockCharacter_C* Character, class UPrimitiveComponent* CursorPrimitive, bool* Result);
	void IsInteractActivated(bool* Result);
	void CanModifyInteractPower(bool* Result);
	void CanInteractBeDestroyed(bool* Result);
	void GetInteractDestroyed(bool* Result);
	void GetInteractBroken(bool* Result, class FText* BrokenMessage);
	void GetInteractLocked(class AActor* SourceActor, bool* Result, class FText* LockMessage);
	void GetInteractBusy(bool* Result, class FText* BusyMessage);
	void SetInteractPowered(bool State, bool* Result);
	void SetInteractLocked(bool Locked, bool* Result);
	void StopChanneling(class AActor* NewChannelingInteract, bool* Result);
	void GetTargetShape(class UPrimitiveComponent* CursorPrimitive, class UShapeComponent** ShapeComponent);
	void TryReceiveItem(class UITEM_Base_C* Item, bool* Result);
	void TryInteract(class AActor* SourceActor, class UPrimitiveComponent* CursorPrimitive, ENUM_InteractionType InteractionType, struct FSTRUCT_InteractResults* InteractResults);
	void GetChannelingHoldDuration(float* Result);
	void FinishedChannelingHoldInteraction(class APAWN_SystemShockCharacter_C* Character, bool* Result);
	void TryDetachInteract(bool SimulatePhysics, bool* Result);
	void GetExplosivePhysicsComponent(class UPrimitiveComponent** PhysicsComponent);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ProximityMineProjectile_C">();
	}
	static class AProximityMineProjectile_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AProximityMineProjectile_C>();
	}
};
static_assert(alignof(AProximityMineProjectile_C) == 0x000008, "Wrong alignment on AProximityMineProjectile_C");
static_assert(sizeof(AProximityMineProjectile_C) == 0x000478, "Wrong size on AProximityMineProjectile_C");
static_assert(offsetof(AProximityMineProjectile_C, UberGraphFrame_ProximityMineProjectile_C) == 0x000348, "Member 'AProximityMineProjectile_C::UberGraphFrame_ProximityMineProjectile_C' has a wrong offset!");
static_assert(offsetof(AProximityMineProjectile_C, TargetBox) == 0x000350, "Member 'AProximityMineProjectile_C::TargetBox' has a wrong offset!");
static_assert(offsetof(AProximityMineProjectile_C, MotionSensor) == 0x000358, "Member 'AProximityMineProjectile_C::MotionSensor' has a wrong offset!");
static_assert(offsetof(AProximityMineProjectile_C, PointLight) == 0x000360, "Member 'AProximityMineProjectile_C::PointLight' has a wrong offset!");
static_assert(offsetof(AProximityMineProjectile_C, BladeFX) == 0x000368, "Member 'AProximityMineProjectile_C::BladeFX' has a wrong offset!");
static_assert(offsetof(AProximityMineProjectile_C, ProximityMineMesh) == 0x000370, "Member 'AProximityMineProjectile_C::ProximityMineMesh' has a wrong offset!");
static_assert(offsetof(AProximityMineProjectile_C, COMP_VoxelCullable) == 0x000378, "Member 'AProximityMineProjectile_C::COMP_VoxelCullable' has a wrong offset!");
static_assert(offsetof(AProximityMineProjectile_C, StartDetinationFXTimeline_NewTrack_0_BDFE9D0C445F30697B67819EEFD26BC3) == 0x000380, "Member 'AProximityMineProjectile_C::StartDetinationFXTimeline_NewTrack_0_BDFE9D0C445F30697B67819EEFD26BC3' has a wrong offset!");
static_assert(offsetof(AProximityMineProjectile_C, StartDetinationFXTimeline__Direction_BDFE9D0C445F30697B67819EEFD26BC3) == 0x000384, "Member 'AProximityMineProjectile_C::StartDetinationFXTimeline__Direction_BDFE9D0C445F30697B67819EEFD26BC3' has a wrong offset!");
static_assert(offsetof(AProximityMineProjectile_C, StartDetinationFXTimeline) == 0x000388, "Member 'AProximityMineProjectile_C::StartDetinationFXTimeline' has a wrong offset!");
static_assert(offsetof(AProximityMineProjectile_C, StartsArmed) == 0x000390, "Member 'AProximityMineProjectile_C::StartsArmed' has a wrong offset!");
static_assert(offsetof(AProximityMineProjectile_C, ArmDelayTime) == 0x000394, "Member 'AProximityMineProjectile_C::ArmDelayTime' has a wrong offset!");
static_assert(offsetof(AProximityMineProjectile_C, BecomeArmedTimestamp) == 0x000398, "Member 'AProximityMineProjectile_C::BecomeArmedTimestamp' has a wrong offset!");
static_assert(offsetof(AProximityMineProjectile_C, ArmedBeepDelay) == 0x00039C, "Member 'AProximityMineProjectile_C::ArmedBeepDelay' has a wrong offset!");
static_assert(offsetof(AProximityMineProjectile_C, DetonateTimestamp) == 0x0003A0, "Member 'AProximityMineProjectile_C::DetonateTimestamp' has a wrong offset!");
static_assert(offsetof(AProximityMineProjectile_C, DetonationDelay) == 0x0003A4, "Member 'AProximityMineProjectile_C::DetonationDelay' has a wrong offset!");
static_assert(offsetof(AProximityMineProjectile_C, DetonationBeepDelay) == 0x0003A8, "Member 'AProximityMineProjectile_C::DetonationBeepDelay' has a wrong offset!");
static_assert(offsetof(AProximityMineProjectile_C, ContactDamage) == 0x0003AC, "Member 'AProximityMineProjectile_C::ContactDamage' has a wrong offset!");
static_assert(offsetof(AProximityMineProjectile_C, ArmBeepTimerHandle) == 0x0003B0, "Member 'AProximityMineProjectile_C::ArmBeepTimerHandle' has a wrong offset!");
static_assert(offsetof(AProximityMineProjectile_C, ArmBeepCue) == 0x0003B8, "Member 'AProximityMineProjectile_C::ArmBeepCue' has a wrong offset!");
static_assert(offsetof(AProximityMineProjectile_C, BecomingArmedCue) == 0x0003E0, "Member 'AProximityMineProjectile_C::BecomingArmedCue' has a wrong offset!");
static_assert(offsetof(AProximityMineProjectile_C, PulseDurationArmed) == 0x000408, "Member 'AProximityMineProjectile_C::PulseDurationArmed' has a wrong offset!");
static_assert(offsetof(AProximityMineProjectile_C, PulseDurationDetonating) == 0x00040C, "Member 'AProximityMineProjectile_C::PulseDurationDetonating' has a wrong offset!");
static_assert(offsetof(AProximityMineProjectile_C, MaterialInstance) == 0x000410, "Member 'AProximityMineProjectile_C::MaterialInstance' has a wrong offset!");
static_assert(offsetof(AProximityMineProjectile_C, DefaultEnemyStats) == 0x000418, "Member 'AProximityMineProjectile_C::DefaultEnemyStats' has a wrong offset!");
static_assert(offsetof(AProximityMineProjectile_C, DefaultSkillClass) == 0x000428, "Member 'AProximityMineProjectile_C::DefaultSkillClass' has a wrong offset!");
static_assert(offsetof(AProximityMineProjectile_C, DisarmSoundCue) == 0x000450, "Member 'AProximityMineProjectile_C::DisarmSoundCue' has a wrong offset!");

}

