#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ANIMBP_Diego_v2

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ENUM_DeathBlowType_structs.hpp"
#include "ENUM_Emotions_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ANIMBP_Diego_v2.ANIMBP_Diego_v2_C
// 0x0C00 (0x0EC0 - 0x02C0)
class UANIMBP_Diego_v2_C final : public UAnimInstance
{
public:
	uint8                                         Pad_2B8[0x8];                                      // 0x02B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x02C8(0x0030)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer_1;                  // 0x02F8(0x00E8)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_3;                   // 0x03E0(0x00A0)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x0480(0x0080)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x0500(0x0080)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_2;                   // 0x0580(0x00A0)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_1;                   // 0x0620(0x00A0)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer;                    // 0x06C0(0x00E8)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_1;                    // 0x07A8(0x0158)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend_1;                  // 0x0900(0x00C0)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_2;                              // 0x09C0(0x0048)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_3;                     // 0x0A08(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_2;                     // 0x0A30(0x0028)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_1;                              // 0x0A58(0x0048)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x0AA0(0x0048)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend;                    // 0x0AE8(0x00C0)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose;                      // 0x0BA8(0x0158)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_1;                     // 0x0D00(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose;                       // 0x0D28(0x0028)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool;                     // 0x0D50(0x00A0)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x0DF0(0x0080)()
	class UAnimSequence*                          StunnedAnimSequence;                               // 0x0E70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseStunnedSequence;                                // 0x0E78(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E79[0x3];                                      // 0x0E79(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LookAtAlpha;                                       // 0x0E7C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LookAtLocation;                                    // 0x0E80(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Velocity;                                          // 0x0E8C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMoving;                                          // 0x0E98(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsSprinting;                                       // 0x0E99(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E9A[0x2];                                      // 0x0E9A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MovementSpeed;                                     // 0x0E9C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MovementAngle;                                     // 0x0EA0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseIdleOverride;                                   // 0x0EA4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_EA5[0x3];                                      // 0x0EA5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      Idle_Normal;                                       // 0x0EA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      Idle_Override;                                     // 0x0EB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_ANIMBP_Diego_v2(int32 EntryPoint);
	void AnimNotify_DisableSword();
	void AnimNotify_EnableSword();
	void AnimGraph(struct FPoseLink* AnimGraph_0);
	void IsStunned(bool* Result);
	void SetStunnedSequence(class UAnimSequence* StunnedSequence, bool* Result);
	void SetSprintEnabled(bool SprintEnabled, bool* Result);
	void SetTravelMode(bool TravelModeOn, bool* Result);
	void GetAimTarget(class UOBJ_EnemyTarget_C** Target);
	void SetAimTarget(class UOBJ_EnemyTarget_C* Target, bool* Result);
	void GetIdleOverrideSequence(class UAnimSequenceBase** IdleOverride);
	void SetIdleOverrideSequence(class UAnimSequenceBase* IdleOverride, bool* Result);
	void SetRelativeAimAngleOffset(float YawOffset, float PitchOffset, float Alpha, bool* Result);
	void GetRotation(struct FRotator* AnimRotationPerSecond, float* AnimRotationAlpha);
	void GetStance(ENUM_Emotions* Stance);
	void SetStance(ENUM_Emotions Stance, bool* Result);
	void SetCatatonic(bool State, bool* Result);
	void SetStandingTurn(float SignedAngleToTarget, bool IsStanding, bool* Result);
	void ReceiveDeathBlow(ENUM_DeathBlowType BodyPart, bool* Result);
	void ReceiveImpact(const struct FVector& Impulse, const struct FVector& ImpactLocation, const struct FVector& ImpactNormal, class FName BoneName, const class FString& DamageType, float DamageAmount, float FlinchTime, bool* Result);
	void SetIsAlive(bool IsAlive, bool* Result);
	void SetMovementParameters(const struct FVector& Velocity_0, const struct FRotator& Rotation, const struct FRotator& DesiredRotation, bool* Result);
	void SetLookAtAlpha(float Alpha, bool* Result);
	void SetLookAtLocation(const struct FVector& Location, bool* Result);
	void SetVoiceAmplitude(float VoiceAmplitude, bool* Result);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ANIMBP_Diego_v2_C">();
	}
	static class UANIMBP_Diego_v2_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UANIMBP_Diego_v2_C>();
	}
};
static_assert(alignof(UANIMBP_Diego_v2_C) == 0x000010, "Wrong alignment on UANIMBP_Diego_v2_C");
static_assert(sizeof(UANIMBP_Diego_v2_C) == 0x000EC0, "Wrong size on UANIMBP_Diego_v2_C");
static_assert(offsetof(UANIMBP_Diego_v2_C, UberGraphFrame) == 0x0002C0, "Member 'UANIMBP_Diego_v2_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UANIMBP_Diego_v2_C, AnimGraphNode_Root) == 0x0002C8, "Member 'UANIMBP_Diego_v2_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UANIMBP_Diego_v2_C, AnimGraphNode_BlendSpacePlayer_1) == 0x0002F8, "Member 'UANIMBP_Diego_v2_C::AnimGraphNode_BlendSpacePlayer_1' has a wrong offset!");
static_assert(offsetof(UANIMBP_Diego_v2_C, AnimGraphNode_BlendListByBool_3) == 0x0003E0, "Member 'UANIMBP_Diego_v2_C::AnimGraphNode_BlendListByBool_3' has a wrong offset!");
static_assert(offsetof(UANIMBP_Diego_v2_C, AnimGraphNode_SequencePlayer_2) == 0x000480, "Member 'UANIMBP_Diego_v2_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UANIMBP_Diego_v2_C, AnimGraphNode_SequencePlayer_1) == 0x000500, "Member 'UANIMBP_Diego_v2_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UANIMBP_Diego_v2_C, AnimGraphNode_BlendListByBool_2) == 0x000580, "Member 'UANIMBP_Diego_v2_C::AnimGraphNode_BlendListByBool_2' has a wrong offset!");
static_assert(offsetof(UANIMBP_Diego_v2_C, AnimGraphNode_BlendListByBool_1) == 0x000620, "Member 'UANIMBP_Diego_v2_C::AnimGraphNode_BlendListByBool_1' has a wrong offset!");
static_assert(offsetof(UANIMBP_Diego_v2_C, AnimGraphNode_BlendSpacePlayer) == 0x0006C0, "Member 'UANIMBP_Diego_v2_C::AnimGraphNode_BlendSpacePlayer' has a wrong offset!");
static_assert(offsetof(UANIMBP_Diego_v2_C, AnimGraphNode_SaveCachedPose_1) == 0x0007A8, "Member 'UANIMBP_Diego_v2_C::AnimGraphNode_SaveCachedPose_1' has a wrong offset!");
static_assert(offsetof(UANIMBP_Diego_v2_C, AnimGraphNode_LayeredBoneBlend_1) == 0x000900, "Member 'UANIMBP_Diego_v2_C::AnimGraphNode_LayeredBoneBlend_1' has a wrong offset!");
static_assert(offsetof(UANIMBP_Diego_v2_C, AnimGraphNode_Slot_2) == 0x0009C0, "Member 'UANIMBP_Diego_v2_C::AnimGraphNode_Slot_2' has a wrong offset!");
static_assert(offsetof(UANIMBP_Diego_v2_C, AnimGraphNode_UseCachedPose_3) == 0x000A08, "Member 'UANIMBP_Diego_v2_C::AnimGraphNode_UseCachedPose_3' has a wrong offset!");
static_assert(offsetof(UANIMBP_Diego_v2_C, AnimGraphNode_UseCachedPose_2) == 0x000A30, "Member 'UANIMBP_Diego_v2_C::AnimGraphNode_UseCachedPose_2' has a wrong offset!");
static_assert(offsetof(UANIMBP_Diego_v2_C, AnimGraphNode_Slot_1) == 0x000A58, "Member 'UANIMBP_Diego_v2_C::AnimGraphNode_Slot_1' has a wrong offset!");
static_assert(offsetof(UANIMBP_Diego_v2_C, AnimGraphNode_Slot) == 0x000AA0, "Member 'UANIMBP_Diego_v2_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UANIMBP_Diego_v2_C, AnimGraphNode_LayeredBoneBlend) == 0x000AE8, "Member 'UANIMBP_Diego_v2_C::AnimGraphNode_LayeredBoneBlend' has a wrong offset!");
static_assert(offsetof(UANIMBP_Diego_v2_C, AnimGraphNode_SaveCachedPose) == 0x000BA8, "Member 'UANIMBP_Diego_v2_C::AnimGraphNode_SaveCachedPose' has a wrong offset!");
static_assert(offsetof(UANIMBP_Diego_v2_C, AnimGraphNode_UseCachedPose_1) == 0x000D00, "Member 'UANIMBP_Diego_v2_C::AnimGraphNode_UseCachedPose_1' has a wrong offset!");
static_assert(offsetof(UANIMBP_Diego_v2_C, AnimGraphNode_UseCachedPose) == 0x000D28, "Member 'UANIMBP_Diego_v2_C::AnimGraphNode_UseCachedPose' has a wrong offset!");
static_assert(offsetof(UANIMBP_Diego_v2_C, AnimGraphNode_BlendListByBool) == 0x000D50, "Member 'UANIMBP_Diego_v2_C::AnimGraphNode_BlendListByBool' has a wrong offset!");
static_assert(offsetof(UANIMBP_Diego_v2_C, AnimGraphNode_SequencePlayer) == 0x000DF0, "Member 'UANIMBP_Diego_v2_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UANIMBP_Diego_v2_C, StunnedAnimSequence) == 0x000E70, "Member 'UANIMBP_Diego_v2_C::StunnedAnimSequence' has a wrong offset!");
static_assert(offsetof(UANIMBP_Diego_v2_C, UseStunnedSequence) == 0x000E78, "Member 'UANIMBP_Diego_v2_C::UseStunnedSequence' has a wrong offset!");
static_assert(offsetof(UANIMBP_Diego_v2_C, LookAtAlpha) == 0x000E7C, "Member 'UANIMBP_Diego_v2_C::LookAtAlpha' has a wrong offset!");
static_assert(offsetof(UANIMBP_Diego_v2_C, LookAtLocation) == 0x000E80, "Member 'UANIMBP_Diego_v2_C::LookAtLocation' has a wrong offset!");
static_assert(offsetof(UANIMBP_Diego_v2_C, Velocity) == 0x000E8C, "Member 'UANIMBP_Diego_v2_C::Velocity' has a wrong offset!");
static_assert(offsetof(UANIMBP_Diego_v2_C, IsMoving) == 0x000E98, "Member 'UANIMBP_Diego_v2_C::IsMoving' has a wrong offset!");
static_assert(offsetof(UANIMBP_Diego_v2_C, IsSprinting) == 0x000E99, "Member 'UANIMBP_Diego_v2_C::IsSprinting' has a wrong offset!");
static_assert(offsetof(UANIMBP_Diego_v2_C, MovementSpeed) == 0x000E9C, "Member 'UANIMBP_Diego_v2_C::MovementSpeed' has a wrong offset!");
static_assert(offsetof(UANIMBP_Diego_v2_C, MovementAngle) == 0x000EA0, "Member 'UANIMBP_Diego_v2_C::MovementAngle' has a wrong offset!");
static_assert(offsetof(UANIMBP_Diego_v2_C, UseIdleOverride) == 0x000EA4, "Member 'UANIMBP_Diego_v2_C::UseIdleOverride' has a wrong offset!");
static_assert(offsetof(UANIMBP_Diego_v2_C, Idle_Normal) == 0x000EA8, "Member 'UANIMBP_Diego_v2_C::Idle_Normal' has a wrong offset!");
static_assert(offsetof(UANIMBP_Diego_v2_C, Idle_Override) == 0x000EB0, "Member 'UANIMBP_Diego_v2_C::Idle_Override' has a wrong offset!");

}

