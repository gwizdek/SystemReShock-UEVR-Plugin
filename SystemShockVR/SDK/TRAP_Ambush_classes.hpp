#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TRAP_Ambush

#include "Basic.hpp"

#include "TRAP_Trigger_classes.hpp"
#include "AttributeSystem_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass TRAP_Ambush.TRAP_Ambush_C
// 0x0058 (0x03C8 - 0x0370)
class ATRAP_Ambush_C final : public ATRAP_Trigger_C
{
public:
	TArray<class AEnemySpawnPoint_C*>             EnemySpawnPoints;                                  // 0x0370(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         SpawnCount;                                        // 0x0380(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldAlertEnemies;                                // 0x0384(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CloseLockedDoors;                                  // 0x0385(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_386[0x2];                                      // 0x0386(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class APAWN_Enemy_C*>                  EnemiesToWakeUp;                                   // 0x0388(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<struct FAttribModApplyData>            EnemyApplyMods;                                    // 0x0398(0x0010)(Edit, BlueprintVisible)
	TArray<class AINTERACT_Base_C*>               LockInteracts;                                     // 0x03A8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<class AINTERACT_Base_C*>               UnlockInteracts;                                   // 0x03B8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)

public:
	void InitializeTrap();
	void OnSpringTrap(class APAWN_Hacker_Simple_C* Hacker);
	void HandleUnlocking();
	void HandleLocking();
	void WakeUpEnemies(class APAWN_Hacker_Simple_C* HackerPawn);
	void TryBindSpawnEvents();
	void OnInitializeEnemyForAmbush(class APAWN_Enemy_C* Enemy, class APAWN_Hacker_Simple_C* Hacker);
	void DismantleTrap();
	void EVENT_OnAlertLogisticsLiftEnemy(class AINTERACT_LogisticsLift_C* LogisticsLift, class AActor* CargoActor);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"TRAP_Ambush_C">();
	}
	static class ATRAP_Ambush_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATRAP_Ambush_C>();
	}
};
static_assert(alignof(ATRAP_Ambush_C) == 0x000008, "Wrong alignment on ATRAP_Ambush_C");
static_assert(sizeof(ATRAP_Ambush_C) == 0x0003C8, "Wrong size on ATRAP_Ambush_C");
static_assert(offsetof(ATRAP_Ambush_C, EnemySpawnPoints) == 0x000370, "Member 'ATRAP_Ambush_C::EnemySpawnPoints' has a wrong offset!");
static_assert(offsetof(ATRAP_Ambush_C, SpawnCount) == 0x000380, "Member 'ATRAP_Ambush_C::SpawnCount' has a wrong offset!");
static_assert(offsetof(ATRAP_Ambush_C, ShouldAlertEnemies) == 0x000384, "Member 'ATRAP_Ambush_C::ShouldAlertEnemies' has a wrong offset!");
static_assert(offsetof(ATRAP_Ambush_C, CloseLockedDoors) == 0x000385, "Member 'ATRAP_Ambush_C::CloseLockedDoors' has a wrong offset!");
static_assert(offsetof(ATRAP_Ambush_C, EnemiesToWakeUp) == 0x000388, "Member 'ATRAP_Ambush_C::EnemiesToWakeUp' has a wrong offset!");
static_assert(offsetof(ATRAP_Ambush_C, EnemyApplyMods) == 0x000398, "Member 'ATRAP_Ambush_C::EnemyApplyMods' has a wrong offset!");
static_assert(offsetof(ATRAP_Ambush_C, LockInteracts) == 0x0003A8, "Member 'ATRAP_Ambush_C::LockInteracts' has a wrong offset!");
static_assert(offsetof(ATRAP_Ambush_C, UnlockInteracts) == 0x0003B8, "Member 'ATRAP_Ambush_C::UnlockInteracts' has a wrong offset!");

}

