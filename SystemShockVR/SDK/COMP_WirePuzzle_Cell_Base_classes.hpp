#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: COMP_WirePuzzle_Cell_Base

#include "Basic.hpp"

#include "COMP_PuzzleCell_Base_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ENUM_WirePuzzle_CellType_structs.hpp"
#include "ENUM_WirePlugState_structs.hpp"
#include "ENUM_CardinalDirection_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass COMP_WirePuzzle_Cell_Base.COMP_WirePuzzle_Cell_Base_C
// 0x02A0 (0x0790 - 0x04F0)
class UCOMP_WirePuzzle_Cell_Base_C final : public UCOMP_PuzzleCell_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x04E8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class AWIREPUZZLE_Base_C*                     WirePuzzle;                                        // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          IsCellMirrored;                                    // 0x04F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          IsAlternate;                                       // 0x04F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_4FA[0x2];                                      // 0x04FA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CellRotations;                                     // 0x04FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         CellTypeIndex;                                     // 0x0500(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_504[0x4];                                      // 0x0504(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 InputSockets;                                      // 0x0508(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<int32>                                 OutputSockets;                                     // 0x0518(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FIntPoint>                      ThroughputSockets;                                 // 0x0528(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<int32>                                 InitialEnabledOutputSockets;                       // 0x0538(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	ENUM_WirePuzzle_CellType                      CellType;                                          // 0x0548(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_549[0x7];                                      // 0x0549(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FIntPoint, struct FVector2D>      TraceCurrentProgAndTargetProg;                     // 0x0550(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<struct FIntPoint, struct FVector2D>      TraceCurrentFadeAndTargetFade;                     // 0x05A0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<struct FIntPoint, int32>                 TracePowerOriginSocket;                            // 0x05F0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UStaticMeshComponent*                   SpecialCellTypeMesh;                               // 0x0640(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<struct FIntPoint, int32>                 TracePowerLevel;                                   // 0x0648(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<struct FIntPoint, int32>                 TraceUVGroupIndex;                                 // 0x0698(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<struct FIntPoint, bool>                  IsTraceForward;                                    // 0x06E8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsFullyConnected;                                  // 0x0738(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_739[0x7];                                      // 0x0739(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCOMP_WirePuzzle_Cell_Base_C*           ConnectedCell;                                     // 0x0740(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCOMP_WirePuzzle_Cell_Base_C*           QueuedConnectedCell;                               // 0x0748(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   SinglePowerText;                                   // 0x0750(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   DoublePowerText;                                   // 0x0768(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UCOMP_WirePuzzle_Cell_Base_C*           SourceCellToBeConnected;                           // 0x0780(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_COMP_WirePuzzle_Cell_Base(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void InitializeCell();
	void InitializeSocketsAndTraces(const struct FSTRUCT_WirePuzzle_CellData& InitialCellData);
	void MirrorSlot(int32 Slot, int32* Result);
	void InteractWithCell();
	void SetTargetPower(int32 Socket, int32 IncomingPowerLevel, bool* Result);
	void UpdateCellPower(float DeltaSeconds);
	void MirrorTrace(const struct FIntPoint& Trace, struct FIntPoint* MirroredTrace);
	void RotateSocket(int32 Socket, int32 Rotations, int32* RotatedSocket);
	void RotateTrace(const struct FIntPoint& Trace, int32 Rotations, struct FIntPoint* RotatedTrace);
	void GetSocketDirection(int32 Socket, ENUM_CardinalDirection* Direction);
	void GetOppositeSocket(int32 Source, int32* Opposite);
	void UpdateTraceProgress(int32 SourceSocket, const struct FIntPoint& Trace, float DeltaSeconds, bool* IsFinished);
	void DoesAnyThroughputContainSocket(int32 Socket, bool* Result);
	void GetThroughputContainingSocket(int32 Socket, struct FIntPoint* Trace);
	void CreateInteractiveParts();
	void GetDirectionToSocket(int32 Socket, ENUM_CardinalDirection* Direction);
	void PropagatePowerState(int32 Socket, int32 PowerLevel, bool* Result);
	void GetTotalInputPowerLevel(int32* PowerLevel);
	void EVENT_OnPowerLevelChanged(int32 TotalPowerLevel);
	void SetPrimitiveDataPowerLevel(int32 LocalPower);
	void GetEnabledOutputSockets(bool AlternateValue, TArray<int32>* InitialEnabledOutputSockets_0);
	void GetUVCellIndexByTrace(const struct FIntPoint& Trace, int32* Index_0);
	void Get_UVBounds_from_Cell_Index(int32 CellIndex, struct FBox2D* Bounds);
	void GetIsTraceForward(const struct FIntPoint& Trace, int32 PoweredSocket, bool* Result);
	void InteractWithWireSource();
	void InteractWithWireTarget();
	void TryConnectToCell(class UCOMP_WirePuzzle_Cell_Base_C* CellToConnect, bool IsInitialization, bool* Result);
	void TryDisconnectFromCell(class UCOMP_WirePuzzle_Cell_Base_C* DisconnecteeCell, bool* Result);
	void GetConnectedCell(class UCOMP_WirePuzzle_Cell_Base_C** Cell);
	void GetWirePlug(class AWIREPUZZLE_WirePlug_C** Plug);
	void EVENT_OnPlugFinishedExtending();
	void ComputeConnectionOffset(struct FVector2D* Result);
	void EVENT_OnPlugFinishedConnecting();
	void GetPowerMaterialGroupIndex(int32 TrackMaterialIndex, int32* Index_0);
	void GetTraceProgress(const struct FIntPoint& Trace, struct FVector2D* CurrentAndTarget);
	void SetTraceProgress(const struct FIntPoint& Trace, const struct FVector2D& CurrentAndTarget);
	void GetTraceFade(const struct FIntPoint& Trace, struct FVector2D* CurrentAndTarget);
	void SetTraceFade(const struct FIntPoint& Trace, const struct FVector2D& CurrentAndTarget);
	void SetTracePowerMaterialValue(const struct FIntPoint& Trace, float Power);
	void GetTripleDoubleSourceSocket(int32 OutputSocket, int32* InputSocket);
	void SetModifiedCellParameters(uint8 Params_0, bool* Result);
	void GetModifiedCellParameters(uint8* Param);
	void SetCellVisibility(bool IsVisible_0, bool* Result);
	void SetCellFullyConnected(bool IsConnected);
	void AreAllInputsPowered(bool* Result);
	void IsCellFocusable(bool* Result);
	void TrySetQueuedConnectedCell(class UCOMP_WirePuzzle_Cell_Base_C* ConnectToCell, bool* Result);
	void TryClearQueuedConnectedCell(bool* Result);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"COMP_WirePuzzle_Cell_Base_C">();
	}
	static class UCOMP_WirePuzzle_Cell_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCOMP_WirePuzzle_Cell_Base_C>();
	}
};
static_assert(alignof(UCOMP_WirePuzzle_Cell_Base_C) == 0x000010, "Wrong alignment on UCOMP_WirePuzzle_Cell_Base_C");
static_assert(sizeof(UCOMP_WirePuzzle_Cell_Base_C) == 0x000790, "Wrong size on UCOMP_WirePuzzle_Cell_Base_C");
static_assert(offsetof(UCOMP_WirePuzzle_Cell_Base_C, UberGraphFrame) == 0x0004E8, "Member 'UCOMP_WirePuzzle_Cell_Base_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UCOMP_WirePuzzle_Cell_Base_C, WirePuzzle) == 0x0004F0, "Member 'UCOMP_WirePuzzle_Cell_Base_C::WirePuzzle' has a wrong offset!");
static_assert(offsetof(UCOMP_WirePuzzle_Cell_Base_C, IsCellMirrored) == 0x0004F8, "Member 'UCOMP_WirePuzzle_Cell_Base_C::IsCellMirrored' has a wrong offset!");
static_assert(offsetof(UCOMP_WirePuzzle_Cell_Base_C, IsAlternate) == 0x0004F9, "Member 'UCOMP_WirePuzzle_Cell_Base_C::IsAlternate' has a wrong offset!");
static_assert(offsetof(UCOMP_WirePuzzle_Cell_Base_C, CellRotations) == 0x0004FC, "Member 'UCOMP_WirePuzzle_Cell_Base_C::CellRotations' has a wrong offset!");
static_assert(offsetof(UCOMP_WirePuzzle_Cell_Base_C, CellTypeIndex) == 0x000500, "Member 'UCOMP_WirePuzzle_Cell_Base_C::CellTypeIndex' has a wrong offset!");
static_assert(offsetof(UCOMP_WirePuzzle_Cell_Base_C, InputSockets) == 0x000508, "Member 'UCOMP_WirePuzzle_Cell_Base_C::InputSockets' has a wrong offset!");
static_assert(offsetof(UCOMP_WirePuzzle_Cell_Base_C, OutputSockets) == 0x000518, "Member 'UCOMP_WirePuzzle_Cell_Base_C::OutputSockets' has a wrong offset!");
static_assert(offsetof(UCOMP_WirePuzzle_Cell_Base_C, ThroughputSockets) == 0x000528, "Member 'UCOMP_WirePuzzle_Cell_Base_C::ThroughputSockets' has a wrong offset!");
static_assert(offsetof(UCOMP_WirePuzzle_Cell_Base_C, InitialEnabledOutputSockets) == 0x000538, "Member 'UCOMP_WirePuzzle_Cell_Base_C::InitialEnabledOutputSockets' has a wrong offset!");
static_assert(offsetof(UCOMP_WirePuzzle_Cell_Base_C, CellType) == 0x000548, "Member 'UCOMP_WirePuzzle_Cell_Base_C::CellType' has a wrong offset!");
static_assert(offsetof(UCOMP_WirePuzzle_Cell_Base_C, TraceCurrentProgAndTargetProg) == 0x000550, "Member 'UCOMP_WirePuzzle_Cell_Base_C::TraceCurrentProgAndTargetProg' has a wrong offset!");
static_assert(offsetof(UCOMP_WirePuzzle_Cell_Base_C, TraceCurrentFadeAndTargetFade) == 0x0005A0, "Member 'UCOMP_WirePuzzle_Cell_Base_C::TraceCurrentFadeAndTargetFade' has a wrong offset!");
static_assert(offsetof(UCOMP_WirePuzzle_Cell_Base_C, TracePowerOriginSocket) == 0x0005F0, "Member 'UCOMP_WirePuzzle_Cell_Base_C::TracePowerOriginSocket' has a wrong offset!");
static_assert(offsetof(UCOMP_WirePuzzle_Cell_Base_C, SpecialCellTypeMesh) == 0x000640, "Member 'UCOMP_WirePuzzle_Cell_Base_C::SpecialCellTypeMesh' has a wrong offset!");
static_assert(offsetof(UCOMP_WirePuzzle_Cell_Base_C, TracePowerLevel) == 0x000648, "Member 'UCOMP_WirePuzzle_Cell_Base_C::TracePowerLevel' has a wrong offset!");
static_assert(offsetof(UCOMP_WirePuzzle_Cell_Base_C, TraceUVGroupIndex) == 0x000698, "Member 'UCOMP_WirePuzzle_Cell_Base_C::TraceUVGroupIndex' has a wrong offset!");
static_assert(offsetof(UCOMP_WirePuzzle_Cell_Base_C, IsTraceForward) == 0x0006E8, "Member 'UCOMP_WirePuzzle_Cell_Base_C::IsTraceForward' has a wrong offset!");
static_assert(offsetof(UCOMP_WirePuzzle_Cell_Base_C, IsFullyConnected) == 0x000738, "Member 'UCOMP_WirePuzzle_Cell_Base_C::IsFullyConnected' has a wrong offset!");
static_assert(offsetof(UCOMP_WirePuzzle_Cell_Base_C, ConnectedCell) == 0x000740, "Member 'UCOMP_WirePuzzle_Cell_Base_C::ConnectedCell' has a wrong offset!");
static_assert(offsetof(UCOMP_WirePuzzle_Cell_Base_C, QueuedConnectedCell) == 0x000748, "Member 'UCOMP_WirePuzzle_Cell_Base_C::QueuedConnectedCell' has a wrong offset!");
static_assert(offsetof(UCOMP_WirePuzzle_Cell_Base_C, SinglePowerText) == 0x000750, "Member 'UCOMP_WirePuzzle_Cell_Base_C::SinglePowerText' has a wrong offset!");
static_assert(offsetof(UCOMP_WirePuzzle_Cell_Base_C, DoublePowerText) == 0x000768, "Member 'UCOMP_WirePuzzle_Cell_Base_C::DoublePowerText' has a wrong offset!");
static_assert(offsetof(UCOMP_WirePuzzle_Cell_Base_C, SourceCellToBeConnected) == 0x000780, "Member 'UCOMP_WirePuzzle_Cell_Base_C::SourceCellToBeConnected' has a wrong offset!");

}

