#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MOVECONTROL_DisorientedMove

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "MOVECONTROL_Base_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass MOVECONTROL_DisorientedMove.MOVECONTROL_DisorientedMove_C
// 0x0018 (0x00B0 - 0x0098)
class UMOVECONTROL_DisorientedMove_C final : public UMOVECONTROL_Base_C
{
public:
	float                                         DisorientationAmount;                              // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              DisorientationSigns;                               // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              LastDisorientationVector;                          // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              DisorientationDeviationVector;                     // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void InitializeMoveControl(class APAWN_Hacker_Simple_C* Player_0, float GameTime, const struct FSTRUCT_MoveControlParams& InitialControlParams, bool* Result);
	void UpdateMoveControl(const struct FVector2D& MoveInput, const struct FVector2D& LookInput, const struct FSTRUCT_MoveControlParams& ControlParams, TArray<float>& ActionInputValues, float MoveInputScale, float Delta_Time, bool* ShouldExpire);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"MOVECONTROL_DisorientedMove_C">();
	}
	static class UMOVECONTROL_DisorientedMove_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMOVECONTROL_DisorientedMove_C>();
	}
};
static_assert(alignof(UMOVECONTROL_DisorientedMove_C) == 0x000008, "Wrong alignment on UMOVECONTROL_DisorientedMove_C");
static_assert(sizeof(UMOVECONTROL_DisorientedMove_C) == 0x0000B0, "Wrong size on UMOVECONTROL_DisorientedMove_C");
static_assert(offsetof(UMOVECONTROL_DisorientedMove_C, DisorientationAmount) == 0x000094, "Member 'UMOVECONTROL_DisorientedMove_C::DisorientationAmount' has a wrong offset!");
static_assert(offsetof(UMOVECONTROL_DisorientedMove_C, DisorientationSigns) == 0x000098, "Member 'UMOVECONTROL_DisorientedMove_C::DisorientationSigns' has a wrong offset!");
static_assert(offsetof(UMOVECONTROL_DisorientedMove_C, LastDisorientationVector) == 0x0000A0, "Member 'UMOVECONTROL_DisorientedMove_C::LastDisorientationVector' has a wrong offset!");
static_assert(offsetof(UMOVECONTROL_DisorientedMove_C, DisorientationDeviationVector) == 0x0000A8, "Member 'UMOVECONTROL_DisorientedMove_C::DisorientationDeviationVector' has a wrong offset!");

}

