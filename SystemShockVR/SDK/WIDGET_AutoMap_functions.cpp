#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WIDGET_AutoMap

#include "Basic.hpp"

#include "WIDGET_AutoMap_classes.hpp"
#include "WIDGET_AutoMap_parameters.hpp"


namespace SDK
{

// Function WIDGET_AutoMap.WIDGET_AutoMap_C.ExecuteUbergraph_WIDGET_AutoMap
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWIDGET_AutoMap_C::ExecuteUbergraph_WIDGET_AutoMap(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_AutoMap_C", "ExecuteUbergraph_WIDGET_AutoMap");

	Params::WIDGET_AutoMap_C_ExecuteUbergraph_WIDGET_AutoMap Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WIDGET_AutoMap.WIDGET_AutoMap_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UWIDGET_AutoMap_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_AutoMap_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WIDGET_AutoMap.WIDGET_AutoMap_C.Tick
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWIDGET_AutoMap_C::Tick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_AutoMap_C", "Tick");

	Params::WIDGET_AutoMap_C_Tick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WIDGET_AutoMap.WIDGET_AutoMap_C.ReceiveMouseZoomInput
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   ZoomDelta                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWIDGET_AutoMap_C::ReceiveMouseZoomInput(float ZoomDelta)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_AutoMap_C", "ReceiveMouseZoomInput");

	Params::WIDGET_AutoMap_C_ReceiveMouseZoomInput Parms{};

	Parms.ZoomDelta = ZoomDelta;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WIDGET_AutoMap.WIDGET_AutoMap_C.UpdateAutoMapMousePanning
// (Public, BlueprintCallable, BlueprintEvent)

void UWIDGET_AutoMap_C::UpdateAutoMapMousePanning()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_AutoMap_C", "UpdateAutoMapMousePanning");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WIDGET_AutoMap.WIDGET_AutoMap_C.ReceiveGamepadZoomInput
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ZoomIn                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWIDGET_AutoMap_C::ReceiveGamepadZoomInput(bool ZoomIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_AutoMap_C", "ReceiveGamepadZoomInput");

	Params::WIDGET_AutoMap_C_ReceiveGamepadZoomInput Parms{};

	Parms.ZoomIn = ZoomIn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WIDGET_AutoMap.WIDGET_AutoMap_C.UpdateAutoMapMouseZoom
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWIDGET_AutoMap_C::UpdateAutoMapMouseZoom(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_AutoMap_C", "UpdateAutoMapMouseZoom");

	Params::WIDGET_AutoMap_C_UpdateAutoMapMouseZoom Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WIDGET_AutoMap.WIDGET_AutoMap_C.InitializeAutoMap
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWIDGET_PlayerHUD_C*              HUD                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWIDGET_AutoMap_C::InitializeAutoMap(class UWIDGET_PlayerHUD_C* HUD)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_AutoMap_C", "InitializeAutoMap");

	Params::WIDGET_AutoMap_C_InitializeAutoMap Parms{};

	Parms.HUD = HUD;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WIDGET_AutoMap.WIDGET_AutoMap_C.SetAutoMapVisibility
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visibility_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWIDGET_AutoMap_C::SetAutoMapVisibility(bool Visibility_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_AutoMap_C", "SetAutoMapVisibility");

	Params::WIDGET_AutoMap_C_SetAutoMapVisibility Parms{};

	Parms.Visibility_0 = Visibility_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WIDGET_AutoMap.WIDGET_AutoMap_C.GetCaptureComponent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class USceneCaptureComponent2D*         CaptureComponent                                       (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWIDGET_AutoMap_C::GetCaptureComponent(class USceneCaptureComponent2D** CaptureComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_AutoMap_C", "GetCaptureComponent");

	Params::WIDGET_AutoMap_C_GetCaptureComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CaptureComponent != nullptr)
		*CaptureComponent = Parms.CaptureComponent;
}


// Function WIDGET_AutoMap.WIDGET_AutoMap_C.EVENT_OnMouseDown
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UWIDGET_AutoMap_C::EVENT_OnMouseDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_AutoMap_C", "EVENT_OnMouseDown");

	Params::WIDGET_AutoMap_C_EVENT_OnMouseDown Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function WIDGET_AutoMap.WIDGET_AutoMap_C.EVENT_OnMouseUp
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UWIDGET_AutoMap_C::EVENT_OnMouseUp(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_AutoMap_C", "EVENT_OnMouseUp");

	Params::WIDGET_AutoMap_C_EVENT_OnMouseUp Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function WIDGET_AutoMap.WIDGET_AutoMap_C.EVENT_OnDragRegionMouseMove
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UWIDGET_AutoMap_C::EVENT_OnDragRegionMouseMove(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_AutoMap_C", "EVENT_OnDragRegionMouseMove");

	Params::WIDGET_AutoMap_C_EVENT_OnDragRegionMouseMove Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function WIDGET_AutoMap.WIDGET_AutoMap_C.ResetMouseDetectorSize
// (Public, BlueprintCallable, BlueprintEvent)

void UWIDGET_AutoMap_C::ResetMouseDetectorSize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_AutoMap_C", "ResetMouseDetectorSize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WIDGET_AutoMap.WIDGET_AutoMap_C.EVENT_OnAutoMapMouseEnter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UWIDGET_AutoMap_C::EVENT_OnAutoMapMouseEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_AutoMap_C", "EVENT_OnAutoMapMouseEnter");

	Params::WIDGET_AutoMap_C_EVENT_OnAutoMapMouseEnter Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WIDGET_AutoMap.WIDGET_AutoMap_C.EVENT_OnAutoMapMouseLeave
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPointerEvent                    MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UWIDGET_AutoMap_C::EVENT_OnAutoMapMouseLeave(const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_AutoMap_C", "EVENT_OnAutoMapMouseLeave");

	Params::WIDGET_AutoMap_C_EVENT_OnAutoMapMouseLeave Parms{};

	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WIDGET_AutoMap.WIDGET_AutoMap_C.UpdateMapRegionPopup
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D                        CursorOffsetOnWidget                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWIDGET_AutoMap_C::UpdateMapRegionPopup(const struct FVector2D& CursorOffsetOnWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_AutoMap_C", "UpdateMapRegionPopup");

	Params::WIDGET_AutoMap_C_UpdateMapRegionPopup Parms{};

	Parms.CursorOffsetOnWidget = std::move(CursorOffsetOnWidget);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WIDGET_AutoMap.WIDGET_AutoMap_C.IsScannerEnabled
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWIDGET_AutoMap_C::IsScannerEnabled(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_AutoMap_C", "IsScannerEnabled");

	Params::WIDGET_AutoMap_C_IsScannerEnabled Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function WIDGET_AutoMap.WIDGET_AutoMap_C.UpdateMapRegionVisibility
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Show                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWIDGET_AutoMap_C::UpdateMapRegionVisibility(bool Show)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_AutoMap_C", "UpdateMapRegionVisibility");

	Params::WIDGET_AutoMap_C_UpdateMapRegionVisibility Parms{};

	Parms.Show = Show;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WIDGET_AutoMap.WIDGET_AutoMap_C.ChangeCursorMode
// (Public, BlueprintCallable, BlueprintEvent)

void UWIDGET_AutoMap_C::ChangeCursorMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_AutoMap_C", "ChangeCursorMode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WIDGET_AutoMap.WIDGET_AutoMap_C.GetTextureCoordsFromScreenPoint
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D                        ScreenPosition                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    EntireViewport                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ValidCoords                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector2D                        TexCoords                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWIDGET_AutoMap_C::GetTextureCoordsFromScreenPoint(const struct FVector2D& ScreenPosition, bool EntireViewport, bool* ValidCoords, struct FVector2D* TexCoords)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_AutoMap_C", "GetTextureCoordsFromScreenPoint");

	Params::WIDGET_AutoMap_C_GetTextureCoordsFromScreenPoint Parms{};

	Parms.ScreenPosition = std::move(ScreenPosition);
	Parms.EntireViewport = EntireViewport;

	UObject::ProcessEvent(Func, &Parms);

	if (ValidCoords != nullptr)
		*ValidCoords = Parms.ValidCoords;

	if (TexCoords != nullptr)
		*TexCoords = std::move(Parms.TexCoords);
}


// Function WIDGET_AutoMap.WIDGET_AutoMap_C.GetWorldLocationFromTextureCoords
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector2D                        TexCoords                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          WorldLocation                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWIDGET_AutoMap_C::GetWorldLocationFromTextureCoords(const struct FVector2D& TexCoords, struct FVector* WorldLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_AutoMap_C", "GetWorldLocationFromTextureCoords");

	Params::WIDGET_AutoMap_C_GetWorldLocationFromTextureCoords Parms{};

	Parms.TexCoords = std::move(TexCoords);

	UObject::ProcessEvent(Func, &Parms);

	if (WorldLocation != nullptr)
		*WorldLocation = std::move(Parms.WorldLocation);
}


// Function WIDGET_AutoMap.WIDGET_AutoMap_C.UpdateMapCrosshairs
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D                        CursorScreenPosition                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWIDGET_AutoMap_C::UpdateMapCrosshairs(const struct FVector2D& CursorScreenPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_AutoMap_C", "UpdateMapCrosshairs");

	Params::WIDGET_AutoMap_C_UpdateMapCrosshairs Parms{};

	Parms.CursorScreenPosition = std::move(CursorScreenPosition);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WIDGET_AutoMap.WIDGET_AutoMap_C.HideMapCrosshairs
// (Public, BlueprintCallable, BlueprintEvent)

void UWIDGET_AutoMap_C::HideMapCrosshairs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_AutoMap_C", "HideMapCrosshairs");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WIDGET_AutoMap.WIDGET_AutoMap_C.UpdateAutoMapMousePanDrift
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWIDGET_AutoMap_C::UpdateAutoMapMousePanDrift(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_AutoMap_C", "UpdateAutoMapMousePanDrift");

	Params::WIDGET_AutoMap_C_UpdateAutoMapMousePanDrift Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WIDGET_AutoMap.WIDGET_AutoMap_C.UpdateAutoMapGamepadPanning
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWIDGET_AutoMap_C::UpdateAutoMapGamepadPanning(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_AutoMap_C", "UpdateAutoMapGamepadPanning");

	Params::WIDGET_AutoMap_C_UpdateAutoMapGamepadPanning Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WIDGET_AutoMap.WIDGET_AutoMap_C.PanCameraUsingTextureCoordinates
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D                        SourceTexCoord                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        TargetTexCoord                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWIDGET_AutoMap_C::PanCameraUsingTextureCoordinates(const struct FVector2D& SourceTexCoord, const struct FVector2D& TargetTexCoord)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_AutoMap_C", "PanCameraUsingTextureCoordinates");

	Params::WIDGET_AutoMap_C_PanCameraUsingTextureCoordinates Parms{};

	Parms.SourceTexCoord = std::move(SourceTexCoord);
	Parms.TargetTexCoord = std::move(TargetTexCoord);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WIDGET_AutoMap.WIDGET_AutoMap_C.CaptureAutomapScene
// (Protected, BlueprintCallable, BlueprintEvent)

void UWIDGET_AutoMap_C::CaptureAutomapScene()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_AutoMap_C", "CaptureAutomapScene");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WIDGET_AutoMap.WIDGET_AutoMap_C.OnAutoMapVisibleAndActive
// (Public, BlueprintCallable, BlueprintEvent)

void UWIDGET_AutoMap_C::OnAutoMapVisibleAndActive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_AutoMap_C", "OnAutoMapVisibleAndActive");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WIDGET_AutoMap.WIDGET_AutoMap_C.UpdateMapGrid
// (Public, BlueprintCallable, BlueprintEvent)

void UWIDGET_AutoMap_C::UpdateMapGrid()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_AutoMap_C", "UpdateMapGrid");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WIDGET_AutoMap.WIDGET_AutoMap_C.GetTextureCoordsFromWorldLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          WorldLocation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ScaleByVisibleHeight                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector2D                        TexCoords                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWIDGET_AutoMap_C::GetTextureCoordsFromWorldLocation(const struct FVector& WorldLocation, bool ScaleByVisibleHeight, struct FVector2D* TexCoords)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_AutoMap_C", "GetTextureCoordsFromWorldLocation");

	Params::WIDGET_AutoMap_C_GetTextureCoordsFromWorldLocation Parms{};

	Parms.WorldLocation = std::move(WorldLocation);
	Parms.ScaleByVisibleHeight = ScaleByVisibleHeight;

	UObject::ProcessEvent(Func, &Parms);

	if (TexCoords != nullptr)
		*TexCoords = std::move(Parms.TexCoords);
}


// Function WIDGET_AutoMap.WIDGET_AutoMap_C.GetMapCornerWorldLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ScaleByVisibleHeight                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          CornerLocation                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWIDGET_AutoMap_C::GetMapCornerWorldLocation(bool ScaleByVisibleHeight, struct FVector* CornerLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_AutoMap_C", "GetMapCornerWorldLocation");

	Params::WIDGET_AutoMap_C_GetMapCornerWorldLocation Parms{};

	Parms.ScaleByVisibleHeight = ScaleByVisibleHeight;

	UObject::ProcessEvent(Func, &Parms);

	if (CornerLocation != nullptr)
		*CornerLocation = std::move(Parms.CornerLocation);
}


// Function WIDGET_AutoMap.WIDGET_AutoMap_C.GetBestRegionLabelOffset
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D                        CursorOffsetOnWidget                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        Alignment                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        Offset                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWIDGET_AutoMap_C::GetBestRegionLabelOffset(const struct FVector2D& CursorOffsetOnWidget, struct FVector2D* Alignment, struct FVector2D* Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_AutoMap_C", "GetBestRegionLabelOffset");

	Params::WIDGET_AutoMap_C_GetBestRegionLabelOffset Parms{};

	Parms.CursorOffsetOnWidget = std::move(CursorOffsetOnWidget);

	UObject::ProcessEvent(Func, &Parms);

	if (Alignment != nullptr)
		*Alignment = std::move(Parms.Alignment);

	if (Offset != nullptr)
		*Offset = std::move(Parms.Offset);
}


// Function WIDGET_AutoMap.WIDGET_AutoMap_C.SetAutomapLevel
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             LevelName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWIDGET_AutoMap_C::SetAutomapLevel(class FName LevelName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_AutoMap_C", "SetAutomapLevel");

	Params::WIDGET_AutoMap_C_SetAutomapLevel Parms{};

	Parms.LevelName = LevelName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WIDGET_AutoMap.WIDGET_AutoMap_C.DisplayNameToLevelName
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FText                             DisplayName                                            (BlueprintVisible, BlueprintReadOnly, Parm)
// class FName                             LevelName                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWIDGET_AutoMap_C::DisplayNameToLevelName(const class FText& DisplayName, class FName* LevelName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_AutoMap_C", "DisplayNameToLevelName");

	Params::WIDGET_AutoMap_C_DisplayNameToLevelName Parms{};

	Parms.DisplayName = std::move(DisplayName);

	UObject::ProcessEvent(Func, &Parms);

	if (LevelName != nullptr)
		*LevelName = Parms.LevelName;
}


// Function WIDGET_AutoMap.WIDGET_AutoMap_C.CenterCaptureCameraOnPlayer
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UWIDGET_AutoMap_C::CenterCaptureCameraOnPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_AutoMap_C", "CenterCaptureCameraOnPlayer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WIDGET_AutoMap.WIDGET_AutoMap_C.SetListeningForWaypointInput
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsAddingWaypoint                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWIDGET_AutoMap_C::SetListeningForWaypointInput(bool IsAddingWaypoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_AutoMap_C", "SetListeningForWaypointInput");

	Params::WIDGET_AutoMap_C_SetListeningForWaypointInput Parms{};

	Parms.IsAddingWaypoint = IsAddingWaypoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WIDGET_AutoMap.WIDGET_AutoMap_C.GetWorldPositionFromMousePosition
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D                        ScreenPosition                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          WorldLocation                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWIDGET_AutoMap_C::GetWorldPositionFromMousePosition(const struct FVector2D& ScreenPosition, struct FVector* WorldLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_AutoMap_C", "GetWorldPositionFromMousePosition");

	Params::WIDGET_AutoMap_C_GetWorldPositionFromMousePosition Parms{};

	Parms.ScreenPosition = std::move(ScreenPosition);

	UObject::ProcessEvent(Func, &Parms);

	if (WorldLocation != nullptr)
		*WorldLocation = std::move(Parms.WorldLocation);
}


// Function WIDGET_AutoMap.WIDGET_AutoMap_C.EVENT_WaypointRegion_OnMouseButtonDown
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UWIDGET_AutoMap_C::EVENT_WaypointRegion_OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_AutoMap_C", "EVENT_WaypointRegion_OnMouseButtonDown");

	Params::WIDGET_AutoMap_C_EVENT_WaypointRegion_OnMouseButtonDown Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function WIDGET_AutoMap.WIDGET_AutoMap_C.ResetPanningParams
// (Public, BlueprintCallable, BlueprintEvent)

void UWIDGET_AutoMap_C::ResetPanningParams()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_AutoMap_C", "ResetPanningParams");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WIDGET_AutoMap.WIDGET_AutoMap_C.RefreshCurrentMissionWaypointIcon
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void UWIDGET_AutoMap_C::RefreshCurrentMissionWaypointIcon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_AutoMap_C", "RefreshCurrentMissionWaypointIcon");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WIDGET_AutoMap.WIDGET_AutoMap_C.EVENT_OnStoryQuestStateChanged
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             StoryQuestName                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWIDGET_AutoMap_C::EVENT_OnStoryQuestStateChanged(class FName StoryQuestName, bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_AutoMap_C", "EVENT_OnStoryQuestStateChanged");

	Params::WIDGET_AutoMap_C_EVENT_OnStoryQuestStateChanged Parms{};

	Parms.StoryQuestName = StoryQuestName;
	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WIDGET_AutoMap.WIDGET_AutoMap_C.InvokeNavManager
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InputState                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// ENUM_MenuNavigationInput                InputType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWIDGET_AutoMap_C::InvokeNavManager(bool InputState, ENUM_MenuNavigationInput InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_AutoMap_C", "InvokeNavManager");

	Params::WIDGET_AutoMap_C_InvokeNavManager Parms{};

	Parms.InputState = InputState;
	Parms.InputType = InputType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WIDGET_AutoMap.WIDGET_AutoMap_C.SetEditWaypointIndex
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaypointIndex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWIDGET_AutoMap_C::SetEditWaypointIndex(int32 WaypointIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_AutoMap_C", "SetEditWaypointIndex");

	Params::WIDGET_AutoMap_C_SetEditWaypointIndex Parms{};

	Parms.WaypointIndex = WaypointIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WIDGET_AutoMap.WIDGET_AutoMap_C.OnWaypointTextChanged
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Text                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UWIDGET_AutoMap_C::OnWaypointTextChanged(const class FText& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_AutoMap_C", "OnWaypointTextChanged");

	Params::WIDGET_AutoMap_C_OnWaypointTextChanged Parms{};

	Parms.Text = std::move(Text);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WIDGET_AutoMap.WIDGET_AutoMap_C.OnWaypointMessageCommitted
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Text                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// ETextCommit                             CommitMethod                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWIDGET_AutoMap_C::OnWaypointMessageCommitted(const class FText& Text, ETextCommit CommitMethod)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WIDGET_AutoMap_C", "OnWaypointMessageCommitted");

	Params::WIDGET_AutoMap_C_OnWaypointMessageCommitted Parms{};

	Parms.Text = std::move(Text);
	Parms.CommitMethod = CommitMethod;

	UObject::ProcessEvent(Func, &Parms);
}

}

