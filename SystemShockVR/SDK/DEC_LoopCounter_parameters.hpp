#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DEC_LoopCounter

#include "Basic.hpp"

#include "AIModule_structs.hpp"


namespace SDK::Params
{

// Function DEC_LoopCounter.DEC_LoopCounter_C.ExecuteUbergraph_DEC_LoopCounter
// 0x0048 (0x0048 - 0x0000)
struct DEC_LoopCounter_C_ExecuteUbergraph_DEC_LoopCounter final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          K2Node_Event_OwnerController_1;                    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn_1;                     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBTNodeResult                                 K2Node_Event_NodeResult;                           // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          K2Node_Event_OwnerController;                      // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn;                       // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue;         // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_OwnerActor;                           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DEC_LoopCounter_C_ExecuteUbergraph_DEC_LoopCounter) == 0x000008, "Wrong alignment on DEC_LoopCounter_C_ExecuteUbergraph_DEC_LoopCounter");
static_assert(sizeof(DEC_LoopCounter_C_ExecuteUbergraph_DEC_LoopCounter) == 0x000048, "Wrong size on DEC_LoopCounter_C_ExecuteUbergraph_DEC_LoopCounter");
static_assert(offsetof(DEC_LoopCounter_C_ExecuteUbergraph_DEC_LoopCounter, EntryPoint) == 0x000000, "Member 'DEC_LoopCounter_C_ExecuteUbergraph_DEC_LoopCounter::EntryPoint' has a wrong offset!");
static_assert(offsetof(DEC_LoopCounter_C_ExecuteUbergraph_DEC_LoopCounter, K2Node_Event_OwnerController_1) == 0x000008, "Member 'DEC_LoopCounter_C_ExecuteUbergraph_DEC_LoopCounter::K2Node_Event_OwnerController_1' has a wrong offset!");
static_assert(offsetof(DEC_LoopCounter_C_ExecuteUbergraph_DEC_LoopCounter, K2Node_Event_ControlledPawn_1) == 0x000010, "Member 'DEC_LoopCounter_C_ExecuteUbergraph_DEC_LoopCounter::K2Node_Event_ControlledPawn_1' has a wrong offset!");
static_assert(offsetof(DEC_LoopCounter_C_ExecuteUbergraph_DEC_LoopCounter, K2Node_Event_NodeResult) == 0x000018, "Member 'DEC_LoopCounter_C_ExecuteUbergraph_DEC_LoopCounter::K2Node_Event_NodeResult' has a wrong offset!");
static_assert(offsetof(DEC_LoopCounter_C_ExecuteUbergraph_DEC_LoopCounter, K2Node_Event_OwnerController) == 0x000020, "Member 'DEC_LoopCounter_C_ExecuteUbergraph_DEC_LoopCounter::K2Node_Event_OwnerController' has a wrong offset!");
static_assert(offsetof(DEC_LoopCounter_C_ExecuteUbergraph_DEC_LoopCounter, K2Node_Event_ControlledPawn) == 0x000028, "Member 'DEC_LoopCounter_C_ExecuteUbergraph_DEC_LoopCounter::K2Node_Event_ControlledPawn' has a wrong offset!");
static_assert(offsetof(DEC_LoopCounter_C_ExecuteUbergraph_DEC_LoopCounter, Temp_int_Variable) == 0x000030, "Member 'DEC_LoopCounter_C_ExecuteUbergraph_DEC_LoopCounter::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(DEC_LoopCounter_C_ExecuteUbergraph_DEC_LoopCounter, CallFunc_Add_IntInt_ReturnValue) == 0x000034, "Member 'DEC_LoopCounter_C_ExecuteUbergraph_DEC_LoopCounter::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(DEC_LoopCounter_C_ExecuteUbergraph_DEC_LoopCounter, CallFunc_RandomIntegerInRange_ReturnValue) == 0x000038, "Member 'DEC_LoopCounter_C_ExecuteUbergraph_DEC_LoopCounter::CallFunc_RandomIntegerInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(DEC_LoopCounter_C_ExecuteUbergraph_DEC_LoopCounter, CallFunc_Add_IntInt_ReturnValue_1) == 0x00003C, "Member 'DEC_LoopCounter_C_ExecuteUbergraph_DEC_LoopCounter::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(DEC_LoopCounter_C_ExecuteUbergraph_DEC_LoopCounter, K2Node_Event_OwnerActor) == 0x000040, "Member 'DEC_LoopCounter_C_ExecuteUbergraph_DEC_LoopCounter::K2Node_Event_OwnerActor' has a wrong offset!");

// Function DEC_LoopCounter.DEC_LoopCounter_C.ReceiveObserverDeactivated
// 0x0008 (0x0008 - 0x0000)
struct DEC_LoopCounter_C_ReceiveObserverDeactivated final
{
public:
	class AActor*                                 OwnerActor;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DEC_LoopCounter_C_ReceiveObserverDeactivated) == 0x000008, "Wrong alignment on DEC_LoopCounter_C_ReceiveObserverDeactivated");
static_assert(sizeof(DEC_LoopCounter_C_ReceiveObserverDeactivated) == 0x000008, "Wrong size on DEC_LoopCounter_C_ReceiveObserverDeactivated");
static_assert(offsetof(DEC_LoopCounter_C_ReceiveObserverDeactivated, OwnerActor) == 0x000000, "Member 'DEC_LoopCounter_C_ReceiveObserverDeactivated::OwnerActor' has a wrong offset!");

// Function DEC_LoopCounter.DEC_LoopCounter_C.ReceiveObserverActivatedAI
// 0x0010 (0x0010 - 0x0000)
struct DEC_LoopCounter_C_ReceiveObserverActivatedAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DEC_LoopCounter_C_ReceiveObserverActivatedAI) == 0x000008, "Wrong alignment on DEC_LoopCounter_C_ReceiveObserverActivatedAI");
static_assert(sizeof(DEC_LoopCounter_C_ReceiveObserverActivatedAI) == 0x000010, "Wrong size on DEC_LoopCounter_C_ReceiveObserverActivatedAI");
static_assert(offsetof(DEC_LoopCounter_C_ReceiveObserverActivatedAI, OwnerController) == 0x000000, "Member 'DEC_LoopCounter_C_ReceiveObserverActivatedAI::OwnerController' has a wrong offset!");
static_assert(offsetof(DEC_LoopCounter_C_ReceiveObserverActivatedAI, ControlledPawn) == 0x000008, "Member 'DEC_LoopCounter_C_ReceiveObserverActivatedAI::ControlledPawn' has a wrong offset!");

// Function DEC_LoopCounter.DEC_LoopCounter_C.ReceiveExecutionFinishAI
// 0x0018 (0x0018 - 0x0000)
struct DEC_LoopCounter_C_ReceiveExecutionFinishAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBTNodeResult                                 NodeResult;                                        // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DEC_LoopCounter_C_ReceiveExecutionFinishAI) == 0x000008, "Wrong alignment on DEC_LoopCounter_C_ReceiveExecutionFinishAI");
static_assert(sizeof(DEC_LoopCounter_C_ReceiveExecutionFinishAI) == 0x000018, "Wrong size on DEC_LoopCounter_C_ReceiveExecutionFinishAI");
static_assert(offsetof(DEC_LoopCounter_C_ReceiveExecutionFinishAI, OwnerController) == 0x000000, "Member 'DEC_LoopCounter_C_ReceiveExecutionFinishAI::OwnerController' has a wrong offset!");
static_assert(offsetof(DEC_LoopCounter_C_ReceiveExecutionFinishAI, ControlledPawn) == 0x000008, "Member 'DEC_LoopCounter_C_ReceiveExecutionFinishAI::ControlledPawn' has a wrong offset!");
static_assert(offsetof(DEC_LoopCounter_C_ReceiveExecutionFinishAI, NodeResult) == 0x000010, "Member 'DEC_LoopCounter_C_ReceiveExecutionFinishAI::NodeResult' has a wrong offset!");

// Function DEC_LoopCounter.DEC_LoopCounter_C.PerformConditionCheckAI
// 0x0018 (0x0018 - 0x0000)
struct DEC_LoopCounter_C_PerformConditionCheckAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DEC_LoopCounter_C_PerformConditionCheckAI) == 0x000008, "Wrong alignment on DEC_LoopCounter_C_PerformConditionCheckAI");
static_assert(sizeof(DEC_LoopCounter_C_PerformConditionCheckAI) == 0x000018, "Wrong size on DEC_LoopCounter_C_PerformConditionCheckAI");
static_assert(offsetof(DEC_LoopCounter_C_PerformConditionCheckAI, OwnerController) == 0x000000, "Member 'DEC_LoopCounter_C_PerformConditionCheckAI::OwnerController' has a wrong offset!");
static_assert(offsetof(DEC_LoopCounter_C_PerformConditionCheckAI, ControlledPawn) == 0x000008, "Member 'DEC_LoopCounter_C_PerformConditionCheckAI::ControlledPawn' has a wrong offset!");
static_assert(offsetof(DEC_LoopCounter_C_PerformConditionCheckAI, ReturnValue) == 0x000010, "Member 'DEC_LoopCounter_C_PerformConditionCheckAI::ReturnValue' has a wrong offset!");
static_assert(offsetof(DEC_LoopCounter_C_PerformConditionCheckAI, CallFunc_Less_IntInt_ReturnValue) == 0x000011, "Member 'DEC_LoopCounter_C_PerformConditionCheckAI::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

}

