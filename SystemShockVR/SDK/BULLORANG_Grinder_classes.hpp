#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BULLORANG_Grinder

#include "Basic.hpp"

#include "BULLORANG_Base_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BULLORANG_Grinder.BULLORANG_Grinder_C
// 0x0060 (0x0380 - 0x0320)
class ABULLORANG_Grinder_C final : public ABULLORANG_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BULLORANG_Grinder_C;                // 0x0320(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          ReverseY;                                          // 0x0328(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_329[0x7];                                      // 0x0329(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           PathCurve;                                         // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PathStartTimestamp;                                // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxCycles;                                         // 0x033C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetLocation;                                    // 0x0340(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SourceLocation;                                    // 0x034C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CurveDirectionForward;                             // 0x0358(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CurveDirectionUp;                                  // 0x0364(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PathTravelDuration;                                // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurveScale;                                        // 0x0374(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CuirrentCycles;                                    // 0x0378(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxRange;                                          // 0x037C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BULLORANG_Grinder(int32 EntryPoint);
	void ReceiveBeginPlay();
	void UpdateBullorangMovement(float DeltaSeconds);
	void StartBullorangCycle();
	void ShouldDoAnotherCycle(bool* Result);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BULLORANG_Grinder_C">();
	}
	static class ABULLORANG_Grinder_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABULLORANG_Grinder_C>();
	}
};
static_assert(alignof(ABULLORANG_Grinder_C) == 0x000008, "Wrong alignment on ABULLORANG_Grinder_C");
static_assert(sizeof(ABULLORANG_Grinder_C) == 0x000380, "Wrong size on ABULLORANG_Grinder_C");
static_assert(offsetof(ABULLORANG_Grinder_C, UberGraphFrame_BULLORANG_Grinder_C) == 0x000320, "Member 'ABULLORANG_Grinder_C::UberGraphFrame_BULLORANG_Grinder_C' has a wrong offset!");
static_assert(offsetof(ABULLORANG_Grinder_C, ReverseY) == 0x000328, "Member 'ABULLORANG_Grinder_C::ReverseY' has a wrong offset!");
static_assert(offsetof(ABULLORANG_Grinder_C, PathCurve) == 0x000330, "Member 'ABULLORANG_Grinder_C::PathCurve' has a wrong offset!");
static_assert(offsetof(ABULLORANG_Grinder_C, PathStartTimestamp) == 0x000338, "Member 'ABULLORANG_Grinder_C::PathStartTimestamp' has a wrong offset!");
static_assert(offsetof(ABULLORANG_Grinder_C, MaxCycles) == 0x00033C, "Member 'ABULLORANG_Grinder_C::MaxCycles' has a wrong offset!");
static_assert(offsetof(ABULLORANG_Grinder_C, TargetLocation) == 0x000340, "Member 'ABULLORANG_Grinder_C::TargetLocation' has a wrong offset!");
static_assert(offsetof(ABULLORANG_Grinder_C, SourceLocation) == 0x00034C, "Member 'ABULLORANG_Grinder_C::SourceLocation' has a wrong offset!");
static_assert(offsetof(ABULLORANG_Grinder_C, CurveDirectionForward) == 0x000358, "Member 'ABULLORANG_Grinder_C::CurveDirectionForward' has a wrong offset!");
static_assert(offsetof(ABULLORANG_Grinder_C, CurveDirectionUp) == 0x000364, "Member 'ABULLORANG_Grinder_C::CurveDirectionUp' has a wrong offset!");
static_assert(offsetof(ABULLORANG_Grinder_C, PathTravelDuration) == 0x000370, "Member 'ABULLORANG_Grinder_C::PathTravelDuration' has a wrong offset!");
static_assert(offsetof(ABULLORANG_Grinder_C, CurveScale) == 0x000374, "Member 'ABULLORANG_Grinder_C::CurveScale' has a wrong offset!");
static_assert(offsetof(ABULLORANG_Grinder_C, CuirrentCycles) == 0x000378, "Member 'ABULLORANG_Grinder_C::CuirrentCycles' has a wrong offset!");
static_assert(offsetof(ABULLORANG_Grinder_C, MaxRange) == 0x00037C, "Member 'ABULLORANG_Grinder_C::MaxRange' has a wrong offset!");

}

