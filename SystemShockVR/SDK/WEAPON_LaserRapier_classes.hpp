#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WEAPON_LaserRapier

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "ITEM_MeleeWeapon_Base_classes.hpp"
#include "Engine_structs.hpp"
#include "ENUM_LaserRapierColor_structs.hpp"
#include "AttributeSystem_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass WEAPON_LaserRapier.WEAPON_LaserRapier_C
// 0x0208 (0x0A48 - 0x0840)
class UWEAPON_LaserRapier_C final : public UITEM_MeleeWeapon_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_WEAPON_LaserRapier_C;               // 0x0840(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	ENUM_LaserRapierColor                         BeamColorType;                                     // 0x0848(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_849[0x7];                                      // 0x0849(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAttribModApplyData                    EnergyDrainMod;                                    // 0x0850(0x00A0)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UNiagaraComponent*                      WeaponEffectsComponent;                            // 0x08F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        IdleAudioComponent;                                // 0x08F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 ExtendFilamentMessage;                             // 0x0900(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FName                                   AudioSocketName;                                   // 0x0910(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasFilamentExtended;                               // 0x0918(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_919[0x3];                                      // 0x0919(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DefaultPowerLevel;                                 // 0x091C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentPowerLevel;                                 // 0x0920(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_924[0x4];                                      // 0x0924(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLinearColor>                   LaserColorTemplates;                               // 0x0928(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TSoftObjectPtr<class USoundCue>               ResumeSoundCue;                                    // 0x0938(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               ReduceSoundCue;                                    // 0x0960(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               LowPowerIdleSoundCue;                              // 0x0988(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundCue>               MedPowerIdleSoundcue;                              // 0x09B0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class USoundCue*                              CachedResumeSoundCue;                              // 0x09D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              CachedReduceSoundCue;                              // 0x09E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              CachedLowPowerIdleSoundCue;                        // 0x09E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              CachedMedPowerIdleSoundCue;                        // 0x09F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, int32>                      ColorThemeToTemplateMap;                           // 0x09F8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_WEAPON_LaserRapier(int32 EntryPoint);
	void StreamWeaponAssets();
	void OnLoaded_66FA7A1D4D28050AD28993A6D88E34C2(class UObject* Loaded);
	void OnLoaded_74CE337C44417AD258B229A6AA0B5EA3(class UObject* Loaded);
	void OnLoaded_E88F98A6428EA72C5A490C8D3B730228(class UObject* Loaded);
	void OnLoaded_AEF86ED142CC08E9EAAE26975007B18D(class UObject* Loaded);
	void OnStartedMeleeAttack(bool IsPowerSwing);
	void GetOwnerEnergy(int32* Energy);
	void HasEnoughEnergy(bool* Result);
	void OnWeaponBecameActivatable(class APAWN_SystemShockCharacter_C* Character, bool ShowImmediately);
	void DisableDamage(bool* Result);
	void UpdatePowerLevel(float PowerLevel, bool OnDraw);
	void EVENT_OnHolsterFinished();
	void ChangeMeleeEventBindings(bool Enable);
	void EVENT_OnEnergyChanged(float CurrValue, float LastValue, float MaxValue, EModApplyType ApplyType);
	void GenerateLaserBeamColorType();
	void GetLaserBeamColorType(ENUM_LaserRapierColor* Result);
	void GetLaserBeamColorValue(struct FLinearColor* Color);
	void CalcDamageAndArmorPenetration(float DamageScale, bool IsStrongSwing, class UAttribDamageType** DamageType, float* Damage, float* ArmorPenetration);
	void ForceUpdateIdleSound(float NewPowerLevel, bool OnDraw);
	void TryUpdateIdleSound(float NewPowerLevel, bool OnDraw);
	void TryFadeOutIdleSound();
	void TryToDrainEnergy(int32 EnergyToDrain, float* PercentageDrained);
	void SetLaserBeamColorType(ENUM_LaserRapierColor Color);
	void OnBecomeUnactivatable(bool* Result);
	void ReceiveAnimationMessage(const class FString& Message, bool* Result);
	void OnKilledCharacter(class APAWN_SystemShockCharacter_C* KilledCharacter);
	void IsSlicingAttack(bool* Result);
	void TryBeginReloading(bool* Result);
	void EVENT_OnImpactEffectsSpawned(class UObject* Object);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WEAPON_LaserRapier_C">();
	}
	static class UWEAPON_LaserRapier_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWEAPON_LaserRapier_C>();
	}
};
static_assert(alignof(UWEAPON_LaserRapier_C) == 0x000008, "Wrong alignment on UWEAPON_LaserRapier_C");
static_assert(sizeof(UWEAPON_LaserRapier_C) == 0x000A48, "Wrong size on UWEAPON_LaserRapier_C");
static_assert(offsetof(UWEAPON_LaserRapier_C, UberGraphFrame_WEAPON_LaserRapier_C) == 0x000840, "Member 'UWEAPON_LaserRapier_C::UberGraphFrame_WEAPON_LaserRapier_C' has a wrong offset!");
static_assert(offsetof(UWEAPON_LaserRapier_C, BeamColorType) == 0x000848, "Member 'UWEAPON_LaserRapier_C::BeamColorType' has a wrong offset!");
static_assert(offsetof(UWEAPON_LaserRapier_C, EnergyDrainMod) == 0x000850, "Member 'UWEAPON_LaserRapier_C::EnergyDrainMod' has a wrong offset!");
static_assert(offsetof(UWEAPON_LaserRapier_C, WeaponEffectsComponent) == 0x0008F0, "Member 'UWEAPON_LaserRapier_C::WeaponEffectsComponent' has a wrong offset!");
static_assert(offsetof(UWEAPON_LaserRapier_C, IdleAudioComponent) == 0x0008F8, "Member 'UWEAPON_LaserRapier_C::IdleAudioComponent' has a wrong offset!");
static_assert(offsetof(UWEAPON_LaserRapier_C, ExtendFilamentMessage) == 0x000900, "Member 'UWEAPON_LaserRapier_C::ExtendFilamentMessage' has a wrong offset!");
static_assert(offsetof(UWEAPON_LaserRapier_C, AudioSocketName) == 0x000910, "Member 'UWEAPON_LaserRapier_C::AudioSocketName' has a wrong offset!");
static_assert(offsetof(UWEAPON_LaserRapier_C, HasFilamentExtended) == 0x000918, "Member 'UWEAPON_LaserRapier_C::HasFilamentExtended' has a wrong offset!");
static_assert(offsetof(UWEAPON_LaserRapier_C, DefaultPowerLevel) == 0x00091C, "Member 'UWEAPON_LaserRapier_C::DefaultPowerLevel' has a wrong offset!");
static_assert(offsetof(UWEAPON_LaserRapier_C, CurrentPowerLevel) == 0x000920, "Member 'UWEAPON_LaserRapier_C::CurrentPowerLevel' has a wrong offset!");
static_assert(offsetof(UWEAPON_LaserRapier_C, LaserColorTemplates) == 0x000928, "Member 'UWEAPON_LaserRapier_C::LaserColorTemplates' has a wrong offset!");
static_assert(offsetof(UWEAPON_LaserRapier_C, ResumeSoundCue) == 0x000938, "Member 'UWEAPON_LaserRapier_C::ResumeSoundCue' has a wrong offset!");
static_assert(offsetof(UWEAPON_LaserRapier_C, ReduceSoundCue) == 0x000960, "Member 'UWEAPON_LaserRapier_C::ReduceSoundCue' has a wrong offset!");
static_assert(offsetof(UWEAPON_LaserRapier_C, LowPowerIdleSoundCue) == 0x000988, "Member 'UWEAPON_LaserRapier_C::LowPowerIdleSoundCue' has a wrong offset!");
static_assert(offsetof(UWEAPON_LaserRapier_C, MedPowerIdleSoundcue) == 0x0009B0, "Member 'UWEAPON_LaserRapier_C::MedPowerIdleSoundcue' has a wrong offset!");
static_assert(offsetof(UWEAPON_LaserRapier_C, CachedResumeSoundCue) == 0x0009D8, "Member 'UWEAPON_LaserRapier_C::CachedResumeSoundCue' has a wrong offset!");
static_assert(offsetof(UWEAPON_LaserRapier_C, CachedReduceSoundCue) == 0x0009E0, "Member 'UWEAPON_LaserRapier_C::CachedReduceSoundCue' has a wrong offset!");
static_assert(offsetof(UWEAPON_LaserRapier_C, CachedLowPowerIdleSoundCue) == 0x0009E8, "Member 'UWEAPON_LaserRapier_C::CachedLowPowerIdleSoundCue' has a wrong offset!");
static_assert(offsetof(UWEAPON_LaserRapier_C, CachedMedPowerIdleSoundCue) == 0x0009F0, "Member 'UWEAPON_LaserRapier_C::CachedMedPowerIdleSoundCue' has a wrong offset!");
static_assert(offsetof(UWEAPON_LaserRapier_C, ColorThemeToTemplateMap) == 0x0009F8, "Member 'UWEAPON_LaserRapier_C::ColorThemeToTemplateMap' has a wrong offset!");

}

