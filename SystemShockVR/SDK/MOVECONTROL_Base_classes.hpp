#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MOVECONTROL_Base

#include "Basic.hpp"

#include "STRUCT_MoveControlParams_structs.hpp"
#include "CoreGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass MOVECONTROL_Base.MOVECONTROL_Base_C
// 0x0070 (0x0098 - 0x0028)
#pragma pack(push, 0x1)
class alignas(0x08) UMOVECONTROL_Base_C : public UWorldObject
{
public:
	FMulticastInlineDelegateProperty_             OnExpire;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FSTRUCT_MoveControlParams              OutputParams;                                      // 0x0038(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_Hacker_Simple_C*                  Player;                                            // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CreationTimestamp;                                 // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_MoveControlParams              CreationControlParams;                             // 0x006C(0x0028)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void OnExpire__DelegateSignature(class UMOVECONTROL_Base_C* MoveControl);
	void InitializeMoveControl(class APAWN_Hacker_Simple_C* Player_0, float GameTime, const struct FSTRUCT_MoveControlParams& InitialControlParams, bool* Result);
	void UpdateMoveControl(const struct FVector2D& MoveInput, const struct FVector2D& LookInput, const struct FSTRUCT_MoveControlParams& ControlParams, TArray<float>& ActionInputValues, float MoveInputScale, float Delta_Time, bool* ShouldExpire);
	void ExpireMoveControl();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"MOVECONTROL_Base_C">();
	}
	static class UMOVECONTROL_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMOVECONTROL_Base_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(UMOVECONTROL_Base_C) == 0x000008, "Wrong alignment on UMOVECONTROL_Base_C");
static_assert(sizeof(UMOVECONTROL_Base_C) == 0x000098, "Wrong size on UMOVECONTROL_Base_C");
static_assert(offsetof(UMOVECONTROL_Base_C, OnExpire) == 0x000028, "Member 'UMOVECONTROL_Base_C::OnExpire' has a wrong offset!");
static_assert(offsetof(UMOVECONTROL_Base_C, OutputParams) == 0x000038, "Member 'UMOVECONTROL_Base_C::OutputParams' has a wrong offset!");
static_assert(offsetof(UMOVECONTROL_Base_C, Player) == 0x000060, "Member 'UMOVECONTROL_Base_C::Player' has a wrong offset!");
static_assert(offsetof(UMOVECONTROL_Base_C, CreationTimestamp) == 0x000068, "Member 'UMOVECONTROL_Base_C::CreationTimestamp' has a wrong offset!");
static_assert(offsetof(UMOVECONTROL_Base_C, CreationControlParams) == 0x00006C, "Member 'UMOVECONTROL_Base_C::CreationControlParams' has a wrong offset!");

}

