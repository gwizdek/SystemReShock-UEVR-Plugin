#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AlarmLight

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_AlarmLight.BP_AlarmLight_C.ExecuteUbergraph_BP_AlarmLight
// 0x0008 (0x0008 - 0x0000)
struct BP_AlarmLight_C_ExecuteUbergraph_BP_AlarmLight final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bVisibleState;          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AlarmLight_C_ExecuteUbergraph_BP_AlarmLight) == 0x000004, "Wrong alignment on BP_AlarmLight_C_ExecuteUbergraph_BP_AlarmLight");
static_assert(sizeof(BP_AlarmLight_C_ExecuteUbergraph_BP_AlarmLight) == 0x000008, "Wrong size on BP_AlarmLight_C_ExecuteUbergraph_BP_AlarmLight");
static_assert(offsetof(BP_AlarmLight_C_ExecuteUbergraph_BP_AlarmLight, EntryPoint) == 0x000000, "Member 'BP_AlarmLight_C_ExecuteUbergraph_BP_AlarmLight::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_AlarmLight_C_ExecuteUbergraph_BP_AlarmLight, K2Node_ComponentBoundEvent_bVisibleState) == 0x000004, "Member 'BP_AlarmLight_C_ExecuteUbergraph_BP_AlarmLight::K2Node_ComponentBoundEvent_bVisibleState' has a wrong offset!");

// Function BP_AlarmLight.BP_AlarmLight_C.BndEvt__BP_AlarmLight_COMP_VoxelCullable_K2Node_ComponentBoundEvent_2_CullableVisibilitySignature__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct BP_AlarmLight_C_BndEvt__BP_AlarmLight_COMP_VoxelCullable_K2Node_ComponentBoundEvent_2_CullableVisibilitySignature__DelegateSignature final
{
public:
	bool                                          bVisibleState;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AlarmLight_C_BndEvt__BP_AlarmLight_COMP_VoxelCullable_K2Node_ComponentBoundEvent_2_CullableVisibilitySignature__DelegateSignature) == 0x000001, "Wrong alignment on BP_AlarmLight_C_BndEvt__BP_AlarmLight_COMP_VoxelCullable_K2Node_ComponentBoundEvent_2_CullableVisibilitySignature__DelegateSignature");
static_assert(sizeof(BP_AlarmLight_C_BndEvt__BP_AlarmLight_COMP_VoxelCullable_K2Node_ComponentBoundEvent_2_CullableVisibilitySignature__DelegateSignature) == 0x000001, "Wrong size on BP_AlarmLight_C_BndEvt__BP_AlarmLight_COMP_VoxelCullable_K2Node_ComponentBoundEvent_2_CullableVisibilitySignature__DelegateSignature");
static_assert(offsetof(BP_AlarmLight_C_BndEvt__BP_AlarmLight_COMP_VoxelCullable_K2Node_ComponentBoundEvent_2_CullableVisibilitySignature__DelegateSignature, bVisibleState) == 0x000000, "Member 'BP_AlarmLight_C_BndEvt__BP_AlarmLight_COMP_VoxelCullable_K2Node_ComponentBoundEvent_2_CullableVisibilitySignature__DelegateSignature::bVisibleState' has a wrong offset!");

// Function BP_AlarmLight.BP_AlarmLight_C.UserConstructionScript
// 0x0001 (0x0001 - 0x0000)
struct BP_AlarmLight_C_UserConstructionScript final
{
public:
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AlarmLight_C_UserConstructionScript) == 0x000001, "Wrong alignment on BP_AlarmLight_C_UserConstructionScript");
static_assert(sizeof(BP_AlarmLight_C_UserConstructionScript) == 0x000001, "Wrong size on BP_AlarmLight_C_UserConstructionScript");
static_assert(offsetof(BP_AlarmLight_C_UserConstructionScript, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000000, "Member 'BP_AlarmLight_C_UserConstructionScript::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");

// Function BP_AlarmLight.BP_AlarmLight_C.InitializeAttributes
// 0x0014 (0x0014 - 0x0000)
struct BP_AlarmLight_C_InitializeAttributes final
{
public:
	TDelegate<void(float CurrValue, float LastValue)> K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor)
	float                                         CallFunc_GetAttribValue_ReturnValue;               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AlarmLight_C_InitializeAttributes) == 0x000004, "Wrong alignment on BP_AlarmLight_C_InitializeAttributes");
static_assert(sizeof(BP_AlarmLight_C_InitializeAttributes) == 0x000014, "Wrong size on BP_AlarmLight_C_InitializeAttributes");
static_assert(offsetof(BP_AlarmLight_C_InitializeAttributes, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'BP_AlarmLight_C_InitializeAttributes::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_AlarmLight_C_InitializeAttributes, CallFunc_GetAttribValue_ReturnValue) == 0x000010, "Member 'BP_AlarmLight_C_InitializeAttributes::CallFunc_GetAttribValue_ReturnValue' has a wrong offset!");

// Function BP_AlarmLight.BP_AlarmLight_C.UpdateEmissiveStrength
// 0x0018 (0x0018 - 0x0000)
struct BP_AlarmLight_C_UpdateEmissiveStrength final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EmissiveStrength;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAlarmActive_Result;                     // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue;             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AlarmLight_C_UpdateEmissiveStrength) == 0x000004, "Wrong alignment on BP_AlarmLight_C_UpdateEmissiveStrength");
static_assert(sizeof(BP_AlarmLight_C_UpdateEmissiveStrength) == 0x000018, "Wrong size on BP_AlarmLight_C_UpdateEmissiveStrength");
static_assert(offsetof(BP_AlarmLight_C_UpdateEmissiveStrength, Scale) == 0x000000, "Member 'BP_AlarmLight_C_UpdateEmissiveStrength::Scale' has a wrong offset!");
static_assert(offsetof(BP_AlarmLight_C_UpdateEmissiveStrength, EmissiveStrength) == 0x000004, "Member 'BP_AlarmLight_C_UpdateEmissiveStrength::EmissiveStrength' has a wrong offset!");
static_assert(offsetof(BP_AlarmLight_C_UpdateEmissiveStrength, CallFunc_IsAlarmActive_Result) == 0x000008, "Member 'BP_AlarmLight_C_UpdateEmissiveStrength::CallFunc_IsAlarmActive_Result' has a wrong offset!");
static_assert(offsetof(BP_AlarmLight_C_UpdateEmissiveStrength, CallFunc_Conv_BoolToFloat_ReturnValue) == 0x00000C, "Member 'BP_AlarmLight_C_UpdateEmissiveStrength::CallFunc_Conv_BoolToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AlarmLight_C_UpdateEmissiveStrength, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000010, "Member 'BP_AlarmLight_C_UpdateEmissiveStrength::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AlarmLight_C_UpdateEmissiveStrength, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000014, "Member 'BP_AlarmLight_C_UpdateEmissiveStrength::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function BP_AlarmLight.BP_AlarmLight_C.UpdateAlarmLightVisibility
// 0x0003 (0x0003 - 0x0000)
struct BP_AlarmLight_C_UpdateAlarmLightVisibility final
{
public:
	bool                                          VisibilityState;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAlarmActive_Result;                     // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AlarmLight_C_UpdateAlarmLightVisibility) == 0x000001, "Wrong alignment on BP_AlarmLight_C_UpdateAlarmLightVisibility");
static_assert(sizeof(BP_AlarmLight_C_UpdateAlarmLightVisibility) == 0x000003, "Wrong size on BP_AlarmLight_C_UpdateAlarmLightVisibility");
static_assert(offsetof(BP_AlarmLight_C_UpdateAlarmLightVisibility, VisibilityState) == 0x000000, "Member 'BP_AlarmLight_C_UpdateAlarmLightVisibility::VisibilityState' has a wrong offset!");
static_assert(offsetof(BP_AlarmLight_C_UpdateAlarmLightVisibility, CallFunc_IsAlarmActive_Result) == 0x000001, "Member 'BP_AlarmLight_C_UpdateAlarmLightVisibility::CallFunc_IsAlarmActive_Result' has a wrong offset!");
static_assert(offsetof(BP_AlarmLight_C_UpdateAlarmLightVisibility, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'BP_AlarmLight_C_UpdateAlarmLightVisibility::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_AlarmLight.BP_AlarmLight_C.EVENT_OnDisableAttribChanged
// 0x0010 (0x0010 - 0x0000)
struct BP_AlarmLight_C_EVENT_OnDisableAttribChanged final
{
public:
	float                                         CurrValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastValue;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AlarmLight_C_EVENT_OnDisableAttribChanged) == 0x000004, "Wrong alignment on BP_AlarmLight_C_EVENT_OnDisableAttribChanged");
static_assert(sizeof(BP_AlarmLight_C_EVENT_OnDisableAttribChanged) == 0x000010, "Wrong size on BP_AlarmLight_C_EVENT_OnDisableAttribChanged");
static_assert(offsetof(BP_AlarmLight_C_EVENT_OnDisableAttribChanged, CurrValue) == 0x000000, "Member 'BP_AlarmLight_C_EVENT_OnDisableAttribChanged::CurrValue' has a wrong offset!");
static_assert(offsetof(BP_AlarmLight_C_EVENT_OnDisableAttribChanged, LastValue) == 0x000004, "Member 'BP_AlarmLight_C_EVENT_OnDisableAttribChanged::LastValue' has a wrong offset!");
static_assert(offsetof(BP_AlarmLight_C_EVENT_OnDisableAttribChanged, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000008, "Member 'BP_AlarmLight_C_EVENT_OnDisableAttribChanged::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AlarmLight_C_EVENT_OnDisableAttribChanged, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00000C, "Member 'BP_AlarmLight_C_EVENT_OnDisableAttribChanged::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AlarmLight_C_EVENT_OnDisableAttribChanged, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00000D, "Member 'BP_AlarmLight_C_EVENT_OnDisableAttribChanged::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AlarmLight_C_EVENT_OnDisableAttribChanged, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x00000E, "Member 'BP_AlarmLight_C_EVENT_OnDisableAttribChanged::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AlarmLight_C_EVENT_OnDisableAttribChanged, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x00000F, "Member 'BP_AlarmLight_C_EVENT_OnDisableAttribChanged::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");

// Function BP_AlarmLight.BP_AlarmLight_C.IsAlarmFunctional
// 0x000C (0x000C - 0x0000)
struct BP_AlarmLight_C_IsAlarmFunctional final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetAttribValue_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AlarmLight_C_IsAlarmFunctional) == 0x000004, "Wrong alignment on BP_AlarmLight_C_IsAlarmFunctional");
static_assert(sizeof(BP_AlarmLight_C_IsAlarmFunctional) == 0x00000C, "Wrong size on BP_AlarmLight_C_IsAlarmFunctional");
static_assert(offsetof(BP_AlarmLight_C_IsAlarmFunctional, Result) == 0x000000, "Member 'BP_AlarmLight_C_IsAlarmFunctional::Result' has a wrong offset!");
static_assert(offsetof(BP_AlarmLight_C_IsAlarmFunctional, CallFunc_GetAttribValue_ReturnValue) == 0x000004, "Member 'BP_AlarmLight_C_IsAlarmFunctional::CallFunc_GetAttribValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AlarmLight_C_IsAlarmFunctional, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000008, "Member 'BP_AlarmLight_C_IsAlarmFunctional::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_AlarmLight.BP_AlarmLight_C.OnAlarmActivated
// 0x0008 (0x0008 - 0x0000)
struct BP_AlarmLight_C_OnAlarmActivated final
{
public:
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAlarmFunctional_Result;                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue;             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AlarmLight_C_OnAlarmActivated) == 0x000004, "Wrong alignment on BP_AlarmLight_C_OnAlarmActivated");
static_assert(sizeof(BP_AlarmLight_C_OnAlarmActivated) == 0x000008, "Wrong size on BP_AlarmLight_C_OnAlarmActivated");
static_assert(offsetof(BP_AlarmLight_C_OnAlarmActivated, CallFunc_IsVisible_ReturnValue) == 0x000000, "Member 'BP_AlarmLight_C_OnAlarmActivated::CallFunc_IsVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AlarmLight_C_OnAlarmActivated, CallFunc_IsAlarmFunctional_Result) == 0x000001, "Member 'BP_AlarmLight_C_OnAlarmActivated::CallFunc_IsAlarmFunctional_Result' has a wrong offset!");
static_assert(offsetof(BP_AlarmLight_C_OnAlarmActivated, CallFunc_Conv_BoolToFloat_ReturnValue) == 0x000004, "Member 'BP_AlarmLight_C_OnAlarmActivated::CallFunc_Conv_BoolToFloat_ReturnValue' has a wrong offset!");

// Function BP_AlarmLight.BP_AlarmLight_C.GetAlarmSpeakerPosition
// 0x0018 (0x0018 - 0x0000)
struct BP_AlarmLight_C_GetAlarmSpeakerPosition final
{
public:
	struct FVector                                Result;                                            // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AlarmLight_C_GetAlarmSpeakerPosition) == 0x000004, "Wrong alignment on BP_AlarmLight_C_GetAlarmSpeakerPosition");
static_assert(sizeof(BP_AlarmLight_C_GetAlarmSpeakerPosition) == 0x000018, "Wrong size on BP_AlarmLight_C_GetAlarmSpeakerPosition");
static_assert(offsetof(BP_AlarmLight_C_GetAlarmSpeakerPosition, Result) == 0x000000, "Member 'BP_AlarmLight_C_GetAlarmSpeakerPosition::Result' has a wrong offset!");
static_assert(offsetof(BP_AlarmLight_C_GetAlarmSpeakerPosition, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x00000C, "Member 'BP_AlarmLight_C_GetAlarmSpeakerPosition::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");

}

