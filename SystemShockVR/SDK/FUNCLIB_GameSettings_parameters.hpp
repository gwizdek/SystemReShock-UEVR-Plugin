#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FUNCLIB_GameSettings

#include "Basic.hpp"

#include "InputCore_structs.hpp"
#include "ENUM_GameDifficultyConfigCategory_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ENUM_InputCategory_structs.hpp"
#include "ENUM_GameDifficulty_structs.hpp"
#include "STRUCT_BoundInputActionPair_structs.hpp"
#include "Engine_structs.hpp"
#include "ENUM_PrimarySecondary_structs.hpp"


namespace SDK::Params
{

// Function FUNCLIB_GameSettings.FUNCLIB_GameSettings_C.GetBoundKey
// 0x00D8 (0x00D8 - 0x0000)
struct FUNCLIB_GameSettings_C_GetBoundKey final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_PrimarySecondary                         Rank;                                              // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FSTRUCT_BoundInputActionPair> KeyActionMap;                                      // 0x0010(0x0050)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UObject*                                __WorldContext;                                    // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   BoundKey;                                          // 0x0068(0x0018)(Parm, OutParm, HasGetValueTypeHash)
	ENUM_PrimarySecondary                         Temp_byte_Variable;                                // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_BoundInputActionPair           CallFunc_Map_Find_Value;                           // 0x0088(0x0030)(HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_Select_Default;                             // 0x00C0(0x0018)(HasGetValueTypeHash)
};
static_assert(alignof(FUNCLIB_GameSettings_C_GetBoundKey) == 0x000008, "Wrong alignment on FUNCLIB_GameSettings_C_GetBoundKey");
static_assert(sizeof(FUNCLIB_GameSettings_C_GetBoundKey) == 0x0000D8, "Wrong size on FUNCLIB_GameSettings_C_GetBoundKey");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetBoundKey, ActionName) == 0x000000, "Member 'FUNCLIB_GameSettings_C_GetBoundKey::ActionName' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetBoundKey, Rank) == 0x000008, "Member 'FUNCLIB_GameSettings_C_GetBoundKey::Rank' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetBoundKey, KeyActionMap) == 0x000010, "Member 'FUNCLIB_GameSettings_C_GetBoundKey::KeyActionMap' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetBoundKey, __WorldContext) == 0x000060, "Member 'FUNCLIB_GameSettings_C_GetBoundKey::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetBoundKey, BoundKey) == 0x000068, "Member 'FUNCLIB_GameSettings_C_GetBoundKey::BoundKey' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetBoundKey, Temp_byte_Variable) == 0x000080, "Member 'FUNCLIB_GameSettings_C_GetBoundKey::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetBoundKey, CallFunc_Map_Find_Value) == 0x000088, "Member 'FUNCLIB_GameSettings_C_GetBoundKey::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetBoundKey, CallFunc_Map_Find_ReturnValue) == 0x0000B8, "Member 'FUNCLIB_GameSettings_C_GetBoundKey::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetBoundKey, K2Node_Select_Default) == 0x0000C0, "Member 'FUNCLIB_GameSettings_C_GetBoundKey::K2Node_Select_Default' has a wrong offset!");

// Function FUNCLIB_GameSettings.FUNCLIB_GameSettings_C.GetBoundKeyForCurrentUser
// 0x0148 (0x0148 - 0x0000)
struct FUNCLIB_GameSettings_C_GetBoundKeyForCurrentUser final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_PrimarySecondary                         Rank;                                              // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   BoundKey;                                          // 0x0018(0x0018)(Parm, OutParm, HasGetValueTypeHash)
	TArray<struct FInputActionKeyMapping>         MappedKeys;                                        // 0x0030(0x0010)(Edit, BlueprintVisible)
	TMap<class FName, struct FSTRUCT_BoundInputActionPair> KeyActionPairMap;                                  // 0x0040(0x0050)(Edit, BlueprintVisible)
	class USAVE_Settings_C*                       ShockSettings;                                     // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsGamepadInputAction_Result;              // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetInputCategoryFromActionName_Found;     // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ENUM_InputCategory                            CallFunc_GetInputCategoryFromActionName_Result;    // 0x009A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9B[0x1];                                       // 0x009B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue_1;             // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UInputSettings*                         CallFunc_GetInputSettings_ReturnValue;             // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FInputActionKeyMapping>         CallFunc_GetActionMappingByName_OutMappings;       // 0x00B0(0x0010)(ReferenceParm)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Map_Length_ReturnValue;                   // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FSTRUCT_BoundInputActionPair> CallFunc_GetInputKeyMapForCategory_Result;         // 0x00D0(0x0050)()
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0124(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_125[0x3];                                      // 0x0125(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   CallFunc_GetBoundKey_BoundKey;                     // 0x0128(0x0018)(HasGetValueTypeHash)
	class USAVE_Settings_C*                       CallFunc_GetShockSettingsForCurrentUser_Settings;  // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FUNCLIB_GameSettings_C_GetBoundKeyForCurrentUser) == 0x000008, "Wrong alignment on FUNCLIB_GameSettings_C_GetBoundKeyForCurrentUser");
static_assert(sizeof(FUNCLIB_GameSettings_C_GetBoundKeyForCurrentUser) == 0x000148, "Wrong size on FUNCLIB_GameSettings_C_GetBoundKeyForCurrentUser");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetBoundKeyForCurrentUser, ActionName) == 0x000000, "Member 'FUNCLIB_GameSettings_C_GetBoundKeyForCurrentUser::ActionName' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetBoundKeyForCurrentUser, Rank) == 0x000008, "Member 'FUNCLIB_GameSettings_C_GetBoundKeyForCurrentUser::Rank' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetBoundKeyForCurrentUser, __WorldContext) == 0x000010, "Member 'FUNCLIB_GameSettings_C_GetBoundKeyForCurrentUser::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetBoundKeyForCurrentUser, BoundKey) == 0x000018, "Member 'FUNCLIB_GameSettings_C_GetBoundKeyForCurrentUser::BoundKey' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetBoundKeyForCurrentUser, MappedKeys) == 0x000030, "Member 'FUNCLIB_GameSettings_C_GetBoundKeyForCurrentUser::MappedKeys' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetBoundKeyForCurrentUser, KeyActionPairMap) == 0x000040, "Member 'FUNCLIB_GameSettings_C_GetBoundKeyForCurrentUser::KeyActionPairMap' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetBoundKeyForCurrentUser, ShockSettings) == 0x000090, "Member 'FUNCLIB_GameSettings_C_GetBoundKeyForCurrentUser::ShockSettings' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetBoundKeyForCurrentUser, CallFunc_IsGamepadInputAction_Result) == 0x000098, "Member 'FUNCLIB_GameSettings_C_GetBoundKeyForCurrentUser::CallFunc_IsGamepadInputAction_Result' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetBoundKeyForCurrentUser, CallFunc_GetInputCategoryFromActionName_Found) == 0x000099, "Member 'FUNCLIB_GameSettings_C_GetBoundKeyForCurrentUser::CallFunc_GetInputCategoryFromActionName_Found' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetBoundKeyForCurrentUser, CallFunc_GetInputCategoryFromActionName_Result) == 0x00009A, "Member 'FUNCLIB_GameSettings_C_GetBoundKeyForCurrentUser::CallFunc_GetInputCategoryFromActionName_Result' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetBoundKeyForCurrentUser, CallFunc_Conv_ByteToInt_ReturnValue) == 0x00009C, "Member 'FUNCLIB_GameSettings_C_GetBoundKeyForCurrentUser::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetBoundKeyForCurrentUser, CallFunc_Conv_ByteToInt_ReturnValue_1) == 0x0000A0, "Member 'FUNCLIB_GameSettings_C_GetBoundKeyForCurrentUser::CallFunc_Conv_ByteToInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetBoundKeyForCurrentUser, CallFunc_GetInputSettings_ReturnValue) == 0x0000A8, "Member 'FUNCLIB_GameSettings_C_GetBoundKeyForCurrentUser::CallFunc_GetInputSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetBoundKeyForCurrentUser, CallFunc_GetActionMappingByName_OutMappings) == 0x0000B0, "Member 'FUNCLIB_GameSettings_C_GetBoundKeyForCurrentUser::CallFunc_GetActionMappingByName_OutMappings' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetBoundKeyForCurrentUser, CallFunc_IsValid_ReturnValue) == 0x0000C0, "Member 'FUNCLIB_GameSettings_C_GetBoundKeyForCurrentUser::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetBoundKeyForCurrentUser, CallFunc_Map_Length_ReturnValue) == 0x0000C4, "Member 'FUNCLIB_GameSettings_C_GetBoundKeyForCurrentUser::CallFunc_Map_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetBoundKeyForCurrentUser, CallFunc_Greater_IntInt_ReturnValue) == 0x0000C8, "Member 'FUNCLIB_GameSettings_C_GetBoundKeyForCurrentUser::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetBoundKeyForCurrentUser, CallFunc_GetInputKeyMapForCategory_Result) == 0x0000D0, "Member 'FUNCLIB_GameSettings_C_GetBoundKeyForCurrentUser::CallFunc_GetInputKeyMapForCategory_Result' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetBoundKeyForCurrentUser, CallFunc_Array_Length_ReturnValue) == 0x000120, "Member 'FUNCLIB_GameSettings_C_GetBoundKeyForCurrentUser::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetBoundKeyForCurrentUser, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000124, "Member 'FUNCLIB_GameSettings_C_GetBoundKeyForCurrentUser::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetBoundKeyForCurrentUser, CallFunc_GetBoundKey_BoundKey) == 0x000128, "Member 'FUNCLIB_GameSettings_C_GetBoundKeyForCurrentUser::CallFunc_GetBoundKey_BoundKey' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetBoundKeyForCurrentUser, CallFunc_GetShockSettingsForCurrentUser_Settings) == 0x000140, "Member 'FUNCLIB_GameSettings_C_GetBoundKeyForCurrentUser::CallFunc_GetShockSettingsForCurrentUser_Settings' has a wrong offset!");

// Function FUNCLIB_GameSettings.FUNCLIB_GameSettings_C.IsValidKeyToBind
// 0x0058 (0x0058 - 0x0000)
struct FUNCLIB_GameSettings_C_IsValidKeyToBind final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKey>                           UnbindableKeys;                                    // 0x0028(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FKey>                           K2Node_MakeArray_Array;                            // 0x0038(0x0010)(ReferenceParm)
	bool                                          CallFunc_Key_IsGamepadKey_ReturnValue;             // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B[0x1];                                       // 0x004B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetGamepadButtonAtlasIndex_Index;         // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGamepadButtonAtlasIndex_Rotation;      // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FUNCLIB_GameSettings_C_IsValidKeyToBind) == 0x000008, "Wrong alignment on FUNCLIB_GameSettings_C_IsValidKeyToBind");
static_assert(sizeof(FUNCLIB_GameSettings_C_IsValidKeyToBind) == 0x000058, "Wrong size on FUNCLIB_GameSettings_C_IsValidKeyToBind");
static_assert(offsetof(FUNCLIB_GameSettings_C_IsValidKeyToBind, Key) == 0x000000, "Member 'FUNCLIB_GameSettings_C_IsValidKeyToBind::Key' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_IsValidKeyToBind, __WorldContext) == 0x000018, "Member 'FUNCLIB_GameSettings_C_IsValidKeyToBind::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_IsValidKeyToBind, Result) == 0x000020, "Member 'FUNCLIB_GameSettings_C_IsValidKeyToBind::Result' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_IsValidKeyToBind, UnbindableKeys) == 0x000028, "Member 'FUNCLIB_GameSettings_C_IsValidKeyToBind::UnbindableKeys' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_IsValidKeyToBind, K2Node_MakeArray_Array) == 0x000038, "Member 'FUNCLIB_GameSettings_C_IsValidKeyToBind::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_IsValidKeyToBind, CallFunc_Key_IsGamepadKey_ReturnValue) == 0x000048, "Member 'FUNCLIB_GameSettings_C_IsValidKeyToBind::CallFunc_Key_IsGamepadKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_IsValidKeyToBind, CallFunc_Array_Contains_ReturnValue) == 0x000049, "Member 'FUNCLIB_GameSettings_C_IsValidKeyToBind::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_IsValidKeyToBind, CallFunc_Not_PreBool_ReturnValue) == 0x00004A, "Member 'FUNCLIB_GameSettings_C_IsValidKeyToBind::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_IsValidKeyToBind, CallFunc_GetGamepadButtonAtlasIndex_Index) == 0x00004C, "Member 'FUNCLIB_GameSettings_C_IsValidKeyToBind::CallFunc_GetGamepadButtonAtlasIndex_Index' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_IsValidKeyToBind, CallFunc_GetGamepadButtonAtlasIndex_Rotation) == 0x000050, "Member 'FUNCLIB_GameSettings_C_IsValidKeyToBind::CallFunc_GetGamepadButtonAtlasIndex_Rotation' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_IsValidKeyToBind, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000054, "Member 'FUNCLIB_GameSettings_C_IsValidKeyToBind::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function FUNCLIB_GameSettings.FUNCLIB_GameSettings_C.SetKeyAction
// 0x01F0 (0x01F0 - 0x0000)
struct FUNCLIB_GameSettings_C_SetKeyAction final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   Key;                                               // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	ENUM_PrimarySecondary                         Rank;                                              // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FSTRUCT_BoundInputActionPair> KeyActionMap;                                      // 0x0028(0x0050)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UObject*                                __WorldContext;                                    // 0x0078(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0080(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_BoundInputActionPair           CurrentBoundKeyPair;                               // 0x0088(0x0030)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable;                              // 0x00B8(0x0018)(HasGetValueTypeHash)
	ENUM_PrimarySecondary                         Temp_byte_Variable;                                // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   Temp_struct_Variable_1;                            // 0x00D8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_Select_Default;                             // 0x00F0(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue;            // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_1;          // 0x0109(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x010A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10B[0x5];                                      // 0x010B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_BoundInputActionPair           CallFunc_Map_Find_Value;                           // 0x0110(0x0030)(HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ENUM_PrimarySecondary                         Temp_byte_Variable_1;                              // 0x0141(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_142[0x6];                                      // 0x0142(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_BoundInputActionPair           K2Node_MakeStruct_STRUCT_BoundInputActionPair;     // 0x0148(0x0030)(HasGetValueTypeHash)
	struct FKey                                   K2Node_Select_Default_1;                           // 0x0178(0x0018)(HasGetValueTypeHash)
	struct FSTRUCT_BoundInputActionPair           K2Node_MakeStruct_STRUCT_BoundInputActionPair_1;   // 0x0190(0x0030)(HasGetValueTypeHash)
	struct FSTRUCT_BoundInputActionPair           K2Node_MakeStruct_STRUCT_BoundInputActionPair_2;   // 0x01C0(0x0030)(HasGetValueTypeHash)
};
static_assert(alignof(FUNCLIB_GameSettings_C_SetKeyAction) == 0x000008, "Wrong alignment on FUNCLIB_GameSettings_C_SetKeyAction");
static_assert(sizeof(FUNCLIB_GameSettings_C_SetKeyAction) == 0x0001F0, "Wrong size on FUNCLIB_GameSettings_C_SetKeyAction");
static_assert(offsetof(FUNCLIB_GameSettings_C_SetKeyAction, ActionName) == 0x000000, "Member 'FUNCLIB_GameSettings_C_SetKeyAction::ActionName' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_SetKeyAction, Key) == 0x000008, "Member 'FUNCLIB_GameSettings_C_SetKeyAction::Key' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_SetKeyAction, Rank) == 0x000020, "Member 'FUNCLIB_GameSettings_C_SetKeyAction::Rank' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_SetKeyAction, KeyActionMap) == 0x000028, "Member 'FUNCLIB_GameSettings_C_SetKeyAction::KeyActionMap' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_SetKeyAction, __WorldContext) == 0x000078, "Member 'FUNCLIB_GameSettings_C_SetKeyAction::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_SetKeyAction, Result) == 0x000080, "Member 'FUNCLIB_GameSettings_C_SetKeyAction::Result' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_SetKeyAction, CurrentBoundKeyPair) == 0x000088, "Member 'FUNCLIB_GameSettings_C_SetKeyAction::CurrentBoundKeyPair' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_SetKeyAction, Temp_struct_Variable) == 0x0000B8, "Member 'FUNCLIB_GameSettings_C_SetKeyAction::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_SetKeyAction, Temp_byte_Variable) == 0x0000D0, "Member 'FUNCLIB_GameSettings_C_SetKeyAction::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_SetKeyAction, Temp_struct_Variable_1) == 0x0000D8, "Member 'FUNCLIB_GameSettings_C_SetKeyAction::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_SetKeyAction, K2Node_Select_Default) == 0x0000F0, "Member 'FUNCLIB_GameSettings_C_SetKeyAction::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_SetKeyAction, CallFunc_EqualEqual_KeyKey_ReturnValue) == 0x000108, "Member 'FUNCLIB_GameSettings_C_SetKeyAction::CallFunc_EqualEqual_KeyKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_SetKeyAction, CallFunc_EqualEqual_KeyKey_ReturnValue_1) == 0x000109, "Member 'FUNCLIB_GameSettings_C_SetKeyAction::CallFunc_EqualEqual_KeyKey_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_SetKeyAction, K2Node_SwitchEnum_CmpSuccess) == 0x00010A, "Member 'FUNCLIB_GameSettings_C_SetKeyAction::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_SetKeyAction, CallFunc_Map_Find_Value) == 0x000110, "Member 'FUNCLIB_GameSettings_C_SetKeyAction::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_SetKeyAction, CallFunc_Map_Find_ReturnValue) == 0x000140, "Member 'FUNCLIB_GameSettings_C_SetKeyAction::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_SetKeyAction, Temp_byte_Variable_1) == 0x000141, "Member 'FUNCLIB_GameSettings_C_SetKeyAction::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_SetKeyAction, K2Node_MakeStruct_STRUCT_BoundInputActionPair) == 0x000148, "Member 'FUNCLIB_GameSettings_C_SetKeyAction::K2Node_MakeStruct_STRUCT_BoundInputActionPair' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_SetKeyAction, K2Node_Select_Default_1) == 0x000178, "Member 'FUNCLIB_GameSettings_C_SetKeyAction::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_SetKeyAction, K2Node_MakeStruct_STRUCT_BoundInputActionPair_1) == 0x000190, "Member 'FUNCLIB_GameSettings_C_SetKeyAction::K2Node_MakeStruct_STRUCT_BoundInputActionPair_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_SetKeyAction, K2Node_MakeStruct_STRUCT_BoundInputActionPair_2) == 0x0001C0, "Member 'FUNCLIB_GameSettings_C_SetKeyAction::K2Node_MakeStruct_STRUCT_BoundInputActionPair_2' has a wrong offset!");

// Function FUNCLIB_GameSettings.FUNCLIB_GameSettings_C.BindKeyAction
// 0x00B8 (0x00B8 - 0x0000)
struct FUNCLIB_GameSettings_C_BindKeyAction final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   Key;                                               // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	ENUM_PrimarySecondary                         Rank;                                              // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FSTRUCT_BoundInputActionPair> KeyActionMap;                                      // 0x0028(0x0050)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UObject*                                __WorldContext;                                    // 0x0078(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           ChangedActionNames;                                // 0x0080(0x0010)(Parm, OutParm)
	TArray<class FName>                           ModifiedActionNames;                               // 0x0090(0x0010)(Edit, BlueprintVisible)
	bool                                          CallFunc_SetKeyAction_Result;                      // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValidKeyToBind_Result;                  // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A2[0x2];                                       // 0x00A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           CallFunc_UnbindActionsByKey_ChangedActionNames;    // 0x00A8(0x0010)(ReferenceParm)
};
static_assert(alignof(FUNCLIB_GameSettings_C_BindKeyAction) == 0x000008, "Wrong alignment on FUNCLIB_GameSettings_C_BindKeyAction");
static_assert(sizeof(FUNCLIB_GameSettings_C_BindKeyAction) == 0x0000B8, "Wrong size on FUNCLIB_GameSettings_C_BindKeyAction");
static_assert(offsetof(FUNCLIB_GameSettings_C_BindKeyAction, ActionName) == 0x000000, "Member 'FUNCLIB_GameSettings_C_BindKeyAction::ActionName' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_BindKeyAction, Key) == 0x000008, "Member 'FUNCLIB_GameSettings_C_BindKeyAction::Key' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_BindKeyAction, Rank) == 0x000020, "Member 'FUNCLIB_GameSettings_C_BindKeyAction::Rank' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_BindKeyAction, KeyActionMap) == 0x000028, "Member 'FUNCLIB_GameSettings_C_BindKeyAction::KeyActionMap' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_BindKeyAction, __WorldContext) == 0x000078, "Member 'FUNCLIB_GameSettings_C_BindKeyAction::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_BindKeyAction, ChangedActionNames) == 0x000080, "Member 'FUNCLIB_GameSettings_C_BindKeyAction::ChangedActionNames' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_BindKeyAction, ModifiedActionNames) == 0x000090, "Member 'FUNCLIB_GameSettings_C_BindKeyAction::ModifiedActionNames' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_BindKeyAction, CallFunc_SetKeyAction_Result) == 0x0000A0, "Member 'FUNCLIB_GameSettings_C_BindKeyAction::CallFunc_SetKeyAction_Result' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_BindKeyAction, CallFunc_IsValidKeyToBind_Result) == 0x0000A1, "Member 'FUNCLIB_GameSettings_C_BindKeyAction::CallFunc_IsValidKeyToBind_Result' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_BindKeyAction, CallFunc_Array_AddUnique_ReturnValue) == 0x0000A4, "Member 'FUNCLIB_GameSettings_C_BindKeyAction::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_BindKeyAction, CallFunc_UnbindActionsByKey_ChangedActionNames) == 0x0000A8, "Member 'FUNCLIB_GameSettings_C_BindKeyAction::CallFunc_UnbindActionsByKey_ChangedActionNames' has a wrong offset!");

// Function FUNCLIB_GameSettings.FUNCLIB_GameSettings_C.UnbindActionsByKey
// 0x0178 (0x0178 - 0x0000)
struct FUNCLIB_GameSettings_C_UnbindActionsByKey final
{
public:
	struct FKey                                   ActionKey;                                         // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	TMap<class FName, struct FSTRUCT_BoundInputActionPair> KeyActionMap;                                      // 0x0018(0x0050)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UObject*                                __WorldContext;                                    // 0x0068(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           ChangedActionNames;                                // 0x0070(0x0010)(Parm, OutParm)
	bool                                          UnboundAnyKeyForAction;                            // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_BoundInputActionPair           KeyActionPair;                                     // 0x0088(0x0030)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class FName                                   ActionName;                                        // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           ModifiedActionNames;                               // 0x00C0(0x0010)(Edit, BlueprintVisible)
	TArray<class FName>                           CallFunc_Map_Keys_Keys;                            // 0x00D0(0x0010)(ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F5[0x3];                                       // 0x00F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetKeyAction_Result;                      // 0x00FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Map_Remove_ReturnValue;                   // 0x00FD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_FE[0x2];                                       // 0x00FE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_BoundInputActionPair           CallFunc_Map_Find_Value;                           // 0x0100(0x0030)(HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetKeyAction_Result_1;                    // 0x0131(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_132[0x2];                                      // 0x0132(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue;            // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_1;          // 0x0139(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x013A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_2;          // 0x013B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_3;          // 0x013C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13D[0x3];                                      // 0x013D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_BoundInputActionPair           CallFunc_Map_Find_Value_1;                         // 0x0140(0x0030)(HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_1;                   // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FUNCLIB_GameSettings_C_UnbindActionsByKey) == 0x000008, "Wrong alignment on FUNCLIB_GameSettings_C_UnbindActionsByKey");
static_assert(sizeof(FUNCLIB_GameSettings_C_UnbindActionsByKey) == 0x000178, "Wrong size on FUNCLIB_GameSettings_C_UnbindActionsByKey");
static_assert(offsetof(FUNCLIB_GameSettings_C_UnbindActionsByKey, ActionKey) == 0x000000, "Member 'FUNCLIB_GameSettings_C_UnbindActionsByKey::ActionKey' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_UnbindActionsByKey, KeyActionMap) == 0x000018, "Member 'FUNCLIB_GameSettings_C_UnbindActionsByKey::KeyActionMap' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_UnbindActionsByKey, __WorldContext) == 0x000068, "Member 'FUNCLIB_GameSettings_C_UnbindActionsByKey::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_UnbindActionsByKey, ChangedActionNames) == 0x000070, "Member 'FUNCLIB_GameSettings_C_UnbindActionsByKey::ChangedActionNames' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_UnbindActionsByKey, UnboundAnyKeyForAction) == 0x000080, "Member 'FUNCLIB_GameSettings_C_UnbindActionsByKey::UnboundAnyKeyForAction' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_UnbindActionsByKey, KeyActionPair) == 0x000088, "Member 'FUNCLIB_GameSettings_C_UnbindActionsByKey::KeyActionPair' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_UnbindActionsByKey, ActionName) == 0x0000B8, "Member 'FUNCLIB_GameSettings_C_UnbindActionsByKey::ActionName' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_UnbindActionsByKey, ModifiedActionNames) == 0x0000C0, "Member 'FUNCLIB_GameSettings_C_UnbindActionsByKey::ModifiedActionNames' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_UnbindActionsByKey, CallFunc_Map_Keys_Keys) == 0x0000D0, "Member 'FUNCLIB_GameSettings_C_UnbindActionsByKey::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_UnbindActionsByKey, Temp_int_Array_Index_Variable) == 0x0000E0, "Member 'FUNCLIB_GameSettings_C_UnbindActionsByKey::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_UnbindActionsByKey, CallFunc_Array_Length_ReturnValue) == 0x0000E4, "Member 'FUNCLIB_GameSettings_C_UnbindActionsByKey::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_UnbindActionsByKey, CallFunc_Array_Get_Item) == 0x0000E8, "Member 'FUNCLIB_GameSettings_C_UnbindActionsByKey::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_UnbindActionsByKey, Temp_int_Loop_Counter_Variable) == 0x0000F0, "Member 'FUNCLIB_GameSettings_C_UnbindActionsByKey::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_UnbindActionsByKey, CallFunc_Less_IntInt_ReturnValue) == 0x0000F4, "Member 'FUNCLIB_GameSettings_C_UnbindActionsByKey::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_UnbindActionsByKey, CallFunc_Add_IntInt_ReturnValue) == 0x0000F8, "Member 'FUNCLIB_GameSettings_C_UnbindActionsByKey::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_UnbindActionsByKey, CallFunc_SetKeyAction_Result) == 0x0000FC, "Member 'FUNCLIB_GameSettings_C_UnbindActionsByKey::CallFunc_SetKeyAction_Result' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_UnbindActionsByKey, CallFunc_Map_Remove_ReturnValue) == 0x0000FD, "Member 'FUNCLIB_GameSettings_C_UnbindActionsByKey::CallFunc_Map_Remove_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_UnbindActionsByKey, CallFunc_Map_Find_Value) == 0x000100, "Member 'FUNCLIB_GameSettings_C_UnbindActionsByKey::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_UnbindActionsByKey, CallFunc_Map_Find_ReturnValue) == 0x000130, "Member 'FUNCLIB_GameSettings_C_UnbindActionsByKey::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_UnbindActionsByKey, CallFunc_SetKeyAction_Result_1) == 0x000131, "Member 'FUNCLIB_GameSettings_C_UnbindActionsByKey::CallFunc_SetKeyAction_Result_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_UnbindActionsByKey, CallFunc_Array_AddUnique_ReturnValue) == 0x000134, "Member 'FUNCLIB_GameSettings_C_UnbindActionsByKey::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_UnbindActionsByKey, CallFunc_EqualEqual_KeyKey_ReturnValue) == 0x000138, "Member 'FUNCLIB_GameSettings_C_UnbindActionsByKey::CallFunc_EqualEqual_KeyKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_UnbindActionsByKey, CallFunc_EqualEqual_KeyKey_ReturnValue_1) == 0x000139, "Member 'FUNCLIB_GameSettings_C_UnbindActionsByKey::CallFunc_EqualEqual_KeyKey_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_UnbindActionsByKey, CallFunc_BooleanAND_ReturnValue) == 0x00013A, "Member 'FUNCLIB_GameSettings_C_UnbindActionsByKey::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_UnbindActionsByKey, CallFunc_EqualEqual_KeyKey_ReturnValue_2) == 0x00013B, "Member 'FUNCLIB_GameSettings_C_UnbindActionsByKey::CallFunc_EqualEqual_KeyKey_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_UnbindActionsByKey, CallFunc_EqualEqual_KeyKey_ReturnValue_3) == 0x00013C, "Member 'FUNCLIB_GameSettings_C_UnbindActionsByKey::CallFunc_EqualEqual_KeyKey_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_UnbindActionsByKey, CallFunc_Map_Find_Value_1) == 0x000140, "Member 'FUNCLIB_GameSettings_C_UnbindActionsByKey::CallFunc_Map_Find_Value_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_UnbindActionsByKey, CallFunc_Map_Find_ReturnValue_1) == 0x000170, "Member 'FUNCLIB_GameSettings_C_UnbindActionsByKey::CallFunc_Map_Find_ReturnValue_1' has a wrong offset!");

// Function FUNCLIB_GameSettings.FUNCLIB_GameSettings_C.UnbindKeyByActionName
// 0x00E0 (0x00E0 - 0x0000)
struct FUNCLIB_GameSettings_C_UnbindKeyByActionName final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_PrimarySecondary                         InputRank;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FSTRUCT_BoundInputActionPair> KeyActionMap;                                      // 0x0010(0x0050)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UObject*                                __WorldContext;                                    // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_BoundInputActionPair           CurrentBoundKeyPair;                               // 0x0070(0x0030)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue;            // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Map_Remove_ReturnValue;                   // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_1;          // 0x00A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00A3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_BoundInputActionPair           CallFunc_Map_Find_Value;                           // 0x00A8(0x0030)(HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetKeyAction_Result;                      // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FUNCLIB_GameSettings_C_UnbindKeyByActionName) == 0x000008, "Wrong alignment on FUNCLIB_GameSettings_C_UnbindKeyByActionName");
static_assert(sizeof(FUNCLIB_GameSettings_C_UnbindKeyByActionName) == 0x0000E0, "Wrong size on FUNCLIB_GameSettings_C_UnbindKeyByActionName");
static_assert(offsetof(FUNCLIB_GameSettings_C_UnbindKeyByActionName, ActionName) == 0x000000, "Member 'FUNCLIB_GameSettings_C_UnbindKeyByActionName::ActionName' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_UnbindKeyByActionName, InputRank) == 0x000008, "Member 'FUNCLIB_GameSettings_C_UnbindKeyByActionName::InputRank' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_UnbindKeyByActionName, KeyActionMap) == 0x000010, "Member 'FUNCLIB_GameSettings_C_UnbindKeyByActionName::KeyActionMap' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_UnbindKeyByActionName, __WorldContext) == 0x000060, "Member 'FUNCLIB_GameSettings_C_UnbindKeyByActionName::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_UnbindKeyByActionName, Result) == 0x000068, "Member 'FUNCLIB_GameSettings_C_UnbindKeyByActionName::Result' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_UnbindKeyByActionName, CurrentBoundKeyPair) == 0x000070, "Member 'FUNCLIB_GameSettings_C_UnbindKeyByActionName::CurrentBoundKeyPair' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_UnbindKeyByActionName, CallFunc_EqualEqual_KeyKey_ReturnValue) == 0x0000A0, "Member 'FUNCLIB_GameSettings_C_UnbindKeyByActionName::CallFunc_EqualEqual_KeyKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_UnbindKeyByActionName, CallFunc_Map_Remove_ReturnValue) == 0x0000A1, "Member 'FUNCLIB_GameSettings_C_UnbindKeyByActionName::CallFunc_Map_Remove_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_UnbindKeyByActionName, CallFunc_EqualEqual_KeyKey_ReturnValue_1) == 0x0000A2, "Member 'FUNCLIB_GameSettings_C_UnbindKeyByActionName::CallFunc_EqualEqual_KeyKey_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_UnbindKeyByActionName, CallFunc_BooleanAND_ReturnValue) == 0x0000A3, "Member 'FUNCLIB_GameSettings_C_UnbindKeyByActionName::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_UnbindKeyByActionName, CallFunc_Map_Find_Value) == 0x0000A8, "Member 'FUNCLIB_GameSettings_C_UnbindKeyByActionName::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_UnbindKeyByActionName, CallFunc_Map_Find_ReturnValue) == 0x0000D8, "Member 'FUNCLIB_GameSettings_C_UnbindKeyByActionName::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_UnbindKeyByActionName, CallFunc_SetKeyAction_Result) == 0x0000D9, "Member 'FUNCLIB_GameSettings_C_UnbindKeyByActionName::CallFunc_SetKeyAction_Result' has a wrong offset!");

// Function FUNCLIB_GameSettings.FUNCLIB_GameSettings_C.UnbindKeysByActionName
// 0x00A0 (0x00A0 - 0x0000)
struct FUNCLIB_GameSettings_C_UnbindKeysByActionName final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, struct FSTRUCT_BoundInputActionPair> KeyActionMap;                                      // 0x0008(0x0050)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UObject*                                __WorldContext;                                    // 0x0058(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_BoundInputActionPair           KeyActionPair;                                     // 0x0068(0x0030)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Remove_ReturnValue;                   // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FUNCLIB_GameSettings_C_UnbindKeysByActionName) == 0x000008, "Wrong alignment on FUNCLIB_GameSettings_C_UnbindKeysByActionName");
static_assert(sizeof(FUNCLIB_GameSettings_C_UnbindKeysByActionName) == 0x0000A0, "Wrong size on FUNCLIB_GameSettings_C_UnbindKeysByActionName");
static_assert(offsetof(FUNCLIB_GameSettings_C_UnbindKeysByActionName, ActionName) == 0x000000, "Member 'FUNCLIB_GameSettings_C_UnbindKeysByActionName::ActionName' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_UnbindKeysByActionName, KeyActionMap) == 0x000008, "Member 'FUNCLIB_GameSettings_C_UnbindKeysByActionName::KeyActionMap' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_UnbindKeysByActionName, __WorldContext) == 0x000058, "Member 'FUNCLIB_GameSettings_C_UnbindKeysByActionName::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_UnbindKeysByActionName, Result) == 0x000060, "Member 'FUNCLIB_GameSettings_C_UnbindKeysByActionName::Result' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_UnbindKeysByActionName, KeyActionPair) == 0x000068, "Member 'FUNCLIB_GameSettings_C_UnbindKeysByActionName::KeyActionPair' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_UnbindKeysByActionName, CallFunc_Map_Remove_ReturnValue) == 0x000098, "Member 'FUNCLIB_GameSettings_C_UnbindKeysByActionName::CallFunc_Map_Remove_ReturnValue' has a wrong offset!");

// Function FUNCLIB_GameSettings.FUNCLIB_GameSettings_C.GetShockSettingsForCurrentUser
// 0x0030 (0x0030 - 0x0000)
struct FUNCLIB_GameSettings_C_GetShockSettingsForCurrentUser final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USAVE_Settings_C*                       Settings;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USAVE_Settings_C*                       CallFunc_LoadShockSettings_Settings;               // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FUNCLIB_GameSettings_C_GetShockSettingsForCurrentUser) == 0x000008, "Wrong alignment on FUNCLIB_GameSettings_C_GetShockSettingsForCurrentUser");
static_assert(sizeof(FUNCLIB_GameSettings_C_GetShockSettingsForCurrentUser) == 0x000030, "Wrong size on FUNCLIB_GameSettings_C_GetShockSettingsForCurrentUser");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetShockSettingsForCurrentUser, __WorldContext) == 0x000000, "Member 'FUNCLIB_GameSettings_C_GetShockSettingsForCurrentUser::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetShockSettingsForCurrentUser, Settings) == 0x000008, "Member 'FUNCLIB_GameSettings_C_GetShockSettingsForCurrentUser::Settings' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetShockSettingsForCurrentUser, CallFunc_GetGameInstance_ReturnValue) == 0x000010, "Member 'FUNCLIB_GameSettings_C_GetShockSettingsForCurrentUser::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetShockSettingsForCurrentUser, K2Node_DynamicCast_AsGI_Single_Player) == 0x000018, "Member 'FUNCLIB_GameSettings_C_GetShockSettingsForCurrentUser::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetShockSettingsForCurrentUser, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'FUNCLIB_GameSettings_C_GetShockSettingsForCurrentUser::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetShockSettingsForCurrentUser, CallFunc_LoadShockSettings_Settings) == 0x000028, "Member 'FUNCLIB_GameSettings_C_GetShockSettingsForCurrentUser::CallFunc_LoadShockSettings_Settings' has a wrong offset!");

// Function FUNCLIB_GameSettings.FUNCLIB_GameSettings_C.LoadDeveloperSettings
// 0x0048 (0x0048 - 0x0000)
struct FUNCLIB_GameSettings_C_LoadDeveloperSettings final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USAVE_DeveloperSettings_C*              DevSettings;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USAVE_DeveloperSettings_C*              CallFunc_CreateSaveGameObject_ReturnValue;         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDeveloperSettingsSlotName_SlotName;    // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_DoesSaveGameExist_ReturnValue;            // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USaveGame*                              CallFunc_LoadGameFromSlot_ReturnValue;             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USAVE_DeveloperSettings_C*              K2Node_DynamicCast_AsSAVE_Developer_Settings;      // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FUNCLIB_GameSettings_C_LoadDeveloperSettings) == 0x000008, "Wrong alignment on FUNCLIB_GameSettings_C_LoadDeveloperSettings");
static_assert(sizeof(FUNCLIB_GameSettings_C_LoadDeveloperSettings) == 0x000048, "Wrong size on FUNCLIB_GameSettings_C_LoadDeveloperSettings");
static_assert(offsetof(FUNCLIB_GameSettings_C_LoadDeveloperSettings, __WorldContext) == 0x000000, "Member 'FUNCLIB_GameSettings_C_LoadDeveloperSettings::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_LoadDeveloperSettings, DevSettings) == 0x000008, "Member 'FUNCLIB_GameSettings_C_LoadDeveloperSettings::DevSettings' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_LoadDeveloperSettings, CallFunc_CreateSaveGameObject_ReturnValue) == 0x000010, "Member 'FUNCLIB_GameSettings_C_LoadDeveloperSettings::CallFunc_CreateSaveGameObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_LoadDeveloperSettings, CallFunc_GetDeveloperSettingsSlotName_SlotName) == 0x000018, "Member 'FUNCLIB_GameSettings_C_LoadDeveloperSettings::CallFunc_GetDeveloperSettingsSlotName_SlotName' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_LoadDeveloperSettings, CallFunc_DoesSaveGameExist_ReturnValue) == 0x000028, "Member 'FUNCLIB_GameSettings_C_LoadDeveloperSettings::CallFunc_DoesSaveGameExist_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_LoadDeveloperSettings, CallFunc_LoadGameFromSlot_ReturnValue) == 0x000030, "Member 'FUNCLIB_GameSettings_C_LoadDeveloperSettings::CallFunc_LoadGameFromSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_LoadDeveloperSettings, K2Node_DynamicCast_AsSAVE_Developer_Settings) == 0x000038, "Member 'FUNCLIB_GameSettings_C_LoadDeveloperSettings::K2Node_DynamicCast_AsSAVE_Developer_Settings' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_LoadDeveloperSettings, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'FUNCLIB_GameSettings_C_LoadDeveloperSettings::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function FUNCLIB_GameSettings.FUNCLIB_GameSettings_C.SaveDeveloperSettings
// 0x0028 (0x0028 - 0x0000)
struct FUNCLIB_GameSettings_C_SaveDeveloperSettings final
{
public:
	class USAVE_DeveloperSettings_C*              DeveloperSettings;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDeveloperSettingsSlotName_SlotName;    // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_SaveGameToSlot_ReturnValue;               // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FUNCLIB_GameSettings_C_SaveDeveloperSettings) == 0x000008, "Wrong alignment on FUNCLIB_GameSettings_C_SaveDeveloperSettings");
static_assert(sizeof(FUNCLIB_GameSettings_C_SaveDeveloperSettings) == 0x000028, "Wrong size on FUNCLIB_GameSettings_C_SaveDeveloperSettings");
static_assert(offsetof(FUNCLIB_GameSettings_C_SaveDeveloperSettings, DeveloperSettings) == 0x000000, "Member 'FUNCLIB_GameSettings_C_SaveDeveloperSettings::DeveloperSettings' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_SaveDeveloperSettings, __WorldContext) == 0x000008, "Member 'FUNCLIB_GameSettings_C_SaveDeveloperSettings::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_SaveDeveloperSettings, CallFunc_GetDeveloperSettingsSlotName_SlotName) == 0x000010, "Member 'FUNCLIB_GameSettings_C_SaveDeveloperSettings::CallFunc_GetDeveloperSettingsSlotName_SlotName' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_SaveDeveloperSettings, CallFunc_SaveGameToSlot_ReturnValue) == 0x000020, "Member 'FUNCLIB_GameSettings_C_SaveDeveloperSettings::CallFunc_SaveGameToSlot_ReturnValue' has a wrong offset!");

// Function FUNCLIB_GameSettings.FUNCLIB_GameSettings_C.GetDeveloperSettingsSlotName
// 0x0028 (0x0028 - 0x0000)
struct FUNCLIB_GameSettings_C_GetDeveloperSettingsSlotName final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 SlotName;                                          // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 DevSettingsSlotName;                               // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(FUNCLIB_GameSettings_C_GetDeveloperSettingsSlotName) == 0x000008, "Wrong alignment on FUNCLIB_GameSettings_C_GetDeveloperSettingsSlotName");
static_assert(sizeof(FUNCLIB_GameSettings_C_GetDeveloperSettingsSlotName) == 0x000028, "Wrong size on FUNCLIB_GameSettings_C_GetDeveloperSettingsSlotName");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetDeveloperSettingsSlotName, __WorldContext) == 0x000000, "Member 'FUNCLIB_GameSettings_C_GetDeveloperSettingsSlotName::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetDeveloperSettingsSlotName, SlotName) == 0x000008, "Member 'FUNCLIB_GameSettings_C_GetDeveloperSettingsSlotName::SlotName' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetDeveloperSettingsSlotName, DevSettingsSlotName) == 0x000018, "Member 'FUNCLIB_GameSettings_C_GetDeveloperSettingsSlotName::DevSettingsSlotName' has a wrong offset!");

// Function FUNCLIB_GameSettings.FUNCLIB_GameSettings_C.ShouldShowIntroSequence
// 0x0020 (0x0020 - 0x0000)
struct FUNCLIB_GameSettings_C_ShouldShowIntroSequence final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPackagedForDistribution_ReturnValue;    // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USAVE_DeveloperSettings_C*              CallFunc_LoadDeveloperSettings_DevSettings;        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FUNCLIB_GameSettings_C_ShouldShowIntroSequence) == 0x000008, "Wrong alignment on FUNCLIB_GameSettings_C_ShouldShowIntroSequence");
static_assert(sizeof(FUNCLIB_GameSettings_C_ShouldShowIntroSequence) == 0x000020, "Wrong size on FUNCLIB_GameSettings_C_ShouldShowIntroSequence");
static_assert(offsetof(FUNCLIB_GameSettings_C_ShouldShowIntroSequence, __WorldContext) == 0x000000, "Member 'FUNCLIB_GameSettings_C_ShouldShowIntroSequence::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_ShouldShowIntroSequence, Result) == 0x000008, "Member 'FUNCLIB_GameSettings_C_ShouldShowIntroSequence::Result' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_ShouldShowIntroSequence, CallFunc_IsPackagedForDistribution_ReturnValue) == 0x000009, "Member 'FUNCLIB_GameSettings_C_ShouldShowIntroSequence::CallFunc_IsPackagedForDistribution_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_ShouldShowIntroSequence, CallFunc_LoadDeveloperSettings_DevSettings) == 0x000010, "Member 'FUNCLIB_GameSettings_C_ShouldShowIntroSequence::CallFunc_LoadDeveloperSettings_DevSettings' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_ShouldShowIntroSequence, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'FUNCLIB_GameSettings_C_ShouldShowIntroSequence::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function FUNCLIB_GameSettings.FUNCLIB_GameSettings_C.GetShockSettingsForSpecificUser
// 0x0038 (0x0038 - 0x0000)
struct FUNCLIB_GameSettings_C_GetShockSettingsForSpecificUser final
{
public:
	int32                                         UserIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USAVE_Settings_C*                       Settings;                                          // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USAVE_Settings_C*                       CallFunc_LoadShockSettings_Settings;               // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FUNCLIB_GameSettings_C_GetShockSettingsForSpecificUser) == 0x000008, "Wrong alignment on FUNCLIB_GameSettings_C_GetShockSettingsForSpecificUser");
static_assert(sizeof(FUNCLIB_GameSettings_C_GetShockSettingsForSpecificUser) == 0x000038, "Wrong size on FUNCLIB_GameSettings_C_GetShockSettingsForSpecificUser");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetShockSettingsForSpecificUser, UserIndex) == 0x000000, "Member 'FUNCLIB_GameSettings_C_GetShockSettingsForSpecificUser::UserIndex' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetShockSettingsForSpecificUser, __WorldContext) == 0x000008, "Member 'FUNCLIB_GameSettings_C_GetShockSettingsForSpecificUser::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetShockSettingsForSpecificUser, Settings) == 0x000010, "Member 'FUNCLIB_GameSettings_C_GetShockSettingsForSpecificUser::Settings' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetShockSettingsForSpecificUser, CallFunc_GetGameInstance_ReturnValue) == 0x000018, "Member 'FUNCLIB_GameSettings_C_GetShockSettingsForSpecificUser::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetShockSettingsForSpecificUser, K2Node_DynamicCast_AsGI_Single_Player) == 0x000020, "Member 'FUNCLIB_GameSettings_C_GetShockSettingsForSpecificUser::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetShockSettingsForSpecificUser, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'FUNCLIB_GameSettings_C_GetShockSettingsForSpecificUser::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetShockSettingsForSpecificUser, CallFunc_LoadShockSettings_Settings) == 0x000030, "Member 'FUNCLIB_GameSettings_C_GetShockSettingsForSpecificUser::CallFunc_LoadShockSettings_Settings' has a wrong offset!");

// Function FUNCLIB_GameSettings.FUNCLIB_GameSettings_C.GetShockDifficultyValuesFromBitfield
// 0x0020 (0x0020 - 0x0000)
struct FUNCLIB_GameSettings_C_GetShockDifficultyValuesFromBitfield final
{
public:
	int32                                         DifficultyBitfield;                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_GameDifficulty                           Combat;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_GameDifficulty                           Mission;                                           // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_GameDifficulty                           Puzzle;                                            // 0x0012(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_GameDifficulty                           Cyber;                                             // 0x0013(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetBytesFromInt_OutByteA;                 // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetBytesFromInt_OutByteB;                 // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetBytesFromInt_OutByteC;                 // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetBytesFromInt_OutByteD;                 // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue_1;              // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue_2;              // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue_3;              // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FUNCLIB_GameSettings_C_GetShockDifficultyValuesFromBitfield) == 0x000008, "Wrong alignment on FUNCLIB_GameSettings_C_GetShockDifficultyValuesFromBitfield");
static_assert(sizeof(FUNCLIB_GameSettings_C_GetShockDifficultyValuesFromBitfield) == 0x000020, "Wrong size on FUNCLIB_GameSettings_C_GetShockDifficultyValuesFromBitfield");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetShockDifficultyValuesFromBitfield, DifficultyBitfield) == 0x000000, "Member 'FUNCLIB_GameSettings_C_GetShockDifficultyValuesFromBitfield::DifficultyBitfield' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetShockDifficultyValuesFromBitfield, __WorldContext) == 0x000008, "Member 'FUNCLIB_GameSettings_C_GetShockDifficultyValuesFromBitfield::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetShockDifficultyValuesFromBitfield, Combat) == 0x000010, "Member 'FUNCLIB_GameSettings_C_GetShockDifficultyValuesFromBitfield::Combat' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetShockDifficultyValuesFromBitfield, Mission) == 0x000011, "Member 'FUNCLIB_GameSettings_C_GetShockDifficultyValuesFromBitfield::Mission' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetShockDifficultyValuesFromBitfield, Puzzle) == 0x000012, "Member 'FUNCLIB_GameSettings_C_GetShockDifficultyValuesFromBitfield::Puzzle' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetShockDifficultyValuesFromBitfield, Cyber) == 0x000013, "Member 'FUNCLIB_GameSettings_C_GetShockDifficultyValuesFromBitfield::Cyber' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetShockDifficultyValuesFromBitfield, CallFunc_GetBytesFromInt_OutByteA) == 0x000014, "Member 'FUNCLIB_GameSettings_C_GetShockDifficultyValuesFromBitfield::CallFunc_GetBytesFromInt_OutByteA' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetShockDifficultyValuesFromBitfield, CallFunc_GetBytesFromInt_OutByteB) == 0x000015, "Member 'FUNCLIB_GameSettings_C_GetShockDifficultyValuesFromBitfield::CallFunc_GetBytesFromInt_OutByteB' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetShockDifficultyValuesFromBitfield, CallFunc_GetBytesFromInt_OutByteC) == 0x000016, "Member 'FUNCLIB_GameSettings_C_GetShockDifficultyValuesFromBitfield::CallFunc_GetBytesFromInt_OutByteC' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetShockDifficultyValuesFromBitfield, CallFunc_GetBytesFromInt_OutByteD) == 0x000017, "Member 'FUNCLIB_GameSettings_C_GetShockDifficultyValuesFromBitfield::CallFunc_GetBytesFromInt_OutByteD' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetShockDifficultyValuesFromBitfield, CallFunc_GetValidValue_ReturnValue) == 0x000018, "Member 'FUNCLIB_GameSettings_C_GetShockDifficultyValuesFromBitfield::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetShockDifficultyValuesFromBitfield, CallFunc_GetValidValue_ReturnValue_1) == 0x000019, "Member 'FUNCLIB_GameSettings_C_GetShockDifficultyValuesFromBitfield::CallFunc_GetValidValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetShockDifficultyValuesFromBitfield, CallFunc_GetValidValue_ReturnValue_2) == 0x00001A, "Member 'FUNCLIB_GameSettings_C_GetShockDifficultyValuesFromBitfield::CallFunc_GetValidValue_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetShockDifficultyValuesFromBitfield, CallFunc_GetValidValue_ReturnValue_3) == 0x00001B, "Member 'FUNCLIB_GameSettings_C_GetShockDifficultyValuesFromBitfield::CallFunc_GetValidValue_ReturnValue_3' has a wrong offset!");

// Function FUNCLIB_GameSettings.FUNCLIB_GameSettings_C.GetShockDifficultyByType
// 0x0018 (0x0018 - 0x0000)
struct FUNCLIB_GameSettings_C_GetShockDifficultyByType final
{
public:
	int32                                         Bitfield;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_GameDifficultyConfigCategory             Type;                                              // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_GameDifficulty                           Difficulty;                                        // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_GameDifficultyConfigCategory             Temp_byte_Variable;                                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_GameDifficulty                           CallFunc_GetShockDifficultyValuesFromBitfield_Combat; // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_GameDifficulty                           CallFunc_GetShockDifficultyValuesFromBitfield_Mission; // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_GameDifficulty                           CallFunc_GetShockDifficultyValuesFromBitfield_Puzzle; // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_GameDifficulty                           CallFunc_GetShockDifficultyValuesFromBitfield_Cyber; // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_GameDifficulty                           K2Node_Select_Default;                             // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FUNCLIB_GameSettings_C_GetShockDifficultyByType) == 0x000008, "Wrong alignment on FUNCLIB_GameSettings_C_GetShockDifficultyByType");
static_assert(sizeof(FUNCLIB_GameSettings_C_GetShockDifficultyByType) == 0x000018, "Wrong size on FUNCLIB_GameSettings_C_GetShockDifficultyByType");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetShockDifficultyByType, Bitfield) == 0x000000, "Member 'FUNCLIB_GameSettings_C_GetShockDifficultyByType::Bitfield' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetShockDifficultyByType, Type) == 0x000004, "Member 'FUNCLIB_GameSettings_C_GetShockDifficultyByType::Type' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetShockDifficultyByType, __WorldContext) == 0x000008, "Member 'FUNCLIB_GameSettings_C_GetShockDifficultyByType::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetShockDifficultyByType, Difficulty) == 0x000010, "Member 'FUNCLIB_GameSettings_C_GetShockDifficultyByType::Difficulty' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetShockDifficultyByType, Temp_byte_Variable) == 0x000011, "Member 'FUNCLIB_GameSettings_C_GetShockDifficultyByType::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetShockDifficultyByType, CallFunc_GetShockDifficultyValuesFromBitfield_Combat) == 0x000012, "Member 'FUNCLIB_GameSettings_C_GetShockDifficultyByType::CallFunc_GetShockDifficultyValuesFromBitfield_Combat' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetShockDifficultyByType, CallFunc_GetShockDifficultyValuesFromBitfield_Mission) == 0x000013, "Member 'FUNCLIB_GameSettings_C_GetShockDifficultyByType::CallFunc_GetShockDifficultyValuesFromBitfield_Mission' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetShockDifficultyByType, CallFunc_GetShockDifficultyValuesFromBitfield_Puzzle) == 0x000014, "Member 'FUNCLIB_GameSettings_C_GetShockDifficultyByType::CallFunc_GetShockDifficultyValuesFromBitfield_Puzzle' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetShockDifficultyByType, CallFunc_GetShockDifficultyValuesFromBitfield_Cyber) == 0x000015, "Member 'FUNCLIB_GameSettings_C_GetShockDifficultyByType::CallFunc_GetShockDifficultyValuesFromBitfield_Cyber' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetShockDifficultyByType, K2Node_Select_Default) == 0x000016, "Member 'FUNCLIB_GameSettings_C_GetShockDifficultyByType::K2Node_Select_Default' has a wrong offset!");

// Function FUNCLIB_GameSettings.FUNCLIB_GameSettings_C.MakeShockDifficultyBitfield
// 0x0030 (0x0030 - 0x0000)
struct FUNCLIB_GameSettings_C_MakeShockDifficultyBitfield final
{
public:
	ENUM_GameDifficulty                           Combat;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_GameDifficulty                           Mission;                                           // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_GameDifficulty                           Puzzle;                                            // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_GameDifficulty                           Cyber;                                             // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DifficultyBitfield;                                // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 K2Node_MakeArray_Array;                            // 0x0018(0x0010)(ConstParm, ReferenceParm)
	int32                                         CallFunc_MakeIntFromByteArray_ReturnValue;         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FUNCLIB_GameSettings_C_MakeShockDifficultyBitfield) == 0x000008, "Wrong alignment on FUNCLIB_GameSettings_C_MakeShockDifficultyBitfield");
static_assert(sizeof(FUNCLIB_GameSettings_C_MakeShockDifficultyBitfield) == 0x000030, "Wrong size on FUNCLIB_GameSettings_C_MakeShockDifficultyBitfield");
static_assert(offsetof(FUNCLIB_GameSettings_C_MakeShockDifficultyBitfield, Combat) == 0x000000, "Member 'FUNCLIB_GameSettings_C_MakeShockDifficultyBitfield::Combat' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_MakeShockDifficultyBitfield, Mission) == 0x000001, "Member 'FUNCLIB_GameSettings_C_MakeShockDifficultyBitfield::Mission' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_MakeShockDifficultyBitfield, Puzzle) == 0x000002, "Member 'FUNCLIB_GameSettings_C_MakeShockDifficultyBitfield::Puzzle' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_MakeShockDifficultyBitfield, Cyber) == 0x000003, "Member 'FUNCLIB_GameSettings_C_MakeShockDifficultyBitfield::Cyber' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_MakeShockDifficultyBitfield, __WorldContext) == 0x000008, "Member 'FUNCLIB_GameSettings_C_MakeShockDifficultyBitfield::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_MakeShockDifficultyBitfield, DifficultyBitfield) == 0x000010, "Member 'FUNCLIB_GameSettings_C_MakeShockDifficultyBitfield::DifficultyBitfield' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_MakeShockDifficultyBitfield, K2Node_MakeArray_Array) == 0x000018, "Member 'FUNCLIB_GameSettings_C_MakeShockDifficultyBitfield::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_MakeShockDifficultyBitfield, CallFunc_MakeIntFromByteArray_ReturnValue) == 0x000028, "Member 'FUNCLIB_GameSettings_C_MakeShockDifficultyBitfield::CallFunc_MakeIntFromByteArray_ReturnValue' has a wrong offset!");

// Function FUNCLIB_GameSettings.FUNCLIB_GameSettings_C.IsGamepadInputAction
// 0x0040 (0x0040 - 0x0000)
struct FUNCLIB_GameSettings_C_IsGamepadInputAction final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetGamepadInputActionPrefix_Result;       // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_StartsWith_ReturnValue;                   // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FUNCLIB_GameSettings_C_IsGamepadInputAction) == 0x000008, "Wrong alignment on FUNCLIB_GameSettings_C_IsGamepadInputAction");
static_assert(sizeof(FUNCLIB_GameSettings_C_IsGamepadInputAction) == 0x000040, "Wrong size on FUNCLIB_GameSettings_C_IsGamepadInputAction");
static_assert(offsetof(FUNCLIB_GameSettings_C_IsGamepadInputAction, ActionName) == 0x000000, "Member 'FUNCLIB_GameSettings_C_IsGamepadInputAction::ActionName' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_IsGamepadInputAction, __WorldContext) == 0x000008, "Member 'FUNCLIB_GameSettings_C_IsGamepadInputAction::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_IsGamepadInputAction, Result) == 0x000010, "Member 'FUNCLIB_GameSettings_C_IsGamepadInputAction::Result' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_IsGamepadInputAction, CallFunc_Conv_NameToString_ReturnValue) == 0x000018, "Member 'FUNCLIB_GameSettings_C_IsGamepadInputAction::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_IsGamepadInputAction, CallFunc_GetGamepadInputActionPrefix_Result) == 0x000028, "Member 'FUNCLIB_GameSettings_C_IsGamepadInputAction::CallFunc_GetGamepadInputActionPrefix_Result' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_IsGamepadInputAction, CallFunc_StartsWith_ReturnValue) == 0x000038, "Member 'FUNCLIB_GameSettings_C_IsGamepadInputAction::CallFunc_StartsWith_ReturnValue' has a wrong offset!");

// Function FUNCLIB_GameSettings.FUNCLIB_GameSettings_C.GetGamepadInputActionPrefix
// 0x0018 (0x0018 - 0x0000)
struct FUNCLIB_GameSettings_C_GetGamepadInputActionPrefix final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Result;                                            // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(FUNCLIB_GameSettings_C_GetGamepadInputActionPrefix) == 0x000008, "Wrong alignment on FUNCLIB_GameSettings_C_GetGamepadInputActionPrefix");
static_assert(sizeof(FUNCLIB_GameSettings_C_GetGamepadInputActionPrefix) == 0x000018, "Wrong size on FUNCLIB_GameSettings_C_GetGamepadInputActionPrefix");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetGamepadInputActionPrefix, __WorldContext) == 0x000000, "Member 'FUNCLIB_GameSettings_C_GetGamepadInputActionPrefix::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetGamepadInputActionPrefix, Result) == 0x000008, "Member 'FUNCLIB_GameSettings_C_GetGamepadInputActionPrefix::Result' has a wrong offset!");

// Function FUNCLIB_GameSettings.FUNCLIB_GameSettings_C.GetInputActionPrefixForCategory
// 0x0068 (0x0068 - 0x0000)
struct FUNCLIB_GameSettings_C_GetInputActionPrefixForCategory final
{
public:
	ENUM_InputCategory                            InputCategory;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Result;                                            // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	ENUM_InputCategory                            Temp_byte_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Temp_string_Variable;                              // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_1;                            // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_2;                            // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 K2Node_Select_Default;                             // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(FUNCLIB_GameSettings_C_GetInputActionPrefixForCategory) == 0x000008, "Wrong alignment on FUNCLIB_GameSettings_C_GetInputActionPrefixForCategory");
static_assert(sizeof(FUNCLIB_GameSettings_C_GetInputActionPrefixForCategory) == 0x000068, "Wrong size on FUNCLIB_GameSettings_C_GetInputActionPrefixForCategory");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetInputActionPrefixForCategory, InputCategory) == 0x000000, "Member 'FUNCLIB_GameSettings_C_GetInputActionPrefixForCategory::InputCategory' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetInputActionPrefixForCategory, __WorldContext) == 0x000008, "Member 'FUNCLIB_GameSettings_C_GetInputActionPrefixForCategory::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetInputActionPrefixForCategory, Result) == 0x000010, "Member 'FUNCLIB_GameSettings_C_GetInputActionPrefixForCategory::Result' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetInputActionPrefixForCategory, Temp_byte_Variable) == 0x000020, "Member 'FUNCLIB_GameSettings_C_GetInputActionPrefixForCategory::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetInputActionPrefixForCategory, Temp_string_Variable) == 0x000028, "Member 'FUNCLIB_GameSettings_C_GetInputActionPrefixForCategory::Temp_string_Variable' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetInputActionPrefixForCategory, Temp_string_Variable_1) == 0x000038, "Member 'FUNCLIB_GameSettings_C_GetInputActionPrefixForCategory::Temp_string_Variable_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetInputActionPrefixForCategory, Temp_string_Variable_2) == 0x000048, "Member 'FUNCLIB_GameSettings_C_GetInputActionPrefixForCategory::Temp_string_Variable_2' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetInputActionPrefixForCategory, K2Node_Select_Default) == 0x000058, "Member 'FUNCLIB_GameSettings_C_GetInputActionPrefixForCategory::K2Node_Select_Default' has a wrong offset!");

// Function FUNCLIB_GameSettings.FUNCLIB_GameSettings_C.GetInputCategoryFromActionName
// 0x0080 (0x0080 - 0x0000)
struct FUNCLIB_GameSettings_C_GetInputCategoryFromActionName final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Found;                                             // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	ENUM_InputCategory                            Result;                                            // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_InputCategory                            InputCategory;                                     // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CategoryIndex;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 ActionString;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetGamepadInputActionPrefix_Result;       // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_ReplaceInline_ReturnValue;                // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_66[0x2];                                       // 0x0066(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetInputActionPrefixForCategory_Result;   // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_StartsWith_ReturnValue;                   // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FUNCLIB_GameSettings_C_GetInputCategoryFromActionName) == 0x000008, "Wrong alignment on FUNCLIB_GameSettings_C_GetInputCategoryFromActionName");
static_assert(sizeof(FUNCLIB_GameSettings_C_GetInputCategoryFromActionName) == 0x000080, "Wrong size on FUNCLIB_GameSettings_C_GetInputCategoryFromActionName");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetInputCategoryFromActionName, ActionName) == 0x000000, "Member 'FUNCLIB_GameSettings_C_GetInputCategoryFromActionName::ActionName' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetInputCategoryFromActionName, __WorldContext) == 0x000008, "Member 'FUNCLIB_GameSettings_C_GetInputCategoryFromActionName::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetInputCategoryFromActionName, Found) == 0x000010, "Member 'FUNCLIB_GameSettings_C_GetInputCategoryFromActionName::Found' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetInputCategoryFromActionName, Result) == 0x000011, "Member 'FUNCLIB_GameSettings_C_GetInputCategoryFromActionName::Result' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetInputCategoryFromActionName, InputCategory) == 0x000012, "Member 'FUNCLIB_GameSettings_C_GetInputCategoryFromActionName::InputCategory' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetInputCategoryFromActionName, CategoryIndex) == 0x000014, "Member 'FUNCLIB_GameSettings_C_GetInputCategoryFromActionName::CategoryIndex' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetInputCategoryFromActionName, ActionString) == 0x000018, "Member 'FUNCLIB_GameSettings_C_GetInputCategoryFromActionName::ActionString' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetInputCategoryFromActionName, CallFunc_MakeLiteralInt_ReturnValue) == 0x000028, "Member 'FUNCLIB_GameSettings_C_GetInputCategoryFromActionName::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetInputCategoryFromActionName, CallFunc_Conv_NameToString_ReturnValue) == 0x000030, "Member 'FUNCLIB_GameSettings_C_GetInputCategoryFromActionName::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetInputCategoryFromActionName, CallFunc_Subtract_IntInt_ReturnValue) == 0x000040, "Member 'FUNCLIB_GameSettings_C_GetInputCategoryFromActionName::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetInputCategoryFromActionName, Temp_int_Variable) == 0x000044, "Member 'FUNCLIB_GameSettings_C_GetInputCategoryFromActionName::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetInputCategoryFromActionName, CallFunc_GetGamepadInputActionPrefix_Result) == 0x000048, "Member 'FUNCLIB_GameSettings_C_GetInputCategoryFromActionName::CallFunc_GetGamepadInputActionPrefix_Result' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetInputCategoryFromActionName, CallFunc_ReplaceInline_ReturnValue) == 0x000058, "Member 'FUNCLIB_GameSettings_C_GetInputCategoryFromActionName::CallFunc_ReplaceInline_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetInputCategoryFromActionName, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00005C, "Member 'FUNCLIB_GameSettings_C_GetInputCategoryFromActionName::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetInputCategoryFromActionName, CallFunc_Add_IntInt_ReturnValue) == 0x000060, "Member 'FUNCLIB_GameSettings_C_GetInputCategoryFromActionName::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetInputCategoryFromActionName, CallFunc_Conv_IntToByte_ReturnValue) == 0x000064, "Member 'FUNCLIB_GameSettings_C_GetInputCategoryFromActionName::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetInputCategoryFromActionName, CallFunc_GetValidValue_ReturnValue) == 0x000065, "Member 'FUNCLIB_GameSettings_C_GetInputCategoryFromActionName::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetInputCategoryFromActionName, CallFunc_GetInputActionPrefixForCategory_Result) == 0x000068, "Member 'FUNCLIB_GameSettings_C_GetInputCategoryFromActionName::CallFunc_GetInputActionPrefixForCategory_Result' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetInputCategoryFromActionName, CallFunc_StartsWith_ReturnValue) == 0x000078, "Member 'FUNCLIB_GameSettings_C_GetInputCategoryFromActionName::CallFunc_StartsWith_ReturnValue' has a wrong offset!");

// Function FUNCLIB_GameSettings.FUNCLIB_GameSettings_C.IsMedicalDemo
// 0x0010 (0x0010 - 0x0000)
struct FUNCLIB_GameSettings_C_IsMedicalDemo final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FUNCLIB_GameSettings_C_IsMedicalDemo) == 0x000008, "Wrong alignment on FUNCLIB_GameSettings_C_IsMedicalDemo");
static_assert(sizeof(FUNCLIB_GameSettings_C_IsMedicalDemo) == 0x000010, "Wrong size on FUNCLIB_GameSettings_C_IsMedicalDemo");
static_assert(offsetof(FUNCLIB_GameSettings_C_IsMedicalDemo, __WorldContext) == 0x000000, "Member 'FUNCLIB_GameSettings_C_IsMedicalDemo::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_IsMedicalDemo, Result) == 0x000008, "Member 'FUNCLIB_GameSettings_C_IsMedicalDemo::Result' has a wrong offset!");

// Function FUNCLIB_GameSettings.FUNCLIB_GameSettings_C.IsDismembermentAllowed
// 0x0010 (0x0010 - 0x0000)
struct FUNCLIB_GameSettings_C_IsDismembermentAllowed final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FUNCLIB_GameSettings_C_IsDismembermentAllowed) == 0x000008, "Wrong alignment on FUNCLIB_GameSettings_C_IsDismembermentAllowed");
static_assert(sizeof(FUNCLIB_GameSettings_C_IsDismembermentAllowed) == 0x000010, "Wrong size on FUNCLIB_GameSettings_C_IsDismembermentAllowed");
static_assert(offsetof(FUNCLIB_GameSettings_C_IsDismembermentAllowed, __WorldContext) == 0x000000, "Member 'FUNCLIB_GameSettings_C_IsDismembermentAllowed::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_IsDismembermentAllowed, Result) == 0x000008, "Member 'FUNCLIB_GameSettings_C_IsDismembermentAllowed::Result' has a wrong offset!");

// Function FUNCLIB_GameSettings.FUNCLIB_GameSettings_C.GetAcceleratedGamepadInputRotation
// 0x0068 (0x0068 - 0x0000)
struct FUNCLIB_GameSettings_C_GetAcceleratedGamepadInputRotation final
{
public:
	struct FVector2D                              LookVector;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaTime;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowMouseCrusor;                                   // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Result;                                            // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              NormalizedLookVector;                              // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ClampedMagnitude;                                  // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LookMagnitude;                                     // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_VSize2D_ReturnValue;                      // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Normal2D_ReturnValue;                     // 0x004C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Ease_ReturnValue;                         // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue;       // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FUNCLIB_GameSettings_C_GetAcceleratedGamepadInputRotation) == 0x000008, "Wrong alignment on FUNCLIB_GameSettings_C_GetAcceleratedGamepadInputRotation");
static_assert(sizeof(FUNCLIB_GameSettings_C_GetAcceleratedGamepadInputRotation) == 0x000068, "Wrong size on FUNCLIB_GameSettings_C_GetAcceleratedGamepadInputRotation");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetAcceleratedGamepadInputRotation, LookVector) == 0x000000, "Member 'FUNCLIB_GameSettings_C_GetAcceleratedGamepadInputRotation::LookVector' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetAcceleratedGamepadInputRotation, DeltaTime) == 0x000008, "Member 'FUNCLIB_GameSettings_C_GetAcceleratedGamepadInputRotation::DeltaTime' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetAcceleratedGamepadInputRotation, ShowMouseCrusor) == 0x00000C, "Member 'FUNCLIB_GameSettings_C_GetAcceleratedGamepadInputRotation::ShowMouseCrusor' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetAcceleratedGamepadInputRotation, __WorldContext) == 0x000010, "Member 'FUNCLIB_GameSettings_C_GetAcceleratedGamepadInputRotation::__WorldContext' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetAcceleratedGamepadInputRotation, Result) == 0x000018, "Member 'FUNCLIB_GameSettings_C_GetAcceleratedGamepadInputRotation::Result' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetAcceleratedGamepadInputRotation, NormalizedLookVector) == 0x000020, "Member 'FUNCLIB_GameSettings_C_GetAcceleratedGamepadInputRotation::NormalizedLookVector' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetAcceleratedGamepadInputRotation, ClampedMagnitude) == 0x000028, "Member 'FUNCLIB_GameSettings_C_GetAcceleratedGamepadInputRotation::ClampedMagnitude' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetAcceleratedGamepadInputRotation, LookMagnitude) == 0x00002C, "Member 'FUNCLIB_GameSettings_C_GetAcceleratedGamepadInputRotation::LookMagnitude' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetAcceleratedGamepadInputRotation, Temp_bool_Variable) == 0x000030, "Member 'FUNCLIB_GameSettings_C_GetAcceleratedGamepadInputRotation::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetAcceleratedGamepadInputRotation, CallFunc_VSize2D_ReturnValue) == 0x000034, "Member 'FUNCLIB_GameSettings_C_GetAcceleratedGamepadInputRotation::CallFunc_VSize2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetAcceleratedGamepadInputRotation, Temp_float_Variable) == 0x000038, "Member 'FUNCLIB_GameSettings_C_GetAcceleratedGamepadInputRotation::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetAcceleratedGamepadInputRotation, Temp_float_Variable_1) == 0x00003C, "Member 'FUNCLIB_GameSettings_C_GetAcceleratedGamepadInputRotation::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetAcceleratedGamepadInputRotation, CallFunc_FClamp_ReturnValue) == 0x000040, "Member 'FUNCLIB_GameSettings_C_GetAcceleratedGamepadInputRotation::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetAcceleratedGamepadInputRotation, K2Node_Select_Default) == 0x000044, "Member 'FUNCLIB_GameSettings_C_GetAcceleratedGamepadInputRotation::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetAcceleratedGamepadInputRotation, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000048, "Member 'FUNCLIB_GameSettings_C_GetAcceleratedGamepadInputRotation::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetAcceleratedGamepadInputRotation, CallFunc_Normal2D_ReturnValue) == 0x00004C, "Member 'FUNCLIB_GameSettings_C_GetAcceleratedGamepadInputRotation::CallFunc_Normal2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetAcceleratedGamepadInputRotation, CallFunc_Ease_ReturnValue) == 0x000054, "Member 'FUNCLIB_GameSettings_C_GetAcceleratedGamepadInputRotation::CallFunc_Ease_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetAcceleratedGamepadInputRotation, CallFunc_Multiply_Vector2DFloat_ReturnValue) == 0x000058, "Member 'FUNCLIB_GameSettings_C_GetAcceleratedGamepadInputRotation::CallFunc_Multiply_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FUNCLIB_GameSettings_C_GetAcceleratedGamepadInputRotation, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000060, "Member 'FUNCLIB_GameSettings_C_GetAcceleratedGamepadInputRotation::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

}

