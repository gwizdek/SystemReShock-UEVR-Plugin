#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WIDGET_Automap_KeyElement

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function WIDGET_Automap_KeyElement.WIDGET_Automap_KeyElement_C.ExecuteUbergraph_WIDGET_Automap_KeyElement
// 0x0030 (0x0030 - 0x0000)
struct WIDGET_Automap_KeyElement_C_ExecuteUbergraph_WIDGET_Automap_KeyElement final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetShortAccessName_Text;                  // 0x0008(0x0018)()
	class UITEM_AccessCard_C*                     K2Node_DynamicCast_AsITEM_Access_Card;             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_Automap_KeyElement_C_ExecuteUbergraph_WIDGET_Automap_KeyElement) == 0x000008, "Wrong alignment on WIDGET_Automap_KeyElement_C_ExecuteUbergraph_WIDGET_Automap_KeyElement");
static_assert(sizeof(WIDGET_Automap_KeyElement_C_ExecuteUbergraph_WIDGET_Automap_KeyElement) == 0x000030, "Wrong size on WIDGET_Automap_KeyElement_C_ExecuteUbergraph_WIDGET_Automap_KeyElement");
static_assert(offsetof(WIDGET_Automap_KeyElement_C_ExecuteUbergraph_WIDGET_Automap_KeyElement, EntryPoint) == 0x000000, "Member 'WIDGET_Automap_KeyElement_C_ExecuteUbergraph_WIDGET_Automap_KeyElement::EntryPoint' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_KeyElement_C_ExecuteUbergraph_WIDGET_Automap_KeyElement, CallFunc_GetShortAccessName_Text) == 0x000008, "Member 'WIDGET_Automap_KeyElement_C_ExecuteUbergraph_WIDGET_Automap_KeyElement::CallFunc_GetShortAccessName_Text' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_KeyElement_C_ExecuteUbergraph_WIDGET_Automap_KeyElement, K2Node_DynamicCast_AsITEM_Access_Card) == 0x000020, "Member 'WIDGET_Automap_KeyElement_C_ExecuteUbergraph_WIDGET_Automap_KeyElement::K2Node_DynamicCast_AsITEM_Access_Card' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_KeyElement_C_ExecuteUbergraph_WIDGET_Automap_KeyElement, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'WIDGET_Automap_KeyElement_C_ExecuteUbergraph_WIDGET_Automap_KeyElement::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function WIDGET_Automap_KeyElement.WIDGET_Automap_KeyElement_C.SetTexture
// 0x0060 (0x0060 - 0x0000)
struct WIDGET_Automap_KeyElement_C_SetTexture final
{
public:
	TSoftObjectPtr<class UTexture2D>              SoftTexture;                                       // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	class UTexture2D*                             Texture;                                           // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_LoadAsset_Blocking_ReturnValue;           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue;   // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             K2Node_DynamicCast_AsTexture_2D;                   // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicIconMaterial_DynamicMaterial;   // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_Automap_KeyElement_C_SetTexture) == 0x000008, "Wrong alignment on WIDGET_Automap_KeyElement_C_SetTexture");
static_assert(sizeof(WIDGET_Automap_KeyElement_C_SetTexture) == 0x000060, "Wrong size on WIDGET_Automap_KeyElement_C_SetTexture");
static_assert(offsetof(WIDGET_Automap_KeyElement_C_SetTexture, SoftTexture) == 0x000000, "Member 'WIDGET_Automap_KeyElement_C_SetTexture::SoftTexture' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_KeyElement_C_SetTexture, Texture) == 0x000028, "Member 'WIDGET_Automap_KeyElement_C_SetTexture::Texture' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_KeyElement_C_SetTexture, CallFunc_LoadAsset_Blocking_ReturnValue) == 0x000030, "Member 'WIDGET_Automap_KeyElement_C_SetTexture::CallFunc_LoadAsset_Blocking_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_KeyElement_C_SetTexture, CallFunc_IsValidSoftObjectReference_ReturnValue) == 0x000038, "Member 'WIDGET_Automap_KeyElement_C_SetTexture::CallFunc_IsValidSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_KeyElement_C_SetTexture, K2Node_DynamicCast_AsTexture_2D) == 0x000040, "Member 'WIDGET_Automap_KeyElement_C_SetTexture::K2Node_DynamicCast_AsTexture_2D' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_KeyElement_C_SetTexture, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'WIDGET_Automap_KeyElement_C_SetTexture::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_KeyElement_C_SetTexture, CallFunc_GetDynamicIconMaterial_DynamicMaterial) == 0x000050, "Member 'WIDGET_Automap_KeyElement_C_SetTexture::CallFunc_GetDynamicIconMaterial_DynamicMaterial' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_KeyElement_C_SetTexture, CallFunc_IsValid_ReturnValue) == 0x000058, "Member 'WIDGET_Automap_KeyElement_C_SetTexture::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function WIDGET_Automap_KeyElement.WIDGET_Automap_KeyElement_C.GetDynamicIconMaterial
// 0x0018 (0x0018 - 0x0000)
struct WIDGET_Automap_KeyElement_C_GetDynamicIconMaterial final
{
public:
	class UMaterialInstanceDynamic*               DynamicMaterial_0;                                 // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_ConvertToDynamicMaterialInstance_ReturnValue; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_Automap_KeyElement_C_GetDynamicIconMaterial) == 0x000008, "Wrong alignment on WIDGET_Automap_KeyElement_C_GetDynamicIconMaterial");
static_assert(sizeof(WIDGET_Automap_KeyElement_C_GetDynamicIconMaterial) == 0x000018, "Wrong size on WIDGET_Automap_KeyElement_C_GetDynamicIconMaterial");
static_assert(offsetof(WIDGET_Automap_KeyElement_C_GetDynamicIconMaterial, DynamicMaterial_0) == 0x000000, "Member 'WIDGET_Automap_KeyElement_C_GetDynamicIconMaterial::DynamicMaterial_0' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_KeyElement_C_GetDynamicIconMaterial, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'WIDGET_Automap_KeyElement_C_GetDynamicIconMaterial::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_KeyElement_C_GetDynamicIconMaterial, CallFunc_ConvertToDynamicMaterialInstance_ReturnValue) == 0x000010, "Member 'WIDGET_Automap_KeyElement_C_GetDynamicIconMaterial::CallFunc_ConvertToDynamicMaterialInstance_ReturnValue' has a wrong offset!");

// Function WIDGET_Automap_KeyElement.WIDGET_Automap_KeyElement_C.GetShortAccessName
// 0x0028 (0x0028 - 0x0000)
struct WIDGET_Automap_KeyElement_C_GetShortAccessName final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(Parm, OutParm)
	class UITEM_AccessCard_C*                     K2Node_DynamicCast_AsITEM_Access_Card;             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_Automap_KeyElement_C_GetShortAccessName) == 0x000008, "Wrong alignment on WIDGET_Automap_KeyElement_C_GetShortAccessName");
static_assert(sizeof(WIDGET_Automap_KeyElement_C_GetShortAccessName) == 0x000028, "Wrong size on WIDGET_Automap_KeyElement_C_GetShortAccessName");
static_assert(offsetof(WIDGET_Automap_KeyElement_C_GetShortAccessName, Text) == 0x000000, "Member 'WIDGET_Automap_KeyElement_C_GetShortAccessName::Text' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_KeyElement_C_GetShortAccessName, K2Node_DynamicCast_AsITEM_Access_Card) == 0x000018, "Member 'WIDGET_Automap_KeyElement_C_GetShortAccessName::K2Node_DynamicCast_AsITEM_Access_Card' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_KeyElement_C_GetShortAccessName, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'WIDGET_Automap_KeyElement_C_GetShortAccessName::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function WIDGET_Automap_KeyElement.WIDGET_Automap_KeyElement_C.EVENT_OnMouseEnter
// 0x00C8 (0x00C8 - 0x0000)
struct WIDGET_Automap_KeyElement_C_EVENT_OnMouseEnter final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_Hacker_Implant_C*                 K2Node_DynamicCast_AsPAWN_Hacker_Implant;          // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWIDGET_PlayerHUD_C*                    CallFunc_GetNeuralHUD_Result;                      // 0x00C0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_Automap_KeyElement_C_EVENT_OnMouseEnter) == 0x000008, "Wrong alignment on WIDGET_Automap_KeyElement_C_EVENT_OnMouseEnter");
static_assert(sizeof(WIDGET_Automap_KeyElement_C_EVENT_OnMouseEnter) == 0x0000C8, "Wrong size on WIDGET_Automap_KeyElement_C_EVENT_OnMouseEnter");
static_assert(offsetof(WIDGET_Automap_KeyElement_C_EVENT_OnMouseEnter, MyGeometry) == 0x000000, "Member 'WIDGET_Automap_KeyElement_C_EVENT_OnMouseEnter::MyGeometry' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_KeyElement_C_EVENT_OnMouseEnter, MouseEvent) == 0x000038, "Member 'WIDGET_Automap_KeyElement_C_EVENT_OnMouseEnter::MouseEvent' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_KeyElement_C_EVENT_OnMouseEnter, CallFunc_GetPlayerPawn_ReturnValue) == 0x0000A8, "Member 'WIDGET_Automap_KeyElement_C_EVENT_OnMouseEnter::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_KeyElement_C_EVENT_OnMouseEnter, K2Node_DynamicCast_AsPAWN_Hacker_Implant) == 0x0000B0, "Member 'WIDGET_Automap_KeyElement_C_EVENT_OnMouseEnter::K2Node_DynamicCast_AsPAWN_Hacker_Implant' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_KeyElement_C_EVENT_OnMouseEnter, K2Node_DynamicCast_bSuccess) == 0x0000B8, "Member 'WIDGET_Automap_KeyElement_C_EVENT_OnMouseEnter::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_KeyElement_C_EVENT_OnMouseEnter, CallFunc_GetNeuralHUD_Result) == 0x0000C0, "Member 'WIDGET_Automap_KeyElement_C_EVENT_OnMouseEnter::CallFunc_GetNeuralHUD_Result' has a wrong offset!");

// Function WIDGET_Automap_KeyElement.WIDGET_Automap_KeyElement_C.EVENT_OnMouseLeave
// 0x0090 (0x0090 - 0x0000)
struct WIDGET_Automap_KeyElement_C_EVENT_OnMouseLeave final
{
public:
	struct FPointerEvent                          MouseEvent;                                        // 0x0000(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_Hacker_Implant_C*                 K2Node_DynamicCast_AsPAWN_Hacker_Implant;          // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWIDGET_PlayerHUD_C*                    CallFunc_GetNeuralHUD_Result;                      // 0x0088(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_Automap_KeyElement_C_EVENT_OnMouseLeave) == 0x000008, "Wrong alignment on WIDGET_Automap_KeyElement_C_EVENT_OnMouseLeave");
static_assert(sizeof(WIDGET_Automap_KeyElement_C_EVENT_OnMouseLeave) == 0x000090, "Wrong size on WIDGET_Automap_KeyElement_C_EVENT_OnMouseLeave");
static_assert(offsetof(WIDGET_Automap_KeyElement_C_EVENT_OnMouseLeave, MouseEvent) == 0x000000, "Member 'WIDGET_Automap_KeyElement_C_EVENT_OnMouseLeave::MouseEvent' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_KeyElement_C_EVENT_OnMouseLeave, CallFunc_GetPlayerPawn_ReturnValue) == 0x000070, "Member 'WIDGET_Automap_KeyElement_C_EVENT_OnMouseLeave::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_KeyElement_C_EVENT_OnMouseLeave, K2Node_DynamicCast_AsPAWN_Hacker_Implant) == 0x000078, "Member 'WIDGET_Automap_KeyElement_C_EVENT_OnMouseLeave::K2Node_DynamicCast_AsPAWN_Hacker_Implant' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_KeyElement_C_EVENT_OnMouseLeave, K2Node_DynamicCast_bSuccess) == 0x000080, "Member 'WIDGET_Automap_KeyElement_C_EVENT_OnMouseLeave::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_KeyElement_C_EVENT_OnMouseLeave, CallFunc_GetNeuralHUD_Result) == 0x000088, "Member 'WIDGET_Automap_KeyElement_C_EVENT_OnMouseLeave::CallFunc_GetNeuralHUD_Result' has a wrong offset!");

// Function WIDGET_Automap_KeyElement.WIDGET_Automap_KeyElement_C.UpdateMouseOverVisuals
// 0x0050 (0x0050 - 0x0000)
struct WIDGET_Automap_KeyElement_C_UpdateMouseOverVisuals final
{
public:
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicIconMaterial_DynamicMaterial;   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicIconMaterial_DynamicMaterial_1; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 CallFunc_GetMeshUIColor_Color;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 CallFunc_GetMeshUIColor_Color_1;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_ColorToLinearColor_ReturnValue;      // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 CallFunc_GetMeshUIColor_Color_2;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_ColorToLinearColor_ReturnValue_1;    // 0x002C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue;              // 0x003C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 CallFunc_Conv_LinearColorToColor_ReturnValue;      // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_Automap_KeyElement_C_UpdateMouseOverVisuals) == 0x000008, "Wrong alignment on WIDGET_Automap_KeyElement_C_UpdateMouseOverVisuals");
static_assert(sizeof(WIDGET_Automap_KeyElement_C_UpdateMouseOverVisuals) == 0x000050, "Wrong size on WIDGET_Automap_KeyElement_C_UpdateMouseOverVisuals");
static_assert(offsetof(WIDGET_Automap_KeyElement_C_UpdateMouseOverVisuals, CallFunc_GetDynamicIconMaterial_DynamicMaterial) == 0x000000, "Member 'WIDGET_Automap_KeyElement_C_UpdateMouseOverVisuals::CallFunc_GetDynamicIconMaterial_DynamicMaterial' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_KeyElement_C_UpdateMouseOverVisuals, CallFunc_GetDynamicIconMaterial_DynamicMaterial_1) == 0x000008, "Member 'WIDGET_Automap_KeyElement_C_UpdateMouseOverVisuals::CallFunc_GetDynamicIconMaterial_DynamicMaterial_1' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_KeyElement_C_UpdateMouseOverVisuals, CallFunc_GetMeshUIColor_Color) == 0x000010, "Member 'WIDGET_Automap_KeyElement_C_UpdateMouseOverVisuals::CallFunc_GetMeshUIColor_Color' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_KeyElement_C_UpdateMouseOverVisuals, CallFunc_GetMeshUIColor_Color_1) == 0x000014, "Member 'WIDGET_Automap_KeyElement_C_UpdateMouseOverVisuals::CallFunc_GetMeshUIColor_Color_1' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_KeyElement_C_UpdateMouseOverVisuals, CallFunc_Conv_ColorToLinearColor_ReturnValue) == 0x000018, "Member 'WIDGET_Automap_KeyElement_C_UpdateMouseOverVisuals::CallFunc_Conv_ColorToLinearColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_KeyElement_C_UpdateMouseOverVisuals, CallFunc_GetMeshUIColor_Color_2) == 0x000028, "Member 'WIDGET_Automap_KeyElement_C_UpdateMouseOverVisuals::CallFunc_GetMeshUIColor_Color_2' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_KeyElement_C_UpdateMouseOverVisuals, CallFunc_Conv_ColorToLinearColor_ReturnValue_1) == 0x00002C, "Member 'WIDGET_Automap_KeyElement_C_UpdateMouseOverVisuals::CallFunc_Conv_ColorToLinearColor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_KeyElement_C_UpdateMouseOverVisuals, CallFunc_LinearColorLerp_ReturnValue) == 0x00003C, "Member 'WIDGET_Automap_KeyElement_C_UpdateMouseOverVisuals::CallFunc_LinearColorLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_KeyElement_C_UpdateMouseOverVisuals, CallFunc_Conv_LinearColorToColor_ReturnValue) == 0x00004C, "Member 'WIDGET_Automap_KeyElement_C_UpdateMouseOverVisuals::CallFunc_Conv_LinearColorToColor_ReturnValue' has a wrong offset!");

// Function WIDGET_Automap_KeyElement.WIDGET_Automap_KeyElement_C.GetToolTipText
// 0x0040 (0x0040 - 0x0000)
struct WIDGET_Automap_KeyElement_C_GetToolTipText final
{
public:
	class FText                                   ToolTip;                                           // 0x0000(0x0018)(Parm, OutParm)
	class UITEM_AccessCard_C*                     K2Node_DynamicCast_AsITEM_Access_Card;             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetDisplayName_Result;                    // 0x0028(0x0018)()
};
static_assert(alignof(WIDGET_Automap_KeyElement_C_GetToolTipText) == 0x000008, "Wrong alignment on WIDGET_Automap_KeyElement_C_GetToolTipText");
static_assert(sizeof(WIDGET_Automap_KeyElement_C_GetToolTipText) == 0x000040, "Wrong size on WIDGET_Automap_KeyElement_C_GetToolTipText");
static_assert(offsetof(WIDGET_Automap_KeyElement_C_GetToolTipText, ToolTip) == 0x000000, "Member 'WIDGET_Automap_KeyElement_C_GetToolTipText::ToolTip' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_KeyElement_C_GetToolTipText, K2Node_DynamicCast_AsITEM_Access_Card) == 0x000018, "Member 'WIDGET_Automap_KeyElement_C_GetToolTipText::K2Node_DynamicCast_AsITEM_Access_Card' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_KeyElement_C_GetToolTipText, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'WIDGET_Automap_KeyElement_C_GetToolTipText::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WIDGET_Automap_KeyElement_C_GetToolTipText, CallFunc_GetDisplayName_Result) == 0x000028, "Member 'WIDGET_Automap_KeyElement_C_GetToolTipText::CallFunc_GetDisplayName_Result' has a wrong offset!");

}

