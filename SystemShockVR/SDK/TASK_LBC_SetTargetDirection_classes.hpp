#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TASK_LBC_SetTargetDirection

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ENUM_LBC_DirectionBehavior_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "AIModule_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass TASK_LBC_SetTargetDirection.TASK_LBC_SetTargetDirection_C
// 0x0028 (0x00D0 - 0x00A8)
class UTASK_LBC_SetTargetDirection_C final : public UBTTask_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	float                                         EnterTimestamp;                                    // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_Enemy_C*                          Enemy;                                             // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_LBC_DirectionBehavior                    FaceDirectionType;                                 // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TargetDirection;                                   // 0x00C4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_TASK_LBC_SetTargetDirection(int32 EntryPoint);
	void ReceiveExecuteAI(class AAIController* OwnerController, class APawn* ControlledPawn);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"TASK_LBC_SetTargetDirection_C">();
	}
	static class UTASK_LBC_SetTargetDirection_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTASK_LBC_SetTargetDirection_C>();
	}
};
static_assert(alignof(UTASK_LBC_SetTargetDirection_C) == 0x000008, "Wrong alignment on UTASK_LBC_SetTargetDirection_C");
static_assert(sizeof(UTASK_LBC_SetTargetDirection_C) == 0x0000D0, "Wrong size on UTASK_LBC_SetTargetDirection_C");
static_assert(offsetof(UTASK_LBC_SetTargetDirection_C, UberGraphFrame) == 0x0000A8, "Member 'UTASK_LBC_SetTargetDirection_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UTASK_LBC_SetTargetDirection_C, EnterTimestamp) == 0x0000B0, "Member 'UTASK_LBC_SetTargetDirection_C::EnterTimestamp' has a wrong offset!");
static_assert(offsetof(UTASK_LBC_SetTargetDirection_C, Enemy) == 0x0000B8, "Member 'UTASK_LBC_SetTargetDirection_C::Enemy' has a wrong offset!");
static_assert(offsetof(UTASK_LBC_SetTargetDirection_C, FaceDirectionType) == 0x0000C0, "Member 'UTASK_LBC_SetTargetDirection_C::FaceDirectionType' has a wrong offset!");
static_assert(offsetof(UTASK_LBC_SetTargetDirection_C, TargetDirection) == 0x0000C4, "Member 'UTASK_LBC_SetTargetDirection_C::TargetDirection' has a wrong offset!");

}

