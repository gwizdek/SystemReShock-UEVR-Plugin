#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: COMP_DismembermentManager

#include "Basic.hpp"

#include "COMP_DismembermentManager_classes.hpp"
#include "COMP_DismembermentManager_parameters.hpp"


namespace SDK
{

// Function COMP_DismembermentManager.COMP_DismembermentManager_C.OnLimbDismembered__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             LimbName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSTRUCT_DismemberableLimb        LimbData                                               (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)
// class ADismembermentLimb_Base_C*        LimbActor                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    OnBeginPlay                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_DismembermentManager_C::OnLimbDismembered__DelegateSignature(class FName LimbName, const struct FSTRUCT_DismemberableLimb& LimbData, class ADismembermentLimb_Base_C* LimbActor, bool OnBeginPlay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "OnLimbDismembered__DelegateSignature");

	Params::COMP_DismembermentManager_C_OnLimbDismembered__DelegateSignature Parms{};

	Parms.LimbName = LimbName;
	Parms.LimbData = std::move(LimbData);
	Parms.LimbActor = LimbActor;
	Parms.OnBeginPlay = OnBeginPlay;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.OnDynaDamage__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             DynaElementName                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    OnBeginPlay                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_DismembermentManager_C::OnDynaDamage__DelegateSignature(class FName DynaElementName, bool OnBeginPlay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "OnDynaDamage__DelegateSignature");

	Params::COMP_DismembermentManager_C_OnDynaDamage__DelegateSignature Parms{};

	Parms.DynaElementName = DynaElementName;
	Parms.OnBeginPlay = OnBeginPlay;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.ExecuteUbergraph_COMP_DismembermentManager
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_DismembermentManager_C::ExecuteUbergraph_COMP_DismembermentManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "ExecuteUbergraph_COMP_DismembermentManager");

	Params::COMP_DismembermentManager_C_ExecuteUbergraph_COMP_DismembermentManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_DismembermentManager_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "ReceiveTick");

	Params::COMP_DismembermentManager_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.StreamDismemberableLimbMesh
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             LimbName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSTRUCT_DismemberableLimb        LimbData                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)

void UCOMP_DismembermentManager_C::StreamDismemberableLimbMesh(class FName LimbName, const struct FSTRUCT_DismemberableLimb& LimbData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "StreamDismemberableLimbMesh");

	Params::COMP_DismembermentManager_C_StreamDismemberableLimbMesh Parms{};

	Parms.LimbName = LimbName;
	Parms.LimbData = std::move(LimbData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.OnLoaded_3E0AC6B84CCA7F17E04CA4AA481994B7
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Loaded                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_DismembermentManager_C::OnLoaded_3E0AC6B84CCA7F17E04CA4AA481994B7(class UObject* Loaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "OnLoaded_3E0AC6B84CCA7F17E04CA4AA481994B7");

	Params::COMP_DismembermentManager_C_OnLoaded_3E0AC6B84CCA7F17E04CA4AA481994B7 Parms{};

	Parms.Loaded = Loaded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.InitializeDismembermentManager
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UCOMP_DismembermentManager_C::InitializeDismembermentManager()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "InitializeDismembermentManager");

	UObject::ProcessEvent(Func, nullptr);
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.InitializeDismemberedLimb
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   LowHideMask_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   HighHideMask_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UDataTable*                       DismembermentData                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UDataTable*                       DynaDamageData                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             LimbRowName_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   MissingLimbBits                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ActivatedDynaDamageBits                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FVector4>                 BloodData                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UCOMP_DismembermentManager_C::InitializeDismemberedLimb(int32 LowHideMask_0, int32 HighHideMask_0, class UDataTable* DismembermentData, class UDataTable* DynaDamageData, class FName LimbRowName_0, int32 MissingLimbBits, int32 ActivatedDynaDamageBits, TArray<struct FVector4>& BloodData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "InitializeDismemberedLimb");

	Params::COMP_DismembermentManager_C_InitializeDismemberedLimb Parms{};

	Parms.LowHideMask_0 = LowHideMask_0;
	Parms.HighHideMask_0 = HighHideMask_0;
	Parms.DismembermentData = DismembermentData;
	Parms.DynaDamageData = DynaDamageData;
	Parms.LimbRowName_0 = LimbRowName_0;
	Parms.MissingLimbBits = MissingLimbBits;
	Parms.ActivatedDynaDamageBits = ActivatedDynaDamageBits;
	Parms.BloodData = std::move(BloodData);

	UObject::ProcessEvent(Func, &Parms);

	BloodData = std::move(Parms.BloodData);
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.ReceiveDamage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UOBJ_ImpactData_C*                Impact                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FAttribDamageInstance            Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    LegDismembered                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    LimbDismembered                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_DismembermentManager_C::ReceiveDamage(class UOBJ_ImpactData_C* Impact, const struct FAttribDamageInstance& Damage, bool* LegDismembered, bool* LimbDismembered)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "ReceiveDamage");

	Params::COMP_DismembermentManager_C_ReceiveDamage Parms{};

	Parms.Impact = Impact;
	Parms.Damage = std::move(Damage);

	UObject::ProcessEvent(Func, &Parms);

	if (LegDismembered != nullptr)
		*LegDismembered = Parms.LegDismembered;

	if (LimbDismembered != nullptr)
		*LimbDismembered = Parms.LimbDismembered;
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.DealDamageToDismemberLimbs
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UOBJ_ImpactData_C*                Impact                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FAttribDamageInstance            Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    LegDismembered                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    LimbDismembered                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_DismembermentManager_C::DealDamageToDismemberLimbs(class UOBJ_ImpactData_C* Impact, const struct FAttribDamageInstance& Damage, bool* LegDismembered, bool* LimbDismembered)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "DealDamageToDismemberLimbs");

	Params::COMP_DismembermentManager_C_DealDamageToDismemberLimbs Parms{};

	Parms.Impact = Impact;
	Parms.Damage = std::move(Damage);

	UObject::ProcessEvent(Func, &Parms);

	if (LegDismembered != nullptr)
		*LegDismembered = Parms.LegDismembered;

	if (LimbDismembered != nullptr)
		*LimbDismembered = Parms.LimbDismembered;
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.TryDismemberLimbManually
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             LimbName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ImpactPoint                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          LinearImpulse                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_DismembermentManager_C::TryDismemberLimbManually(class FName LimbName, const struct FVector& ImpactPoint, const struct FVector& LinearImpulse, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "TryDismemberLimbManually");

	Params::COMP_DismembermentManager_C_TryDismemberLimbManually Parms{};

	Parms.LimbName = LimbName;
	Parms.ImpactPoint = std::move(ImpactPoint);
	Parms.LinearImpulse = std::move(LinearImpulse);

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.ForceDismemberLimb
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             LimbToDismember                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UOBJ_ImpactData_C*                Impact                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FAttribDamageInstance            Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    DestroyLimb_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    LegDismembered                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_DismembermentManager_C::ForceDismemberLimb(class FName LimbToDismember, class UOBJ_ImpactData_C* Impact, const struct FAttribDamageInstance& Damage, bool DestroyLimb_0, bool* LegDismembered)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "ForceDismemberLimb");

	Params::COMP_DismembermentManager_C_ForceDismemberLimb Parms{};

	Parms.LimbToDismember = LimbToDismember;
	Parms.Impact = Impact;
	Parms.Damage = std::move(Damage);
	Parms.DestroyLimb_0 = DestroyLimb_0;

	UObject::ProcessEvent(Func, &Parms);

	if (LegDismembered != nullptr)
		*LegDismembered = Parms.LegDismembered;
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.SpawnDismemberedLimb
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Limb                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UOBJ_ImpactData_C*                ImpactData                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ADismembermentLimb_Base_C*        NewLimb                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_DismembermentManager_C::SpawnDismemberedLimb(class FName Limb, class UOBJ_ImpactData_C* ImpactData, class ADismembermentLimb_Base_C** NewLimb)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "SpawnDismemberedLimb");

	Params::COMP_DismembermentManager_C_SpawnDismemberedLimb Parms{};

	Parms.Limb = Limb;
	Parms.ImpactData = ImpactData;

	UObject::ProcessEvent(Func, &Parms);

	if (NewLimb != nullptr)
		*NewLimb = Parms.NewLimb;
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.DestroyLimb
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Limb                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FAttribDamageInstance            DamageInstance                                         (BlueprintVisible, BlueprintReadOnly, Parm)
// class UOBJ_ImpactData_C*                ImpactData                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_DismembermentManager_C::DestroyLimb(class FName Limb, const struct FAttribDamageInstance& DamageInstance, class UOBJ_ImpactData_C* ImpactData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "DestroyLimb");

	Params::COMP_DismembermentManager_C_DestroyLimb Parms{};

	Parms.Limb = Limb;
	Parms.DamageInstance = std::move(DamageInstance);
	Parms.ImpactData = ImpactData;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.GetLimbMesh
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class USkeletalMeshComponent*           Mesh                                                   (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_DismembermentManager_C::GetLimbMesh(class USkeletalMeshComponent** Mesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "GetLimbMesh");

	Params::COMP_DismembermentManager_C_GetLimbMesh Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Mesh != nullptr)
		*Mesh = Parms.Mesh;
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.RemoveLimb
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             LimbName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_DismembermentManager_C::RemoveLimb(class FName LimbName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "RemoveLimb");

	Params::COMP_DismembermentManager_C_RemoveLimb Parms{};

	Parms.LimbName = LimbName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.GetLimbDamageAccumulator
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Limb                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ULimbDamageAccumulator_C*         Accumulator                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_DismembermentManager_C::GetLimbDamageAccumulator(class FName Limb, class ULimbDamageAccumulator_C** Accumulator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "GetLimbDamageAccumulator");

	Params::COMP_DismembermentManager_C_GetLimbDamageAccumulator Parms{};

	Parms.Limb = Limb;

	UObject::ProcessEvent(Func, &Parms);

	if (Accumulator != nullptr)
		*Accumulator = Parms.Accumulator;
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.GetLimbName
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             Limb                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_DismembermentManager_C::GetLimbName(class FName* Limb)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "GetLimbName");

	Params::COMP_DismembermentManager_C_GetLimbName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Limb != nullptr)
		*Limb = Parms.Limb;
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.IsLimbAttached
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             Limb                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_DismembermentManager_C::IsLimbAttached(class FName Limb, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "IsLimbAttached");

	Params::COMP_DismembermentManager_C_IsLimbAttached Parms{};

	Parms.Limb = Limb;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.SetHideIndices
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           HideIndices                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    HideState                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_DismembermentManager_C::SetHideIndices(TArray<int32>& HideIndices, bool HideState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "SetHideIndices");

	Params::COMP_DismembermentManager_C_SetHideIndices Parms{};

	Parms.HideIndices = std::move(HideIndices);
	Parms.HideState = HideState;

	UObject::ProcessEvent(Func, &Parms);

	HideIndices = std::move(Parms.HideIndices);
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.UpdateMaterialParameters
// (Public, BlueprintCallable, BlueprintEvent)

void UCOMP_DismembermentManager_C::UpdateMaterialParameters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "UpdateMaterialParameters");

	UObject::ProcessEvent(Func, nullptr);
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.HideInitialIDs
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UCOMP_DismembermentManager_C::HideInitialIDs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "HideInitialIDs");

	UObject::ProcessEvent(Func, nullptr);
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.IsOwnerAlive
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsAlive                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_DismembermentManager_C::IsOwnerAlive(bool* IsAlive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "IsOwnerAlive");

	Params::COMP_DismembermentManager_C_IsOwnerAlive Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsAlive != nullptr)
		*IsAlive = Parms.IsAlive;
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.DealDamageToDynaElements
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UOBJ_ImpactData_C*                Impact                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FAttribDamageInstance            Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    PseudoLimbsDestroyed                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_DismembermentManager_C::DealDamageToDynaElements(class UOBJ_ImpactData_C* Impact, const struct FAttribDamageInstance& Damage, bool* PseudoLimbsDestroyed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "DealDamageToDynaElements");

	Params::COMP_DismembermentManager_C_DealDamageToDynaElements Parms{};

	Parms.Impact = Impact;
	Parms.Damage = std::move(Damage);

	UObject::ProcessEvent(Func, &Parms);

	if (PseudoLimbsDestroyed != nullptr)
		*PseudoLimbsDestroyed = Parms.PseudoLimbsDestroyed;
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.SpawnDynaDamageEffects
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             DynaDamage                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_DismembermentManager_C::SpawnDynaDamageEffects(class FName DynaDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "SpawnDynaDamageEffects");

	Params::COMP_DismembermentManager_C_SpawnDynaDamageEffects Parms{};

	Parms.DynaDamage = DynaDamage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.DisableChildBoneCollision
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ParentBone                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsCleanBreak                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_DismembermentManager_C::DisableChildBoneCollision(class FName ParentBone, bool IsCleanBreak)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "DisableChildBoneCollision");

	Params::COMP_DismembermentManager_C_DisableChildBoneCollision Parms{};

	Parms.ParentBone = ParentBone;
	Parms.IsCleanBreak = IsCleanBreak;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.GetLimbByBone
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             BoneName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             Limb                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_DismembermentManager_C::GetLimbByBone(class FName BoneName, class FName* Limb)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "GetLimbByBone");

	Params::COMP_DismembermentManager_C_GetLimbByBone Parms{};

	Parms.BoneName = BoneName;

	UObject::ProcessEvent(Func, &Parms);

	if (Limb != nullptr)
		*Limb = Parms.Limb;
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.GetLimbByIndex
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             LimbName                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_DismembermentManager_C::GetLimbByIndex(int32 Index_0, class FName* LimbName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "GetLimbByIndex");

	Params::COMP_DismembermentManager_C_GetLimbByIndex Parms{};

	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);

	if (LimbName != nullptr)
		*LimbName = Parms.LimbName;
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.UpdateDestroyedDynaDamageBits
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ParentBoneName                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_DismembermentManager_C::UpdateDestroyedDynaDamageBits(class FName ParentBoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "UpdateDestroyedDynaDamageBits");

	Params::COMP_DismembermentManager_C_UpdateDestroyedDynaDamageBits Parms{};

	Parms.ParentBoneName = ParentBoneName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.GetDynaDamageAccumumlator
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             DynaDamageElement                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ULimbDamageAccumulator_C*         Accumulator                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_DismembermentManager_C::GetDynaDamageAccumumlator(class FName DynaDamageElement, class ULimbDamageAccumulator_C** Accumulator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "GetDynaDamageAccumumlator");

	Params::COMP_DismembermentManager_C_GetDynaDamageAccumumlator Parms{};

	Parms.DynaDamageElement = DynaDamageElement;

	UObject::ProcessEvent(Func, &Parms);

	if (Accumulator != nullptr)
		*Accumulator = Parms.Accumulator;
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.GetLimbRowName
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FSTRUCT_DismemberableLimb        Limb                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)
// class FName                             RowName                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_DismembermentManager_C::GetLimbRowName(const struct FSTRUCT_DismemberableLimb& Limb, class FName* RowName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "GetLimbRowName");

	Params::COMP_DismembermentManager_C_GetLimbRowName Parms{};

	Parms.Limb = std::move(Limb);

	UObject::ProcessEvent(Func, &Parms);

	if (RowName != nullptr)
		*RowName = Parms.RowName;
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.GetLimbData
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             Limb                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSTRUCT_DismemberableLimb        LimbData                                               (Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)

void UCOMP_DismembermentManager_C::GetLimbData(class FName Limb, struct FSTRUCT_DismemberableLimb* LimbData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "GetLimbData");

	Params::COMP_DismembermentManager_C_GetLimbData Parms{};

	Parms.Limb = Limb;

	UObject::ProcessEvent(Func, &Parms);

	if (LimbData != nullptr)
		*LimbData = std::move(Parms.LimbData);
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.GetLimbIndex
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             LimbName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Index_0                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_DismembermentManager_C::GetLimbIndex(class FName LimbName, int32* Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "GetLimbIndex");

	Params::COMP_DismembermentManager_C_GetLimbIndex Parms{};

	Parms.LimbName = LimbName;

	UObject::ProcessEvent(Func, &Parms);

	if (Index_0 != nullptr)
		*Index_0 = Parms.Index_0;
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.TryApplyInstantDynaDamage
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             DynaDamageElement                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    SpawnEffects                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_DismembermentManager_C::TryApplyInstantDynaDamage(class FName DynaDamageElement, bool SpawnEffects, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "TryApplyInstantDynaDamage");

	Params::COMP_DismembermentManager_C_TryApplyInstantDynaDamage Parms{};

	Parms.DynaDamageElement = DynaDamageElement;
	Parms.SpawnEffects = SpawnEffects;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.GetDynaData
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             DynaElement                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSTRUCT_DynaDamageElement        DynaData                                               (Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)

void UCOMP_DismembermentManager_C::GetDynaData(class FName DynaElement, struct FSTRUCT_DynaDamageElement* DynaData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "GetDynaData");

	Params::COMP_DismembermentManager_C_GetDynaData Parms{};

	Parms.DynaElement = DynaElement;

	UObject::ProcessEvent(Func, &Parms);

	if (DynaData != nullptr)
		*DynaData = std::move(Parms.DynaData);
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.GetDynaIndex
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             DynaElement                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Index_0                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_DismembermentManager_C::GetDynaIndex(class FName DynaElement, int32* Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "GetDynaIndex");

	Params::COMP_DismembermentManager_C_GetDynaIndex Parms{};

	Parms.DynaElement = DynaElement;

	UObject::ProcessEvent(Func, &Parms);

	if (Index_0 != nullptr)
		*Index_0 = Parms.Index_0;
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.HasAnyDismemberedLimbs
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_DismembermentManager_C::HasAnyDismemberedLimbs(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "HasAnyDismemberedLimbs");

	Params::COMP_DismembermentManager_C_HasAnyDismemberedLimbs Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.HasAnyDynamicDamage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_DismembermentManager_C::HasAnyDynamicDamage(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "HasAnyDynamicDamage");

	Params::COMP_DismembermentManager_C_HasAnyDynamicDamage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.HasAttachedChildLimb
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_DismembermentManager_C::HasAttachedChildLimb(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "HasAttachedChildLimb");

	Params::COMP_DismembermentManager_C_HasAttachedChildLimb Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.HasUnactivatedDynaDamage
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_DismembermentManager_C::HasUnactivatedDynaDamage(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "HasUnactivatedDynaDamage");

	Params::COMP_DismembermentManager_C_HasUnactivatedDynaDamage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.IsDynaElementUnactivated
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             DynaElement                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_DismembermentManager_C::IsDynaElementUnactivated(class FName DynaElement, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "IsDynaElementUnactivated");

	Params::COMP_DismembermentManager_C_IsDynaElementUnactivated Parms{};

	Parms.DynaElement = DynaElement;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.GetChildLimbBits
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ParentLimb                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IncludeSelf                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   ChildBits                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_DismembermentManager_C::GetChildLimbBits(class FName ParentLimb, bool IncludeSelf, int32* ChildBits)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "GetChildLimbBits");

	Params::COMP_DismembermentManager_C_GetChildLimbBits Parms{};

	Parms.ParentLimb = ParentLimb;
	Parms.IncludeSelf = IncludeSelf;

	UObject::ProcessEvent(Func, &Parms);

	if (ChildBits != nullptr)
		*ChildBits = Parms.ChildBits;
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.GetChildLimbs
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ParentLimb                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IncludeSelf                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IncludeDescendants                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<class FName>                     ChildLimbs                                             (Parm, OutParm)

void UCOMP_DismembermentManager_C::GetChildLimbs(class FName ParentLimb, bool IncludeSelf, bool IncludeDescendants, TArray<class FName>* ChildLimbs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "GetChildLimbs");

	Params::COMP_DismembermentManager_C_GetChildLimbs Parms{};

	Parms.ParentLimb = ParentLimb;
	Parms.IncludeSelf = IncludeSelf;
	Parms.IncludeDescendants = IncludeDescendants;

	UObject::ProcessEvent(Func, &Parms);

	if (ChildLimbs != nullptr)
		*ChildLimbs = std::move(Parms.ChildLimbs);
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.GetChildDynaElements
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             ParentElement                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class FName>                     ChildElements                                          (Parm, OutParm)

void UCOMP_DismembermentManager_C::GetChildDynaElements(class FName ParentElement, TArray<class FName>* ChildElements)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "GetChildDynaElements");

	Params::COMP_DismembermentManager_C_GetChildDynaElements Parms{};

	Parms.ParentElement = ParentElement;

	UObject::ProcessEvent(Func, &Parms);

	if (ChildElements != nullptr)
		*ChildElements = std::move(Parms.ChildElements);
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.GetDynaDamageBonusFromBoneName
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             BoneName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BonusPercent                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_DismembermentManager_C::GetDynaDamageBonusFromBoneName(class FName BoneName, float* BonusPercent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "GetDynaDamageBonusFromBoneName");

	Params::COMP_DismembermentManager_C_GetDynaDamageBonusFromBoneName Parms{};

	Parms.BoneName = BoneName;

	UObject::ProcessEvent(Func, &Parms);

	if (BonusPercent != nullptr)
		*BonusPercent = Parms.BonusPercent;
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.GetOrderedLimbList
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FName>                     Limbs                                                  (Parm, OutParm)

void UCOMP_DismembermentManager_C::GetOrderedLimbList(TArray<class FName>* Limbs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "GetOrderedLimbList");

	Params::COMP_DismembermentManager_C_GetOrderedLimbList Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Limbs != nullptr)
		*Limbs = std::move(Parms.Limbs);
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.GetDynaDamageByBone
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             Bone                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class FName>                     DynaDamageElements                                     (Parm, OutParm)

void UCOMP_DismembermentManager_C::GetDynaDamageByBone(class FName Bone, TArray<class FName>* DynaDamageElements)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "GetDynaDamageByBone");

	Params::COMP_DismembermentManager_C_GetDynaDamageByBone Parms{};

	Parms.Bone = Bone;

	UObject::ProcessEvent(Func, &Parms);

	if (DynaDamageElements != nullptr)
		*DynaDamageElements = std::move(Parms.DynaDamageElements);
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.GetDynaDamageBone
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             DynaDamage                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             Bone                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_DismembermentManager_C::GetDynaDamageBone(class FName DynaDamage, class FName* Bone)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "GetDynaDamageBone");

	Params::COMP_DismembermentManager_C_GetDynaDamageBone Parms{};

	Parms.DynaDamage = DynaDamage;

	UObject::ProcessEvent(Func, &Parms);

	if (Bone != nullptr)
		*Bone = Parms.Bone;
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.GetLimbStrengthSettings
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// ENUM_LimbStrength                       Strength                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   StackArmor                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   StackCount                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_DismembermentManager_C::GetLimbStrengthSettings(ENUM_LimbStrength Strength, int32* StackArmor, int32* StackCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "GetLimbStrengthSettings");

	Params::COMP_DismembermentManager_C_GetLimbStrengthSettings Parms{};

	Parms.Strength = Strength;

	UObject::ProcessEvent(Func, &Parms);

	if (StackArmor != nullptr)
		*StackArmor = Parms.StackArmor;

	if (StackCount != nullptr)
		*StackCount = Parms.StackCount;
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.GetDynaDamageByIndex
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             DynaName                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_DismembermentManager_C::GetDynaDamageByIndex(int32 Index_0, class FName* DynaName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "GetDynaDamageByIndex");

	Params::COMP_DismembermentManager_C_GetDynaDamageByIndex Parms{};

	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);

	if (DynaName != nullptr)
		*DynaName = Parms.DynaName;
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.SetOwnerLimbRemoved
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Limb                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSTRUCT_DismemberableLimb        LimbData                                               (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)
// class ADismembermentLimb_Base_C*        LimbActor                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Initialization                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_DismembermentManager_C::SetOwnerLimbRemoved(class FName Limb, const struct FSTRUCT_DismemberableLimb& LimbData, class ADismembermentLimb_Base_C* LimbActor, bool Initialization)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "SetOwnerLimbRemoved");

	Params::COMP_DismembermentManager_C_SetOwnerLimbRemoved Parms{};

	Parms.Limb = Limb;
	Parms.LimbData = std::move(LimbData);
	Parms.LimbActor = LimbActor;
	Parms.Initialization = Initialization;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.SetOwnerDynaDestroyed
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             DynaElement                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Initialization                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_DismembermentManager_C::SetOwnerDynaDestroyed(class FName DynaElement, bool Initialization)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "SetOwnerDynaDestroyed");

	Params::COMP_DismembermentManager_C_SetOwnerDynaDestroyed Parms{};

	Parms.DynaElement = DynaElement;
	Parms.Initialization = Initialization;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.ComputeSlicingDamage
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FAttribDamageInstance            DamageInstance                                         (BlueprintVisible, BlueprintReadOnly, Parm)
// float                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_DismembermentManager_C::ComputeSlicingDamage(const struct FAttribDamageInstance& DamageInstance, float* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "ComputeSlicingDamage");

	Params::COMP_DismembermentManager_C_ComputeSlicingDamage Parms{};

	Parms.DamageInstance = std::move(DamageInstance);

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.ShouldDestroyLimbActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_DismembermentManager_C::ShouldDestroyLimbActor(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "ShouldDestroyLimbActor");

	Params::COMP_DismembermentManager_C_ShouldDestroyLimbActor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.DoesLimbDestroyActor
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             Limb                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_DismembermentManager_C::DoesLimbDestroyActor(class FName Limb, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "DoesLimbDestroyActor");

	Params::COMP_DismembermentManager_C_DoesLimbDestroyActor Parms{};

	Parms.Limb = Limb;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.SpawnDismemberLimbEffects
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             LimbName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ADismembermentLimb_Base_C*        NewLimb                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_DismembermentManager_C::SpawnDismemberLimbEffects(class FName LimbName, class ADismembermentLimb_Base_C* NewLimb)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "SpawnDismemberLimbEffects");

	Params::COMP_DismembermentManager_C_SpawnDismemberLimbEffects Parms{};

	Parms.LimbName = LimbName;
	Parms.NewLimb = NewLimb;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.GetParentLimb
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ChildLimb                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ParentLimb                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_DismembermentManager_C::GetParentLimb(class FName ChildLimb, class FName* ParentLimb)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "GetParentLimb");

	Params::COMP_DismembermentManager_C_GetParentLimb Parms{};

	Parms.ChildLimb = ChildLimb;

	UObject::ProcessEvent(Func, &Parms);

	if (ParentLimb != nullptr)
		*ParentLimb = Parms.ParentLimb;
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.GetLimbBoneNames
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Limb                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class FName>                     LimbBoneNames                                          (Parm, OutParm)

void UCOMP_DismembermentManager_C::GetLimbBoneNames(class FName Limb, TArray<class FName>* LimbBoneNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "GetLimbBoneNames");

	Params::COMP_DismembermentManager_C_GetLimbBoneNames Parms{};

	Parms.Limb = Limb;

	UObject::ProcessEvent(Func, &Parms);

	if (LimbBoneNames != nullptr)
		*LimbBoneNames = std::move(Parms.LimbBoneNames);
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.GetDecalSampler
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkinnedDecalSampler*             SkinnedDecalSampler                                    (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_DismembermentManager_C::GetDecalSampler(class USkinnedDecalSampler** SkinnedDecalSampler)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "GetDecalSampler");

	Params::COMP_DismembermentManager_C_GetDecalSampler Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SkinnedDecalSampler != nullptr)
		*SkinnedDecalSampler = Parms.SkinnedDecalSampler;
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.StreamDismemberableLimbAssets
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             LimbName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSTRUCT_DismemberableLimb        LimbData                                               (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)

void UCOMP_DismembermentManager_C::StreamDismemberableLimbAssets(class FName LimbName, const struct FSTRUCT_DismemberableLimb& LimbData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "StreamDismemberableLimbAssets");

	Params::COMP_DismembermentManager_C_StreamDismemberableLimbAssets Parms{};

	Parms.LimbName = LimbName;
	Parms.LimbData = std::move(LimbData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.SpawnEffect
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSTRUCT_LimbSpawnEffect          EffectParams                                           (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
// class USceneComponent*                  ParentComponent                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             BoneName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_DismembermentManager_C::SpawnEffect(const struct FSTRUCT_LimbSpawnEffect& EffectParams, class USceneComponent* ParentComponent, class FName BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "SpawnEffect");

	Params::COMP_DismembermentManager_C_SpawnEffect Parms{};

	Parms.EffectParams = std::move(EffectParams);
	Parms.ParentComponent = ParentComponent;
	Parms.BoneName = BoneName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.SpawnEffectAttached
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSTRUCT_LimbSpawnEffect          EffectParams                                           (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
// class FName                             BoneName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_DismembermentManager_C::SpawnEffectAttached(const struct FSTRUCT_LimbSpawnEffect& EffectParams, class FName BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "SpawnEffectAttached");

	Params::COMP_DismembermentManager_C_SpawnEffectAttached Parms{};

	Parms.EffectParams = std::move(EffectParams);
	Parms.BoneName = BoneName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.SpawnEffectImmediately
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UNiagaraSystem*                   NiagaraSystem                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USceneComponent*                  ParentComponent                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             BoneName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       LocalTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// class UNiagaraComponent*                ParticleSystem                                         (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_DismembermentManager_C::SpawnEffectImmediately(class UNiagaraSystem* NiagaraSystem, class USceneComponent* ParentComponent, class FName BoneName, const struct FTransform& LocalTransform, class UNiagaraComponent** ParticleSystem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "SpawnEffectImmediately");

	Params::COMP_DismembermentManager_C_SpawnEffectImmediately Parms{};

	Parms.NiagaraSystem = NiagaraSystem;
	Parms.ParentComponent = ParentComponent;
	Parms.BoneName = BoneName;
	Parms.LocalTransform = std::move(LocalTransform);

	UObject::ProcessEvent(Func, &Parms);

	if (ParticleSystem != nullptr)
		*ParticleSystem = Parms.ParticleSystem;
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.DrawDebugSpheres
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UCOMP_DismembermentManager_C::DrawDebugSpheres()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "DrawDebugSpheres");

	UObject::ProcessEvent(Func, nullptr);
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.TransferAttachedLimbEffects
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ADismembermentLimb_Base_C*        New_Limb                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             BoneName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_DismembermentManager_C::TransferAttachedLimbEffects(class ADismembermentLimb_Base_C* New_Limb, class FName BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "TransferAttachedLimbEffects");

	Params::COMP_DismembermentManager_C_TransferAttachedLimbEffects Parms{};

	Parms.New_Limb = New_Limb;
	Parms.BoneName = BoneName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.TransferDecals
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ADismembermentLimb_Base_C*        NewLimb                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UCOMP_DismembermentManager_C::TransferDecals(class ADismembermentLimb_Base_C* NewLimb, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "TransferDecals");

	Params::COMP_DismembermentManager_C_TransferDecals Parms{};

	Parms.NewLimb = NewLimb;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.PlayDismemberImpactSound
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UOBJ_ImpactData_C*                ImpactData                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             BoneName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCOMP_DismembermentManager_C::PlayDismemberImpactSound(class UOBJ_ImpactData_C* ImpactData, class FName BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "PlayDismemberImpactSound");

	Params::COMP_DismembermentManager_C_PlayDismemberImpactSound Parms{};

	Parms.ImpactData = ImpactData;
	Parms.BoneName = BoneName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function COMP_DismembermentManager.COMP_DismembermentManager_C.ShouldSaveComponent
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FStreamingSaveGameComponentParamsParams_0                                               (Parm, OutParm, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UCOMP_DismembermentManager_C::ShouldSaveComponent(struct FStreamingSaveGameComponentParams* Params_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("COMP_DismembermentManager_C", "ShouldSaveComponent");

	Params::COMP_DismembermentManager_C_ShouldSaveComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Params_0 != nullptr)
		*Params_0 = std::move(Parms.Params_0);

	return Parms.ReturnValue;
}

}

