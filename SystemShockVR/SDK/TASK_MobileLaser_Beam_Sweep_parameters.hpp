#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TASK_MobileLaser_Beam_Sweep

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "ENUM_MobileLaser_BeamState_structs.hpp"
#include "Engine_structs.hpp"
#include "ENUM_MobileLaser_BeamSweepType_structs.hpp"


namespace SDK::Params
{

// Function TASK_MobileLaser_Beam_Sweep.TASK_MobileLaser_Beam_Sweep_C.ExecuteUbergraph_TASK_MobileLaser_Beam_Sweep
// 0x0018 (0x0018 - 0x0000)
struct TASK_MobileLaser_Beam_Sweep_C_ExecuteUbergraph_TASK_MobileLaser_Beam_Sweep final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          K2Node_Event_OwnerController;                      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn;                       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TASK_MobileLaser_Beam_Sweep_C_ExecuteUbergraph_TASK_MobileLaser_Beam_Sweep) == 0x000008, "Wrong alignment on TASK_MobileLaser_Beam_Sweep_C_ExecuteUbergraph_TASK_MobileLaser_Beam_Sweep");
static_assert(sizeof(TASK_MobileLaser_Beam_Sweep_C_ExecuteUbergraph_TASK_MobileLaser_Beam_Sweep) == 0x000018, "Wrong size on TASK_MobileLaser_Beam_Sweep_C_ExecuteUbergraph_TASK_MobileLaser_Beam_Sweep");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_ExecuteUbergraph_TASK_MobileLaser_Beam_Sweep, EntryPoint) == 0x000000, "Member 'TASK_MobileLaser_Beam_Sweep_C_ExecuteUbergraph_TASK_MobileLaser_Beam_Sweep::EntryPoint' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_ExecuteUbergraph_TASK_MobileLaser_Beam_Sweep, K2Node_Event_OwnerController) == 0x000008, "Member 'TASK_MobileLaser_Beam_Sweep_C_ExecuteUbergraph_TASK_MobileLaser_Beam_Sweep::K2Node_Event_OwnerController' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_ExecuteUbergraph_TASK_MobileLaser_Beam_Sweep, K2Node_Event_ControlledPawn) == 0x000010, "Member 'TASK_MobileLaser_Beam_Sweep_C_ExecuteUbergraph_TASK_MobileLaser_Beam_Sweep::K2Node_Event_ControlledPawn' has a wrong offset!");

// Function TASK_MobileLaser_Beam_Sweep.TASK_MobileLaser_Beam_Sweep_C.SetSweepStartLocalDirection
// 0x00D0 (0x00D0 - 0x0000)
struct TASK_MobileLaser_Beam_Sweep_C_SetSweepStartLocalDirection final
{
public:
	struct FVector                                LocalStartDirection;                               // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LocalDirectionToTarget;                            // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LocalCurrentDirection;                             // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_MobileLaser_BeamSweepType                Type;                                              // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FuturePredictTime_0;                               // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_Hacker_Simple_C*                  Hacker;                                            // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FVector                                AdjustedStartLocation;                             // 0x0038(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetBarrelWorldLocation_BarrelLocation;    // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ClampDirection_ClampedLocalDirection;     // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetBarrelWorldLocation_BarrelLocation_1;  // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Get_Target_Location_Location;             // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_WorldDirectionToLocalDirection_LocalDirection; // 0x0098(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue_1;                     // 0x00A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_WorldDirectionToLocalDirection_LocalDirection_1; // 0x00B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetPredictedTargetLocation_PredictedLocation; // 0x00C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TASK_MobileLaser_Beam_Sweep_C_SetSweepStartLocalDirection) == 0x000008, "Wrong alignment on TASK_MobileLaser_Beam_Sweep_C_SetSweepStartLocalDirection");
static_assert(sizeof(TASK_MobileLaser_Beam_Sweep_C_SetSweepStartLocalDirection) == 0x0000D0, "Wrong size on TASK_MobileLaser_Beam_Sweep_C_SetSweepStartLocalDirection");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepStartLocalDirection, LocalStartDirection) == 0x000000, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepStartLocalDirection::LocalStartDirection' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepStartLocalDirection, LocalDirectionToTarget) == 0x00000C, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepStartLocalDirection::LocalDirectionToTarget' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepStartLocalDirection, LocalCurrentDirection) == 0x000018, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepStartLocalDirection::LocalCurrentDirection' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepStartLocalDirection, Type) == 0x000024, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepStartLocalDirection::Type' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepStartLocalDirection, FuturePredictTime_0) == 0x000028, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepStartLocalDirection::FuturePredictTime_0' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepStartLocalDirection, Hacker) == 0x000030, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepStartLocalDirection::Hacker' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepStartLocalDirection, AdjustedStartLocation) == 0x000038, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepStartLocalDirection::AdjustedStartLocation' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepStartLocalDirection, CallFunc_GetBarrelWorldLocation_BarrelLocation) == 0x000044, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepStartLocalDirection::CallFunc_GetBarrelWorldLocation_BarrelLocation' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepStartLocalDirection, CallFunc_ClampDirection_ClampedLocalDirection) == 0x000050, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepStartLocalDirection::CallFunc_ClampDirection_ClampedLocalDirection' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepStartLocalDirection, CallFunc_GetBarrelWorldLocation_BarrelLocation_1) == 0x00005C, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepStartLocalDirection::CallFunc_GetBarrelWorldLocation_BarrelLocation_1' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepStartLocalDirection, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000068, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepStartLocalDirection::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepStartLocalDirection, CallFunc_Get_Target_Location_Location) == 0x000074, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepStartLocalDirection::CallFunc_Get_Target_Location_Location' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepStartLocalDirection, CallFunc_Normal_ReturnValue) == 0x000080, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepStartLocalDirection::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepStartLocalDirection, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x00008C, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepStartLocalDirection::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepStartLocalDirection, CallFunc_WorldDirectionToLocalDirection_LocalDirection) == 0x000098, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepStartLocalDirection::CallFunc_WorldDirectionToLocalDirection_LocalDirection' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepStartLocalDirection, CallFunc_Normal_ReturnValue_1) == 0x0000A4, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepStartLocalDirection::CallFunc_Normal_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepStartLocalDirection, CallFunc_WorldDirectionToLocalDirection_LocalDirection_1) == 0x0000B0, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepStartLocalDirection::CallFunc_WorldDirectionToLocalDirection_LocalDirection_1' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepStartLocalDirection, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0000BC, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepStartLocalDirection::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepStartLocalDirection, CallFunc_GetPredictedTargetLocation_PredictedLocation) == 0x0000C0, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepStartLocalDirection::CallFunc_GetPredictedTargetLocation_PredictedLocation' has a wrong offset!");

// Function TASK_MobileLaser_Beam_Sweep.TASK_MobileLaser_Beam_Sweep_C.SetSweepEndLocalDirection
// 0x01AC (0x01AC - 0x0000)
struct TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection final
{
public:
	float                                         SignedAngleToTarget;                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LocalRotationCross;                                // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReversedRotationAxis;                              // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LocalRotationAxis;                                 // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CurrentAimLocalDirection;                          // 0x0020(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetLocalDirection;                              // 0x002C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BarrelWorldLocation;                               // 0x0038(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SignedAngleBetweenOnPlane_ReturnValue;    // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocalUpDirection_UpDirection;          // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ClampDirection_ClampedLocalDirection;     // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetPredictedTargetLocation_PredictedLocation; // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocalUpDirection_UpDirection_1;        // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue;           // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue_1;                // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x00B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocalUpDirection_UpDirection_2;        // 0x00C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocalUpDirection_UpDirection_3;        // 0x00E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x00EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_ED[0x3];                                       // 0x00ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetBarrelWorldLocation_BarrelLocation;    // 0x00F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_AngleBetweenVectors_ReturnValue;          // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_1;                     // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x0108(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue;              // 0x0114(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue_1;         // 0x0120(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue_1;                     // 0x012C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0144(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_AngleBetweenVectors_ReturnValue_1;        // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_1;            // 0x0154(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_155[0x3];                                      // 0x0155(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Get_Target_Location_Location;             // 0x0158(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0164(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue_2;                     // 0x0170(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x017C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_WorldDirectionToLocalDirection_LocalDirection; // 0x0188(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue_3;                     // 0x0194(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_WorldDirectionToLocalDirection_LocalDirection_1; // 0x01A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection) == 0x000004, "Wrong alignment on TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection");
static_assert(sizeof(TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection) == 0x0001AC, "Wrong size on TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection, SignedAngleToTarget) == 0x000000, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection::SignedAngleToTarget' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection, LocalRotationCross) == 0x000004, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection::LocalRotationCross' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection, ReversedRotationAxis) == 0x000010, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection::ReversedRotationAxis' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection, LocalRotationAxis) == 0x000014, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection::LocalRotationAxis' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection, CurrentAimLocalDirection) == 0x000020, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection::CurrentAimLocalDirection' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection, TargetLocalDirection) == 0x00002C, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection::TargetLocalDirection' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection, BarrelWorldLocation) == 0x000038, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection::BarrelWorldLocation' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection, CallFunc_SignedAngleBetweenOnPlane_ReturnValue) == 0x000044, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection::CallFunc_SignedAngleBetweenOnPlane_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection, CallFunc_GetLocalUpDirection_UpDirection) == 0x000048, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection::CallFunc_GetLocalUpDirection_UpDirection' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection, CallFunc_BreakVector_X) == 0x000054, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection, CallFunc_BreakVector_Y) == 0x000058, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection, CallFunc_BreakVector_Z) == 0x00005C, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection, CallFunc_ClampDirection_ClampedLocalDirection) == 0x000060, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection::CallFunc_ClampDirection_ClampedLocalDirection' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection, CallFunc_MakeVector_ReturnValue) == 0x00006C, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection, CallFunc_Abs_ReturnValue) == 0x000078, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00007C, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection, CallFunc_SelectFloat_ReturnValue) == 0x000080, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection, CallFunc_FClamp_ReturnValue) == 0x000084, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection, CallFunc_Add_FloatFloat_ReturnValue) == 0x000088, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection, CallFunc_GetPredictedTargetLocation_PredictedLocation) == 0x00008C, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection::CallFunc_GetPredictedTargetLocation_PredictedLocation' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000098, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection, CallFunc_GetLocalUpDirection_UpDirection_1) == 0x00009C, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection::CallFunc_GetLocalUpDirection_UpDirection_1' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection, CallFunc_Cross_VectorVector_ReturnValue) == 0x0000A8, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection::CallFunc_Cross_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection, CallFunc_SelectFloat_ReturnValue_1) == 0x0000B4, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection, CallFunc_Normal_ReturnValue) == 0x0000B8, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection, CallFunc_GetLocalUpDirection_UpDirection_2) == 0x0000C4, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection::CallFunc_GetLocalUpDirection_UpDirection_2' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0000D0, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection, CallFunc_Dot_VectorVector_ReturnValue) == 0x0000DC, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection, CallFunc_GetLocalUpDirection_UpDirection_3) == 0x0000E0, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection::CallFunc_GetLocalUpDirection_UpDirection_3' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection, CallFunc_Less_FloatFloat_ReturnValue) == 0x0000EC, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection, CallFunc_GetBarrelWorldLocation_BarrelLocation) == 0x0000F0, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection::CallFunc_GetBarrelWorldLocation_BarrelLocation' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection, CallFunc_AngleBetweenVectors_ReturnValue) == 0x0000FC, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection::CallFunc_AngleBetweenVectors_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000100, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection, CallFunc_FClamp_ReturnValue_1) == 0x000104, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x000108, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection, CallFunc_RotateAngleAxis_ReturnValue) == 0x000114, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection::CallFunc_RotateAngleAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection, CallFunc_Cross_VectorVector_ReturnValue_1) == 0x000120, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection::CallFunc_Cross_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection, CallFunc_Normal_ReturnValue_1) == 0x00012C, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection::CallFunc_Normal_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection, CallFunc_BreakVector_X_1) == 0x000138, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection, CallFunc_BreakVector_Y_1) == 0x00013C, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection, CallFunc_BreakVector_Z_1) == 0x000140, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection, CallFunc_MakeVector_ReturnValue_1) == 0x000144, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection, CallFunc_AngleBetweenVectors_ReturnValue_1) == 0x000150, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection::CallFunc_AngleBetweenVectors_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection, CallFunc_Less_FloatFloat_ReturnValue_1) == 0x000154, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection::CallFunc_Less_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection, CallFunc_Get_Target_Location_Location) == 0x000158, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection::CallFunc_Get_Target_Location_Location' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000164, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection, CallFunc_Normal_ReturnValue_2) == 0x000170, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection::CallFunc_Normal_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x00017C, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection, CallFunc_WorldDirectionToLocalDirection_LocalDirection) == 0x000188, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection::CallFunc_WorldDirectionToLocalDirection_LocalDirection' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection, CallFunc_Normal_ReturnValue_3) == 0x000194, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection::CallFunc_Normal_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection, CallFunc_WorldDirectionToLocalDirection_LocalDirection_1) == 0x0001A0, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetSweepEndLocalDirection::CallFunc_WorldDirectionToLocalDirection_LocalDirection_1' has a wrong offset!");

// Function TASK_MobileLaser_Beam_Sweep.TASK_MobileLaser_Beam_Sweep_C.ReceiveExecuteAI
// 0x0010 (0x0010 - 0x0000)
struct TASK_MobileLaser_Beam_Sweep_C_ReceiveExecuteAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TASK_MobileLaser_Beam_Sweep_C_ReceiveExecuteAI) == 0x000008, "Wrong alignment on TASK_MobileLaser_Beam_Sweep_C_ReceiveExecuteAI");
static_assert(sizeof(TASK_MobileLaser_Beam_Sweep_C_ReceiveExecuteAI) == 0x000010, "Wrong size on TASK_MobileLaser_Beam_Sweep_C_ReceiveExecuteAI");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_ReceiveExecuteAI, OwnerController) == 0x000000, "Member 'TASK_MobileLaser_Beam_Sweep_C_ReceiveExecuteAI::OwnerController' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_ReceiveExecuteAI, ControlledPawn) == 0x000008, "Member 'TASK_MobileLaser_Beam_Sweep_C_ReceiveExecuteAI::ControlledPawn' has a wrong offset!");

// Function TASK_MobileLaser_Beam_Sweep.TASK_MobileLaser_Beam_Sweep_C.UpdateBeamOn
// 0x0250 (0x0250 - 0x0000)
struct TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FinalLocation;                                     // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FinalDirection;                                    // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FrameDirection;                                    // 0x001C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RotationAxis;                                      // 0x0028(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SweepDistanceScale;                                // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SweepAngleBetween;                                 // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SweepRotationAxis;                                 // 0x003C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BarrelLocation;                                    // 0x0048(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SweepEndWorldDirection;                            // 0x0054(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SweepStartWorldDirection;                          // 0x0060(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentProgress;                                   // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue;           // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetPlayTimeInSeconds_ReturnValue;         // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x00B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Square_ReturnValue;                       // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHitResult>                     CallFunc_BeamDamageTraceFromSockets_HitResults;    // 0x00D8(0x0010)(ReferenceParm, ContainsInstancedReference)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_2;       // 0x0104(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_111[0x3];                                      // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0114(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Vector_DistanceSquared_ReturnValue;       // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_LocalDirectionToWorldDirection_WorldDirection; // 0x0124(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_1;            // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0131(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_132[0x2];                                      // 0x0132(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_LocalDirectionToWorldDirection_WorldDirection_1; // 0x0134(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocalUpDirection_UpDirection;          // 0x0144(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocalUpDirection_UpDirection_1;        // 0x0150(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue_1;           // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_161[0x3];                                      // 0x0161(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue_1;              // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_2;          // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_3;       // 0x0170(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocalUpDirection_UpDirection_2;        // 0x017C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue_2;           // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_4;       // 0x018C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_199[0x3];                                      // 0x0199(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue_1;         // 0x019C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue_1;                     // 0x01A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetBarrelWorldLocation_BarrelLocation;    // 0x01BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SignedAngleBetweenOnPlane_ReturnValue;    // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_1;                     // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue_2;         // 0x01D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue_2;                     // 0x01DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVectorValue_ReturnValue;               // 0x01EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x01FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x0204(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_4;        // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_5;        // 0x020C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVectorValue_ReturnValue_1;             // 0x0210(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue;              // 0x021C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_2;                          // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_3;          // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_6;        // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeUnclamped_ReturnValue;            // 0x023C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue_1;            // 0x0240(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn) == 0x000008, "Wrong alignment on TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn");
static_assert(sizeof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn) == 0x000250, "Wrong size on TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, DeltaSeconds) == 0x000000, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, FinalLocation) == 0x000004, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::FinalLocation' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, FinalDirection) == 0x000010, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::FinalDirection' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, FrameDirection) == 0x00001C, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::FrameDirection' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, RotationAxis) == 0x000028, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::RotationAxis' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, SweepDistanceScale) == 0x000034, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::SweepDistanceScale' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, SweepAngleBetween) == 0x000038, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::SweepAngleBetween' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, SweepRotationAxis) == 0x00003C, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::SweepRotationAxis' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, BarrelLocation) == 0x000048, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::BarrelLocation' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, SweepEndWorldDirection) == 0x000054, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::SweepEndWorldDirection' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, SweepStartWorldDirection) == 0x000060, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::SweepStartWorldDirection' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CurrentProgress) == 0x00006C, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CurrentProgress' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000070, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000074, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_BreakVector_X) == 0x000080, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_BreakVector_Y) == 0x000084, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_BreakVector_Z) == 0x000088, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_Less_FloatFloat_ReturnValue) == 0x00008C, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_Cross_VectorVector_ReturnValue) == 0x000090, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_Cross_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_GetFloatValue_ReturnValue) == 0x00009C, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0000A0, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x0000A4, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_GetPlayTimeInSeconds_ReturnValue) == 0x0000A8, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_GetPlayTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0000AC, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x0000B0, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x0000BC, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_FClamp_ReturnValue) == 0x0000C0, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000C4, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_Square_ReturnValue) == 0x0000D0, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_Square_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_BeamDamageTraceFromSockets_HitResults) == 0x0000D8, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_BeamDamageTraceFromSockets_HitResults' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x0000E8, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_Normal_ReturnValue) == 0x0000F4, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_Dot_VectorVector_ReturnValue) == 0x000100, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_Multiply_VectorFloat_ReturnValue_2) == 0x000104, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_Multiply_VectorFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000110, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_Add_VectorVector_ReturnValue) == 0x000114, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_Vector_DistanceSquared_ReturnValue) == 0x000120, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_Vector_DistanceSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_LocalDirectionToWorldDirection_WorldDirection) == 0x000124, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_LocalDirectionToWorldDirection_WorldDirection' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_Less_FloatFloat_ReturnValue_1) == 0x000130, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_Less_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_BooleanOR_ReturnValue) == 0x000131, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_LocalDirectionToWorldDirection_WorldDirection_1) == 0x000134, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_LocalDirectionToWorldDirection_WorldDirection_1' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_SelectFloat_ReturnValue) == 0x000140, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_GetLocalUpDirection_UpDirection) == 0x000144, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_GetLocalUpDirection_UpDirection' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_GetLocalUpDirection_UpDirection_1) == 0x000150, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_GetLocalUpDirection_UpDirection_1' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_Dot_VectorVector_ReturnValue_1) == 0x00015C, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_Dot_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000160, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000164, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_GetFloatValue_ReturnValue_1) == 0x000168, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_GetFloatValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_Divide_FloatFloat_ReturnValue_2) == 0x00016C, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_Divide_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_Multiply_VectorFloat_ReturnValue_3) == 0x000170, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_Multiply_VectorFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_GetLocalUpDirection_UpDirection_2) == 0x00017C, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_GetLocalUpDirection_UpDirection_2' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_Dot_VectorVector_ReturnValue_2) == 0x000188, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_Dot_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_Multiply_VectorFloat_ReturnValue_4) == 0x00018C, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_Multiply_VectorFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000198, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_Cross_VectorVector_ReturnValue_1) == 0x00019C, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_Cross_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_Normal_ReturnValue_1) == 0x0001A8, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_Normal_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_Abs_ReturnValue) == 0x0001B4, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_MapRangeClamped_ReturnValue) == 0x0001B8, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_GetBarrelWorldLocation_BarrelLocation) == 0x0001BC, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_GetBarrelWorldLocation_BarrelLocation' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_SignedAngleBetweenOnPlane_ReturnValue) == 0x0001C8, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_SignedAngleBetweenOnPlane_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_FClamp_ReturnValue_1) == 0x0001CC, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_Cross_VectorVector_ReturnValue_2) == 0x0001D0, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_Cross_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_Normal_ReturnValue_2) == 0x0001DC, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_Normal_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x0001E8, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_GetVectorValue_ReturnValue) == 0x0001EC, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_GetVectorValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_BreakVector_X_1) == 0x0001F8, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_BreakVector_Y_1) == 0x0001FC, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_BreakVector_Z_1) == 0x000200, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x000204, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_Multiply_FloatFloat_ReturnValue_4) == 0x000208, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_Multiply_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_Multiply_FloatFloat_ReturnValue_5) == 0x00020C, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_Multiply_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_GetVectorValue_ReturnValue_1) == 0x000210, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_GetVectorValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_RotateAngleAxis_ReturnValue) == 0x00021C, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_RotateAngleAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_BreakVector_X_2) == 0x000228, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_BreakVector_Y_2) == 0x00022C, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_BreakVector_Z_2) == 0x000230, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_Divide_FloatFloat_ReturnValue_3) == 0x000234, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_Divide_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_Multiply_FloatFloat_ReturnValue_6) == 0x000238, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_Multiply_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_MapRangeUnclamped_ReturnValue) == 0x00023C, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_MapRangeUnclamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn, CallFunc_RotateAngleAxis_ReturnValue_1) == 0x000240, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamOn::CallFunc_RotateAngleAxis_ReturnValue_1' has a wrong offset!");

// Function TASK_MobileLaser_Beam_Sweep.TASK_MobileLaser_Beam_Sweep_C.SetBeamState
// 0x0014 (0x0014 - 0x0000)
struct TASK_MobileLaser_Beam_Sweep_C_SetBeamState final
{
public:
	ENUM_MobileLaser_BeamState                    State;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RandomBool_ReturnValue;                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetCurrentLocalAimDirection_LocalDirection; // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetBodyRotateSpeed_Changed;               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TASK_MobileLaser_Beam_Sweep_C_SetBeamState) == 0x000004, "Wrong alignment on TASK_MobileLaser_Beam_Sweep_C_SetBeamState");
static_assert(sizeof(TASK_MobileLaser_Beam_Sweep_C_SetBeamState) == 0x000014, "Wrong size on TASK_MobileLaser_Beam_Sweep_C_SetBeamState");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetBeamState, State) == 0x000000, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetBeamState::State' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetBeamState, CallFunc_RandomBool_ReturnValue) == 0x000001, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetBeamState::CallFunc_RandomBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetBeamState, K2Node_SwitchEnum_CmpSuccess) == 0x000002, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetBeamState::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetBeamState, CallFunc_GetCurrentLocalAimDirection_LocalDirection) == 0x000004, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetBeamState::CallFunc_GetCurrentLocalAimDirection_LocalDirection' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_SetBeamState, CallFunc_SetBodyRotateSpeed_Changed) == 0x000010, "Member 'TASK_MobileLaser_Beam_Sweep_C_SetBeamState::CallFunc_SetBodyRotateSpeed_Changed' has a wrong offset!");

// Function TASK_MobileLaser_Beam_Sweep.TASK_MobileLaser_Beam_Sweep_C.UpdateBeamTurningOn
// 0x00D4 (0x00D4 - 0x0000)
struct TASK_MobileLaser_Beam_Sweep_C_UpdateBeamTurningOn final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Progress;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentProgress;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               NewLocalRotation;                                  // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               TargetLocalRotation;                               // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               StartLocalRotation;                                // 0x0024(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                BarrelWorldLocation;                               // 0x0030(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_UpdateBeamTurningOn_Progress;             // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCurrentLocalAimDirection_LocalDirection; // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_LocalDirectionToWorldDirection_WorldDirection; // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_RotatorRotator_ReturnValue;    // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetLocalUpDirection_UpDirection;          // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RInterpTo_Constant_ReturnValue;           // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetLocalUpDirection_UpDirection_1;        // 0x0098(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromXZ_ReturnValue;                // 0x00A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_MakeRotFromXZ_ReturnValue_1;              // 0x00B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetBarrelWorldLocation_BarrelLocation;    // 0x00C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamTurningOn) == 0x000004, "Wrong alignment on TASK_MobileLaser_Beam_Sweep_C_UpdateBeamTurningOn");
static_assert(sizeof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamTurningOn) == 0x0000D4, "Wrong size on TASK_MobileLaser_Beam_Sweep_C_UpdateBeamTurningOn");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamTurningOn, DeltaSeconds) == 0x000000, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamTurningOn::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamTurningOn, Progress) == 0x000004, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamTurningOn::Progress' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamTurningOn, CurrentProgress) == 0x000008, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamTurningOn::CurrentProgress' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamTurningOn, NewLocalRotation) == 0x00000C, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamTurningOn::NewLocalRotation' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamTurningOn, TargetLocalRotation) == 0x000018, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamTurningOn::TargetLocalRotation' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamTurningOn, StartLocalRotation) == 0x000024, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamTurningOn::StartLocalRotation' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamTurningOn, BarrelWorldLocation) == 0x000030, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamTurningOn::BarrelWorldLocation' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamTurningOn, CallFunc_UpdateBeamTurningOn_Progress) == 0x00003C, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamTurningOn::CallFunc_UpdateBeamTurningOn_Progress' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamTurningOn, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000040, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamTurningOn::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamTurningOn, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000044, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamTurningOn::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamTurningOn, CallFunc_GetCurrentLocalAimDirection_LocalDirection) == 0x000048, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamTurningOn::CallFunc_GetCurrentLocalAimDirection_LocalDirection' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamTurningOn, CallFunc_LocalDirectionToWorldDirection_WorldDirection) == 0x000054, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamTurningOn::CallFunc_LocalDirectionToWorldDirection_WorldDirection' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamTurningOn, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000060, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamTurningOn::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamTurningOn, CallFunc_EqualEqual_RotatorRotator_ReturnValue) == 0x00006C, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamTurningOn::CallFunc_EqualEqual_RotatorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamTurningOn, CallFunc_GetForwardVector_ReturnValue) == 0x000070, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamTurningOn::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamTurningOn, CallFunc_BooleanAND_ReturnValue) == 0x00007C, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamTurningOn::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamTurningOn, CallFunc_GetLocalUpDirection_UpDirection) == 0x000080, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamTurningOn::CallFunc_GetLocalUpDirection_UpDirection' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamTurningOn, CallFunc_RInterpTo_Constant_ReturnValue) == 0x00008C, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamTurningOn::CallFunc_RInterpTo_Constant_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamTurningOn, CallFunc_GetLocalUpDirection_UpDirection_1) == 0x000098, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamTurningOn::CallFunc_GetLocalUpDirection_UpDirection_1' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamTurningOn, CallFunc_MakeRotFromXZ_ReturnValue) == 0x0000A4, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamTurningOn::CallFunc_MakeRotFromXZ_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamTurningOn, CallFunc_MakeRotFromXZ_ReturnValue_1) == 0x0000B0, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamTurningOn::CallFunc_MakeRotFromXZ_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamTurningOn, CallFunc_Add_VectorVector_ReturnValue) == 0x0000BC, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamTurningOn::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(TASK_MobileLaser_Beam_Sweep_C_UpdateBeamTurningOn, CallFunc_GetBarrelWorldLocation_BarrelLocation) == 0x0000C8, "Member 'TASK_MobileLaser_Beam_Sweep_C_UpdateBeamTurningOn::CallFunc_GetBarrelWorldLocation_BarrelLocation' has a wrong offset!");

}

