#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WIDGET_IceDrillLockOn

#include "Basic.hpp"


namespace SDK::Params
{

// Function WIDGET_IceDrillLockOn.WIDGET_IceDrillLockOn_C.SetTarget
// 0x0038 (0x0038 - 0x0000)
struct WIDGET_IceDrillLockOn_C_SetTarget final
{
public:
	class AActor*                                 NewTarget;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0018(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_IceDrillLockOn_C_SetTarget) == 0x000008, "Wrong alignment on WIDGET_IceDrillLockOn_C_SetTarget");
static_assert(sizeof(WIDGET_IceDrillLockOn_C_SetTarget) == 0x000038, "Wrong size on WIDGET_IceDrillLockOn_C_SetTarget");
static_assert(offsetof(WIDGET_IceDrillLockOn_C_SetTarget, NewTarget) == 0x000000, "Member 'WIDGET_IceDrillLockOn_C_SetTarget::NewTarget' has a wrong offset!");
static_assert(offsetof(WIDGET_IceDrillLockOn_C_SetTarget, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'WIDGET_IceDrillLockOn_C_SetTarget::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WIDGET_IceDrillLockOn_C_SetTarget, K2Node_CreateDelegate_OutputDelegate_1) == 0x000018, "Member 'WIDGET_IceDrillLockOn_C_SetTarget::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(WIDGET_IceDrillLockOn_C_SetTarget, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'WIDGET_IceDrillLockOn_C_SetTarget::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_IceDrillLockOn_C_SetTarget, CallFunc_PlayAnimation_ReturnValue) == 0x000030, "Member 'WIDGET_IceDrillLockOn_C_SetTarget::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function WIDGET_IceDrillLockOn.WIDGET_IceDrillLockOn_C.AttackTarget
// 0x0018 (0x0018 - 0x0000)
struct WIDGET_IceDrillLockOn_C_AttackTarget final
{
public:
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_IceDrillLockOn_C_AttackTarget) == 0x000008, "Wrong alignment on WIDGET_IceDrillLockOn_C_AttackTarget");
static_assert(sizeof(WIDGET_IceDrillLockOn_C_AttackTarget) == 0x000018, "Wrong size on WIDGET_IceDrillLockOn_C_AttackTarget");
static_assert(offsetof(WIDGET_IceDrillLockOn_C_AttackTarget, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'WIDGET_IceDrillLockOn_C_AttackTarget::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WIDGET_IceDrillLockOn_C_AttackTarget, CallFunc_PlayAnimation_ReturnValue) == 0x000010, "Member 'WIDGET_IceDrillLockOn_C_AttackTarget::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function WIDGET_IceDrillLockOn.WIDGET_IceDrillLockOn_C.DismissTarget
// 0x0018 (0x0018 - 0x0000)
struct WIDGET_IceDrillLockOn_C_DismissTarget final
{
public:
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_IceDrillLockOn_C_DismissTarget) == 0x000008, "Wrong alignment on WIDGET_IceDrillLockOn_C_DismissTarget");
static_assert(sizeof(WIDGET_IceDrillLockOn_C_DismissTarget) == 0x000018, "Wrong size on WIDGET_IceDrillLockOn_C_DismissTarget");
static_assert(offsetof(WIDGET_IceDrillLockOn_C_DismissTarget, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'WIDGET_IceDrillLockOn_C_DismissTarget::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WIDGET_IceDrillLockOn_C_DismissTarget, CallFunc_PlayAnimation_ReturnValue) == 0x000010, "Member 'WIDGET_IceDrillLockOn_C_DismissTarget::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function WIDGET_IceDrillLockOn.WIDGET_IceDrillLockOn_C.UpdateLockOnBrackets
// 0x0018 (0x0018 - 0x0000)
struct WIDGET_IceDrillLockOn_C_UpdateLockOnBrackets final
{
public:
	float                                         Progress;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue;           // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WIDGET_IceDrillLockOn_C_UpdateLockOnBrackets) == 0x000008, "Wrong alignment on WIDGET_IceDrillLockOn_C_UpdateLockOnBrackets");
static_assert(sizeof(WIDGET_IceDrillLockOn_C_UpdateLockOnBrackets) == 0x000018, "Wrong size on WIDGET_IceDrillLockOn_C_UpdateLockOnBrackets");
static_assert(offsetof(WIDGET_IceDrillLockOn_C_UpdateLockOnBrackets, Progress) == 0x000000, "Member 'WIDGET_IceDrillLockOn_C_UpdateLockOnBrackets::Progress' has a wrong offset!");
static_assert(offsetof(WIDGET_IceDrillLockOn_C_UpdateLockOnBrackets, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'WIDGET_IceDrillLockOn_C_UpdateLockOnBrackets::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_IceDrillLockOn_C_UpdateLockOnBrackets, CallFunc_IsAnimationPlaying_ReturnValue) == 0x000010, "Member 'WIDGET_IceDrillLockOn_C_UpdateLockOnBrackets::CallFunc_IsAnimationPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_IceDrillLockOn_C_UpdateLockOnBrackets, CallFunc_Not_PreBool_ReturnValue) == 0x000011, "Member 'WIDGET_IceDrillLockOn_C_UpdateLockOnBrackets::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_IceDrillLockOn_C_UpdateLockOnBrackets, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000012, "Member 'WIDGET_IceDrillLockOn_C_UpdateLockOnBrackets::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_IceDrillLockOn_C_UpdateLockOnBrackets, CallFunc_IsValid_ReturnValue) == 0x000013, "Member 'WIDGET_IceDrillLockOn_C_UpdateLockOnBrackets::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function WIDGET_IceDrillLockOn.WIDGET_IceDrillLockOn_C.TrySearchForTarget
// 0x0008 (0x0008 - 0x0000)
struct WIDGET_IceDrillLockOn_C_TrySearchForTarget final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_IceDrillLockOn_C_TrySearchForTarget) == 0x000008, "Wrong alignment on WIDGET_IceDrillLockOn_C_TrySearchForTarget");
static_assert(sizeof(WIDGET_IceDrillLockOn_C_TrySearchForTarget) == 0x000008, "Wrong size on WIDGET_IceDrillLockOn_C_TrySearchForTarget");
static_assert(offsetof(WIDGET_IceDrillLockOn_C_TrySearchForTarget, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'WIDGET_IceDrillLockOn_C_TrySearchForTarget::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function WIDGET_IceDrillLockOn.WIDGET_IceDrillLockOn_C.DismissSearchForTarget
// 0x0008 (0x0008 - 0x0000)
struct WIDGET_IceDrillLockOn_C_DismissSearchForTarget final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_IceDrillLockOn_C_DismissSearchForTarget) == 0x000008, "Wrong alignment on WIDGET_IceDrillLockOn_C_DismissSearchForTarget");
static_assert(sizeof(WIDGET_IceDrillLockOn_C_DismissSearchForTarget) == 0x000008, "Wrong size on WIDGET_IceDrillLockOn_C_DismissSearchForTarget");
static_assert(offsetof(WIDGET_IceDrillLockOn_C_DismissSearchForTarget, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'WIDGET_IceDrillLockOn_C_DismissSearchForTarget::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function WIDGET_IceDrillLockOn.WIDGET_IceDrillLockOn_C.SetScannerTriangleFill
// 0x0040 (0x0040 - 0x0000)
struct WIDGET_IceDrillLockOn_C_SetScannerTriangleFill final
{
public:
	float                                         FillAmount;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UPerspectiveMeshWidget*>         K2Node_MakeArray_Array;                            // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPerspectiveMeshWidget*                 CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_ConvertToDynamicMaterialInstance_ReturnValue; // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WIDGET_IceDrillLockOn_C_SetScannerTriangleFill) == 0x000008, "Wrong alignment on WIDGET_IceDrillLockOn_C_SetScannerTriangleFill");
static_assert(sizeof(WIDGET_IceDrillLockOn_C_SetScannerTriangleFill) == 0x000040, "Wrong size on WIDGET_IceDrillLockOn_C_SetScannerTriangleFill");
static_assert(offsetof(WIDGET_IceDrillLockOn_C_SetScannerTriangleFill, FillAmount) == 0x000000, "Member 'WIDGET_IceDrillLockOn_C_SetScannerTriangleFill::FillAmount' has a wrong offset!");
static_assert(offsetof(WIDGET_IceDrillLockOn_C_SetScannerTriangleFill, Temp_int_Array_Index_Variable) == 0x000004, "Member 'WIDGET_IceDrillLockOn_C_SetScannerTriangleFill::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_IceDrillLockOn_C_SetScannerTriangleFill, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'WIDGET_IceDrillLockOn_C_SetScannerTriangleFill::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WIDGET_IceDrillLockOn_C_SetScannerTriangleFill, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'WIDGET_IceDrillLockOn_C_SetScannerTriangleFill::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_IceDrillLockOn_C_SetScannerTriangleFill, K2Node_MakeArray_Array) == 0x000010, "Member 'WIDGET_IceDrillLockOn_C_SetScannerTriangleFill::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WIDGET_IceDrillLockOn_C_SetScannerTriangleFill, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'WIDGET_IceDrillLockOn_C_SetScannerTriangleFill::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_IceDrillLockOn_C_SetScannerTriangleFill, CallFunc_Array_Get_Item) == 0x000028, "Member 'WIDGET_IceDrillLockOn_C_SetScannerTriangleFill::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WIDGET_IceDrillLockOn_C_SetScannerTriangleFill, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'WIDGET_IceDrillLockOn_C_SetScannerTriangleFill::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WIDGET_IceDrillLockOn_C_SetScannerTriangleFill, CallFunc_ConvertToDynamicMaterialInstance_ReturnValue) == 0x000038, "Member 'WIDGET_IceDrillLockOn_C_SetScannerTriangleFill::CallFunc_ConvertToDynamicMaterialInstance_ReturnValue' has a wrong offset!");

}

