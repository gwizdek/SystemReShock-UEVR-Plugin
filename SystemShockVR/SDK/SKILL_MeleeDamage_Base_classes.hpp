#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SKILL_MeleeDamage_Base

#include "Basic.hpp"

#include "Skill_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass SKILL_MeleeDamage_Base.SKILL_MeleeDamage_Base_C
// 0x0030 (0x00C0 - 0x0090)
class USKILL_MeleeDamage_Base_C : public USkill_C
{
public:
	class FName                                   HitboxTag;                                         // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         KnockbackStrength;                                 // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EnableHitBoxMessage;                               // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 DisableHitBoxMessage;                              // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void EVENT_ColliderBeginOverlap(class AActor* OverlapActor, class UPrimitiveComponent* OverlapComponent, class FName HitboxTag_0, float DamageScale, class UBoxComponent* HitboxComponent);
	void InitializeSkill();
	void TryUseSkill(class UCharacterAction_C** Result);
	void GetKnockbackDirection(class UPrimitiveComponent* OverlapComponent, class UBoxComponent* HitboxComponent, struct FVector* Direction);
	void CanUseSkill(bool* Result);
	void GetMeleeDamageValue(float* Result);
	void PostApplyDamage(class UAttribManagerComponent* HitAttributeManager, bool* Result);
	void ReceiveAnimationMessage(const class FString& Message, bool* Result);
	void IsSkillActivated(bool* Result);
	void OnDeactivateSkill(bool* Result);
	void OnHitboxEnabled(class FName Tag);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SKILL_MeleeDamage_Base_C">();
	}
	static class USKILL_MeleeDamage_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<USKILL_MeleeDamage_Base_C>();
	}
};
static_assert(alignof(USKILL_MeleeDamage_Base_C) == 0x000008, "Wrong alignment on USKILL_MeleeDamage_Base_C");
static_assert(sizeof(USKILL_MeleeDamage_Base_C) == 0x0000C0, "Wrong size on USKILL_MeleeDamage_Base_C");
static_assert(offsetof(USKILL_MeleeDamage_Base_C, HitboxTag) == 0x000090, "Member 'USKILL_MeleeDamage_Base_C::HitboxTag' has a wrong offset!");
static_assert(offsetof(USKILL_MeleeDamage_Base_C, KnockbackStrength) == 0x000098, "Member 'USKILL_MeleeDamage_Base_C::KnockbackStrength' has a wrong offset!");
static_assert(offsetof(USKILL_MeleeDamage_Base_C, EnableHitBoxMessage) == 0x0000A0, "Member 'USKILL_MeleeDamage_Base_C::EnableHitBoxMessage' has a wrong offset!");
static_assert(offsetof(USKILL_MeleeDamage_Base_C, DisableHitBoxMessage) == 0x0000B0, "Member 'USKILL_MeleeDamage_Base_C::DisableHitBoxMessage' has a wrong offset!");

}

