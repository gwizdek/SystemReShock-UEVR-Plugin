#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WEAPON_IonPulseRifle

#include "Basic.hpp"

#include "STRUCT_WeaponMode_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "STRUCT_EffectParams_structs.hpp"
#include "AttributeSystem_structs.hpp"
#include "ENUM_IonChargedBeamType_structs.hpp"
#include "Engine_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "STRUCT_ImpactEffectResults_structs.hpp"
#include "CoreGame_structs.hpp"


namespace SDK::Params
{

// Function WEAPON_IonPulseRifle.WEAPON_IonPulseRifle_C.ExecuteUbergraph_WEAPON_IonPulseRifle
// 0x01E8 (0x01E8 - 0x0000)
struct WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate_1;            // 0x0014(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate_2;            // 0x0024(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate_3;            // 0x0034(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_CustomEvent_Loaded_9;                       // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate_4;            // 0x0050(0x0010)(ZeroConstructor, NoDestructor)
	class UObject*                                Temp_object_Variable;                              // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           K2Node_DynamicCast_AsAnim_Montage;                 // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_CustomEvent_Loaded_8;                       // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_1;                            // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           K2Node_DynamicCast_AsAnim_Montage_1;               // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_CustomEvent_Loaded_7;                       // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_2;                            // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              K2Node_DynamicCast_AsSound_Cue;                    // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_CustomEvent_Loaded_6;                       // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_3;                            // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              K2Node_DynamicCast_AsSound_Cue_1;                  // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_CustomEvent_Loaded_5;                       // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_4;                            // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           K2Node_DynamicCast_AsAnim_Montage_2;               // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_CustomEvent_Loaded_4;                       // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_5;                            // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           K2Node_DynamicCast_AsAnim_Montage_3;               // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_CustomEvent_Loaded_3;                       // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_6;                            // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         K2Node_DynamicCast_AsNiagara_System;               // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_6;                     // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_CustomEvent_Loaded_2;                       // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_7;                            // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UForceFeedbackEffect*                   K2Node_DynamicCast_AsForce_Feedback_Effect;        // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_7;                     // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_151[0x7];                                      // 0x0151(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_CustomEvent_Loaded_1;                       // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_8;                            // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UForceFeedbackEffect*                   K2Node_DynamicCast_AsForce_Feedback_Effect_1;      // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_8;                     // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_171[0x7];                                      // 0x0171(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_CustomEvent_Loaded;                         // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_9;                            // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UForceFeedbackEffect*                   K2Node_DynamicCast_AsForce_Feedback_Effect_2;      // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_9;                     // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_191[0x3];                                      // 0x0191(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate_5;            // 0x0194(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate_6;            // 0x01A4(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate_7;            // 0x01B4(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate_8;            // 0x01C4(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate_9;            // 0x01D4(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle) == 0x000008, "Wrong alignment on WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle");
static_assert(sizeof(WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle) == 0x0001E8, "Wrong size on WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle");
static_assert(offsetof(WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle, EntryPoint) == 0x000000, "Member 'WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle::EntryPoint' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle, K2Node_CreateDelegate_OutputDelegate_1) == 0x000014, "Member 'WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle, K2Node_CreateDelegate_OutputDelegate_2) == 0x000024, "Member 'WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle, K2Node_CreateDelegate_OutputDelegate_3) == 0x000034, "Member 'WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle, K2Node_CustomEvent_Loaded_9) == 0x000048, "Member 'WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle::K2Node_CustomEvent_Loaded_9' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle, K2Node_CreateDelegate_OutputDelegate_4) == 0x000050, "Member 'WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle, Temp_object_Variable) == 0x000060, "Member 'WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle, K2Node_DynamicCast_AsAnim_Montage) == 0x000068, "Member 'WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle::K2Node_DynamicCast_AsAnim_Montage' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle, K2Node_DynamicCast_bSuccess) == 0x000070, "Member 'WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle, K2Node_CustomEvent_Loaded_8) == 0x000078, "Member 'WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle::K2Node_CustomEvent_Loaded_8' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle, Temp_object_Variable_1) == 0x000080, "Member 'WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle, K2Node_DynamicCast_AsAnim_Montage_1) == 0x000088, "Member 'WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle::K2Node_DynamicCast_AsAnim_Montage_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle, K2Node_DynamicCast_bSuccess_1) == 0x000090, "Member 'WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle, K2Node_CustomEvent_Loaded_7) == 0x000098, "Member 'WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle::K2Node_CustomEvent_Loaded_7' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle, Temp_object_Variable_2) == 0x0000A0, "Member 'WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle, K2Node_DynamicCast_AsSound_Cue) == 0x0000A8, "Member 'WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle::K2Node_DynamicCast_AsSound_Cue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle, K2Node_DynamicCast_bSuccess_2) == 0x0000B0, "Member 'WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle, K2Node_CustomEvent_Loaded_6) == 0x0000B8, "Member 'WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle::K2Node_CustomEvent_Loaded_6' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle, Temp_object_Variable_3) == 0x0000C0, "Member 'WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle, K2Node_DynamicCast_AsSound_Cue_1) == 0x0000C8, "Member 'WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle::K2Node_DynamicCast_AsSound_Cue_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle, K2Node_DynamicCast_bSuccess_3) == 0x0000D0, "Member 'WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle, K2Node_CustomEvent_Loaded_5) == 0x0000D8, "Member 'WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle::K2Node_CustomEvent_Loaded_5' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle, Temp_object_Variable_4) == 0x0000E0, "Member 'WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle, K2Node_DynamicCast_AsAnim_Montage_2) == 0x0000E8, "Member 'WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle::K2Node_DynamicCast_AsAnim_Montage_2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle, K2Node_DynamicCast_bSuccess_4) == 0x0000F0, "Member 'WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle, K2Node_CustomEvent_Loaded_4) == 0x0000F8, "Member 'WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle::K2Node_CustomEvent_Loaded_4' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle, Temp_object_Variable_5) == 0x000100, "Member 'WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle::Temp_object_Variable_5' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle, K2Node_DynamicCast_AsAnim_Montage_3) == 0x000108, "Member 'WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle::K2Node_DynamicCast_AsAnim_Montage_3' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle, K2Node_DynamicCast_bSuccess_5) == 0x000110, "Member 'WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle, K2Node_CustomEvent_Loaded_3) == 0x000118, "Member 'WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle::K2Node_CustomEvent_Loaded_3' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle, Temp_object_Variable_6) == 0x000120, "Member 'WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle::Temp_object_Variable_6' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle, K2Node_DynamicCast_AsNiagara_System) == 0x000128, "Member 'WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle::K2Node_DynamicCast_AsNiagara_System' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle, K2Node_DynamicCast_bSuccess_6) == 0x000130, "Member 'WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle::K2Node_DynamicCast_bSuccess_6' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle, K2Node_CustomEvent_Loaded_2) == 0x000138, "Member 'WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle::K2Node_CustomEvent_Loaded_2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle, Temp_object_Variable_7) == 0x000140, "Member 'WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle::Temp_object_Variable_7' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle, K2Node_DynamicCast_AsForce_Feedback_Effect) == 0x000148, "Member 'WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle::K2Node_DynamicCast_AsForce_Feedback_Effect' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle, K2Node_DynamicCast_bSuccess_7) == 0x000150, "Member 'WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle::K2Node_DynamicCast_bSuccess_7' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle, K2Node_CustomEvent_Loaded_1) == 0x000158, "Member 'WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle::K2Node_CustomEvent_Loaded_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle, Temp_object_Variable_8) == 0x000160, "Member 'WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle::Temp_object_Variable_8' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle, K2Node_DynamicCast_AsForce_Feedback_Effect_1) == 0x000168, "Member 'WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle::K2Node_DynamicCast_AsForce_Feedback_Effect_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle, K2Node_DynamicCast_bSuccess_8) == 0x000170, "Member 'WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle::K2Node_DynamicCast_bSuccess_8' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle, K2Node_CustomEvent_Loaded) == 0x000178, "Member 'WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle::K2Node_CustomEvent_Loaded' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle, Temp_object_Variable_9) == 0x000180, "Member 'WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle::Temp_object_Variable_9' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle, K2Node_DynamicCast_AsForce_Feedback_Effect_2) == 0x000188, "Member 'WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle::K2Node_DynamicCast_AsForce_Feedback_Effect_2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle, K2Node_DynamicCast_bSuccess_9) == 0x000190, "Member 'WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle::K2Node_DynamicCast_bSuccess_9' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle, K2Node_CreateDelegate_OutputDelegate_5) == 0x000194, "Member 'WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle::K2Node_CreateDelegate_OutputDelegate_5' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle, K2Node_CreateDelegate_OutputDelegate_6) == 0x0001A4, "Member 'WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle::K2Node_CreateDelegate_OutputDelegate_6' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle, K2Node_CreateDelegate_OutputDelegate_7) == 0x0001B4, "Member 'WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle::K2Node_CreateDelegate_OutputDelegate_7' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle, K2Node_CreateDelegate_OutputDelegate_8) == 0x0001C4, "Member 'WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle::K2Node_CreateDelegate_OutputDelegate_8' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle, K2Node_CreateDelegate_OutputDelegate_9) == 0x0001D4, "Member 'WEAPON_IonPulseRifle_C_ExecuteUbergraph_WEAPON_IonPulseRifle::K2Node_CreateDelegate_OutputDelegate_9' has a wrong offset!");

// Function WEAPON_IonPulseRifle.WEAPON_IonPulseRifle_C.OnLoaded_FF9E235148FC867D6DEB3BA47A521CE4
// 0x0008 (0x0008 - 0x0000)
struct WEAPON_IonPulseRifle_C_OnLoaded_FF9E235148FC867D6DEB3BA47A521CE4 final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WEAPON_IonPulseRifle_C_OnLoaded_FF9E235148FC867D6DEB3BA47A521CE4) == 0x000008, "Wrong alignment on WEAPON_IonPulseRifle_C_OnLoaded_FF9E235148FC867D6DEB3BA47A521CE4");
static_assert(sizeof(WEAPON_IonPulseRifle_C_OnLoaded_FF9E235148FC867D6DEB3BA47A521CE4) == 0x000008, "Wrong size on WEAPON_IonPulseRifle_C_OnLoaded_FF9E235148FC867D6DEB3BA47A521CE4");
static_assert(offsetof(WEAPON_IonPulseRifle_C_OnLoaded_FF9E235148FC867D6DEB3BA47A521CE4, Loaded) == 0x000000, "Member 'WEAPON_IonPulseRifle_C_OnLoaded_FF9E235148FC867D6DEB3BA47A521CE4::Loaded' has a wrong offset!");

// Function WEAPON_IonPulseRifle.WEAPON_IonPulseRifle_C.OnLoaded_C9C6266F4695E530B12EE9891AFF049B
// 0x0008 (0x0008 - 0x0000)
struct WEAPON_IonPulseRifle_C_OnLoaded_C9C6266F4695E530B12EE9891AFF049B final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WEAPON_IonPulseRifle_C_OnLoaded_C9C6266F4695E530B12EE9891AFF049B) == 0x000008, "Wrong alignment on WEAPON_IonPulseRifle_C_OnLoaded_C9C6266F4695E530B12EE9891AFF049B");
static_assert(sizeof(WEAPON_IonPulseRifle_C_OnLoaded_C9C6266F4695E530B12EE9891AFF049B) == 0x000008, "Wrong size on WEAPON_IonPulseRifle_C_OnLoaded_C9C6266F4695E530B12EE9891AFF049B");
static_assert(offsetof(WEAPON_IonPulseRifle_C_OnLoaded_C9C6266F4695E530B12EE9891AFF049B, Loaded) == 0x000000, "Member 'WEAPON_IonPulseRifle_C_OnLoaded_C9C6266F4695E530B12EE9891AFF049B::Loaded' has a wrong offset!");

// Function WEAPON_IonPulseRifle.WEAPON_IonPulseRifle_C.OnLoaded_8EF3A359490A637DA4A310A4F7D96B09
// 0x0008 (0x0008 - 0x0000)
struct WEAPON_IonPulseRifle_C_OnLoaded_8EF3A359490A637DA4A310A4F7D96B09 final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WEAPON_IonPulseRifle_C_OnLoaded_8EF3A359490A637DA4A310A4F7D96B09) == 0x000008, "Wrong alignment on WEAPON_IonPulseRifle_C_OnLoaded_8EF3A359490A637DA4A310A4F7D96B09");
static_assert(sizeof(WEAPON_IonPulseRifle_C_OnLoaded_8EF3A359490A637DA4A310A4F7D96B09) == 0x000008, "Wrong size on WEAPON_IonPulseRifle_C_OnLoaded_8EF3A359490A637DA4A310A4F7D96B09");
static_assert(offsetof(WEAPON_IonPulseRifle_C_OnLoaded_8EF3A359490A637DA4A310A4F7D96B09, Loaded) == 0x000000, "Member 'WEAPON_IonPulseRifle_C_OnLoaded_8EF3A359490A637DA4A310A4F7D96B09::Loaded' has a wrong offset!");

// Function WEAPON_IonPulseRifle.WEAPON_IonPulseRifle_C.OnLoaded_CD69C5494A86D5F07CAB9C8622D628DB
// 0x0008 (0x0008 - 0x0000)
struct WEAPON_IonPulseRifle_C_OnLoaded_CD69C5494A86D5F07CAB9C8622D628DB final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WEAPON_IonPulseRifle_C_OnLoaded_CD69C5494A86D5F07CAB9C8622D628DB) == 0x000008, "Wrong alignment on WEAPON_IonPulseRifle_C_OnLoaded_CD69C5494A86D5F07CAB9C8622D628DB");
static_assert(sizeof(WEAPON_IonPulseRifle_C_OnLoaded_CD69C5494A86D5F07CAB9C8622D628DB) == 0x000008, "Wrong size on WEAPON_IonPulseRifle_C_OnLoaded_CD69C5494A86D5F07CAB9C8622D628DB");
static_assert(offsetof(WEAPON_IonPulseRifle_C_OnLoaded_CD69C5494A86D5F07CAB9C8622D628DB, Loaded) == 0x000000, "Member 'WEAPON_IonPulseRifle_C_OnLoaded_CD69C5494A86D5F07CAB9C8622D628DB::Loaded' has a wrong offset!");

// Function WEAPON_IonPulseRifle.WEAPON_IonPulseRifle_C.OnLoaded_615E8328463F46FE8BB727A0EA83FCD9
// 0x0008 (0x0008 - 0x0000)
struct WEAPON_IonPulseRifle_C_OnLoaded_615E8328463F46FE8BB727A0EA83FCD9 final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WEAPON_IonPulseRifle_C_OnLoaded_615E8328463F46FE8BB727A0EA83FCD9) == 0x000008, "Wrong alignment on WEAPON_IonPulseRifle_C_OnLoaded_615E8328463F46FE8BB727A0EA83FCD9");
static_assert(sizeof(WEAPON_IonPulseRifle_C_OnLoaded_615E8328463F46FE8BB727A0EA83FCD9) == 0x000008, "Wrong size on WEAPON_IonPulseRifle_C_OnLoaded_615E8328463F46FE8BB727A0EA83FCD9");
static_assert(offsetof(WEAPON_IonPulseRifle_C_OnLoaded_615E8328463F46FE8BB727A0EA83FCD9, Loaded) == 0x000000, "Member 'WEAPON_IonPulseRifle_C_OnLoaded_615E8328463F46FE8BB727A0EA83FCD9::Loaded' has a wrong offset!");

// Function WEAPON_IonPulseRifle.WEAPON_IonPulseRifle_C.OnLoaded_7C2F215149D6D7C6CFF9009641C41CC6
// 0x0008 (0x0008 - 0x0000)
struct WEAPON_IonPulseRifle_C_OnLoaded_7C2F215149D6D7C6CFF9009641C41CC6 final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WEAPON_IonPulseRifle_C_OnLoaded_7C2F215149D6D7C6CFF9009641C41CC6) == 0x000008, "Wrong alignment on WEAPON_IonPulseRifle_C_OnLoaded_7C2F215149D6D7C6CFF9009641C41CC6");
static_assert(sizeof(WEAPON_IonPulseRifle_C_OnLoaded_7C2F215149D6D7C6CFF9009641C41CC6) == 0x000008, "Wrong size on WEAPON_IonPulseRifle_C_OnLoaded_7C2F215149D6D7C6CFF9009641C41CC6");
static_assert(offsetof(WEAPON_IonPulseRifle_C_OnLoaded_7C2F215149D6D7C6CFF9009641C41CC6, Loaded) == 0x000000, "Member 'WEAPON_IonPulseRifle_C_OnLoaded_7C2F215149D6D7C6CFF9009641C41CC6::Loaded' has a wrong offset!");

// Function WEAPON_IonPulseRifle.WEAPON_IonPulseRifle_C.OnLoaded_0588E56D4D1DCF9CCD4DD4B5FBFF5F20
// 0x0008 (0x0008 - 0x0000)
struct WEAPON_IonPulseRifle_C_OnLoaded_0588E56D4D1DCF9CCD4DD4B5FBFF5F20 final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WEAPON_IonPulseRifle_C_OnLoaded_0588E56D4D1DCF9CCD4DD4B5FBFF5F20) == 0x000008, "Wrong alignment on WEAPON_IonPulseRifle_C_OnLoaded_0588E56D4D1DCF9CCD4DD4B5FBFF5F20");
static_assert(sizeof(WEAPON_IonPulseRifle_C_OnLoaded_0588E56D4D1DCF9CCD4DD4B5FBFF5F20) == 0x000008, "Wrong size on WEAPON_IonPulseRifle_C_OnLoaded_0588E56D4D1DCF9CCD4DD4B5FBFF5F20");
static_assert(offsetof(WEAPON_IonPulseRifle_C_OnLoaded_0588E56D4D1DCF9CCD4DD4B5FBFF5F20, Loaded) == 0x000000, "Member 'WEAPON_IonPulseRifle_C_OnLoaded_0588E56D4D1DCF9CCD4DD4B5FBFF5F20::Loaded' has a wrong offset!");

// Function WEAPON_IonPulseRifle.WEAPON_IonPulseRifle_C.OnLoaded_76BD371E42A51692AA80A7A93DD7B834
// 0x0008 (0x0008 - 0x0000)
struct WEAPON_IonPulseRifle_C_OnLoaded_76BD371E42A51692AA80A7A93DD7B834 final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WEAPON_IonPulseRifle_C_OnLoaded_76BD371E42A51692AA80A7A93DD7B834) == 0x000008, "Wrong alignment on WEAPON_IonPulseRifle_C_OnLoaded_76BD371E42A51692AA80A7A93DD7B834");
static_assert(sizeof(WEAPON_IonPulseRifle_C_OnLoaded_76BD371E42A51692AA80A7A93DD7B834) == 0x000008, "Wrong size on WEAPON_IonPulseRifle_C_OnLoaded_76BD371E42A51692AA80A7A93DD7B834");
static_assert(offsetof(WEAPON_IonPulseRifle_C_OnLoaded_76BD371E42A51692AA80A7A93DD7B834, Loaded) == 0x000000, "Member 'WEAPON_IonPulseRifle_C_OnLoaded_76BD371E42A51692AA80A7A93DD7B834::Loaded' has a wrong offset!");

// Function WEAPON_IonPulseRifle.WEAPON_IonPulseRifle_C.OnLoaded_6366B05B452B4B0F22FFFEB05DC9C551
// 0x0008 (0x0008 - 0x0000)
struct WEAPON_IonPulseRifle_C_OnLoaded_6366B05B452B4B0F22FFFEB05DC9C551 final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WEAPON_IonPulseRifle_C_OnLoaded_6366B05B452B4B0F22FFFEB05DC9C551) == 0x000008, "Wrong alignment on WEAPON_IonPulseRifle_C_OnLoaded_6366B05B452B4B0F22FFFEB05DC9C551");
static_assert(sizeof(WEAPON_IonPulseRifle_C_OnLoaded_6366B05B452B4B0F22FFFEB05DC9C551) == 0x000008, "Wrong size on WEAPON_IonPulseRifle_C_OnLoaded_6366B05B452B4B0F22FFFEB05DC9C551");
static_assert(offsetof(WEAPON_IonPulseRifle_C_OnLoaded_6366B05B452B4B0F22FFFEB05DC9C551, Loaded) == 0x000000, "Member 'WEAPON_IonPulseRifle_C_OnLoaded_6366B05B452B4B0F22FFFEB05DC9C551::Loaded' has a wrong offset!");

// Function WEAPON_IonPulseRifle.WEAPON_IonPulseRifle_C.OnLoaded_A152499A464E718E1950958E67FCF392
// 0x0008 (0x0008 - 0x0000)
struct WEAPON_IonPulseRifle_C_OnLoaded_A152499A464E718E1950958E67FCF392 final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WEAPON_IonPulseRifle_C_OnLoaded_A152499A464E718E1950958E67FCF392) == 0x000008, "Wrong alignment on WEAPON_IonPulseRifle_C_OnLoaded_A152499A464E718E1950958E67FCF392");
static_assert(sizeof(WEAPON_IonPulseRifle_C_OnLoaded_A152499A464E718E1950958E67FCF392) == 0x000008, "Wrong size on WEAPON_IonPulseRifle_C_OnLoaded_A152499A464E718E1950958E67FCF392");
static_assert(offsetof(WEAPON_IonPulseRifle_C_OnLoaded_A152499A464E718E1950958E67FCF392, Loaded) == 0x000000, "Member 'WEAPON_IonPulseRifle_C_OnLoaded_A152499A464E718E1950958E67FCF392::Loaded' has a wrong offset!");

// Function WEAPON_IonPulseRifle.WEAPON_IonPulseRifle_C.Activate
// 0x0118 (0x0118 - 0x0000)
struct WEAPON_IonPulseRifle_C_Activate final
{
public:
	class APAWN_SystemShockCharacter_C*           Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_WeaponMode                     CallFunc_GetCurrentMode_Mode;                      // 0x0010(0x0100)(HasGetValueTypeHash)
	int32                                         CallFunc_GetWeaponPropertyValueByType_Value;       // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0114(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0115(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Activate_Result;                          // 0x0116(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WEAPON_IonPulseRifle_C_Activate) == 0x000008, "Wrong alignment on WEAPON_IonPulseRifle_C_Activate");
static_assert(sizeof(WEAPON_IonPulseRifle_C_Activate) == 0x000118, "Wrong size on WEAPON_IonPulseRifle_C_Activate");
static_assert(offsetof(WEAPON_IonPulseRifle_C_Activate, Character) == 0x000000, "Member 'WEAPON_IonPulseRifle_C_Activate::Character' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_Activate, Result) == 0x000008, "Member 'WEAPON_IonPulseRifle_C_Activate::Result' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_Activate, CallFunc_GetCurrentMode_Mode) == 0x000010, "Member 'WEAPON_IonPulseRifle_C_Activate::CallFunc_GetCurrentMode_Mode' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_Activate, CallFunc_GetWeaponPropertyValueByType_Value) == 0x000110, "Member 'WEAPON_IonPulseRifle_C_Activate::CallFunc_GetWeaponPropertyValueByType_Value' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_Activate, CallFunc_Not_PreBool_ReturnValue) == 0x000114, "Member 'WEAPON_IonPulseRifle_C_Activate::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_Activate, CallFunc_Greater_IntInt_ReturnValue) == 0x000115, "Member 'WEAPON_IonPulseRifle_C_Activate::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_Activate, CallFunc_Activate_Result) == 0x000116, "Member 'WEAPON_IonPulseRifle_C_Activate::CallFunc_Activate_Result' has a wrong offset!");

// Function WEAPON_IonPulseRifle.WEAPON_IonPulseRifle_C.Deactivate
// 0x01A0 (0x01A0 - 0x0000)
struct WEAPON_IonPulseRifle_C_Deactivate final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           MontageToPlay;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ChargeProgress;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxChargeDuration;                                 // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ElapsedChargeTime;                                 // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_SystemShockCharacter_C*           OwnerCharacter;                                    // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_2;                             // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_3;                             // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x003E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F[0x1];                                       // 0x003F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default_1;                           // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_1;       // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetPlayTimeInSeconds_ReturnValue;         // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_WeaponMode                     CallFunc_GetCurrentMode_Mode;                      // 0x0058(0x0100)(HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetWeaponPropertyValueByType_Value;       // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_SystemShockCharacter_C*           CallFunc_GetOwnerCharacter_Character;              // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0178(0x0010)(ZeroConstructor, NoDestructor)
	struct FLatentEventHandle                     CallFunc_CreateEventHandle_ReturnValue;            // 0x0188(0x0010)(ContainsInstancedReference)
	bool                                          CallFunc_Deactivate_Result;                        // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WEAPON_IonPulseRifle_C_Deactivate) == 0x000008, "Wrong alignment on WEAPON_IonPulseRifle_C_Deactivate");
static_assert(sizeof(WEAPON_IonPulseRifle_C_Deactivate) == 0x0001A0, "Wrong size on WEAPON_IonPulseRifle_C_Deactivate");
static_assert(offsetof(WEAPON_IonPulseRifle_C_Deactivate, Result) == 0x000000, "Member 'WEAPON_IonPulseRifle_C_Deactivate::Result' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_Deactivate, MontageToPlay) == 0x000008, "Member 'WEAPON_IonPulseRifle_C_Deactivate::MontageToPlay' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_Deactivate, ChargeProgress) == 0x000010, "Member 'WEAPON_IonPulseRifle_C_Deactivate::ChargeProgress' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_Deactivate, MaxChargeDuration) == 0x000014, "Member 'WEAPON_IonPulseRifle_C_Deactivate::MaxChargeDuration' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_Deactivate, ElapsedChargeTime) == 0x000018, "Member 'WEAPON_IonPulseRifle_C_Deactivate::ElapsedChargeTime' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_Deactivate, OwnerCharacter) == 0x000020, "Member 'WEAPON_IonPulseRifle_C_Deactivate::OwnerCharacter' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_Deactivate, Temp_float_Variable) == 0x000028, "Member 'WEAPON_IonPulseRifle_C_Deactivate::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_Deactivate, Temp_float_Variable_1) == 0x00002C, "Member 'WEAPON_IonPulseRifle_C_Deactivate::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_Deactivate, Temp_bool_Variable) == 0x000030, "Member 'WEAPON_IonPulseRifle_C_Deactivate::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_Deactivate, Temp_float_Variable_2) == 0x000034, "Member 'WEAPON_IonPulseRifle_C_Deactivate::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_Deactivate, Temp_float_Variable_3) == 0x000038, "Member 'WEAPON_IonPulseRifle_C_Deactivate::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_Deactivate, CallFunc_IsValid_ReturnValue) == 0x00003C, "Member 'WEAPON_IonPulseRifle_C_Deactivate::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_Deactivate, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00003D, "Member 'WEAPON_IonPulseRifle_C_Deactivate::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_Deactivate, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x00003E, "Member 'WEAPON_IonPulseRifle_C_Deactivate::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_Deactivate, K2Node_Select_Default) == 0x000040, "Member 'WEAPON_IonPulseRifle_C_Deactivate::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_Deactivate, Temp_bool_Variable_1) == 0x000044, "Member 'WEAPON_IonPulseRifle_C_Deactivate::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_Deactivate, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000045, "Member 'WEAPON_IonPulseRifle_C_Deactivate::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_Deactivate, K2Node_Select_Default_1) == 0x000048, "Member 'WEAPON_IonPulseRifle_C_Deactivate::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_Deactivate, CallFunc_LessEqual_FloatFloat_ReturnValue_1) == 0x00004C, "Member 'WEAPON_IonPulseRifle_C_Deactivate::CallFunc_LessEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_Deactivate, CallFunc_GetPlayTimeInSeconds_ReturnValue) == 0x000050, "Member 'WEAPON_IonPulseRifle_C_Deactivate::CallFunc_GetPlayTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_Deactivate, CallFunc_GetCurrentMode_Mode) == 0x000058, "Member 'WEAPON_IonPulseRifle_C_Deactivate::CallFunc_GetCurrentMode_Mode' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_Deactivate, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000158, "Member 'WEAPON_IonPulseRifle_C_Deactivate::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_Deactivate, CallFunc_GetWeaponPropertyValueByType_Value) == 0x00015C, "Member 'WEAPON_IonPulseRifle_C_Deactivate::CallFunc_GetWeaponPropertyValueByType_Value' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_Deactivate, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000160, "Member 'WEAPON_IonPulseRifle_C_Deactivate::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_Deactivate, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000164, "Member 'WEAPON_IonPulseRifle_C_Deactivate::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_Deactivate, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000168, "Member 'WEAPON_IonPulseRifle_C_Deactivate::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_Deactivate, CallFunc_FClamp_ReturnValue) == 0x00016C, "Member 'WEAPON_IonPulseRifle_C_Deactivate::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_Deactivate, CallFunc_GetOwnerCharacter_Character) == 0x000170, "Member 'WEAPON_IonPulseRifle_C_Deactivate::CallFunc_GetOwnerCharacter_Character' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_Deactivate, K2Node_CreateDelegate_OutputDelegate) == 0x000178, "Member 'WEAPON_IonPulseRifle_C_Deactivate::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_Deactivate, CallFunc_CreateEventHandle_ReturnValue) == 0x000188, "Member 'WEAPON_IonPulseRifle_C_Deactivate::CallFunc_CreateEventHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_Deactivate, CallFunc_Deactivate_Result) == 0x000198, "Member 'WEAPON_IonPulseRifle_C_Deactivate::CallFunc_Deactivate_Result' has a wrong offset!");

// Function WEAPON_IonPulseRifle.WEAPON_IonPulseRifle_C.UpdateEnergyEventBindings
// 0x0048 (0x0048 - 0x0000)
struct WEAPON_IonPulseRifle_C_UpdateEnergyEventBindings final
{
public:
	bool                                          BindsEnabled;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_SystemShockCharacter_C*           CallFunc_GetOwnerCharacter_Character;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_SystemShockCharacter_C*           CallFunc_GetOwnerCharacter_Character_1;            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAttribInstance*                        CallFunc_GetAttribInstance_ReturnValue;            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAttribInstance*                        CallFunc_GetAttribInstance_ReturnValue_1;          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0038(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(WEAPON_IonPulseRifle_C_UpdateEnergyEventBindings) == 0x000008, "Wrong alignment on WEAPON_IonPulseRifle_C_UpdateEnergyEventBindings");
static_assert(sizeof(WEAPON_IonPulseRifle_C_UpdateEnergyEventBindings) == 0x000048, "Wrong size on WEAPON_IonPulseRifle_C_UpdateEnergyEventBindings");
static_assert(offsetof(WEAPON_IonPulseRifle_C_UpdateEnergyEventBindings, BindsEnabled) == 0x000000, "Member 'WEAPON_IonPulseRifle_C_UpdateEnergyEventBindings::BindsEnabled' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_UpdateEnergyEventBindings, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'WEAPON_IonPulseRifle_C_UpdateEnergyEventBindings::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_UpdateEnergyEventBindings, CallFunc_GetOwnerCharacter_Character) == 0x000018, "Member 'WEAPON_IonPulseRifle_C_UpdateEnergyEventBindings::CallFunc_GetOwnerCharacter_Character' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_UpdateEnergyEventBindings, CallFunc_GetOwnerCharacter_Character_1) == 0x000020, "Member 'WEAPON_IonPulseRifle_C_UpdateEnergyEventBindings::CallFunc_GetOwnerCharacter_Character_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_UpdateEnergyEventBindings, CallFunc_GetAttribInstance_ReturnValue) == 0x000028, "Member 'WEAPON_IonPulseRifle_C_UpdateEnergyEventBindings::CallFunc_GetAttribInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_UpdateEnergyEventBindings, CallFunc_GetAttribInstance_ReturnValue_1) == 0x000030, "Member 'WEAPON_IonPulseRifle_C_UpdateEnergyEventBindings::CallFunc_GetAttribInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_UpdateEnergyEventBindings, K2Node_CreateDelegate_OutputDelegate_1) == 0x000038, "Member 'WEAPON_IonPulseRifle_C_UpdateEnergyEventBindings::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");

// Function WEAPON_IonPulseRifle.WEAPON_IonPulseRifle_C.EVENT_OnEnergyDepleted
// 0x0003 (0x0003 - 0x0000)
struct WEAPON_IonPulseRifle_C_EVENT_OnEnergyDepleted final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Deactivate_Result;                        // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WEAPON_IonPulseRifle_C_EVENT_OnEnergyDepleted) == 0x000001, "Wrong alignment on WEAPON_IonPulseRifle_C_EVENT_OnEnergyDepleted");
static_assert(sizeof(WEAPON_IonPulseRifle_C_EVENT_OnEnergyDepleted) == 0x000003, "Wrong size on WEAPON_IonPulseRifle_C_EVENT_OnEnergyDepleted");
static_assert(offsetof(WEAPON_IonPulseRifle_C_EVENT_OnEnergyDepleted, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'WEAPON_IonPulseRifle_C_EVENT_OnEnergyDepleted::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_EVENT_OnEnergyDepleted, CallFunc_Less_IntInt_ReturnValue) == 0x000001, "Member 'WEAPON_IonPulseRifle_C_EVENT_OnEnergyDepleted::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_EVENT_OnEnergyDepleted, CallFunc_Deactivate_Result) == 0x000002, "Member 'WEAPON_IonPulseRifle_C_EVENT_OnEnergyDepleted::CallFunc_Deactivate_Result' has a wrong offset!");

// Function WEAPON_IonPulseRifle.WEAPON_IonPulseRifle_C.CanActivate
// 0x0018 (0x0018 - 0x0000)
struct WEAPON_IonPulseRifle_C_CanActivate final
{
public:
	class APAWN_SystemShockCharacter_C*           Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetOwnerEnergy_CurrentEnergy;             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetOwnerEnergy_MaxEnergy;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanActivate_Result;                       // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOverheated_Result;                      // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WEAPON_IonPulseRifle_C_CanActivate) == 0x000008, "Wrong alignment on WEAPON_IonPulseRifle_C_CanActivate");
static_assert(sizeof(WEAPON_IonPulseRifle_C_CanActivate) == 0x000018, "Wrong size on WEAPON_IonPulseRifle_C_CanActivate");
static_assert(offsetof(WEAPON_IonPulseRifle_C_CanActivate, Character) == 0x000000, "Member 'WEAPON_IonPulseRifle_C_CanActivate::Character' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_CanActivate, Result) == 0x000008, "Member 'WEAPON_IonPulseRifle_C_CanActivate::Result' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_CanActivate, CallFunc_GetOwnerEnergy_CurrentEnergy) == 0x00000C, "Member 'WEAPON_IonPulseRifle_C_CanActivate::CallFunc_GetOwnerEnergy_CurrentEnergy' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_CanActivate, CallFunc_GetOwnerEnergy_MaxEnergy) == 0x000010, "Member 'WEAPON_IonPulseRifle_C_CanActivate::CallFunc_GetOwnerEnergy_MaxEnergy' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_CanActivate, CallFunc_CanActivate_Result) == 0x000014, "Member 'WEAPON_IonPulseRifle_C_CanActivate::CallFunc_CanActivate_Result' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_CanActivate, CallFunc_Greater_IntInt_ReturnValue) == 0x000015, "Member 'WEAPON_IonPulseRifle_C_CanActivate::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_CanActivate, CallFunc_IsOverheated_Result) == 0x000016, "Member 'WEAPON_IonPulseRifle_C_CanActivate::CallFunc_IsOverheated_Result' has a wrong offset!");

// Function WEAPON_IonPulseRifle.WEAPON_IonPulseRifle_C.EVENT_UpdateCharge
// 0x0198 (0x0198 - 0x0000)
struct WEAPON_IonPulseRifle_C_EVENT_UpdateCharge final
{
public:
	float                                         MaxChargeDuration;                                 // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ChargeProgress;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ElapsedChargeTime;                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Deactivate_Result;                        // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetLastHeatPercentage_Result;             // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetPlayTimeInSeconds_ReturnValue;         // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_SystemShockCharacter_C*           CallFunc_GetOwnerCharacter_Character;              // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ExpireMod_ReturnValue;                    // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActive_ReturnValue;                     // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x005E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F[0x1];                                       // 0x005F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_2;            // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_2;          // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_WeaponMode                     CallFunc_GetCurrentMode_Mode;                      // 0x0070(0x0100)(HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetWeaponPropertyValueByType_Value;       // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_3;            // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_3;          // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0180(0x0010)(ZeroConstructor, NoDestructor)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0190(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WEAPON_IonPulseRifle_C_EVENT_UpdateCharge) == 0x000008, "Wrong alignment on WEAPON_IonPulseRifle_C_EVENT_UpdateCharge");
static_assert(sizeof(WEAPON_IonPulseRifle_C_EVENT_UpdateCharge) == 0x000198, "Wrong size on WEAPON_IonPulseRifle_C_EVENT_UpdateCharge");
static_assert(offsetof(WEAPON_IonPulseRifle_C_EVENT_UpdateCharge, MaxChargeDuration) == 0x000000, "Member 'WEAPON_IonPulseRifle_C_EVENT_UpdateCharge::MaxChargeDuration' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_EVENT_UpdateCharge, ChargeProgress) == 0x000004, "Member 'WEAPON_IonPulseRifle_C_EVENT_UpdateCharge::ChargeProgress' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_EVENT_UpdateCharge, ElapsedChargeTime) == 0x000008, "Member 'WEAPON_IonPulseRifle_C_EVENT_UpdateCharge::ElapsedChargeTime' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_EVENT_UpdateCharge, Temp_float_Variable) == 0x00000C, "Member 'WEAPON_IonPulseRifle_C_EVENT_UpdateCharge::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_EVENT_UpdateCharge, Temp_float_Variable_1) == 0x000010, "Member 'WEAPON_IonPulseRifle_C_EVENT_UpdateCharge::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_EVENT_UpdateCharge, CallFunc_Subtract_IntInt_ReturnValue) == 0x000014, "Member 'WEAPON_IonPulseRifle_C_EVENT_UpdateCharge::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_EVENT_UpdateCharge, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000018, "Member 'WEAPON_IonPulseRifle_C_EVENT_UpdateCharge::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_EVENT_UpdateCharge, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x00001C, "Member 'WEAPON_IonPulseRifle_C_EVENT_UpdateCharge::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_EVENT_UpdateCharge, CallFunc_Deactivate_Result) == 0x000020, "Member 'WEAPON_IonPulseRifle_C_EVENT_UpdateCharge::CallFunc_Deactivate_Result' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_EVENT_UpdateCharge, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000021, "Member 'WEAPON_IonPulseRifle_C_EVENT_UpdateCharge::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_EVENT_UpdateCharge, CallFunc_GetLastHeatPercentage_Result) == 0x000024, "Member 'WEAPON_IonPulseRifle_C_EVENT_UpdateCharge::CallFunc_GetLastHeatPercentage_Result' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_EVENT_UpdateCharge, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000028, "Member 'WEAPON_IonPulseRifle_C_EVENT_UpdateCharge::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_EVENT_UpdateCharge, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00002C, "Member 'WEAPON_IonPulseRifle_C_EVENT_UpdateCharge::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_EVENT_UpdateCharge, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000030, "Member 'WEAPON_IonPulseRifle_C_EVENT_UpdateCharge::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_EVENT_UpdateCharge, CallFunc_GetPlayTimeInSeconds_ReturnValue) == 0x000034, "Member 'WEAPON_IonPulseRifle_C_EVENT_UpdateCharge::CallFunc_GetPlayTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_EVENT_UpdateCharge, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000038, "Member 'WEAPON_IonPulseRifle_C_EVENT_UpdateCharge::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_EVENT_UpdateCharge, CallFunc_FClamp_ReturnValue) == 0x00003C, "Member 'WEAPON_IonPulseRifle_C_EVENT_UpdateCharge::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_EVENT_UpdateCharge, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000040, "Member 'WEAPON_IonPulseRifle_C_EVENT_UpdateCharge::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_EVENT_UpdateCharge, Temp_bool_Variable) == 0x000044, "Member 'WEAPON_IonPulseRifle_C_EVENT_UpdateCharge::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_EVENT_UpdateCharge, CallFunc_GetOwnerCharacter_Character) == 0x000048, "Member 'WEAPON_IonPulseRifle_C_EVENT_UpdateCharge::CallFunc_GetOwnerCharacter_Character' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_EVENT_UpdateCharge, K2Node_Select_Default) == 0x000050, "Member 'WEAPON_IonPulseRifle_C_EVENT_UpdateCharge::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_EVENT_UpdateCharge, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000054, "Member 'WEAPON_IonPulseRifle_C_EVENT_UpdateCharge::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_EVENT_UpdateCharge, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000058, "Member 'WEAPON_IonPulseRifle_C_EVENT_UpdateCharge::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_EVENT_UpdateCharge, CallFunc_ExpireMod_ReturnValue) == 0x00005C, "Member 'WEAPON_IonPulseRifle_C_EVENT_UpdateCharge::CallFunc_ExpireMod_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_EVENT_UpdateCharge, CallFunc_IsActive_ReturnValue) == 0x00005D, "Member 'WEAPON_IonPulseRifle_C_EVENT_UpdateCharge::CallFunc_IsActive_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_EVENT_UpdateCharge, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00005E, "Member 'WEAPON_IonPulseRifle_C_EVENT_UpdateCharge::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_EVENT_UpdateCharge, CallFunc_Conv_IntToFloat_ReturnValue_2) == 0x000060, "Member 'WEAPON_IonPulseRifle_C_EVENT_UpdateCharge::CallFunc_Conv_IntToFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_EVENT_UpdateCharge, CallFunc_IsValid_ReturnValue) == 0x000064, "Member 'WEAPON_IonPulseRifle_C_EVENT_UpdateCharge::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_EVENT_UpdateCharge, CallFunc_Divide_FloatFloat_ReturnValue_2) == 0x000068, "Member 'WEAPON_IonPulseRifle_C_EVENT_UpdateCharge::CallFunc_Divide_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_EVENT_UpdateCharge, CallFunc_Lerp_ReturnValue) == 0x00006C, "Member 'WEAPON_IonPulseRifle_C_EVENT_UpdateCharge::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_EVENT_UpdateCharge, CallFunc_GetCurrentMode_Mode) == 0x000070, "Member 'WEAPON_IonPulseRifle_C_EVENT_UpdateCharge::CallFunc_GetCurrentMode_Mode' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_EVENT_UpdateCharge, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000170, "Member 'WEAPON_IonPulseRifle_C_EVENT_UpdateCharge::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_EVENT_UpdateCharge, CallFunc_GetWeaponPropertyValueByType_Value) == 0x000174, "Member 'WEAPON_IonPulseRifle_C_EVENT_UpdateCharge::CallFunc_GetWeaponPropertyValueByType_Value' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_EVENT_UpdateCharge, CallFunc_Conv_IntToFloat_ReturnValue_3) == 0x000178, "Member 'WEAPON_IonPulseRifle_C_EVENT_UpdateCharge::CallFunc_Conv_IntToFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_EVENT_UpdateCharge, CallFunc_Divide_FloatFloat_ReturnValue_3) == 0x00017C, "Member 'WEAPON_IonPulseRifle_C_EVENT_UpdateCharge::CallFunc_Divide_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_EVENT_UpdateCharge, K2Node_CreateDelegate_OutputDelegate) == 0x000180, "Member 'WEAPON_IonPulseRifle_C_EVENT_UpdateCharge::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_EVENT_UpdateCharge, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000190, "Member 'WEAPON_IonPulseRifle_C_EVENT_UpdateCharge::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");

// Function WEAPON_IonPulseRifle.WEAPON_IonPulseRifle_C.GetBeamSurfaceResponseVectors
// 0x0198 (0x0198 - 0x0000)
struct WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors final
{
public:
	struct FVector                                ImpactLocation;                                    // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BeamDirection;                                     // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SurfaceNormal;                                     // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPhysicalSurface                              SurfaceType;                                       // 0x0024(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BeamRadius;                                        // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStrongestBeam;                                   // 0x002C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Reflection;                                        // 0x002D(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Intensity;                                         // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Origin;                                            // 0x0034(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        Directions;                                        // 0x0040(0x0010)(Parm, OutParm)
	struct FVector                                DiffuseNormalB;                                    // 0x0050(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DiffuseNormalA;                                    // 0x005C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DiffuseRotationAxis;                               // 0x0068(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MirrorReflectionVector;                            // 0x0074(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0088(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x0098(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetReflectionVector_ReturnValue;          // 0x00B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        K2Node_MakeArray_Array;                            // 0x00C0(0x0010)(ReferenceParm)
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue;              // 0x00D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue_1;            // 0x00E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ProjectVectorOnToPlane_ReturnValue;       // 0x00F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetBestAxisDirection_AxisDirection;       // 0x00FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        K2Node_MakeArray_Array_1;                          // 0x0108(0x0010)(ReferenceParm)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0118(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x0124(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetReflectionVector_ReturnValue_1;        // 0x0130(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        K2Node_MakeArray_Array_2;                          // 0x0140(0x0010)(ReferenceParm)
	struct FVector                                CallFunc_GetReflectionVector_ReturnValue_2;        // 0x0150(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15C[0x4];                                      // 0x015C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        K2Node_MakeArray_Array_3;                          // 0x0160(0x0010)(ReferenceParm)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0170(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_2;       // 0x0180(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_2;      // 0x018C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors) == 0x000008, "Wrong alignment on WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors");
static_assert(sizeof(WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors) == 0x000198, "Wrong size on WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors, ImpactLocation) == 0x000000, "Member 'WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors::ImpactLocation' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors, BeamDirection) == 0x00000C, "Member 'WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors::BeamDirection' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors, SurfaceNormal) == 0x000018, "Member 'WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors::SurfaceNormal' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors, SurfaceType) == 0x000024, "Member 'WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors::SurfaceType' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors, BeamRadius) == 0x000028, "Member 'WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors::BeamRadius' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors, IsStrongestBeam) == 0x00002C, "Member 'WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors::IsStrongestBeam' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors, Reflection) == 0x00002D, "Member 'WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors::Reflection' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors, Intensity) == 0x000030, "Member 'WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors::Intensity' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors, Origin) == 0x000034, "Member 'WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors::Origin' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors, Directions) == 0x000040, "Member 'WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors::Directions' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors, DiffuseNormalB) == 0x000050, "Member 'WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors::DiffuseNormalB' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors, DiffuseNormalA) == 0x00005C, "Member 'WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors::DiffuseNormalA' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors, DiffuseRotationAxis) == 0x000068, "Member 'WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors::DiffuseRotationAxis' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors, MirrorReflectionVector) == 0x000074, "Member 'WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors::MirrorReflectionVector' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors, K2Node_SwitchEnum_CmpSuccess) == 0x000080, "Member 'WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors, CallFunc_Add_FloatFloat_ReturnValue) == 0x000084, "Member 'WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000088, "Member 'WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000094, "Member 'WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x000098, "Member 'WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000A4, "Member 'WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors, CallFunc_GetReflectionVector_ReturnValue) == 0x0000B0, "Member 'WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors::CallFunc_GetReflectionVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors, K2Node_MakeArray_Array) == 0x0000C0, "Member 'WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors, CallFunc_RandomFloatInRange_ReturnValue) == 0x0000D0, "Member 'WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0000D4, "Member 'WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors, CallFunc_RotateAngleAxis_ReturnValue) == 0x0000D8, "Member 'WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors::CallFunc_RotateAngleAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors, CallFunc_RotateAngleAxis_ReturnValue_1) == 0x0000E4, "Member 'WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors::CallFunc_RotateAngleAxis_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors, CallFunc_ProjectVectorOnToPlane_ReturnValue) == 0x0000F0, "Member 'WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors::CallFunc_ProjectVectorOnToPlane_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors, CallFunc_GetBestAxisDirection_AxisDirection) == 0x0000FC, "Member 'WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors::CallFunc_GetBestAxisDirection_AxisDirection' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors, K2Node_MakeArray_Array_1) == 0x000108, "Member 'WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors, CallFunc_Normal_ReturnValue) == 0x000118, "Member 'WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x000124, "Member 'WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors, CallFunc_GetReflectionVector_ReturnValue_1) == 0x000130, "Member 'WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors::CallFunc_GetReflectionVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors, K2Node_MakeArray_Array_2) == 0x000140, "Member 'WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors, CallFunc_GetReflectionVector_ReturnValue_2) == 0x000150, "Member 'WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors::CallFunc_GetReflectionVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors, K2Node_MakeArray_Array_3) == 0x000160, "Member 'WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors::K2Node_MakeArray_Array_3' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors, CallFunc_Add_VectorVector_ReturnValue) == 0x000170, "Member 'WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x00017C, "Member 'WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors, CallFunc_Multiply_VectorFloat_ReturnValue_2) == 0x000180, "Member 'WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors::CallFunc_Multiply_VectorFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors, CallFunc_Subtract_VectorVector_ReturnValue_2) == 0x00018C, "Member 'WEAPON_IonPulseRifle_C_GetBeamSurfaceResponseVectors::CallFunc_Subtract_VectorVector_ReturnValue_2' has a wrong offset!");

// Function WEAPON_IonPulseRifle.WEAPON_IonPulseRifle_C.FireChargedShot
// 0x04E0 (0x04E0 - 0x0000)
struct WEAPON_IonPulseRifle_C_FireChargedShot final
{
public:
	int32                                         EnergyCost;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetLocation;                                    // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BeamDirection;                                     // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BarrelLocation;                                    // 0x001C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SpreadDirection;                                   // 0x0028(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CameraDirection;                                   // 0x0034(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CameraLocation;                                    // 0x0040(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HeatChangeAtMax;                                   // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ChargeSoundAlpha;                                  // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ChargeProgress;                                    // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxChargeDuration;                                 // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ElapsedChargeTime;                                 // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_SystemShockCharacter_C*           CharacterOwner;                                    // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Ease_ReturnValue;                         // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Ease_ReturnValue_1;                       // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x007D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_3;                              // 0x007E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_4;                              // 0x007F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Temp_float_Variable_1;                             // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_Hacker_Simple_C*                  K2Node_DynamicCast_AsPAWN_Hacker_Simple;           // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurrentSpreadAngle_Result;             // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_SystemShockCharacter_C*           CallFunc_GetOwnerCharacter_Character;              // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetHeadTransform_Transform;               // 0x00A0(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRandomWeaponSpreadDirection_SpreadDirection; // 0x0100(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x010C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x010D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10E[0x2];                                      // 0x010E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UForceFeedbackEffect*                   K2Node_Select_Default;                             // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_2;         // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_3;         // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11A[0x6];                                      // 0x011A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UForceFeedbackEffect*                   K2Node_Select_Default_1;                           // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UForceFeedbackEffect*                   K2Node_Select_Default_2;                           // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMaxCombatTraceDistance_Distance;       // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UForceFeedbackEffect*                   K2Node_Select_Default_3;                           // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMaxCombatTraceDistance_Distance_1;     // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_4;         // 0x0144(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_5;         // 0x0145(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_146[0x2];                                      // 0x0146(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UMeshComponent*                         CallFunc_GetWeaponMeshComponent_Result;            // 0x0148(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0154(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_4;                           // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_2;                             // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetPlayTimeInSeconds_ReturnValue;         // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SafeFloatDivide_ReturnValue;              // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x017C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0188(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_5;                           // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Ease_ReturnValue_2;                       // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_6;                           // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A4[0x4];                                      // 0x01A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_WeaponMode                     CallFunc_GetCurrentMode_Mode;                      // 0x01A8(0x0100)(HasGetValueTypeHash)
	int32                                         CallFunc_GetWeaponPropertyValueByType_Value;       // 0x02A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2AC[0x4];                                      // 0x02AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_WeaponMode                     CallFunc_GetCurrentMode_Mode_1;                    // 0x02B0(0x0100)(HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x03B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetWeaponPropertyValueByType_Value_1;     // 0x03B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Ease_ReturnValue_3;                       // 0x03B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x03BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_WeaponMode                     CallFunc_GetCurrentMode_Mode_2;                    // 0x03C0(0x0100)(HasGetValueTypeHash)
	struct FVector                                CallFunc_TriangulateRayDirection_TriangulatedDirection; // 0x04C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetWeaponPropertyValueByType_Value_2;     // 0x04CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_2;            // 0x04D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x04D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WEAPON_IonPulseRifle_C_FireChargedShot) == 0x000010, "Wrong alignment on WEAPON_IonPulseRifle_C_FireChargedShot");
static_assert(sizeof(WEAPON_IonPulseRifle_C_FireChargedShot) == 0x0004E0, "Wrong size on WEAPON_IonPulseRifle_C_FireChargedShot");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, EnergyCost) == 0x000000, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::EnergyCost' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, TargetLocation) == 0x000004, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::TargetLocation' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, BeamDirection) == 0x000010, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::BeamDirection' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, BarrelLocation) == 0x00001C, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::BarrelLocation' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, SpreadDirection) == 0x000028, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::SpreadDirection' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, CameraDirection) == 0x000034, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::CameraDirection' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, CameraLocation) == 0x000040, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::CameraLocation' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, HeatChangeAtMax) == 0x00004C, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::HeatChangeAtMax' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, ChargeSoundAlpha) == 0x000050, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::ChargeSoundAlpha' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, ChargeProgress) == 0x000054, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::ChargeProgress' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, MaxChargeDuration) == 0x000058, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::MaxChargeDuration' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, ElapsedChargeTime) == 0x00005C, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::ElapsedChargeTime' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, CharacterOwner) == 0x000060, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::CharacterOwner' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, Temp_float_Variable) == 0x000068, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, CallFunc_Ease_ReturnValue) == 0x00006C, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::CallFunc_Ease_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, CallFunc_Ease_ReturnValue_1) == 0x000070, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::CallFunc_Ease_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, Temp_bool_Variable) == 0x000074, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, Temp_int_Variable) == 0x000078, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, Temp_bool_Variable_1) == 0x00007C, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, Temp_bool_Variable_2) == 0x00007D, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, Temp_bool_Variable_3) == 0x00007E, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, Temp_bool_Variable_4) == 0x00007F, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, Temp_float_Variable_1) == 0x000080, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, K2Node_DynamicCast_AsPAWN_Hacker_Simple) == 0x000088, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::K2Node_DynamicCast_AsPAWN_Hacker_Simple' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, K2Node_DynamicCast_bSuccess) == 0x000090, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, CallFunc_GetCurrentSpreadAngle_Result) == 0x000094, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::CallFunc_GetCurrentSpreadAngle_Result' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, CallFunc_GetOwnerCharacter_Character) == 0x000098, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::CallFunc_GetOwnerCharacter_Character' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, CallFunc_GetHeadTransform_Transform) == 0x0000A0, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::CallFunc_GetHeadTransform_Transform' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, CallFunc_BreakTransform_Location) == 0x0000D0, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, CallFunc_BreakTransform_Rotation) == 0x0000DC, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, CallFunc_BreakTransform_Scale) == 0x0000E8, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, CallFunc_GetForwardVector_ReturnValue) == 0x0000F4, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, CallFunc_GetRandomWeaponSpreadDirection_SpreadDirection) == 0x000100, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::CallFunc_GetRandomWeaponSpreadDirection_SpreadDirection' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00010C, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x00010D, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, K2Node_Select_Default) == 0x000110, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, CallFunc_Greater_FloatFloat_ReturnValue_2) == 0x000118, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::CallFunc_Greater_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, CallFunc_Greater_FloatFloat_ReturnValue_3) == 0x000119, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::CallFunc_Greater_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, K2Node_Select_Default_1) == 0x000120, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, K2Node_Select_Default_2) == 0x000128, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, CallFunc_GetMaxCombatTraceDistance_Distance) == 0x000130, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::CallFunc_GetMaxCombatTraceDistance_Distance' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, K2Node_Select_Default_3) == 0x000138, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, CallFunc_GetMaxCombatTraceDistance_Distance_1) == 0x000140, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::CallFunc_GetMaxCombatTraceDistance_Distance_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, CallFunc_Greater_FloatFloat_ReturnValue_4) == 0x000144, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::CallFunc_Greater_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, CallFunc_Greater_FloatFloat_ReturnValue_5) == 0x000145, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::CallFunc_Greater_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, CallFunc_GetWeaponMeshComponent_Result) == 0x000148, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::CallFunc_GetWeaponMeshComponent_Result' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000150, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, CallFunc_GetSocketLocation_ReturnValue) == 0x000154, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, CallFunc_FMax_ReturnValue) == 0x000160, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, K2Node_Select_Default_4) == 0x000164, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, Temp_float_Variable_2) == 0x000168, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, CallFunc_GetPlayTimeInSeconds_ReturnValue) == 0x00016C, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::CallFunc_GetPlayTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, CallFunc_SafeFloatDivide_ReturnValue) == 0x000170, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::CallFunc_SafeFloatDivide_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, CallFunc_FClamp_ReturnValue) == 0x000174, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000178, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00017C, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, CallFunc_Add_VectorVector_ReturnValue) == 0x000188, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, Temp_int_Variable_1) == 0x000194, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, K2Node_Select_Default_5) == 0x000198, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, CallFunc_Ease_ReturnValue_2) == 0x00019C, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::CallFunc_Ease_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, K2Node_Select_Default_6) == 0x0001A0, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::K2Node_Select_Default_6' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, CallFunc_GetCurrentMode_Mode) == 0x0001A8, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::CallFunc_GetCurrentMode_Mode' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, CallFunc_GetWeaponPropertyValueByType_Value) == 0x0002A8, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::CallFunc_GetWeaponPropertyValueByType_Value' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, CallFunc_GetCurrentMode_Mode_1) == 0x0002B0, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::CallFunc_GetCurrentMode_Mode_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, CallFunc_Conv_IntToFloat_ReturnValue) == 0x0003B0, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, CallFunc_GetWeaponPropertyValueByType_Value_1) == 0x0003B4, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::CallFunc_GetWeaponPropertyValueByType_Value_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, CallFunc_Ease_ReturnValue_3) == 0x0003B8, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::CallFunc_Ease_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x0003BC, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, CallFunc_GetCurrentMode_Mode_2) == 0x0003C0, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::CallFunc_GetCurrentMode_Mode_2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, CallFunc_TriangulateRayDirection_TriangulatedDirection) == 0x0004C0, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::CallFunc_TriangulateRayDirection_TriangulatedDirection' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, CallFunc_GetWeaponPropertyValueByType_Value_2) == 0x0004CC, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::CallFunc_GetWeaponPropertyValueByType_Value_2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, CallFunc_Conv_IntToFloat_ReturnValue_2) == 0x0004D0, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::CallFunc_Conv_IntToFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_FireChargedShot, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0004D4, "Member 'WEAPON_IonPulseRifle_C_FireChargedShot::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");

// Function WEAPON_IonPulseRifle.WEAPON_IonPulseRifle_C.TraceChargedShotRecurse
// 0x1178 (0x1178 - 0x0000)
struct WEAPON_IonPulseRifle_C_TraceChargedShotRecurse final
{
public:
	struct FVector                                SourceLocation;                                    // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetLocation;                                    // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BeamDirection;                                     // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         EnergyCost;                                        // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ChargeProgress;                                    // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OverchargeTime;                                    // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BeamIntensity;                                     // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_SystemShockCharacter_C*           LastHitCharacter;                                  // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_IonChargedBeamType                       BeamType;                                          // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RecurseTargetLocation;                             // 0x0044(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RecurseBeamDirection;                              // 0x0050(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RecurseSourceLocation;                             // 0x005C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RecurseBeamIntensity;                              // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RecurseReflection;                                 // 0x006C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class APAWN_SystemShockCharacter_C*>     CollidedShieldCharacters;                          // 0x0070(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate)
	class UPhysicalMaterial*                      HitPhysMat;                                        // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOBJ_ImpactData_C*                      ImpactData;                                        // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAttribManagerComponent*                AttribManager;                                     // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrImpulseStrength;                               // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BaseImpulseStrength;                               // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ImpactLocation;                                    // 0x00E0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x00EC(0x0088)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_174[0x4];                                      // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAttribDamageInstance                  DamageInstance;                                    // 0x0178(0x0028)(Edit, BlueprintVisible)
	struct FAttribModApplyData                    DamageMod;                                         // 0x01A0(0x00A0)(Edit, BlueprintVisible)
	float                                         CurrentBeamAP;                                     // 0x0240(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentBeamDamage;                                 // 0x0244(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ChargeBeamRadius;                                  // 0x0248(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ChargeIntensity;                                   // 0x024C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0250(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0254(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0258(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x025C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_2;                             // 0x0260(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0264(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_3;                             // 0x0268(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_4;                             // 0x026C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_5;                             // 0x0270(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0274(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_275[0x3];                                      // 0x0275(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_6;                             // 0x0278(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_7;                             // 0x027C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x0280(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_8;                             // 0x0284(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_9;                             // 0x0288(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_10;                            // 0x028C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0290(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0291(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0292(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_293[0x5];                                      // 0x0293(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Temp_object_Variable;                              // 0x0298(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_IonChargedBeamType                       Temp_byte_Variable;                                // 0x02A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x02A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x02A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A3[0x1];                                      // 0x02A3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x02A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x02A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x02AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x02B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x02C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x02D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2DC[0x4];                                      // 0x02DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x02E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x02E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x02F0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x02F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0300(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0304(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0308(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x030C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0318(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_1;            // 0x0324(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_1;         // 0x0325(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_326[0x2];                                      // 0x0326(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_1;                    // 0x0328(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_1;                // 0x032C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location_1;                // 0x0330(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_1;             // 0x033C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_1;                  // 0x0348(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_1;            // 0x0354(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_1;                 // 0x0360(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_1;                // 0x0368(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_1;            // 0x0370(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_1;             // 0x0378(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_1;                 // 0x0380(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex_1;            // 0x0384(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_1;               // 0x0388(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart_1;              // 0x038C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_1;                // 0x0398(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A4[0x4];                                      // 0x03A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_SystemShockCharacter_C*           K2Node_DynamicCast_AsPAWN_System_Shock_Character;  // 0x03A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x03B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B1[0x3];                                      // 0x03B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x03B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_2;            // 0x03C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_2;         // 0x03C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C2[0x2];                                      // 0x03C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_2;                    // 0x03C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_2;                // 0x03C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location_2;                // 0x03CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_2;             // 0x03D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_2;                  // 0x03E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_2;            // 0x03F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3FC[0x4];                                      // 0x03FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_2;                 // 0x0400(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_2;                // 0x0408(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_2;            // 0x0410(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_2;             // 0x0418(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_2;                 // 0x0420(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex_2;            // 0x0424(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_2;               // 0x0428(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart_2;              // 0x042C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_2;                // 0x0438(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSimulatingPhysics_ReturnValue;          // 0x0444(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0445(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_446[0x2];                                      // 0x0446(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0448(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_IonChargedBeamType                       Temp_byte_Variable_1;                              // 0x044C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44D[0x3];                                      // 0x044D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCOMP_AttribManager_C*                  K2Node_DynamicCast_AsCOMP_Attrib_Manager;          // 0x0450(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0458(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDamageReceivedBound_ReturnValue;        // 0x0459(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ENUM_IonChargedBeamType                       Temp_byte_Variable_2;                              // 0x045A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x045B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetMaxCombatTraceDistance_Distance;       // 0x045C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x0460(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x046C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0478(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_3;            // 0x0479(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_3;         // 0x047A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_47B[0x1];                                      // 0x047B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_3;                    // 0x047C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_3;                // 0x0480(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location_3;                // 0x0484(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_3;             // 0x0490(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_3;                  // 0x049C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_3;            // 0x04A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B4[0x4];                                      // 0x04B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_3;                 // 0x04B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_3;                // 0x04C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_3;            // 0x04C8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_3;             // 0x04D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_3;                 // 0x04D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex_3;            // 0x04DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_3;               // 0x04E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart_3;              // 0x04E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_3;                // 0x04F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetReflectionVector_ReturnValue;          // 0x04FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Select_Default;                             // 0x0508(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x0510(0x0010)(ConstParm, ReferenceParm)
	struct FHitResult                             CallFunc_SphereTraceSingle_OutHit;                 // 0x0520(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceSingle_ReturnValue;            // 0x05A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A9[0x3];                                      // 0x05A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Round_ReturnValue;                        // 0x05AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x05B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetArmorPenetrationValueForEnergyCost_Result; // 0x05B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x05B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetDamageValueForEnergyCost_Result;       // 0x05BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x05C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x05C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x05C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C3[0x5];                                      // 0x05C3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Temp_object_Variable_1;                            // 0x05C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x05D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGI_SinglePlayer_C*                     K2Node_DynamicCast_AsGI_Single_Player;             // 0x05D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x05E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryCompleteBinaryAchievement_Result;      // 0x05E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x05E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_4;            // 0x05E3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_4;         // 0x05E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5E5[0x3];                                      // 0x05E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_4;                    // 0x05E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_4;                // 0x05EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location_4;                // 0x05F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_4;             // 0x05FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_4;                  // 0x0608(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_4;            // 0x0614(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_4;                 // 0x0620(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_4;                // 0x0628(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_4;            // 0x0630(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_4;             // 0x0638(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_4;                 // 0x0640(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex_4;            // 0x0644(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_4;               // 0x0648(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart_4;              // 0x064C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_4;                // 0x0658(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_664[0x4];                                      // 0x0664(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_SystemShockCharacter_C*           K2Node_DynamicCast_AsPAWN_System_Shock_Character_1; // 0x0668(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0670(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerControlled_ReturnValue;           // 0x0671(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0672(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0673(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0674(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_675[0x3];                                      // 0x0675(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNamedFloat                            K2Node_MakeStruct_NamedFloat;                      // 0x0678(0x000C)(NoDestructor)
	uint8                                         Pad_684[0x4];                                      // 0x0684(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FNamedFloat>                    K2Node_MakeArray_Array_1;                          // 0x0688(0x0010)(ReferenceParm)
	struct FSTRUCT_EffectParams                   K2Node_MakeStruct_STRUCT_EffectParams;             // 0x0698(0x0030)(HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x06C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x06CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CD[0x3];                                      // 0x06CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetMaxCombatTraceDistance_Distance_1;     // 0x06D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x06D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D5[0x3];                                      // 0x06D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default_2;                           // 0x06D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_3;                           // 0x06DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_4;                           // 0x06E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x06E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x06E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_5;            // 0x06EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_5;         // 0x06ED(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6EE[0x2];                                      // 0x06EE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_5;                    // 0x06F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_5;                // 0x06F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location_5;                // 0x06F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_5;             // 0x0704(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_5;                  // 0x0710(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_5;            // 0x071C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_5;                 // 0x0728(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_5;                // 0x0730(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_5;            // 0x0738(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_5;             // 0x0740(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_5;                 // 0x0748(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex_5;            // 0x074C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_5;               // 0x0750(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart_5;              // 0x0754(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_5;                // 0x0760(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x076C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_SystemShockCharacter_C*           K2Node_DynamicCast_AsPAWN_System_Shock_Character_2; // 0x0770(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0778(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_779[0x3];                                      // 0x0779(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_4;        // 0x077C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Set_Contains_ReturnValue;                 // 0x0780(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x0781(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_782[0x6];                                      // 0x0782(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_SystemShockCharacter_C*           CallFunc_GetOwnerCharacter_Character;              // 0x0788(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_6;            // 0x0790(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_6;         // 0x0791(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_792[0x2];                                      // 0x0792(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_6;                    // 0x0794(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_6;                // 0x0798(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location_6;                // 0x079C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_6;             // 0x07A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_6;                  // 0x07B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_6;            // 0x07C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7CC[0x4];                                      // 0x07CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_6;                 // 0x07D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_6;                // 0x07D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_6;            // 0x07E0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_6;             // 0x07E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_6;                 // 0x07F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex_6;            // 0x07F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_6;               // 0x07F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart_6;              // 0x07FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_6;                // 0x0808(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_5;                           // 0x0814(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_7;            // 0x0818(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_7;         // 0x0819(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81A[0x2];                                      // 0x081A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_7;                    // 0x081C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_7;                // 0x0820(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location_7;                // 0x0824(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_7;             // 0x0830(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_7;                  // 0x083C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_7;            // 0x0848(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_854[0x4];                                      // 0x0854(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_7;                 // 0x0858(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_7;                // 0x0860(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_7;            // 0x0868(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_7;             // 0x0870(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_7;                 // 0x0878(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex_7;            // 0x087C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_7;               // 0x0880(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart_7;              // 0x0884(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_7;                // 0x0890(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89C[0x4];                                      // 0x089C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_WeaponMode                     CallFunc_GetCurrentMode_Mode;                      // 0x08A0(0x0100)(HasGetValueTypeHash)
	int32                                         CallFunc_GetWeaponPropertyValueByType_Value;       // 0x09A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x09A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_8;            // 0x09A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_8;         // 0x09A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9AA[0x2];                                      // 0x09AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_8;                    // 0x09AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_8;                // 0x09B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location_8;                // 0x09B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_8;             // 0x09C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_8;                  // 0x09CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_8;            // 0x09D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9E4[0x4];                                      // 0x09E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_8;                 // 0x09E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_8;                // 0x09F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_8;            // 0x09F8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_8;             // 0x0A00(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_8;                 // 0x0A08(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex_8;            // 0x0A0C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_8;               // 0x0A10(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart_8;              // 0x0A14(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_8;                // 0x0A20(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0A2C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ENUM_IonChargedBeamType                       K2Node_Select_Default_6;                           // 0x0A2D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A2E[0x2];                                      // 0x0A2E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Temp_object_Variable_2;                            // 0x0A30(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_5;        // 0x0A38(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_9;            // 0x0A3C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_9;         // 0x0A3D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A3E[0x2];                                      // 0x0A3E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_9;                    // 0x0A40(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_9;                // 0x0A44(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location_9;                // 0x0A48(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_9;             // 0x0A54(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_9;                  // 0x0A60(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_9;            // 0x0A6C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_9;                 // 0x0A78(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_9;                // 0x0A80(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_9;            // 0x0A88(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_9;             // 0x0A90(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_9;                 // 0x0A98(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex_9;            // 0x0A9C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_9;               // 0x0AA0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart_9;              // 0x0AA4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_9;                // 0x0AB0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENUM_IonChargedBeamType                       Temp_byte_Variable_3;                              // 0x0ABC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_ABD[0x3];                                      // 0x0ABD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Select_Default_7;                           // 0x0AC0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         K2Node_MakeArray_Array_2;                          // 0x0AC8(0x0010)(ReferenceParm)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_2;         // 0x0AD8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DamageCharacterShieldsAlongRay_BlockingHit; // 0x0AD9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_ADA[0x2];                                      // 0x0ADA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_DamageCharacterShieldsAlongRay_HitResult; // 0x0ADC(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0B64(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_10;           // 0x0B65(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_10;        // 0x0B66(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B67[0x1];                                      // 0x0B67(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_10;                   // 0x0B68(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_10;               // 0x0B6C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location_10;               // 0x0B70(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_10;            // 0x0B7C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_10;                 // 0x0B88(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_10;           // 0x0B94(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_10;                // 0x0BA0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_10;               // 0x0BA8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_10;           // 0x0BB0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_10;            // 0x0BB8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_10;                // 0x0BC0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex_10;           // 0x0BC4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_10;              // 0x0BC8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart_10;             // 0x0BCC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_10;               // 0x0BD8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BE4[0x4];                                      // 0x0BE4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_SystemShockCharacter_C*           K2Node_DynamicCast_AsPAWN_System_Shock_Character_3; // 0x0BE8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x0BF0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BF1[0x3];                                      // 0x0BF1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_6;        // 0x0BF4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_2;       // 0x0BF8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0C04(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_7;        // 0x0C10(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C14[0x4];                                      // 0x0C14(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_WeaponMode                     CallFunc_GetCurrentMode_Mode_1;                    // 0x0C18(0x0100)(HasGetValueTypeHash)
	int32                                         CallFunc_GetWeaponPropertyValueByType_Value_1;     // 0x0D18(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_8;        // 0x0D1C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_2;            // 0x0D20(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Ease_ReturnValue;                         // 0x0D24(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_9;        // 0x0D28(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D2C[0x4];                                      // 0x0D2C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_SystemShockCharacter_C*           CallFunc_GetOwnerCharacter_Character_1;            // 0x0D30(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_11;           // 0x0D38(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_11;        // 0x0D39(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D3A[0x2];                                      // 0x0D3A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_11;                   // 0x0D3C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_11;               // 0x0D40(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location_11;               // 0x0D44(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_11;            // 0x0D50(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_11;                 // 0x0D5C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_11;           // 0x0D68(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D74[0x4];                                      // 0x0D74(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_11;                // 0x0D78(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_11;               // 0x0D80(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_11;           // 0x0D88(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_11;            // 0x0D90(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_11;                // 0x0D98(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex_11;           // 0x0D9C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_11;              // 0x0DA0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart_11;             // 0x0DA4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_11;               // 0x0DB0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CreateImpactEffects_Success;              // 0x0DBC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DBD[0x3];                                      // 0x0DBD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_ImpactEffectResults            CallFunc_CreateImpactEffects_Results;              // 0x0DC0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_GetBeamSurfaceResponseVectors_Reflection; // 0x0DD8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DD9[0x3];                                      // 0x0DD9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetBeamSurfaceResponseVectors_Intensity;  // 0x0DDC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetBeamSurfaceResponseVectors_Origin;     // 0x0DE0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DEC[0x4];                                      // 0x0DEC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        CallFunc_GetBeamSurfaceResponseVectors_Directions; // 0x0DF0(0x0010)(ReferenceParm)
	struct FVector                                CallFunc_Array_Get_Item;                           // 0x0E00(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_12;           // 0x0E0C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_12;        // 0x0E0D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E0E[0x2];                                      // 0x0E0E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_12;                   // 0x0E10(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_12;               // 0x0E14(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location_12;               // 0x0E18(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_12;            // 0x0E24(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_12;                 // 0x0E30(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_12;           // 0x0E3C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_12;                // 0x0E48(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_12;               // 0x0E50(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_12;           // 0x0E58(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_12;            // 0x0E60(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_12;                // 0x0E68(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex_12;           // 0x0E6C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_12;              // 0x0E70(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart_12;             // 0x0E74(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_12;               // 0x0E80(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0E8C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_SystemShockCharacter_C*           CallFunc_GetOwnerCharacter_Character_2;            // 0x0E90(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_WeaponMode                     CallFunc_GetCurrentMode_Mode_2;                    // 0x0E98(0x0100)(HasGetValueTypeHash)
	class UOBJ_ImpactData_C*                      CallFunc_CreateImpactDataFromHit_ImpactData;       // 0x0F98(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAttribDamageInstance                  CallFunc_ApplyDamageMod_OutDamageInstance;         // 0x0FA0(0x0028)()
	class UAttribMod*                             CallFunc_ApplyDamageMod_ReturnValue;               // 0x0FC8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_13;           // 0x0FD0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_13;        // 0x0FD1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_FD2[0x2];                                      // 0x0FD2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_13;                   // 0x0FD4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_13;               // 0x0FD8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location_13;               // 0x0FDC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_13;            // 0x0FE8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_13;                 // 0x0FF4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_13;           // 0x1000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_100C[0x4];                                     // 0x100C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_13;                // 0x1010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_13;               // 0x1018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_13;           // 0x1020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_13;            // 0x1028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_13;                // 0x1030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex_13;           // 0x1034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_13;              // 0x1038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart_13;             // 0x103C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_13;               // 0x1048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1054[0x4];                                     // 0x1054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAttribManagerComponent*                CallFunc_GetComponentByClass_ReturnValue;          // 0x1058(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_14;           // 0x1060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_14;        // 0x1061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1062[0x2];                                     // 0x1062(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_14;                   // 0x1064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_14;               // 0x1068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location_14;               // 0x106C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_14;            // 0x1078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_14;                 // 0x1084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_14;           // 0x1090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_109C[0x4];                                     // 0x109C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_14;                // 0x10A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_14;               // 0x10A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_14;           // 0x10B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_14;            // 0x10B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_14;                // 0x10C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex_14;           // 0x10C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_14;              // 0x10C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart_14;             // 0x10CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_14;               // 0x10D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x10E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x10E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x10E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10EA[0x2];                                     // 0x10EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x10EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_15;           // 0x10F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_15;        // 0x10F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10F2[0x2];                                     // 0x10F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_15;                   // 0x10F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_15;               // 0x10F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location_15;               // 0x10FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_15;            // 0x1108(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_15;                 // 0x1114(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_15;           // 0x1120(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_112C[0x4];                                     // 0x112C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_15;                // 0x1130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_15;               // 0x1138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_15;           // 0x1140(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_15;            // 0x1148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_15;                // 0x1150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex_15;           // 0x1154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_15;              // 0x1158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart_15;             // 0x115C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_15;               // 0x1168(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse) == 0x000008, "Wrong alignment on WEAPON_IonPulseRifle_C_TraceChargedShotRecurse");
static_assert(sizeof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse) == 0x001178, "Wrong size on WEAPON_IonPulseRifle_C_TraceChargedShotRecurse");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, SourceLocation) == 0x000000, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::SourceLocation' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, TargetLocation) == 0x00000C, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::TargetLocation' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, BeamDirection) == 0x000018, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::BeamDirection' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, EnergyCost) == 0x000024, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::EnergyCost' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, ChargeProgress) == 0x000028, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::ChargeProgress' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, OverchargeTime) == 0x00002C, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::OverchargeTime' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, BeamIntensity) == 0x000030, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::BeamIntensity' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, LastHitCharacter) == 0x000038, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::LastHitCharacter' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, BeamType) == 0x000040, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::BeamType' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, RecurseTargetLocation) == 0x000044, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::RecurseTargetLocation' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, RecurseBeamDirection) == 0x000050, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::RecurseBeamDirection' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, RecurseSourceLocation) == 0x00005C, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::RecurseSourceLocation' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, RecurseBeamIntensity) == 0x000068, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::RecurseBeamIntensity' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, RecurseReflection) == 0x00006C, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::RecurseReflection' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CollidedShieldCharacters) == 0x000070, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CollidedShieldCharacters' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, HitPhysMat) == 0x0000C0, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::HitPhysMat' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, ImpactData) == 0x0000C8, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::ImpactData' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, AttribManager) == 0x0000D0, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::AttribManager' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CurrImpulseStrength) == 0x0000D8, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CurrImpulseStrength' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, BaseImpulseStrength) == 0x0000DC, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::BaseImpulseStrength' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, ImpactLocation) == 0x0000E0, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::ImpactLocation' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, Hit) == 0x0000EC, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::Hit' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, DamageInstance) == 0x000178, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::DamageInstance' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, DamageMod) == 0x0001A0, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::DamageMod' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CurrentBeamAP) == 0x000240, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CurrentBeamAP' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CurrentBeamDamage) == 0x000244, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CurrentBeamDamage' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, ChargeBeamRadius) == 0x000248, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::ChargeBeamRadius' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, ChargeIntensity) == 0x00024C, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::ChargeIntensity' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, Temp_int_Variable) == 0x000250, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000254, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, Temp_float_Variable) == 0x000258, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, Temp_float_Variable_1) == 0x00025C, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, Temp_float_Variable_2) == 0x000260, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, Temp_int_Variable_1) == 0x000264, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, Temp_float_Variable_3) == 0x000268, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, Temp_float_Variable_4) == 0x00026C, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::Temp_float_Variable_4' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, Temp_float_Variable_5) == 0x000270, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::Temp_float_Variable_5' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, Temp_bool_Variable) == 0x000274, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, Temp_float_Variable_6) == 0x000278, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::Temp_float_Variable_6' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, Temp_float_Variable_7) == 0x00027C, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::Temp_float_Variable_7' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, Temp_int_Variable_2) == 0x000280, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, Temp_float_Variable_8) == 0x000284, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::Temp_float_Variable_8' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, Temp_float_Variable_9) == 0x000288, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::Temp_float_Variable_9' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, Temp_float_Variable_10) == 0x00028C, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::Temp_float_Variable_10' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, Temp_bool_Variable_1) == 0x000290, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_IsValid_ReturnValue) == 0x000291, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_IsValid_ReturnValue_1) == 0x000292, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, Temp_object_Variable) == 0x000298, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, Temp_byte_Variable) == 0x0002A0, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_bBlockingHit) == 0x0002A1, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_bInitialOverlap) == 0x0002A2, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Time) == 0x0002A4, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Distance) == 0x0002A8, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Location) == 0x0002AC, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_ImpactPoint) == 0x0002B8, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Normal) == 0x0002C4, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_ImpactNormal) == 0x0002D0, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_PhysMat) == 0x0002E0, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitActor) == 0x0002E8, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitComponent) == 0x0002F0, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitBoneName) == 0x0002F8, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitItem) == 0x000300, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_ElementIndex) == 0x000304, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_FaceIndex) == 0x000308, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_TraceStart) == 0x00030C, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_TraceEnd) == 0x000318, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_bBlockingHit_1) == 0x000324, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_bBlockingHit_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_bInitialOverlap_1) == 0x000325, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_bInitialOverlap_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Time_1) == 0x000328, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Time_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Distance_1) == 0x00032C, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Distance_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Location_1) == 0x000330, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Location_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_ImpactPoint_1) == 0x00033C, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_ImpactPoint_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Normal_1) == 0x000348, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Normal_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_ImpactNormal_1) == 0x000354, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_ImpactNormal_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_PhysMat_1) == 0x000360, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_PhysMat_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitActor_1) == 0x000368, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitActor_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitComponent_1) == 0x000370, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitComponent_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitBoneName_1) == 0x000378, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitBoneName_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitItem_1) == 0x000380, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitItem_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_ElementIndex_1) == 0x000384, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_ElementIndex_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_FaceIndex_1) == 0x000388, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_FaceIndex_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_TraceStart_1) == 0x00038C, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_TraceStart_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_TraceEnd_1) == 0x000398, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_TraceEnd_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, K2Node_DynamicCast_AsPAWN_System_Shock_Character) == 0x0003A8, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::K2Node_DynamicCast_AsPAWN_System_Shock_Character' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, K2Node_DynamicCast_bSuccess) == 0x0003B0, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0003B4, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_bBlockingHit_2) == 0x0003C0, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_bBlockingHit_2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_bInitialOverlap_2) == 0x0003C1, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_bInitialOverlap_2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Time_2) == 0x0003C4, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Time_2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Distance_2) == 0x0003C8, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Distance_2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Location_2) == 0x0003CC, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Location_2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_ImpactPoint_2) == 0x0003D8, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_ImpactPoint_2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Normal_2) == 0x0003E4, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Normal_2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_ImpactNormal_2) == 0x0003F0, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_ImpactNormal_2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_PhysMat_2) == 0x000400, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_PhysMat_2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitActor_2) == 0x000408, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitActor_2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitComponent_2) == 0x000410, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitComponent_2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitBoneName_2) == 0x000418, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitBoneName_2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitItem_2) == 0x000420, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitItem_2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_ElementIndex_2) == 0x000424, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_ElementIndex_2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_FaceIndex_2) == 0x000428, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_FaceIndex_2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_TraceStart_2) == 0x00042C, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_TraceStart_2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_TraceEnd_2) == 0x000438, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_TraceEnd_2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_IsSimulatingPhysics_ReturnValue) == 0x000444, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_IsSimulatingPhysics_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_IsValid_ReturnValue_2) == 0x000445, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, Temp_int_Array_Index_Variable) == 0x000448, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, Temp_byte_Variable_1) == 0x00044C, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, K2Node_DynamicCast_AsCOMP_Attrib_Manager) == 0x000450, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::K2Node_DynamicCast_AsCOMP_Attrib_Manager' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, K2Node_DynamicCast_bSuccess_1) == 0x000458, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_IsDamageReceivedBound_ReturnValue) == 0x000459, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_IsDamageReceivedBound_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, Temp_byte_Variable_2) == 0x00045A, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_Not_PreBool_ReturnValue) == 0x00045B, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_GetMaxCombatTraceDistance_Distance) == 0x00045C, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_GetMaxCombatTraceDistance_Distance' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x000460, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_Add_VectorVector_ReturnValue) == 0x00046C, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, Temp_bool_Variable_2) == 0x000478, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_bBlockingHit_3) == 0x000479, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_bBlockingHit_3' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_bInitialOverlap_3) == 0x00047A, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_bInitialOverlap_3' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Time_3) == 0x00047C, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Time_3' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Distance_3) == 0x000480, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Distance_3' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Location_3) == 0x000484, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Location_3' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_ImpactPoint_3) == 0x000490, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_ImpactPoint_3' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Normal_3) == 0x00049C, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Normal_3' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_ImpactNormal_3) == 0x0004A8, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_ImpactNormal_3' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_PhysMat_3) == 0x0004B8, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_PhysMat_3' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitActor_3) == 0x0004C0, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitActor_3' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitComponent_3) == 0x0004C8, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitComponent_3' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitBoneName_3) == 0x0004D0, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitBoneName_3' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitItem_3) == 0x0004D8, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitItem_3' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_ElementIndex_3) == 0x0004DC, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_ElementIndex_3' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_FaceIndex_3) == 0x0004E0, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_FaceIndex_3' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_TraceStart_3) == 0x0004E4, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_TraceStart_3' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_TraceEnd_3) == 0x0004F0, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_TraceEnd_3' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_GetReflectionVector_ReturnValue) == 0x0004FC, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_GetReflectionVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, K2Node_Select_Default) == 0x000508, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, K2Node_MakeArray_Array) == 0x000510, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_SphereTraceSingle_OutHit) == 0x000520, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_SphereTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_SphereTraceSingle_ReturnValue) == 0x0005A8, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_SphereTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_Round_ReturnValue) == 0x0005AC, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_Round_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_Conv_IntToFloat_ReturnValue) == 0x0005B0, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_GetArmorPenetrationValueForEnergyCost_Result) == 0x0005B4, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_GetArmorPenetrationValueForEnergyCost_Result' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x0005B8, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_GetDamageValueForEnergyCost_Result) == 0x0005BC, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_GetDamageValueForEnergyCost_Result' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x0005C0, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x0005C1, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0005C2, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, Temp_object_Variable_1) == 0x0005C8, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_GetGameInstance_ReturnValue) == 0x0005D0, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, K2Node_DynamicCast_AsGI_Single_Player) == 0x0005D8, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::K2Node_DynamicCast_AsGI_Single_Player' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, K2Node_DynamicCast_bSuccess_2) == 0x0005E0, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_TryCompleteBinaryAchievement_Result) == 0x0005E1, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_TryCompleteBinaryAchievement_Result' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0005E2, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_bBlockingHit_4) == 0x0005E3, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_bBlockingHit_4' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_bInitialOverlap_4) == 0x0005E4, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_bInitialOverlap_4' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Time_4) == 0x0005E8, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Time_4' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Distance_4) == 0x0005EC, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Distance_4' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Location_4) == 0x0005F0, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Location_4' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_ImpactPoint_4) == 0x0005FC, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_ImpactPoint_4' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Normal_4) == 0x000608, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Normal_4' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_ImpactNormal_4) == 0x000614, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_ImpactNormal_4' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_PhysMat_4) == 0x000620, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_PhysMat_4' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitActor_4) == 0x000628, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitActor_4' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitComponent_4) == 0x000630, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitComponent_4' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitBoneName_4) == 0x000638, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitBoneName_4' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitItem_4) == 0x000640, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitItem_4' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_ElementIndex_4) == 0x000644, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_ElementIndex_4' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_FaceIndex_4) == 0x000648, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_FaceIndex_4' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_TraceStart_4) == 0x00064C, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_TraceStart_4' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_TraceEnd_4) == 0x000658, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_TraceEnd_4' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, K2Node_DynamicCast_AsPAWN_System_Shock_Character_1) == 0x000668, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::K2Node_DynamicCast_AsPAWN_System_Shock_Character_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, K2Node_DynamicCast_bSuccess_3) == 0x000670, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_IsPlayerControlled_ReturnValue) == 0x000671, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_IsPlayerControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_Not_PreBool_ReturnValue_1) == 0x000672, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_Not_PreBool_ReturnValue_2) == 0x000673, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BooleanAND_ReturnValue) == 0x000674, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, K2Node_MakeStruct_NamedFloat) == 0x000678, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::K2Node_MakeStruct_NamedFloat' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, K2Node_MakeArray_Array_1) == 0x000688, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, K2Node_MakeStruct_STRUCT_EffectParams) == 0x000698, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::K2Node_MakeStruct_STRUCT_EffectParams' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, K2Node_Select_Default_1) == 0x0006C8, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x0006CC, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_GetMaxCombatTraceDistance_Distance_1) == 0x0006D0, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_GetMaxCombatTraceDistance_Distance_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0006D4, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, K2Node_Select_Default_2) == 0x0006D8, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, K2Node_Select_Default_3) == 0x0006DC, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, K2Node_Select_Default_4) == 0x0006E0, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x0006E4, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x0006E8, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_bBlockingHit_5) == 0x0006EC, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_bBlockingHit_5' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_bInitialOverlap_5) == 0x0006ED, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_bInitialOverlap_5' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Time_5) == 0x0006F0, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Time_5' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Distance_5) == 0x0006F4, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Distance_5' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Location_5) == 0x0006F8, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Location_5' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_ImpactPoint_5) == 0x000704, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_ImpactPoint_5' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Normal_5) == 0x000710, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Normal_5' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_ImpactNormal_5) == 0x00071C, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_ImpactNormal_5' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_PhysMat_5) == 0x000728, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_PhysMat_5' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitActor_5) == 0x000730, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitActor_5' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitComponent_5) == 0x000738, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitComponent_5' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitBoneName_5) == 0x000740, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitBoneName_5' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitItem_5) == 0x000748, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitItem_5' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_ElementIndex_5) == 0x00074C, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_ElementIndex_5' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_FaceIndex_5) == 0x000750, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_FaceIndex_5' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_TraceStart_5) == 0x000754, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_TraceStart_5' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_TraceEnd_5) == 0x000760, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_TraceEnd_5' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_Add_FloatFloat_ReturnValue) == 0x00076C, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, K2Node_DynamicCast_AsPAWN_System_Shock_Character_2) == 0x000770, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::K2Node_DynamicCast_AsPAWN_System_Shock_Character_2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, K2Node_DynamicCast_bSuccess_4) == 0x000778, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_Multiply_FloatFloat_ReturnValue_4) == 0x00077C, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_Multiply_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_Set_Contains_ReturnValue) == 0x000780, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_Set_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_Not_PreBool_ReturnValue_3) == 0x000781, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_GetOwnerCharacter_Character) == 0x000788, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_GetOwnerCharacter_Character' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_bBlockingHit_6) == 0x000790, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_bBlockingHit_6' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_bInitialOverlap_6) == 0x000791, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_bInitialOverlap_6' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Time_6) == 0x000794, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Time_6' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Distance_6) == 0x000798, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Distance_6' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Location_6) == 0x00079C, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Location_6' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_ImpactPoint_6) == 0x0007A8, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_ImpactPoint_6' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Normal_6) == 0x0007B4, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Normal_6' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_ImpactNormal_6) == 0x0007C0, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_ImpactNormal_6' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_PhysMat_6) == 0x0007D0, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_PhysMat_6' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitActor_6) == 0x0007D8, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitActor_6' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitComponent_6) == 0x0007E0, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitComponent_6' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitBoneName_6) == 0x0007E8, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitBoneName_6' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitItem_6) == 0x0007F0, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitItem_6' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_ElementIndex_6) == 0x0007F4, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_ElementIndex_6' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_FaceIndex_6) == 0x0007F8, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_FaceIndex_6' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_TraceStart_6) == 0x0007FC, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_TraceStart_6' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_TraceEnd_6) == 0x000808, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_TraceEnd_6' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, K2Node_Select_Default_5) == 0x000814, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_bBlockingHit_7) == 0x000818, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_bBlockingHit_7' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_bInitialOverlap_7) == 0x000819, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_bInitialOverlap_7' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Time_7) == 0x00081C, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Time_7' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Distance_7) == 0x000820, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Distance_7' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Location_7) == 0x000824, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Location_7' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_ImpactPoint_7) == 0x000830, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_ImpactPoint_7' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Normal_7) == 0x00083C, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Normal_7' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_ImpactNormal_7) == 0x000848, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_ImpactNormal_7' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_PhysMat_7) == 0x000858, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_PhysMat_7' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitActor_7) == 0x000860, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitActor_7' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitComponent_7) == 0x000868, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitComponent_7' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitBoneName_7) == 0x000870, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitBoneName_7' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitItem_7) == 0x000878, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitItem_7' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_ElementIndex_7) == 0x00087C, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_ElementIndex_7' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_FaceIndex_7) == 0x000880, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_FaceIndex_7' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_TraceStart_7) == 0x000884, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_TraceStart_7' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_TraceEnd_7) == 0x000890, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_TraceEnd_7' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_GetCurrentMode_Mode) == 0x0008A0, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_GetCurrentMode_Mode' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_GetWeaponPropertyValueByType_Value) == 0x0009A0, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_GetWeaponPropertyValueByType_Value' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x0009A4, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_bBlockingHit_8) == 0x0009A8, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_bBlockingHit_8' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_bInitialOverlap_8) == 0x0009A9, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_bInitialOverlap_8' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Time_8) == 0x0009AC, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Time_8' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Distance_8) == 0x0009B0, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Distance_8' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Location_8) == 0x0009B4, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Location_8' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_ImpactPoint_8) == 0x0009C0, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_ImpactPoint_8' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Normal_8) == 0x0009CC, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Normal_8' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_ImpactNormal_8) == 0x0009D8, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_ImpactNormal_8' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_PhysMat_8) == 0x0009E8, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_PhysMat_8' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitActor_8) == 0x0009F0, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitActor_8' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitComponent_8) == 0x0009F8, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitComponent_8' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitBoneName_8) == 0x000A00, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitBoneName_8' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitItem_8) == 0x000A08, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitItem_8' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_ElementIndex_8) == 0x000A0C, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_ElementIndex_8' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_FaceIndex_8) == 0x000A10, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_FaceIndex_8' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_TraceStart_8) == 0x000A14, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_TraceStart_8' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_TraceEnd_8) == 0x000A20, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_TraceEnd_8' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000A2C, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, K2Node_Select_Default_6) == 0x000A2D, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::K2Node_Select_Default_6' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, Temp_object_Variable_2) == 0x000A30, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_Multiply_FloatFloat_ReturnValue_5) == 0x000A38, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_Multiply_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_bBlockingHit_9) == 0x000A3C, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_bBlockingHit_9' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_bInitialOverlap_9) == 0x000A3D, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_bInitialOverlap_9' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Time_9) == 0x000A40, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Time_9' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Distance_9) == 0x000A44, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Distance_9' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Location_9) == 0x000A48, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Location_9' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_ImpactPoint_9) == 0x000A54, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_ImpactPoint_9' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Normal_9) == 0x000A60, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Normal_9' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_ImpactNormal_9) == 0x000A6C, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_ImpactNormal_9' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_PhysMat_9) == 0x000A78, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_PhysMat_9' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitActor_9) == 0x000A80, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitActor_9' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitComponent_9) == 0x000A88, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitComponent_9' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitBoneName_9) == 0x000A90, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitBoneName_9' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitItem_9) == 0x000A98, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitItem_9' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_ElementIndex_9) == 0x000A9C, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_ElementIndex_9' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_FaceIndex_9) == 0x000AA0, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_FaceIndex_9' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_TraceStart_9) == 0x000AA4, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_TraceStart_9' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_TraceEnd_9) == 0x000AB0, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_TraceEnd_9' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, Temp_byte_Variable_3) == 0x000ABC, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, K2Node_Select_Default_7) == 0x000AC0, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::K2Node_Select_Default_7' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, K2Node_MakeArray_Array_2) == 0x000AC8, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_Greater_FloatFloat_ReturnValue_2) == 0x000AD8, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_Greater_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_DamageCharacterShieldsAlongRay_BlockingHit) == 0x000AD9, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_DamageCharacterShieldsAlongRay_BlockingHit' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_DamageCharacterShieldsAlongRay_HitResult) == 0x000ADC, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_DamageCharacterShieldsAlongRay_HitResult' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BooleanAND_ReturnValue_1) == 0x000B64, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_bBlockingHit_10) == 0x000B65, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_bBlockingHit_10' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_bInitialOverlap_10) == 0x000B66, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_bInitialOverlap_10' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Time_10) == 0x000B68, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Time_10' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Distance_10) == 0x000B6C, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Distance_10' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Location_10) == 0x000B70, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Location_10' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_ImpactPoint_10) == 0x000B7C, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_ImpactPoint_10' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Normal_10) == 0x000B88, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Normal_10' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_ImpactNormal_10) == 0x000B94, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_ImpactNormal_10' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_PhysMat_10) == 0x000BA0, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_PhysMat_10' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitActor_10) == 0x000BA8, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitActor_10' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitComponent_10) == 0x000BB0, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitComponent_10' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitBoneName_10) == 0x000BB8, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitBoneName_10' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitItem_10) == 0x000BC0, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitItem_10' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_ElementIndex_10) == 0x000BC4, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_ElementIndex_10' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_FaceIndex_10) == 0x000BC8, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_FaceIndex_10' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_TraceStart_10) == 0x000BCC, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_TraceStart_10' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_TraceEnd_10) == 0x000BD8, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_TraceEnd_10' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, K2Node_DynamicCast_AsPAWN_System_Shock_Character_3) == 0x000BE8, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::K2Node_DynamicCast_AsPAWN_System_Shock_Character_3' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, K2Node_DynamicCast_bSuccess_5) == 0x000BF0, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_Multiply_FloatFloat_ReturnValue_6) == 0x000BF4, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_Multiply_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_Multiply_VectorFloat_ReturnValue_2) == 0x000BF8, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_Multiply_VectorFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000C04, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_Multiply_FloatFloat_ReturnValue_7) == 0x000C10, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_Multiply_FloatFloat_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_GetCurrentMode_Mode_1) == 0x000C18, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_GetCurrentMode_Mode_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_GetWeaponPropertyValueByType_Value_1) == 0x000D18, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_GetWeaponPropertyValueByType_Value_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_Multiply_FloatFloat_ReturnValue_8) == 0x000D1C, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_Multiply_FloatFloat_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_Conv_IntToFloat_ReturnValue_2) == 0x000D20, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_Conv_IntToFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_Ease_ReturnValue) == 0x000D24, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_Ease_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_Multiply_FloatFloat_ReturnValue_9) == 0x000D28, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_Multiply_FloatFloat_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_GetOwnerCharacter_Character_1) == 0x000D30, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_GetOwnerCharacter_Character_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_bBlockingHit_11) == 0x000D38, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_bBlockingHit_11' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_bInitialOverlap_11) == 0x000D39, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_bInitialOverlap_11' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Time_11) == 0x000D3C, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Time_11' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Distance_11) == 0x000D40, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Distance_11' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Location_11) == 0x000D44, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Location_11' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_ImpactPoint_11) == 0x000D50, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_ImpactPoint_11' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Normal_11) == 0x000D5C, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Normal_11' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_ImpactNormal_11) == 0x000D68, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_ImpactNormal_11' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_PhysMat_11) == 0x000D78, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_PhysMat_11' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitActor_11) == 0x000D80, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitActor_11' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitComponent_11) == 0x000D88, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitComponent_11' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitBoneName_11) == 0x000D90, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitBoneName_11' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitItem_11) == 0x000D98, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitItem_11' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_ElementIndex_11) == 0x000D9C, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_ElementIndex_11' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_FaceIndex_11) == 0x000DA0, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_FaceIndex_11' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_TraceStart_11) == 0x000DA4, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_TraceStart_11' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_TraceEnd_11) == 0x000DB0, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_TraceEnd_11' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_CreateImpactEffects_Success) == 0x000DBC, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_CreateImpactEffects_Success' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_CreateImpactEffects_Results) == 0x000DC0, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_CreateImpactEffects_Results' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_GetBeamSurfaceResponseVectors_Reflection) == 0x000DD8, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_GetBeamSurfaceResponseVectors_Reflection' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_GetBeamSurfaceResponseVectors_Intensity) == 0x000DDC, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_GetBeamSurfaceResponseVectors_Intensity' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_GetBeamSurfaceResponseVectors_Origin) == 0x000DE0, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_GetBeamSurfaceResponseVectors_Origin' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_GetBeamSurfaceResponseVectors_Directions) == 0x000DF0, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_GetBeamSurfaceResponseVectors_Directions' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_Array_Get_Item) == 0x000E00, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_bBlockingHit_12) == 0x000E0C, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_bBlockingHit_12' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_bInitialOverlap_12) == 0x000E0D, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_bInitialOverlap_12' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Time_12) == 0x000E10, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Time_12' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Distance_12) == 0x000E14, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Distance_12' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Location_12) == 0x000E18, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Location_12' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_ImpactPoint_12) == 0x000E24, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_ImpactPoint_12' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Normal_12) == 0x000E30, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Normal_12' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_ImpactNormal_12) == 0x000E3C, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_ImpactNormal_12' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_PhysMat_12) == 0x000E48, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_PhysMat_12' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitActor_12) == 0x000E50, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitActor_12' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitComponent_12) == 0x000E58, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitComponent_12' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitBoneName_12) == 0x000E60, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitBoneName_12' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitItem_12) == 0x000E68, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitItem_12' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_ElementIndex_12) == 0x000E6C, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_ElementIndex_12' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_FaceIndex_12) == 0x000E70, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_FaceIndex_12' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_TraceStart_12) == 0x000E74, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_TraceStart_12' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_TraceEnd_12) == 0x000E80, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_TraceEnd_12' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_Array_Length_ReturnValue) == 0x000E8C, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_GetOwnerCharacter_Character_2) == 0x000E90, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_GetOwnerCharacter_Character_2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_GetCurrentMode_Mode_2) == 0x000E98, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_GetCurrentMode_Mode_2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_CreateImpactDataFromHit_ImpactData) == 0x000F98, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_CreateImpactDataFromHit_ImpactData' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_ApplyDamageMod_OutDamageInstance) == 0x000FA0, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_ApplyDamageMod_OutDamageInstance' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_ApplyDamageMod_ReturnValue) == 0x000FC8, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_ApplyDamageMod_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_bBlockingHit_13) == 0x000FD0, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_bBlockingHit_13' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_bInitialOverlap_13) == 0x000FD1, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_bInitialOverlap_13' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Time_13) == 0x000FD4, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Time_13' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Distance_13) == 0x000FD8, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Distance_13' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Location_13) == 0x000FDC, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Location_13' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_ImpactPoint_13) == 0x000FE8, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_ImpactPoint_13' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Normal_13) == 0x000FF4, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Normal_13' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_ImpactNormal_13) == 0x001000, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_ImpactNormal_13' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_PhysMat_13) == 0x001010, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_PhysMat_13' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitActor_13) == 0x001018, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitActor_13' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitComponent_13) == 0x001020, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitComponent_13' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitBoneName_13) == 0x001028, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitBoneName_13' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitItem_13) == 0x001030, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitItem_13' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_ElementIndex_13) == 0x001034, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_ElementIndex_13' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_FaceIndex_13) == 0x001038, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_FaceIndex_13' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_TraceStart_13) == 0x00103C, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_TraceStart_13' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_TraceEnd_13) == 0x001048, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_TraceEnd_13' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_GetComponentByClass_ReturnValue) == 0x001058, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_bBlockingHit_14) == 0x001060, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_bBlockingHit_14' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_bInitialOverlap_14) == 0x001061, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_bInitialOverlap_14' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Time_14) == 0x001064, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Time_14' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Distance_14) == 0x001068, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Distance_14' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Location_14) == 0x00106C, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Location_14' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_ImpactPoint_14) == 0x001078, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_ImpactPoint_14' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Normal_14) == 0x001084, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Normal_14' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_ImpactNormal_14) == 0x001090, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_ImpactNormal_14' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_PhysMat_14) == 0x0010A0, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_PhysMat_14' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitActor_14) == 0x0010A8, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitActor_14' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitComponent_14) == 0x0010B0, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitComponent_14' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitBoneName_14) == 0x0010B8, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitBoneName_14' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitItem_14) == 0x0010C0, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitItem_14' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_ElementIndex_14) == 0x0010C4, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_ElementIndex_14' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_FaceIndex_14) == 0x0010C8, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_FaceIndex_14' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_TraceStart_14) == 0x0010CC, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_TraceStart_14' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_TraceEnd_14) == 0x0010D8, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_TraceEnd_14' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, Temp_int_Loop_Counter_Variable) == 0x0010E4, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_IsValid_ReturnValue_3) == 0x0010E8, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_Less_IntInt_ReturnValue) == 0x0010E9, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_Add_IntInt_ReturnValue) == 0x0010EC, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_bBlockingHit_15) == 0x0010F0, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_bBlockingHit_15' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_bInitialOverlap_15) == 0x0010F1, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_bInitialOverlap_15' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Time_15) == 0x0010F4, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Time_15' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Distance_15) == 0x0010F8, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Distance_15' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Location_15) == 0x0010FC, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Location_15' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_ImpactPoint_15) == 0x001108, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_ImpactPoint_15' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_Normal_15) == 0x001114, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_Normal_15' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_ImpactNormal_15) == 0x001120, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_ImpactNormal_15' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_PhysMat_15) == 0x001130, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_PhysMat_15' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitActor_15) == 0x001138, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitActor_15' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitComponent_15) == 0x001140, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitComponent_15' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitBoneName_15) == 0x001148, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitBoneName_15' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_HitItem_15) == 0x001150, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_HitItem_15' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_ElementIndex_15) == 0x001154, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_ElementIndex_15' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_FaceIndex_15) == 0x001158, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_FaceIndex_15' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_TraceStart_15) == 0x00115C, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_TraceStart_15' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TraceChargedShotRecurse, CallFunc_BreakHitResult_TraceEnd_15) == 0x001168, "Member 'WEAPON_IonPulseRifle_C_TraceChargedShotRecurse::CallFunc_BreakHitResult_TraceEnd_15' has a wrong offset!");

// Function WEAPON_IonPulseRifle.WEAPON_IonPulseRifle_C.TryStopChargingBeam
// 0x0040 (0x0040 - 0x0000)
struct WEAPON_IonPulseRifle_C_TryStopChargingBeam final
{
public:
	bool                                          FireBeamIfCharging;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaintainEnergyCost;                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetUpfrontChargeEnergyCost_Result;        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_SystemShockCharacter_C*           CallFunc_GetOwnerCharacter_Character;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IINTERF_ANIM_Hacker_C> K2Node_DynamicCast_AsINTERF_ANIM_Hacker;           // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetOverrideIdleSequence_Result;           // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WEAPON_IonPulseRifle_C_TryStopChargingBeam) == 0x000008, "Wrong alignment on WEAPON_IonPulseRifle_C_TryStopChargingBeam");
static_assert(sizeof(WEAPON_IonPulseRifle_C_TryStopChargingBeam) == 0x000040, "Wrong size on WEAPON_IonPulseRifle_C_TryStopChargingBeam");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TryStopChargingBeam, FireBeamIfCharging) == 0x000000, "Member 'WEAPON_IonPulseRifle_C_TryStopChargingBeam::FireBeamIfCharging' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TryStopChargingBeam, MaintainEnergyCost) == 0x000004, "Member 'WEAPON_IonPulseRifle_C_TryStopChargingBeam::MaintainEnergyCost' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TryStopChargingBeam, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'WEAPON_IonPulseRifle_C_TryStopChargingBeam::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TryStopChargingBeam, CallFunc_GetUpfrontChargeEnergyCost_Result) == 0x00000C, "Member 'WEAPON_IonPulseRifle_C_TryStopChargingBeam::CallFunc_GetUpfrontChargeEnergyCost_Result' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TryStopChargingBeam, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'WEAPON_IonPulseRifle_C_TryStopChargingBeam::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TryStopChargingBeam, CallFunc_GetOwnerCharacter_Character) == 0x000018, "Member 'WEAPON_IonPulseRifle_C_TryStopChargingBeam::CallFunc_GetOwnerCharacter_Character' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TryStopChargingBeam, CallFunc_GetAnimInstance_ReturnValue) == 0x000020, "Member 'WEAPON_IonPulseRifle_C_TryStopChargingBeam::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TryStopChargingBeam, K2Node_DynamicCast_AsINTERF_ANIM_Hacker) == 0x000028, "Member 'WEAPON_IonPulseRifle_C_TryStopChargingBeam::K2Node_DynamicCast_AsINTERF_ANIM_Hacker' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TryStopChargingBeam, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'WEAPON_IonPulseRifle_C_TryStopChargingBeam::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TryStopChargingBeam, CallFunc_SetOverrideIdleSequence_Result) == 0x000039, "Member 'WEAPON_IonPulseRifle_C_TryStopChargingBeam::CallFunc_SetOverrideIdleSequence_Result' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TryStopChargingBeam, CallFunc_BooleanOR_ReturnValue) == 0x00003A, "Member 'WEAPON_IonPulseRifle_C_TryStopChargingBeam::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_TryStopChargingBeam, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00003B, "Member 'WEAPON_IonPulseRifle_C_TryStopChargingBeam::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function WEAPON_IonPulseRifle.WEAPON_IonPulseRifle_C.UpdateChargeFX
// 0x0290 (0x0290 - 0x0000)
struct WEAPON_IonPulseRifle_C_UpdateChargeFX final
{
public:
	float                                         ChargeProgress;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxChargeDuration;                                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ChargeSphereLocation;                              // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0xC];                                       // 0x0014(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SocketWorldTransform;                              // 0x0020(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	class UAudioComponent*                        CallFunc_PlayDischargeSoundCue_AudioComponent;     // 0x0050(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_WeaponMode                     CallFunc_GetCurrentMode_Mode;                      // 0x0060(0x0100)(HasGetValueTypeHash)
	class UMeshComponent*                         CallFunc_GetWeaponMeshComponent_Result;            // 0x0160(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetWeaponPropertyValueByType_Value;       // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_171[0x3];                                      // 0x0171(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_179[0x3];                                      // 0x0179(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Ease_ReturnValue;                         // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x0180(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UMeshComponent*                         CallFunc_GetWeaponMeshComponent_Result_1;          // 0x0208(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue;           // 0x0210(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0240(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x024C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0258(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0264(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0270(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x027C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WEAPON_IonPulseRifle_C_UpdateChargeFX) == 0x000010, "Wrong alignment on WEAPON_IonPulseRifle_C_UpdateChargeFX");
static_assert(sizeof(WEAPON_IonPulseRifle_C_UpdateChargeFX) == 0x000290, "Wrong size on WEAPON_IonPulseRifle_C_UpdateChargeFX");
static_assert(offsetof(WEAPON_IonPulseRifle_C_UpdateChargeFX, ChargeProgress) == 0x000000, "Member 'WEAPON_IonPulseRifle_C_UpdateChargeFX::ChargeProgress' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_UpdateChargeFX, MaxChargeDuration) == 0x000004, "Member 'WEAPON_IonPulseRifle_C_UpdateChargeFX::MaxChargeDuration' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_UpdateChargeFX, ChargeSphereLocation) == 0x000008, "Member 'WEAPON_IonPulseRifle_C_UpdateChargeFX::ChargeSphereLocation' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_UpdateChargeFX, SocketWorldTransform) == 0x000020, "Member 'WEAPON_IonPulseRifle_C_UpdateChargeFX::SocketWorldTransform' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_UpdateChargeFX, CallFunc_PlayDischargeSoundCue_AudioComponent) == 0x000050, "Member 'WEAPON_IonPulseRifle_C_UpdateChargeFX::CallFunc_PlayDischargeSoundCue_AudioComponent' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_UpdateChargeFX, CallFunc_IsValid_ReturnValue) == 0x000058, "Member 'WEAPON_IonPulseRifle_C_UpdateChargeFX::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_UpdateChargeFX, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000059, "Member 'WEAPON_IonPulseRifle_C_UpdateChargeFX::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_UpdateChargeFX, CallFunc_GetCurrentMode_Mode) == 0x000060, "Member 'WEAPON_IonPulseRifle_C_UpdateChargeFX::CallFunc_GetCurrentMode_Mode' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_UpdateChargeFX, CallFunc_GetWeaponMeshComponent_Result) == 0x000160, "Member 'WEAPON_IonPulseRifle_C_UpdateChargeFX::CallFunc_GetWeaponMeshComponent_Result' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_UpdateChargeFX, CallFunc_GetWeaponPropertyValueByType_Value) == 0x000168, "Member 'WEAPON_IonPulseRifle_C_UpdateChargeFX::CallFunc_GetWeaponPropertyValueByType_Value' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_UpdateChargeFX, CallFunc_Conv_IntToFloat_ReturnValue) == 0x00016C, "Member 'WEAPON_IonPulseRifle_C_UpdateChargeFX::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_UpdateChargeFX, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x000170, "Member 'WEAPON_IonPulseRifle_C_UpdateChargeFX::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_UpdateChargeFX, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000174, "Member 'WEAPON_IonPulseRifle_C_UpdateChargeFX::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_UpdateChargeFX, CallFunc_IsValid_ReturnValue_1) == 0x000178, "Member 'WEAPON_IonPulseRifle_C_UpdateChargeFX::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_UpdateChargeFX, CallFunc_Ease_ReturnValue) == 0x00017C, "Member 'WEAPON_IonPulseRifle_C_UpdateChargeFX::CallFunc_Ease_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_UpdateChargeFX, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x000180, "Member 'WEAPON_IonPulseRifle_C_UpdateChargeFX::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_UpdateChargeFX, CallFunc_GetWeaponMeshComponent_Result_1) == 0x000208, "Member 'WEAPON_IonPulseRifle_C_UpdateChargeFX::CallFunc_GetWeaponMeshComponent_Result_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_UpdateChargeFX, CallFunc_GetSocketTransform_ReturnValue) == 0x000210, "Member 'WEAPON_IonPulseRifle_C_UpdateChargeFX::CallFunc_GetSocketTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_UpdateChargeFX, CallFunc_BreakTransform_Location) == 0x000240, "Member 'WEAPON_IonPulseRifle_C_UpdateChargeFX::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_UpdateChargeFX, CallFunc_BreakTransform_Rotation) == 0x00024C, "Member 'WEAPON_IonPulseRifle_C_UpdateChargeFX::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_UpdateChargeFX, CallFunc_BreakTransform_Scale) == 0x000258, "Member 'WEAPON_IonPulseRifle_C_UpdateChargeFX::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_UpdateChargeFX, CallFunc_GetForwardVector_ReturnValue) == 0x000264, "Member 'WEAPON_IonPulseRifle_C_UpdateChargeFX::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_UpdateChargeFX, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000270, "Member 'WEAPON_IonPulseRifle_C_UpdateChargeFX::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_UpdateChargeFX, CallFunc_Add_VectorVector_ReturnValue) == 0x00027C, "Member 'WEAPON_IonPulseRifle_C_UpdateChargeFX::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");

// Function WEAPON_IonPulseRifle.WEAPON_IonPulseRifle_C.UpdateChargeForceFeedback
// 0x0038 (0x0038 - 0x0000)
struct WEAPON_IonPulseRifle_C_UpdateChargeForceFeedback final
{
public:
	bool                                          IsStarting;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      PlayerController;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_SystemShockCharacter_C*           CharacterOwner;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      K2Node_DynamicCast_AsPlayer_Controller;            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APAWN_SystemShockCharacter_C*           CallFunc_GetOwnerCharacter_Character;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WEAPON_IonPulseRifle_C_UpdateChargeForceFeedback) == 0x000008, "Wrong alignment on WEAPON_IonPulseRifle_C_UpdateChargeForceFeedback");
static_assert(sizeof(WEAPON_IonPulseRifle_C_UpdateChargeForceFeedback) == 0x000038, "Wrong size on WEAPON_IonPulseRifle_C_UpdateChargeForceFeedback");
static_assert(offsetof(WEAPON_IonPulseRifle_C_UpdateChargeForceFeedback, IsStarting) == 0x000000, "Member 'WEAPON_IonPulseRifle_C_UpdateChargeForceFeedback::IsStarting' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_UpdateChargeForceFeedback, PlayerController) == 0x000008, "Member 'WEAPON_IonPulseRifle_C_UpdateChargeForceFeedback::PlayerController' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_UpdateChargeForceFeedback, CharacterOwner) == 0x000010, "Member 'WEAPON_IonPulseRifle_C_UpdateChargeForceFeedback::CharacterOwner' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_UpdateChargeForceFeedback, CallFunc_GetController_ReturnValue) == 0x000018, "Member 'WEAPON_IonPulseRifle_C_UpdateChargeForceFeedback::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_UpdateChargeForceFeedback, K2Node_DynamicCast_AsPlayer_Controller) == 0x000020, "Member 'WEAPON_IonPulseRifle_C_UpdateChargeForceFeedback::K2Node_DynamicCast_AsPlayer_Controller' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_UpdateChargeForceFeedback, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'WEAPON_IonPulseRifle_C_UpdateChargeForceFeedback::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_UpdateChargeForceFeedback, CallFunc_GetOwnerCharacter_Character) == 0x000030, "Member 'WEAPON_IonPulseRifle_C_UpdateChargeForceFeedback::CallFunc_GetOwnerCharacter_Character' has a wrong offset!");

// Function WEAPON_IonPulseRifle.WEAPON_IonPulseRifle_C.SetChargeEnergyDrain
// 0x01F0 (0x01F0 - 0x0000)
struct WEAPON_IonPulseRifle_C_SetChargeEnergyDrain final
{
public:
	bool                                          DrainEnabled;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAttribModApplyData                    EnergyChargeDrain;                                 // 0x0008(0x00A0)(Edit, BlueprintVisible)
	float                                         MaxChargeDuration;                                 // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         EnergyCost;                                        // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActive_ReturnValue;                     // 0x00B5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00B6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B7[0x1];                                       // 0x00B7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_WeaponMode                     CallFunc_GetCurrentMode_Mode;                      // 0x00B8(0x0100)(HasGetValueTypeHash)
	class APAWN_SystemShockCharacter_C*           CallFunc_GetOwnerCharacter_Character;              // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetWeaponPropertyValueByType_Value;       // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_SystemShockCharacter_C*           CallFunc_GetOwnerCharacter_Character_1;            // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x01D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ExpireMod_ReturnValue;                    // 0x01D5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D6[0x2];                                      // 0x01D6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetMaintainChargeEnergyCost_Result;       // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E4[0x4];                                      // 0x01E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAttribMod*                             CallFunc_ApplyMod_ReturnValue;                     // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WEAPON_IonPulseRifle_C_SetChargeEnergyDrain) == 0x000008, "Wrong alignment on WEAPON_IonPulseRifle_C_SetChargeEnergyDrain");
static_assert(sizeof(WEAPON_IonPulseRifle_C_SetChargeEnergyDrain) == 0x0001F0, "Wrong size on WEAPON_IonPulseRifle_C_SetChargeEnergyDrain");
static_assert(offsetof(WEAPON_IonPulseRifle_C_SetChargeEnergyDrain, DrainEnabled) == 0x000000, "Member 'WEAPON_IonPulseRifle_C_SetChargeEnergyDrain::DrainEnabled' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_SetChargeEnergyDrain, EnergyChargeDrain) == 0x000008, "Member 'WEAPON_IonPulseRifle_C_SetChargeEnergyDrain::EnergyChargeDrain' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_SetChargeEnergyDrain, MaxChargeDuration) == 0x0000A8, "Member 'WEAPON_IonPulseRifle_C_SetChargeEnergyDrain::MaxChargeDuration' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_SetChargeEnergyDrain, EnergyCost) == 0x0000AC, "Member 'WEAPON_IonPulseRifle_C_SetChargeEnergyDrain::EnergyCost' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_SetChargeEnergyDrain, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0000B0, "Member 'WEAPON_IonPulseRifle_C_SetChargeEnergyDrain::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_SetChargeEnergyDrain, CallFunc_IsValid_ReturnValue) == 0x0000B4, "Member 'WEAPON_IonPulseRifle_C_SetChargeEnergyDrain::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_SetChargeEnergyDrain, CallFunc_IsActive_ReturnValue) == 0x0000B5, "Member 'WEAPON_IonPulseRifle_C_SetChargeEnergyDrain::CallFunc_IsActive_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_SetChargeEnergyDrain, CallFunc_Not_PreBool_ReturnValue) == 0x0000B6, "Member 'WEAPON_IonPulseRifle_C_SetChargeEnergyDrain::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_SetChargeEnergyDrain, CallFunc_GetCurrentMode_Mode) == 0x0000B8, "Member 'WEAPON_IonPulseRifle_C_SetChargeEnergyDrain::CallFunc_GetCurrentMode_Mode' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_SetChargeEnergyDrain, CallFunc_GetOwnerCharacter_Character) == 0x0001B8, "Member 'WEAPON_IonPulseRifle_C_SetChargeEnergyDrain::CallFunc_GetOwnerCharacter_Character' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_SetChargeEnergyDrain, CallFunc_GetWeaponPropertyValueByType_Value) == 0x0001C0, "Member 'WEAPON_IonPulseRifle_C_SetChargeEnergyDrain::CallFunc_GetWeaponPropertyValueByType_Value' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_SetChargeEnergyDrain, CallFunc_Conv_IntToFloat_ReturnValue) == 0x0001C4, "Member 'WEAPON_IonPulseRifle_C_SetChargeEnergyDrain::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_SetChargeEnergyDrain, CallFunc_GetOwnerCharacter_Character_1) == 0x0001C8, "Member 'WEAPON_IonPulseRifle_C_SetChargeEnergyDrain::CallFunc_GetOwnerCharacter_Character_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_SetChargeEnergyDrain, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0001D0, "Member 'WEAPON_IonPulseRifle_C_SetChargeEnergyDrain::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_SetChargeEnergyDrain, CallFunc_IsValid_ReturnValue_1) == 0x0001D4, "Member 'WEAPON_IonPulseRifle_C_SetChargeEnergyDrain::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_SetChargeEnergyDrain, CallFunc_ExpireMod_ReturnValue) == 0x0001D5, "Member 'WEAPON_IonPulseRifle_C_SetChargeEnergyDrain::CallFunc_ExpireMod_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_SetChargeEnergyDrain, CallFunc_GetMaintainChargeEnergyCost_Result) == 0x0001D8, "Member 'WEAPON_IonPulseRifle_C_SetChargeEnergyDrain::CallFunc_GetMaintainChargeEnergyCost_Result' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_SetChargeEnergyDrain, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x0001DC, "Member 'WEAPON_IonPulseRifle_C_SetChargeEnergyDrain::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_SetChargeEnergyDrain, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x0001E0, "Member 'WEAPON_IonPulseRifle_C_SetChargeEnergyDrain::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_SetChargeEnergyDrain, CallFunc_ApplyMod_ReturnValue) == 0x0001E8, "Member 'WEAPON_IonPulseRifle_C_SetChargeEnergyDrain::CallFunc_ApplyMod_ReturnValue' has a wrong offset!");

// Function WEAPON_IonPulseRifle.WEAPON_IonPulseRifle_C.HasEnoughEnergyToActivate
// 0x0120 (0x0120 - 0x0000)
struct WEAPON_IonPulseRifle_C_HasEnoughEnergyToActivate final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetOwnerEnergy_CurrentEnergy;             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetOwnerEnergy_MaxEnergy;                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetUpfrontChargeEnergyCost_Result;        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasEnoughEnergyToActivate_Result;         // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_WeaponMode                     CallFunc_GetCurrentMode_Mode;                      // 0x0018(0x0100)(HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WEAPON_IonPulseRifle_C_HasEnoughEnergyToActivate) == 0x000008, "Wrong alignment on WEAPON_IonPulseRifle_C_HasEnoughEnergyToActivate");
static_assert(sizeof(WEAPON_IonPulseRifle_C_HasEnoughEnergyToActivate) == 0x000120, "Wrong size on WEAPON_IonPulseRifle_C_HasEnoughEnergyToActivate");
static_assert(offsetof(WEAPON_IonPulseRifle_C_HasEnoughEnergyToActivate, Result) == 0x000000, "Member 'WEAPON_IonPulseRifle_C_HasEnoughEnergyToActivate::Result' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_HasEnoughEnergyToActivate, CallFunc_GetOwnerEnergy_CurrentEnergy) == 0x000004, "Member 'WEAPON_IonPulseRifle_C_HasEnoughEnergyToActivate::CallFunc_GetOwnerEnergy_CurrentEnergy' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_HasEnoughEnergyToActivate, CallFunc_GetOwnerEnergy_MaxEnergy) == 0x000008, "Member 'WEAPON_IonPulseRifle_C_HasEnoughEnergyToActivate::CallFunc_GetOwnerEnergy_MaxEnergy' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_HasEnoughEnergyToActivate, CallFunc_GetUpfrontChargeEnergyCost_Result) == 0x00000C, "Member 'WEAPON_IonPulseRifle_C_HasEnoughEnergyToActivate::CallFunc_GetUpfrontChargeEnergyCost_Result' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_HasEnoughEnergyToActivate, CallFunc_HasEnoughEnergyToActivate_Result) == 0x000010, "Member 'WEAPON_IonPulseRifle_C_HasEnoughEnergyToActivate::CallFunc_HasEnoughEnergyToActivate_Result' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_HasEnoughEnergyToActivate, CallFunc_Greater_IntInt_ReturnValue) == 0x000011, "Member 'WEAPON_IonPulseRifle_C_HasEnoughEnergyToActivate::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_HasEnoughEnergyToActivate, CallFunc_GetCurrentMode_Mode) == 0x000018, "Member 'WEAPON_IonPulseRifle_C_HasEnoughEnergyToActivate::CallFunc_GetCurrentMode_Mode' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_HasEnoughEnergyToActivate, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000118, "Member 'WEAPON_IonPulseRifle_C_HasEnoughEnergyToActivate::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function WEAPON_IonPulseRifle.WEAPON_IonPulseRifle_C.GetDischargeMontage
// 0x0128 (0x0128 - 0x0000)
struct WEAPON_IonPulseRifle_C_GetDischargeMontage final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_WeaponMode                     CallFunc_GetCurrentMode_Mode;                      // 0x0010(0x0100)(HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           K2Node_Select_Default;                             // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           K2Node_Select_Default_1;                           // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WEAPON_IonPulseRifle_C_GetDischargeMontage) == 0x000008, "Wrong alignment on WEAPON_IonPulseRifle_C_GetDischargeMontage");
static_assert(sizeof(WEAPON_IonPulseRifle_C_GetDischargeMontage) == 0x000128, "Wrong size on WEAPON_IonPulseRifle_C_GetDischargeMontage");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetDischargeMontage, Montage) == 0x000000, "Member 'WEAPON_IonPulseRifle_C_GetDischargeMontage::Montage' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetDischargeMontage, Temp_int_Variable) == 0x000008, "Member 'WEAPON_IonPulseRifle_C_GetDischargeMontage::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetDischargeMontage, Temp_bool_Variable) == 0x00000C, "Member 'WEAPON_IonPulseRifle_C_GetDischargeMontage::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetDischargeMontage, CallFunc_GetCurrentMode_Mode) == 0x000010, "Member 'WEAPON_IonPulseRifle_C_GetDischargeMontage::CallFunc_GetCurrentMode_Mode' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetDischargeMontage, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000110, "Member 'WEAPON_IonPulseRifle_C_GetDischargeMontage::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetDischargeMontage, K2Node_Select_Default) == 0x000118, "Member 'WEAPON_IonPulseRifle_C_GetDischargeMontage::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetDischargeMontage, K2Node_Select_Default_1) == 0x000120, "Member 'WEAPON_IonPulseRifle_C_GetDischargeMontage::K2Node_Select_Default_1' has a wrong offset!");

// Function WEAPON_IonPulseRifle.WEAPON_IonPulseRifle_C.OnBecomeUnactivatable
// 0x0002 (0x0002 - 0x0000)
struct WEAPON_IonPulseRifle_C_OnBecomeUnactivatable final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OnBecomeUnactivatable_Result;             // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WEAPON_IonPulseRifle_C_OnBecomeUnactivatable) == 0x000001, "Wrong alignment on WEAPON_IonPulseRifle_C_OnBecomeUnactivatable");
static_assert(sizeof(WEAPON_IonPulseRifle_C_OnBecomeUnactivatable) == 0x000002, "Wrong size on WEAPON_IonPulseRifle_C_OnBecomeUnactivatable");
static_assert(offsetof(WEAPON_IonPulseRifle_C_OnBecomeUnactivatable, Result) == 0x000000, "Member 'WEAPON_IonPulseRifle_C_OnBecomeUnactivatable::Result' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_OnBecomeUnactivatable, CallFunc_OnBecomeUnactivatable_Result) == 0x000001, "Member 'WEAPON_IonPulseRifle_C_OnBecomeUnactivatable::CallFunc_OnBecomeUnactivatable_Result' has a wrong offset!");

// Function WEAPON_IonPulseRifle.WEAPON_IonPulseRifle_C.OnDischargeMontageStarted
// 0x0268 (0x0268 - 0x0000)
struct WEAPON_IonPulseRifle_C_OnDischargeMontageStarted final
{
public:
	float                                         Temp_float_Variable;                               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_WeaponMode                     CallFunc_GetCurrentMode_Mode;                      // 0x0008(0x0100)(HasGetValueTypeHash)
	int32                                         CallFunc_GetUpfrontChargeEnergyCost_Result;        // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      CallFunc_PlayDischargeParticleFX_SpawnedComponent; // 0x0118(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_2;                             // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_WeaponMode                     CallFunc_GetCurrentMode_Mode_1;                    // 0x0128(0x0100)(HasGetValueTypeHash)
	int32                                         CallFunc_GetWeaponPropertyValueByType_Value;       // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_231[0x3];                                      // 0x0231(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetPlayTimeInSeconds_ReturnValue;         // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APAWN_SystemShockCharacter_C*           CallFunc_GetOwnerCharacter_Character;              // 0x0238(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0240(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IINTERF_ANIM_Hacker_C> K2Node_DynamicCast_AsINTERF_ANIM_Hacker;           // 0x0248(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0258(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetOverrideIdleSequence_Result;           // 0x0259(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25A[0x6];                                      // 0x025A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        CallFunc_PlayDischargeSoundCue_AudioComponent;     // 0x0260(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WEAPON_IonPulseRifle_C_OnDischargeMontageStarted) == 0x000008, "Wrong alignment on WEAPON_IonPulseRifle_C_OnDischargeMontageStarted");
static_assert(sizeof(WEAPON_IonPulseRifle_C_OnDischargeMontageStarted) == 0x000268, "Wrong size on WEAPON_IonPulseRifle_C_OnDischargeMontageStarted");
static_assert(offsetof(WEAPON_IonPulseRifle_C_OnDischargeMontageStarted, Temp_float_Variable) == 0x000000, "Member 'WEAPON_IonPulseRifle_C_OnDischargeMontageStarted::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_OnDischargeMontageStarted, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'WEAPON_IonPulseRifle_C_OnDischargeMontageStarted::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_OnDischargeMontageStarted, CallFunc_GetCurrentMode_Mode) == 0x000008, "Member 'WEAPON_IonPulseRifle_C_OnDischargeMontageStarted::CallFunc_GetCurrentMode_Mode' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_OnDischargeMontageStarted, CallFunc_GetUpfrontChargeEnergyCost_Result) == 0x000108, "Member 'WEAPON_IonPulseRifle_C_OnDischargeMontageStarted::CallFunc_GetUpfrontChargeEnergyCost_Result' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_OnDischargeMontageStarted, Temp_float_Variable_1) == 0x00010C, "Member 'WEAPON_IonPulseRifle_C_OnDischargeMontageStarted::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_OnDischargeMontageStarted, Temp_int_Variable) == 0x000110, "Member 'WEAPON_IonPulseRifle_C_OnDischargeMontageStarted::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_OnDischargeMontageStarted, CallFunc_PlayDischargeParticleFX_SpawnedComponent) == 0x000118, "Member 'WEAPON_IonPulseRifle_C_OnDischargeMontageStarted::CallFunc_PlayDischargeParticleFX_SpawnedComponent' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_OnDischargeMontageStarted, Temp_float_Variable_2) == 0x000120, "Member 'WEAPON_IonPulseRifle_C_OnDischargeMontageStarted::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_OnDischargeMontageStarted, CallFunc_GetCurrentMode_Mode_1) == 0x000128, "Member 'WEAPON_IonPulseRifle_C_OnDischargeMontageStarted::CallFunc_GetCurrentMode_Mode_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_OnDischargeMontageStarted, CallFunc_GetWeaponPropertyValueByType_Value) == 0x000228, "Member 'WEAPON_IonPulseRifle_C_OnDischargeMontageStarted::CallFunc_GetWeaponPropertyValueByType_Value' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_OnDischargeMontageStarted, K2Node_Select_Default) == 0x00022C, "Member 'WEAPON_IonPulseRifle_C_OnDischargeMontageStarted::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_OnDischargeMontageStarted, CallFunc_Greater_IntInt_ReturnValue) == 0x000230, "Member 'WEAPON_IonPulseRifle_C_OnDischargeMontageStarted::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_OnDischargeMontageStarted, CallFunc_GetPlayTimeInSeconds_ReturnValue) == 0x000234, "Member 'WEAPON_IonPulseRifle_C_OnDischargeMontageStarted::CallFunc_GetPlayTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_OnDischargeMontageStarted, CallFunc_GetOwnerCharacter_Character) == 0x000238, "Member 'WEAPON_IonPulseRifle_C_OnDischargeMontageStarted::CallFunc_GetOwnerCharacter_Character' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_OnDischargeMontageStarted, CallFunc_GetAnimInstance_ReturnValue) == 0x000240, "Member 'WEAPON_IonPulseRifle_C_OnDischargeMontageStarted::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_OnDischargeMontageStarted, K2Node_DynamicCast_AsINTERF_ANIM_Hacker) == 0x000248, "Member 'WEAPON_IonPulseRifle_C_OnDischargeMontageStarted::K2Node_DynamicCast_AsINTERF_ANIM_Hacker' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_OnDischargeMontageStarted, K2Node_DynamicCast_bSuccess) == 0x000258, "Member 'WEAPON_IonPulseRifle_C_OnDischargeMontageStarted::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_OnDischargeMontageStarted, CallFunc_SetOverrideIdleSequence_Result) == 0x000259, "Member 'WEAPON_IonPulseRifle_C_OnDischargeMontageStarted::CallFunc_SetOverrideIdleSequence_Result' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_OnDischargeMontageStarted, CallFunc_PlayDischargeSoundCue_AudioComponent) == 0x000260, "Member 'WEAPON_IonPulseRifle_C_OnDischargeMontageStarted::CallFunc_PlayDischargeSoundCue_AudioComponent' has a wrong offset!");

// Function WEAPON_IonPulseRifle.WEAPON_IonPulseRifle_C.StopChargeEffects
// 0x0018 (0x0018 - 0x0000)
struct WEAPON_IonPulseRifle_C_StopChargeEffects final
{
public:
	bool                                          HasFired;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMeshComponent*                         CallFunc_GetWeaponMeshComponent_Result;            // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WEAPON_IonPulseRifle_C_StopChargeEffects) == 0x000008, "Wrong alignment on WEAPON_IonPulseRifle_C_StopChargeEffects");
static_assert(sizeof(WEAPON_IonPulseRifle_C_StopChargeEffects) == 0x000018, "Wrong size on WEAPON_IonPulseRifle_C_StopChargeEffects");
static_assert(offsetof(WEAPON_IonPulseRifle_C_StopChargeEffects, HasFired) == 0x000000, "Member 'WEAPON_IonPulseRifle_C_StopChargeEffects::HasFired' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_StopChargeEffects, CallFunc_GetWeaponMeshComponent_Result) == 0x000008, "Member 'WEAPON_IonPulseRifle_C_StopChargeEffects::CallFunc_GetWeaponMeshComponent_Result' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_StopChargeEffects, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'WEAPON_IonPulseRifle_C_StopChargeEffects::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_StopChargeEffects, CallFunc_IsValid_ReturnValue_1) == 0x000011, "Member 'WEAPON_IonPulseRifle_C_StopChargeEffects::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_StopChargeEffects, CallFunc_IsValid_ReturnValue_2) == 0x000012, "Member 'WEAPON_IonPulseRifle_C_StopChargeEffects::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");

// Function WEAPON_IonPulseRifle.WEAPON_IonPulseRifle_C.PlayIonBeamFX
// 0x0050 (0x0050 - 0x0000)
struct WEAPON_IonPulseRifle_C_PlayIonBeamFX final
{
public:
	struct FVector                                SourceLocation;                                    // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetLocation;                                    // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Intensity;                                         // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      BeamEffect;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMeshComponent*                         CallFunc_GetWeaponMeshComponent_Result;            // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 K2Node_DynamicCast_AsSkeletal_Mesh_Component;      // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      CallFunc_SpawnSystemAttached_ReturnValue;          // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WEAPON_IonPulseRifle_C_PlayIonBeamFX) == 0x000008, "Wrong alignment on WEAPON_IonPulseRifle_C_PlayIonBeamFX");
static_assert(sizeof(WEAPON_IonPulseRifle_C_PlayIonBeamFX) == 0x000050, "Wrong size on WEAPON_IonPulseRifle_C_PlayIonBeamFX");
static_assert(offsetof(WEAPON_IonPulseRifle_C_PlayIonBeamFX, SourceLocation) == 0x000000, "Member 'WEAPON_IonPulseRifle_C_PlayIonBeamFX::SourceLocation' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_PlayIonBeamFX, TargetLocation) == 0x00000C, "Member 'WEAPON_IonPulseRifle_C_PlayIonBeamFX::TargetLocation' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_PlayIonBeamFX, Intensity) == 0x000018, "Member 'WEAPON_IonPulseRifle_C_PlayIonBeamFX::Intensity' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_PlayIonBeamFX, BeamEffect) == 0x000020, "Member 'WEAPON_IonPulseRifle_C_PlayIonBeamFX::BeamEffect' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_PlayIonBeamFX, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000028, "Member 'WEAPON_IonPulseRifle_C_PlayIonBeamFX::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_PlayIonBeamFX, CallFunc_GetWeaponMeshComponent_Result) == 0x000030, "Member 'WEAPON_IonPulseRifle_C_PlayIonBeamFX::CallFunc_GetWeaponMeshComponent_Result' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_PlayIonBeamFX, K2Node_DynamicCast_AsSkeletal_Mesh_Component) == 0x000038, "Member 'WEAPON_IonPulseRifle_C_PlayIonBeamFX::K2Node_DynamicCast_AsSkeletal_Mesh_Component' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_PlayIonBeamFX, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'WEAPON_IonPulseRifle_C_PlayIonBeamFX::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_PlayIonBeamFX, CallFunc_IsValid_ReturnValue) == 0x000041, "Member 'WEAPON_IonPulseRifle_C_PlayIonBeamFX::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_PlayIonBeamFX, CallFunc_SpawnSystemAttached_ReturnValue) == 0x000048, "Member 'WEAPON_IonPulseRifle_C_PlayIonBeamFX::CallFunc_SpawnSystemAttached_ReturnValue' has a wrong offset!");

// Function WEAPON_IonPulseRifle.WEAPON_IonPulseRifle_C.GetDamageValueForEnergyCost
// 0x0358 (0x0358 - 0x0000)
struct WEAPON_IonPulseRifle_C_GetDamageValueForEnergyCost final
{
public:
	int32                                         EnergyCost;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Result;                                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_WeaponMode                     CallFunc_GetWeaponMode_Mode;                       // 0x0008(0x0100)(HasGetValueTypeHash)
	struct FSTRUCT_WeaponMode                     CallFunc_GetWeaponMode_Mode_1;                     // 0x0108(0x0100)(HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x020C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_2;            // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_3;            // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_1;               // 0x0220(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_WeaponMode                     CallFunc_GetWeaponMode_Mode_2;                     // 0x0228(0x0100)(HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_4;            // 0x0328(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_5;            // 0x032C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_6;            // 0x0330(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_2;               // 0x0334(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33C[0x4];                                      // 0x033C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector2D>                      K2Node_MakeArray_Array;                            // 0x0340(0x0010)(ConstParm, ReferenceParm)
	float                                         CallFunc_GetLagrangeInterp_ReturnValue;            // 0x0350(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WEAPON_IonPulseRifle_C_GetDamageValueForEnergyCost) == 0x000008, "Wrong alignment on WEAPON_IonPulseRifle_C_GetDamageValueForEnergyCost");
static_assert(sizeof(WEAPON_IonPulseRifle_C_GetDamageValueForEnergyCost) == 0x000358, "Wrong size on WEAPON_IonPulseRifle_C_GetDamageValueForEnergyCost");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetDamageValueForEnergyCost, EnergyCost) == 0x000000, "Member 'WEAPON_IonPulseRifle_C_GetDamageValueForEnergyCost::EnergyCost' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetDamageValueForEnergyCost, Result) == 0x000004, "Member 'WEAPON_IonPulseRifle_C_GetDamageValueForEnergyCost::Result' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetDamageValueForEnergyCost, CallFunc_GetWeaponMode_Mode) == 0x000008, "Member 'WEAPON_IonPulseRifle_C_GetDamageValueForEnergyCost::CallFunc_GetWeaponMode_Mode' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetDamageValueForEnergyCost, CallFunc_GetWeaponMode_Mode_1) == 0x000108, "Member 'WEAPON_IonPulseRifle_C_GetDamageValueForEnergyCost::CallFunc_GetWeaponMode_Mode_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetDamageValueForEnergyCost, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000208, "Member 'WEAPON_IonPulseRifle_C_GetDamageValueForEnergyCost::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetDamageValueForEnergyCost, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x00020C, "Member 'WEAPON_IonPulseRifle_C_GetDamageValueForEnergyCost::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetDamageValueForEnergyCost, CallFunc_Conv_IntToFloat_ReturnValue_2) == 0x000210, "Member 'WEAPON_IonPulseRifle_C_GetDamageValueForEnergyCost::CallFunc_Conv_IntToFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetDamageValueForEnergyCost, CallFunc_Conv_IntToFloat_ReturnValue_3) == 0x000214, "Member 'WEAPON_IonPulseRifle_C_GetDamageValueForEnergyCost::CallFunc_Conv_IntToFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetDamageValueForEnergyCost, CallFunc_MakeVector2D_ReturnValue) == 0x000218, "Member 'WEAPON_IonPulseRifle_C_GetDamageValueForEnergyCost::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetDamageValueForEnergyCost, CallFunc_MakeVector2D_ReturnValue_1) == 0x000220, "Member 'WEAPON_IonPulseRifle_C_GetDamageValueForEnergyCost::CallFunc_MakeVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetDamageValueForEnergyCost, CallFunc_GetWeaponMode_Mode_2) == 0x000228, "Member 'WEAPON_IonPulseRifle_C_GetDamageValueForEnergyCost::CallFunc_GetWeaponMode_Mode_2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetDamageValueForEnergyCost, CallFunc_Conv_IntToFloat_ReturnValue_4) == 0x000328, "Member 'WEAPON_IonPulseRifle_C_GetDamageValueForEnergyCost::CallFunc_Conv_IntToFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetDamageValueForEnergyCost, CallFunc_Conv_IntToFloat_ReturnValue_5) == 0x00032C, "Member 'WEAPON_IonPulseRifle_C_GetDamageValueForEnergyCost::CallFunc_Conv_IntToFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetDamageValueForEnergyCost, CallFunc_Conv_IntToFloat_ReturnValue_6) == 0x000330, "Member 'WEAPON_IonPulseRifle_C_GetDamageValueForEnergyCost::CallFunc_Conv_IntToFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetDamageValueForEnergyCost, CallFunc_MakeVector2D_ReturnValue_2) == 0x000334, "Member 'WEAPON_IonPulseRifle_C_GetDamageValueForEnergyCost::CallFunc_MakeVector2D_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetDamageValueForEnergyCost, K2Node_MakeArray_Array) == 0x000340, "Member 'WEAPON_IonPulseRifle_C_GetDamageValueForEnergyCost::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetDamageValueForEnergyCost, CallFunc_GetLagrangeInterp_ReturnValue) == 0x000350, "Member 'WEAPON_IonPulseRifle_C_GetDamageValueForEnergyCost::CallFunc_GetLagrangeInterp_ReturnValue' has a wrong offset!");

// Function WEAPON_IonPulseRifle.WEAPON_IonPulseRifle_C.GetArmorPenetrationValueForEnergyCost
// 0x0360 (0x0360 - 0x0000)
struct WEAPON_IonPulseRifle_C_GetArmorPenetrationValueForEnergyCost final
{
public:
	int32                                         EnergyCost;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Result;                                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ArmorPenetration2;                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         EnergyCost2;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ArmorPenetration1;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         EnergyCost1;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ArmorPenetration0;                                 // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         EnergyCost0;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_2;            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_3;            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_4;            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_5;            // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_6;            // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_7;            // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_8;            // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_9;            // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_10;           // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue_1;            // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_WeaponMode                     CallFunc_GetWeaponMode_Mode;                       // 0x0060(0x0100)(HasGetValueTypeHash)
	struct FSTRUCT_WeaponMode                     CallFunc_GetWeaponMode_Mode_1;                     // 0x0160(0x0100)(HasGetValueTypeHash)
	struct FSTRUCT_WeaponMode                     CallFunc_GetWeaponMode_Mode_2;                     // 0x0260(0x0100)(HasGetValueTypeHash)
};
static_assert(alignof(WEAPON_IonPulseRifle_C_GetArmorPenetrationValueForEnergyCost) == 0x000008, "Wrong alignment on WEAPON_IonPulseRifle_C_GetArmorPenetrationValueForEnergyCost");
static_assert(sizeof(WEAPON_IonPulseRifle_C_GetArmorPenetrationValueForEnergyCost) == 0x000360, "Wrong size on WEAPON_IonPulseRifle_C_GetArmorPenetrationValueForEnergyCost");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetArmorPenetrationValueForEnergyCost, EnergyCost) == 0x000000, "Member 'WEAPON_IonPulseRifle_C_GetArmorPenetrationValueForEnergyCost::EnergyCost' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetArmorPenetrationValueForEnergyCost, Result) == 0x000004, "Member 'WEAPON_IonPulseRifle_C_GetArmorPenetrationValueForEnergyCost::Result' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetArmorPenetrationValueForEnergyCost, ArmorPenetration2) == 0x000008, "Member 'WEAPON_IonPulseRifle_C_GetArmorPenetrationValueForEnergyCost::ArmorPenetration2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetArmorPenetrationValueForEnergyCost, EnergyCost2) == 0x00000C, "Member 'WEAPON_IonPulseRifle_C_GetArmorPenetrationValueForEnergyCost::EnergyCost2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetArmorPenetrationValueForEnergyCost, ArmorPenetration1) == 0x000010, "Member 'WEAPON_IonPulseRifle_C_GetArmorPenetrationValueForEnergyCost::ArmorPenetration1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetArmorPenetrationValueForEnergyCost, EnergyCost1) == 0x000014, "Member 'WEAPON_IonPulseRifle_C_GetArmorPenetrationValueForEnergyCost::EnergyCost1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetArmorPenetrationValueForEnergyCost, ArmorPenetration0) == 0x000018, "Member 'WEAPON_IonPulseRifle_C_GetArmorPenetrationValueForEnergyCost::ArmorPenetration0' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetArmorPenetrationValueForEnergyCost, EnergyCost0) == 0x00001C, "Member 'WEAPON_IonPulseRifle_C_GetArmorPenetrationValueForEnergyCost::EnergyCost0' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetArmorPenetrationValueForEnergyCost, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000020, "Member 'WEAPON_IonPulseRifle_C_GetArmorPenetrationValueForEnergyCost::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetArmorPenetrationValueForEnergyCost, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x000024, "Member 'WEAPON_IonPulseRifle_C_GetArmorPenetrationValueForEnergyCost::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetArmorPenetrationValueForEnergyCost, CallFunc_Conv_IntToFloat_ReturnValue_2) == 0x000028, "Member 'WEAPON_IonPulseRifle_C_GetArmorPenetrationValueForEnergyCost::CallFunc_Conv_IntToFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetArmorPenetrationValueForEnergyCost, CallFunc_Conv_IntToFloat_ReturnValue_3) == 0x00002C, "Member 'WEAPON_IonPulseRifle_C_GetArmorPenetrationValueForEnergyCost::CallFunc_Conv_IntToFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetArmorPenetrationValueForEnergyCost, CallFunc_Conv_IntToFloat_ReturnValue_4) == 0x000030, "Member 'WEAPON_IonPulseRifle_C_GetArmorPenetrationValueForEnergyCost::CallFunc_Conv_IntToFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetArmorPenetrationValueForEnergyCost, CallFunc_Conv_IntToFloat_ReturnValue_5) == 0x000034, "Member 'WEAPON_IonPulseRifle_C_GetArmorPenetrationValueForEnergyCost::CallFunc_Conv_IntToFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetArmorPenetrationValueForEnergyCost, CallFunc_MapRangeClamped_ReturnValue) == 0x000038, "Member 'WEAPON_IonPulseRifle_C_GetArmorPenetrationValueForEnergyCost::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetArmorPenetrationValueForEnergyCost, CallFunc_Conv_IntToFloat_ReturnValue_6) == 0x00003C, "Member 'WEAPON_IonPulseRifle_C_GetArmorPenetrationValueForEnergyCost::CallFunc_Conv_IntToFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetArmorPenetrationValueForEnergyCost, CallFunc_Conv_IntToFloat_ReturnValue_7) == 0x000040, "Member 'WEAPON_IonPulseRifle_C_GetArmorPenetrationValueForEnergyCost::CallFunc_Conv_IntToFloat_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetArmorPenetrationValueForEnergyCost, CallFunc_Conv_IntToFloat_ReturnValue_8) == 0x000044, "Member 'WEAPON_IonPulseRifle_C_GetArmorPenetrationValueForEnergyCost::CallFunc_Conv_IntToFloat_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetArmorPenetrationValueForEnergyCost, CallFunc_Conv_IntToFloat_ReturnValue_9) == 0x000048, "Member 'WEAPON_IonPulseRifle_C_GetArmorPenetrationValueForEnergyCost::CallFunc_Conv_IntToFloat_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetArmorPenetrationValueForEnergyCost, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00004C, "Member 'WEAPON_IonPulseRifle_C_GetArmorPenetrationValueForEnergyCost::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetArmorPenetrationValueForEnergyCost, CallFunc_Conv_IntToFloat_ReturnValue_10) == 0x000050, "Member 'WEAPON_IonPulseRifle_C_GetArmorPenetrationValueForEnergyCost::CallFunc_Conv_IntToFloat_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetArmorPenetrationValueForEnergyCost, CallFunc_MapRangeClamped_ReturnValue_1) == 0x000054, "Member 'WEAPON_IonPulseRifle_C_GetArmorPenetrationValueForEnergyCost::CallFunc_MapRangeClamped_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetArmorPenetrationValueForEnergyCost, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x000058, "Member 'WEAPON_IonPulseRifle_C_GetArmorPenetrationValueForEnergyCost::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetArmorPenetrationValueForEnergyCost, CallFunc_GetWeaponMode_Mode) == 0x000060, "Member 'WEAPON_IonPulseRifle_C_GetArmorPenetrationValueForEnergyCost::CallFunc_GetWeaponMode_Mode' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetArmorPenetrationValueForEnergyCost, CallFunc_GetWeaponMode_Mode_1) == 0x000160, "Member 'WEAPON_IonPulseRifle_C_GetArmorPenetrationValueForEnergyCost::CallFunc_GetWeaponMode_Mode_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetArmorPenetrationValueForEnergyCost, CallFunc_GetWeaponMode_Mode_2) == 0x000260, "Member 'WEAPON_IonPulseRifle_C_GetArmorPenetrationValueForEnergyCost::CallFunc_GetWeaponMode_Mode_2' has a wrong offset!");

// Function WEAPON_IonPulseRifle.WEAPON_IonPulseRifle_C.GetUpfrontChargeEnergyCost
// 0x0218 (0x0218 - 0x0000)
struct WEAPON_IonPulseRifle_C_GetUpfrontChargeEnergyCost final
{
public:
	int32                                         Result;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_WeaponMode                     CurrentMode;                                       // 0x0008(0x0100)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_109[0x3];                                      // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_WeaponMode                     CallFunc_GetCurrentMode_Mode;                      // 0x0110(0x0100)(HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Round_ReturnValue;                        // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WEAPON_IonPulseRifle_C_GetUpfrontChargeEnergyCost) == 0x000008, "Wrong alignment on WEAPON_IonPulseRifle_C_GetUpfrontChargeEnergyCost");
static_assert(sizeof(WEAPON_IonPulseRifle_C_GetUpfrontChargeEnergyCost) == 0x000218, "Wrong size on WEAPON_IonPulseRifle_C_GetUpfrontChargeEnergyCost");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetUpfrontChargeEnergyCost, Result) == 0x000000, "Member 'WEAPON_IonPulseRifle_C_GetUpfrontChargeEnergyCost::Result' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetUpfrontChargeEnergyCost, CurrentMode) == 0x000008, "Member 'WEAPON_IonPulseRifle_C_GetUpfrontChargeEnergyCost::CurrentMode' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetUpfrontChargeEnergyCost, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000108, "Member 'WEAPON_IonPulseRifle_C_GetUpfrontChargeEnergyCost::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetUpfrontChargeEnergyCost, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00010C, "Member 'WEAPON_IonPulseRifle_C_GetUpfrontChargeEnergyCost::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetUpfrontChargeEnergyCost, CallFunc_GetCurrentMode_Mode) == 0x000110, "Member 'WEAPON_IonPulseRifle_C_GetUpfrontChargeEnergyCost::CallFunc_GetCurrentMode_Mode' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetUpfrontChargeEnergyCost, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000210, "Member 'WEAPON_IonPulseRifle_C_GetUpfrontChargeEnergyCost::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetUpfrontChargeEnergyCost, CallFunc_Round_ReturnValue) == 0x000214, "Member 'WEAPON_IonPulseRifle_C_GetUpfrontChargeEnergyCost::CallFunc_Round_ReturnValue' has a wrong offset!");

// Function WEAPON_IonPulseRifle.WEAPON_IonPulseRifle_C.OnEnergyModeChanged
// 0x0038 (0x0038 - 0x0000)
struct WEAPON_IonPulseRifle_C_OnEnergyModeChanged final
{
public:
	class UMeshComponent*                         CallFunc_GetWeaponMeshComponent_Result;            // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 K2Node_DynamicCast_AsSkeletal_Mesh_Component;      // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IINTERF_ANIM_EnergyWeapon_C> K2Node_DynamicCast_AsINTERF_ANIM_Energy_Weapon;    // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetChargeMode_Result;                     // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WEAPON_IonPulseRifle_C_OnEnergyModeChanged) == 0x000008, "Wrong alignment on WEAPON_IonPulseRifle_C_OnEnergyModeChanged");
static_assert(sizeof(WEAPON_IonPulseRifle_C_OnEnergyModeChanged) == 0x000038, "Wrong size on WEAPON_IonPulseRifle_C_OnEnergyModeChanged");
static_assert(offsetof(WEAPON_IonPulseRifle_C_OnEnergyModeChanged, CallFunc_GetWeaponMeshComponent_Result) == 0x000000, "Member 'WEAPON_IonPulseRifle_C_OnEnergyModeChanged::CallFunc_GetWeaponMeshComponent_Result' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_OnEnergyModeChanged, K2Node_DynamicCast_AsSkeletal_Mesh_Component) == 0x000008, "Member 'WEAPON_IonPulseRifle_C_OnEnergyModeChanged::K2Node_DynamicCast_AsSkeletal_Mesh_Component' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_OnEnergyModeChanged, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'WEAPON_IonPulseRifle_C_OnEnergyModeChanged::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_OnEnergyModeChanged, CallFunc_GetAnimInstance_ReturnValue) == 0x000018, "Member 'WEAPON_IonPulseRifle_C_OnEnergyModeChanged::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_OnEnergyModeChanged, K2Node_DynamicCast_AsINTERF_ANIM_Energy_Weapon) == 0x000020, "Member 'WEAPON_IonPulseRifle_C_OnEnergyModeChanged::K2Node_DynamicCast_AsINTERF_ANIM_Energy_Weapon' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_OnEnergyModeChanged, K2Node_DynamicCast_bSuccess_1) == 0x000030, "Member 'WEAPON_IonPulseRifle_C_OnEnergyModeChanged::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_OnEnergyModeChanged, CallFunc_SetChargeMode_Result) == 0x000031, "Member 'WEAPON_IonPulseRifle_C_OnEnergyModeChanged::CallFunc_SetChargeMode_Result' has a wrong offset!");

// Function WEAPON_IonPulseRifle.WEAPON_IonPulseRifle_C.SetCurrentMode
// 0x0008 (0x0008 - 0x0000)
struct WEAPON_IonPulseRifle_C_SetCurrentMode final
{
public:
	int32                                         Mode;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetCurrentMode_Result;                    // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WEAPON_IonPulseRifle_C_SetCurrentMode) == 0x000004, "Wrong alignment on WEAPON_IonPulseRifle_C_SetCurrentMode");
static_assert(sizeof(WEAPON_IonPulseRifle_C_SetCurrentMode) == 0x000008, "Wrong size on WEAPON_IonPulseRifle_C_SetCurrentMode");
static_assert(offsetof(WEAPON_IonPulseRifle_C_SetCurrentMode, Mode) == 0x000000, "Member 'WEAPON_IonPulseRifle_C_SetCurrentMode::Mode' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_SetCurrentMode, Result) == 0x000004, "Member 'WEAPON_IonPulseRifle_C_SetCurrentMode::Result' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_SetCurrentMode, CallFunc_SetCurrentMode_Result) == 0x000005, "Member 'WEAPON_IonPulseRifle_C_SetCurrentMode::CallFunc_SetCurrentMode_Result' has a wrong offset!");

// Function WEAPON_IonPulseRifle.WEAPON_IonPulseRifle_C.UpdateMainFX
// 0x0028 (0x0028 - 0x0000)
struct WEAPON_IonPulseRifle_C_UpdateMainFX final
{
public:
	float                                         CallFunc_GetLastHeatPercentage_Result;             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMeshComponent*                         CallFunc_GetWeaponMeshComponent_Result;            // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 K2Node_DynamicCast_AsSkeletal_Mesh_Component;      // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      CallFunc_SpawnSystemAttached_ReturnValue;          // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WEAPON_IonPulseRifle_C_UpdateMainFX) == 0x000008, "Wrong alignment on WEAPON_IonPulseRifle_C_UpdateMainFX");
static_assert(sizeof(WEAPON_IonPulseRifle_C_UpdateMainFX) == 0x000028, "Wrong size on WEAPON_IonPulseRifle_C_UpdateMainFX");
static_assert(offsetof(WEAPON_IonPulseRifle_C_UpdateMainFX, CallFunc_GetLastHeatPercentage_Result) == 0x000000, "Member 'WEAPON_IonPulseRifle_C_UpdateMainFX::CallFunc_GetLastHeatPercentage_Result' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_UpdateMainFX, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'WEAPON_IonPulseRifle_C_UpdateMainFX::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_UpdateMainFX, CallFunc_GetWeaponMeshComponent_Result) == 0x000008, "Member 'WEAPON_IonPulseRifle_C_UpdateMainFX::CallFunc_GetWeaponMeshComponent_Result' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_UpdateMainFX, K2Node_DynamicCast_AsSkeletal_Mesh_Component) == 0x000010, "Member 'WEAPON_IonPulseRifle_C_UpdateMainFX::K2Node_DynamicCast_AsSkeletal_Mesh_Component' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_UpdateMainFX, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'WEAPON_IonPulseRifle_C_UpdateMainFX::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_UpdateMainFX, CallFunc_SpawnSystemAttached_ReturnValue) == 0x000020, "Member 'WEAPON_IonPulseRifle_C_UpdateMainFX::CallFunc_SpawnSystemAttached_ReturnValue' has a wrong offset!");

// Function WEAPON_IonPulseRifle.WEAPON_IonPulseRifle_C.GetMaintainChargeEnergyCost
// 0x0110 (0x0110 - 0x0000)
struct WEAPON_IonPulseRifle_C_GetMaintainChargeEnergyCost final
{
public:
	int32                                         Result;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetUpfrontChargeEnergyCost_Result;        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_WeaponMode                     CallFunc_GetCurrentMode_Mode;                      // 0x0008(0x0100)(HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WEAPON_IonPulseRifle_C_GetMaintainChargeEnergyCost) == 0x000008, "Wrong alignment on WEAPON_IonPulseRifle_C_GetMaintainChargeEnergyCost");
static_assert(sizeof(WEAPON_IonPulseRifle_C_GetMaintainChargeEnergyCost) == 0x000110, "Wrong size on WEAPON_IonPulseRifle_C_GetMaintainChargeEnergyCost");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetMaintainChargeEnergyCost, Result) == 0x000000, "Member 'WEAPON_IonPulseRifle_C_GetMaintainChargeEnergyCost::Result' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetMaintainChargeEnergyCost, CallFunc_GetUpfrontChargeEnergyCost_Result) == 0x000004, "Member 'WEAPON_IonPulseRifle_C_GetMaintainChargeEnergyCost::CallFunc_GetUpfrontChargeEnergyCost_Result' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetMaintainChargeEnergyCost, CallFunc_GetCurrentMode_Mode) == 0x000008, "Member 'WEAPON_IonPulseRifle_C_GetMaintainChargeEnergyCost::CallFunc_GetCurrentMode_Mode' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_GetMaintainChargeEnergyCost, CallFunc_Subtract_IntInt_ReturnValue) == 0x000108, "Member 'WEAPON_IonPulseRifle_C_GetMaintainChargeEnergyCost::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");

// Function WEAPON_IonPulseRifle.WEAPON_IonPulseRifle_C.UpdateLastDamageValue
// 0x0018 (0x0018 - 0x0000)
struct WEAPON_IonPulseRifle_C_UpdateLastDamageValue final
{
public:
	float                                         DamageValue;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMeshComponent*                         CallFunc_GetWeaponMeshComponent_Result;            // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WEAPON_IonPulseRifle_C_UpdateLastDamageValue) == 0x000008, "Wrong alignment on WEAPON_IonPulseRifle_C_UpdateLastDamageValue");
static_assert(sizeof(WEAPON_IonPulseRifle_C_UpdateLastDamageValue) == 0x000018, "Wrong size on WEAPON_IonPulseRifle_C_UpdateLastDamageValue");
static_assert(offsetof(WEAPON_IonPulseRifle_C_UpdateLastDamageValue, DamageValue) == 0x000000, "Member 'WEAPON_IonPulseRifle_C_UpdateLastDamageValue::DamageValue' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_UpdateLastDamageValue, CallFunc_GetWeaponMeshComponent_Result) == 0x000008, "Member 'WEAPON_IonPulseRifle_C_UpdateLastDamageValue::CallFunc_GetWeaponMeshComponent_Result' has a wrong offset!");
static_assert(offsetof(WEAPON_IonPulseRifle_C_UpdateLastDamageValue, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'WEAPON_IonPulseRifle_C_UpdateLastDamageValue::CallFunc_IsValid_ReturnValue' has a wrong offset!");

}

